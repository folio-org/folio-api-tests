{
	"info": {
		"_postman_id": "4306c459-3dbf-4c26-8b47-93aad1f071b6",
		"name": "mod-inventory-storage-contributor-types",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "contributor-types.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "137deba7-6063-437b-9063-56a286630b15",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"contributor-types.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{contributor-types.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{contributor-types.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "contributor-type.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1da15ad-1421-452b-9ed2-344b3f711896",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"contributor-type.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{contributor-type.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{contributor-type.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "metadata.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105282cc-4e6f-48e8-982e-d7134cac2578",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_metadata_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_metadata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_metadata}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contributor-types",
			"item": [
				{
					"name": "/contributor-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0732fd64-7b9c-4d19-891f-76508af3a875",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"contributortype.json\", JSON.parse(pm.variables.get(\"contributor-type.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"contributor-types.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Test listing contributor types"
					},
					"response": []
				},
				{
					"name": "/contributor-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35254d65-cc15-4efc-84b3-2de1eac72cfd",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-contributor-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12949b92-5444-4455-b96a-075f38bfbfa8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test - Not authorized to perform requested action\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Check for auth token not set"
					},
					"response": []
				},
				{
					"name": "/contributor-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fd896d2a-9d9c-480b-97cf-632798d5b6aa",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c906ed43-a50d-4368-a70e-9ddb6e6ed402",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test - Access denied, not valid privilege in resources\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "List contributor types with a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/contributor-types?limit=-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9b574bfa-1437-4d96-a5a2-4c73eb907d0e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - negative limit\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						},
						"description": "400 test for negative limit"
					},
					"response": []
				},
				{
					"name": "/contributor-types?offset=-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "17f4dd4c-65c7-4488-832e-e8e8d9109b8d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - negative offset\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						},
						"description": "400 test for negative limit"
					},
					"response": []
				},
				{
					"name": "/contributor-types?limit=-2147483649",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fe5b4094-8053-474b-8d6e-43e28819cd5c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - limit less than Integer.MIN_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?limit=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "-2147483649"
								}
							]
						},
						"description": "400 test for limit less than Integer.MIN_VALUE (-2147483648)"
					},
					"response": []
				},
				{
					"name": "/contributor-types?offset=-2147483649",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3ebc4f57-0d2a-4ed3-95d3-f1614e1f4cbe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request body or query parameter test - offset less than Integer.MIN_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?offset=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "offset",
									"value": "-2147483649"
								}
							]
						},
						"description": "400 test for limit less than Integer.MIN_VALUE (-2147483648)"
					},
					"response": []
				},
				{
					"name": "/contributor-types?limit=2147483648",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8d398d2e-bfe0-4bd1-8c82-aa4b33127042",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed query parameter test - limit greater than Integer.MAX_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						},
						"description": "400 test for limit greater than Integer.MAX_VALUE (2147483647)"
					},
					"response": []
				},
				{
					"name": "/contributor-types?offset=2147483648",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "91256c96-afaf-4ff2-b81e-d3fe8224136d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - offset greater than Integer.MAX_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?offset=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "offset",
									"value": "2147483648"
								}
							]
						},
						"description": "400 test for limit greater than Integer.MAX_VALUE (2147483647)"
					},
					"response": []
				},
				{
					"name": "/contributor-types?query=",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7a94b093-7b55-4847-a93a-d079a413a52d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - bad CQL\", function() {",
									"    pm.response.to.have.status(400); ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?query=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						},
						"description": "400 test for some weird query. Note: this test will fail until [MODINVSTOR-74](https://issues.folio.org/projects/MODINVSTOR/issues/MODINVSTOR-74) is fixed."
					},
					"response": []
				},
				{
					"name": "/contributor-types?lang=",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aeb048a3-a9d0-47b5-b1cd-b90e4953a23b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - empty lang\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?lang=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "lang",
									"value": ""
								}
							]
						},
						"description": "400 test for no lang"
					},
					"response": []
				},
				{
					"name": "/contributor-types?lang=A1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b4d97511-8b4d-4018-b0a9-b9a934725668",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - lang regex\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "400 test for lang regex"
					},
					"response": []
				},
				{
					"name": "/contributor-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3c5d6dfd-0a85-4e20-a5eb-dd6099d082e5",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('contributorTypeUUID', uuid.v4());"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6f3ab43e-7598-4f73-b1b1-13fbbf1aea64",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"contributor-type.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"contributorTypeUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test contributor type: \" + pm.environment.get(\"contributorTypeUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor type source: {{contributorTypeUUID}}\",\n    \"code\": \"Test contributor type code: {{contributorTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Create a new contributor type"
					},
					"response": []
				},
				{
					"name": "/contributor-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5ad9a086-b206-4c1c-a5ff-4296bd649679",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-contributor-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cbeacdeb-34ed-437d-9841-64d8ef15eec4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 Not authorized to perform requested action test\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Create a new contributor type with an invalid token"
					},
					"response": []
				},
				{
					"name": "/contributor-types - forbidden access denied",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "27b04980-4243-4e93-b8b1-0484ad2c2891",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19cfa811-7374-423d-81eb-f64d5053d09b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Forbidden Access denied, not valid privilege in resources test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type: {{contributorTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Create a new contributor type with a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/contributor-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1b3f727-1f7e-427d-b053-6fa876285c31",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b0f40767-5e2f-41d0-ad85-642e2d11ca44",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"422 Unprocessable Entity (WebDAV; RFC 4918) test\", function() {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.be.json;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Create a new contributor type with an empty body"
					},
					"response": []
				},
				{
					"name": "/contributor-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69886924-2ba1-40d2-99a9-25878557c868",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "accb4c86-5b9e-4d08-9be2-4f6c50cb02c8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad JSON\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Create a new contributor type with a bad JSON body"
					},
					"response": []
				},
				{
					"name": "/contributor-types -bad language",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5d4a0bf-220b-4c47-a46b-56586901f94d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad lang\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\",\n\t\"source\": \"Test classification source: {{classificationTypeUUID}}\",\n\t\"code\": \"Test classification type: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Create a new contributor type with a bad lang query argument"
					},
					"response": []
				},
				{
					"name": "/contributor-types - Id alredy exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06ad118b-553f-498a-bffe-8f2b1e9de596",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - ID already exists\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\",\n\t\"source\": \"Test classification source: {{classificationTypeUUID}}\",\n\t\"code\": \"Test classification code: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Create a new contributor type with an ID that already exists"
					},
					"response": []
				},
				{
					"name": "/contributor-types -id not valid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "99f097a4-1cfb-43db-8f49-cf2567c5917b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - ID is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"12345\",\n\t\"name\": \"Test contributor type: 12345\",\n\t\"source\": \"Test contributor source: 12345\",\n\t\"code\": \"Test contributor code: 12345\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							]
						},
						"description": "Create a new contributor type with an invalid ID"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "164c3a7c-9c0a-4397-b3a0-5e19daf6ba76",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"contributor-type.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"contributorTypeUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test contributor type: \" + pm.environment.get(\"contributorTypeUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Return an existing contributor type"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55e7e0e2-ef6b-41dc-a760-b073ed68a4df",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-contributor-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bad6d18d-f2c3-418c-9cb7-2d991ac7c7e6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 Not authorized to perform requested action test\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Return an existing contributor type using an invalid token"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId} -403 forbidden",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "15a8dcd3-a26e-444d-b461-d5bf04b9e2ef",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "84ff93b9-0db6-4cf0-a7cc-1b4447561582",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Access denied, not valid privilege in resources test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Return an existing contributor type using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/contributor-types/12345",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d1eacfb-14e4-4fcf-9e4a-9448448716c3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d73eae7b-75aa-4fe0-bbe6-2ad2212dc3d6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(404); // Should be 400!",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"12345"
							]
						},
						"description": "Return an existing contributor type using an invalid UUID on the URL. Status code should be consistent with PUT and DELETE, returning 400. Currently, this returns 404. See [MODINVSTOR-75](https://issues.folio.org/browse/MODINVSTOR-75)."
					},
					"response": []
				},
				{
					"name": "/contributor-types?limit=100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3deb216e-78ad-4481-9589-ae6b77d2f960",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"contributortype.json\", JSON.parse(pm.variables.get(\"contributor-type.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"contributor-types.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Test list for added contributor type\", function() {",
									"   pm.expect(pm.response.json().contributorTypes).to.be.an('array');",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing contributor types to ensure added item is in the list. Need a higher limit than 10 in case there are more than 10 contributor types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/contributor-types?query=id={{contributorTypeUUID}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2f419b2a-bb94-49bb-89a5-6dc3bf0927f1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"contributortype.json\", JSON.parse(pm.variables.get(\"contributor-type.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"contributor-types.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Test list for added contributor type\", function() {",
									"   pm.expect(pm.response.json().contributorTypes).to.be.an('array');",
									"   pm.expect(pm.response.json().contributorTypes[0].id).to.equal(pm.environment.get(\"contributorTypeUUID\"));",
									"   pm.expect(pm.response.json().contributorTypes[0].id).to.equal(pm.environment.get(\"contributorTypeUUID\"));",
									"   pm.expect(pm.response.json().contributorTypes[0].name).to.equal(\"Test contributor type: \" + pm.environment.get(\"contributorTypeUUID\"));",
									"   pm.expect(pm.response.json().contributorTypes[0].code).to.equal(\"Test contributor type code: \" + pm.environment.get(\"contributorTypeUUID\"));",
									"   pm.expect(pm.response.json().contributorTypes[0].source).to.equal(\"Test contributor type source: \" + pm.environment.get(\"contributorTypeUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?query=id={{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "query",
									"value": "id={{contributorTypeUUID}}"
								}
							]
						},
						"description": "Test listing contributor types to ensure added item is in the list. Need a higher limit than 10 in case there are more than 10 contributor types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db1038d9-9112-4488-a5c7-2c309bf3a65b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor source - modified: {{contributorTypeUUID}}\",\n\t\"code\": \"Test contributor code - modified: {{contributorTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Update an existing contributor type"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d79cfd52-9ca1-4050-b74b-335238b88864",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-contributor-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "09408b4a-6fc0-469e-92ad-e39c2fe8b452",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 Not authorized to perform requested action test\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor source - modified: {{contributorTypeUUID}}\",\n\t\"code\": \"Test contributor code - modified: {{contributorTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Update an existing contributor type using an invalid token"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ebefd5f-89a9-4646-b181-e18ca8836fc8",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "25ab94f6-f5cf-4582-a13d-751864ffa79b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 Forbidden Access denied, not valid privilege in resources test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor source - modified: {{contributorTypeUUID}}\",\n\t\"code\": \"Test contributor code - modified: {{contributorTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Update an existing contributor type using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fca7874a-6688-427f-9fcb-05a87a42266a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - IDs don't match\", function() {",
									"    pm.response.to.have.status(204); // Should be 400!",
									"    //pm.response.to.have.body(); // no body with a 204 :(",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{$guid}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor source - modified: {{contributorTypeUUID}}\",\n\t\"code\": \"Test contributor code - modified: {{contributorTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Update an existing contributor type with a different UUID. This should probably be a 400 error. Right now, it is accepted and the UUID is changed in the JSON in the DB, but not the DB ID, so it is inconsistent. See [MODINVSTOR-73](https://issues.folio.org/browse/MODINVSTOR-73)."
					},
					"response": []
				},
				{
					"name": "/contributor-types/12345",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c539e9fc-b9c2-430c-8e59-613fe2aeb25f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 malformed request query parameter test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor source - modified: {{contributorTypeUUID}}\",\n\t\"code\": \"Test contributor code - modified: {{contributorTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"12345"
							]
						},
						"description": "Update an existing contributor type with an invalid UUID"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}?lang=A1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96b65564-f7b2-4318-92a8-cf232790b679",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor source - modified: {{contributorTypeUUID}}\",\n\t\"code\": \"Test contributor code - modified: {{contributorTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Update an existing contributor type with a different UUID. This should probably be a 400 error. Right now, it is accepted and the UUID is changed in the JSON in the DB, but not the DB ID, so it is inconsistent. See [MODINVSTOR-73](https://issues.folio.org/browse/MODINVSTOR-73)."
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5159b046-ec89-4f72-a1ad-e52f9bf47514",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"contributor-type.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"contributorTypeUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test contributor type - modified: \" + pm.environment.get(\"contributorTypeUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Return an existing contributor type"
					},
					"response": []
				},
				{
					"name": "/contributor-types?limit=100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "86eac3db-6071-4895-9c10-35129c32a373",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"contributortype.json\", JSON.parse(pm.variables.get(\"contributor-type.schema\")));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"contributor-types.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for deleted contributor type\", function() {",
									"   pm.expect(pm.response.json().contributorTypes).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing contributor types to ensure modified item is in the list. Need a higher limit than 10 in case there are more than 10 contributor types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9de69792-028e-4c29-a837-e32af804f7de",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Delete an existing contributor type"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1f6a0b19-f22c-425a-a212-f55dde313a69",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-contributor-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6bab3d4c-891f-457d-999f-a5cc7205a1cf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Delete an existing contributor type using an invalid token"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "77fe1f9f-5822-4bc0-aaec-8e5d2dc84045",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d9f567c-303c-4237-b2f9-7596b9238cac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Delete an existing contributor type using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2017b5b6-e6f9-4420-805c-009f4162a681",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 contributor type not found test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Delete a contributor type using an already deleted contributor type ID"
					},
					"response": []
				},
				{
					"name": "/contributor-types/12345",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3effed9c-428e-460e-885a-69cd51515229",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"12345"
							]
						},
						"description": "Delete a contributor type using an invalid UUID"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d3d292b-333b-4b50-8142-d0d2535d6b47",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - id is not a uuid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"12345"
							]
						},
						"description": "Delete a contributor type using a non-uuid contributor type ID"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06388416-a482-4293-8df8-bd685b2663b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Delete a contributor type passing an invalid lang query paramater"
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83a720a1-c08f-4182-9e2b-e017ad99baf4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 contributor type not found test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Return a deleted contributor type"
					},
					"response": []
				},
				{
					"name": "/contributor-types?limit=100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "87e14489-41a5-4619-a399-44fed3fa0b67",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"   tv4.addSchema(\"contributortype.json\", JSON.parse(pm.variables.get(\"contributor-type.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"contributor-types.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Test list for deleted contributor type\", function() {",
									"   pm.expect(pm.response.json().contributorTypes).to.be.an('array').to.not.include.deep.members([{id: pm.environment.get(\"contributorTypeUUID\"), name: \"Test contributor type - modified: \" + pm.environment.get(\"contributorTypeUUID\")}]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing contributor types to ensure deleted item is not in the list. Need a higher limit than 10 in case there are more than 10 contributor types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/contributor-types/{contributorTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "053f78e7-d8a7-4009-b6f9-3eced0bf7c83",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 contributor type not found test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-contributor-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{contributorTypeUUID}}\",\n\t\"name\": \"Test contributor type - modified: {{contributorTypeUUID}}\",\n\t\"source\": \"Test contributor source - modified: {{contributorTypeUUID}}\",\n\t\"code\": \"Test contributor code - modified: {{contributorTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-types/{{contributorTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"contributor-types",
								"{{contributorTypeUUID}}"
							]
						},
						"description": "Update a deleted contributor type"
					},
					"response": []
				}
			],
			"description": "Tests for the /contributor-types end point.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
						"type": "text/javascript",
						"exec": [
							"    pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"Login error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.environment.set(\"xokapitoken-contributor-types\", res.headers.get(\"X-Okapi-Token\"));",
							"        } else {",
							"            console.log(\"Login failed: \" + res.reason());",
							"        }",
							"    }",
							"});",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2235883-a279-492e-94a1-65ef7d482e16",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0c7330ca-93e6-4362-aca9-67f141953e8c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b57648c1-84e3-40fe-9757-ac018aea5ca8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "982d09b3-3299-46c5-9e43-28fc38c061ce",
			"key": "mod_name",
			"value": "mod-inventory-storage",
			"type": "string"
		},
		{
			"id": "1796ca51-e770-4b78-aedb-bc454b9cf5e8",
			"key": "mod_version",
			"value": "v12.8.1",
			"type": "string"
		},
		{
			"id": "f635de89-397e-4649-ae03-8961107bcfc3",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "bcf3bda3-abd4-476f-bc5c-4562adba5b35",
			"key": "contributor-types.schemafile",
			"value": "contributortypes.json",
			"type": "string"
		},
		{
			"id": "b646f5fa-8a65-48dd-8e15-e75f051cd40e",
			"key": "contributor-type.schemafile",
			"value": "contributortype.json",
			"type": "string"
		},
		{
			"id": "1f8e9277-c9dc-4b48-b723-35a3bc10eaab",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "c25e42d9-fc65-4391-9116-874f302cb688",
			"key": "schema_commit",
			"value": "bf5b23978b71776c59eca1fd6b33c7fb315b0f2a",
			"type": "string"
		}
	]
}