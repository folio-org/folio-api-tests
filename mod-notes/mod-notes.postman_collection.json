{
	"info": {
		"_postman_id": "db8b9aab-d88e-44e8-be1f-3363734fd16d",
		"name": "mod-notes",
		"description": "Tests for the endpoints:\n/notes\n/note-types\n\nTests include:\n* /notes (CR)\n* /notes/_self (CR)\n* /notes/{id} (RUD)\n* /note-types (CR)\n* /note-types/{id} (RUD)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "schemas",
			"item": [
				{
					"name": "setup environment variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41dde41e-77c3-4f8a-a8e9-5125e58d8897",
								"exec": [
									"const moduleName = 'mod-notes';",
									"pm.test(\"GET json schemas response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET json schemas has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"GET contains mod-notes module\", function () {",
									"    pm.expect(pm.response.text()).to.include(moduleName);",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"json.forEach((element) => {",
									"\tvar moduleId = element.id;",
									"\tif(moduleId.includes(moduleName)){",
									"\t\tpm.environment.set('mod-notes-id', moduleId);",
									"\t}",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/_jsonSchemas",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"interfaces",
								"_jsonSchemas"
							]
						}
					},
					"response": []
				},
				{
					"name": "get schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3e4095b-8563-4352-a40a-9bb0f9e299bc",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {pm.response.to.be.ok;});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {pm.response.to.have.jsonBody();});",
									"",
									"function checkVariableExist(name){return pm.environment.has(\"schema_\"+ name);}",
									"",
									"function setEnvironmentVariable(name, data){pm.environment.set(\"schema_\"+ name, data) }",
									"",
									"function extractName(url){ return url.substring(url.lastIndexOf(\"/\") + 1, url.lastIndexOf(\".\")); }",
									"",
									"function replaceResponseRefWithName(text){ return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"schema_\"); }",
									"",
									"function getURL(path) {return pm.variables.get(\"protocol\") + \"://\" + ",
									"        pm.variables.get(\"url\") + \":\" + ",
									"        pm.variables.get(\"okapiport\") + ",
									"        \"/_/jsonSchemas?path=\" + path;",
									"}",
									"        ",
									"function getRequest(url){",
									"  const echoGetRequest = {",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"      'X-Okapi-Module-Id' : pm.variables.get(\"mod-notes-id\"),",
									"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\")",
									"    }",
									"  }",
									"    return echoGetRequest;",
									"}        ",
									"",
									"function fetchSchema(echoGetRequest, delay){",
									"",
									"return new Promise((resolve, reject) => {",
									"     setTimeout(function(){",
									"       pm.sendRequest(echoGetRequest, (err, response) => {",
									"       if (!err) {",
									"        resolve(response.text());",
									"       }else{",
									"        reject(err, echoGetRequest);",
									"       }",
									"      });",
									"     }, delay);",
									"  });",
									"}",
									"",
									"var interval = setTimeout(() => {}, 30000);",
									"function traverse(data){",
									"     var promises = Object.entries(data).map(([key, value]) => {",
									"         ",
									"        var url = getURL(value);",
									"        var request = getRequest(url);",
									"        ",
									"        return fetchSchema(request, 200 * key)",
									"        .then(function(response) {",
									"            response = replaceResponseRefWithName(response.toString());",
									"            var name = extractName(value);",
									"            if(!checkVariableExist(name)){",
									"                setEnvironmentVariable(name, response);",
									"            }",
									"        })",
									"        .catch((err, req) => {",
									"            console.log(err);",
									"            console.log(req);",
									"        });",
									"    });",
									"    ",
									"    Promise.all(promises)",
									"        .then(() => {",
									"            clearTimeout(interval)",
									"        })",
									"        .catch((err, req) => {",
									"            console.log(err);",
									"            console.log(req);",
									"            clearTimeout(interval);",
									"        });",
									"}",
									"",
									"traverse(JSON.parse(responseBody));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{mod-notes-id}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"jsonSchemas"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "setup for note-types",
			"item": [
				{
					"name": "POST create note-type for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteType-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteTypeId\", response.id);",
									"pm.environment.set(\"noteTypeName\", response.name);",
									"pm.environment.set(\"noteTypeIdNotExisting\",\"00c00fe0-0000-000f-a00a-e000b000d000\");",
									"pm.environment.set(\"incorrectNoteTypeId\",\"12345\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test - {{noteType-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create another note-type for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteType-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteTypeIdSecond\", response.id);",
									"pm.environment.set(\"noteTypeNameSecond\", response.name);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"TestTwo - {{noteType-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba03b0ae-9658-49c5-a773-d58b839c8f75",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58bb3ef3-bbcf-484e-8ac1-43502651ac3a",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));"
						]
					}
				}
			]
		},
		{
			"name": "setup for notes",
			"item": [
				{
					"name": "POST create notes for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"note-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteId\", response.id);",
									"pm.environment.set(\"noteTitle\", response.title);",
									"pm.environment.set(\"noteContent\", response.content);",
									"pm.environment.set(\"noteDomain\", response.domain);",
									"pm.environment.set(\"noteLinkId\", response.links[0].id);",
									"pm.environment.set(\"noteLinkType\", response.links[0].type);",
									"pm.environment.set(\"incorrectNoteId\", \"12345\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\" : \"Title - {{note-uuid}}\",\r\n  \"content\": \"Content - {{note-uuid}}\",\r\n  \"type\": \"{{noteTypeName}}\",\r\n  \"typeId\": \"{{noteTypeId}}\",\r\n  \"domain\": \"eholdings\",\r\n  \"links\": [\r\n    {\r\n      \"id\" : \"583-2356521-758038\",\r\n      \"type\": \"resource\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create second note for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"note-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 201",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.environment.set(\"noteIdSecond\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\" : \"SecondTitle - {{note-uuid}}\",\r\n  \"content\": \"SecondContent - {{note-uuid}}\",\r\n  \"type\": \"{{noteTypeNameSecond}}\",\r\n  \"typeId\": \"{{noteTypeIdSecond}}\",\r\n  \"domain\": \"eholdings\",\r\n  \"links\": [\r\n    {\r\n      \"id\" : \"584-2356521-758038\",\r\n      \"type\": \"resource\"\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba03b0ae-9658-49c5-a773-d58b839c8f75",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "58bb3ef3-bbcf-484e-8ac1-43502651ac3a",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
							" tv4.addSchema(\"schema_link.json\", pm.environment.get(\"schema_link\"));"
						]
					}
				}
			]
		},
		{
			"name": "setup for links",
			"item": [
				{
					"name": "assign link to notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
								"exec": [
									"pm.test(\"success test - 204 and no body\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.be.withBody;",
									"});",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"nonExistingId\"),",
									"    method: 'GET',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\")",
									"    },",
									"}, function(err, res) {",
									"    pm.test(\"Status not found\", function() {",
									"    pm.expect(res.status).eq(\"Not Found\");",
									"});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
								"exec": [
									"pm.environment.set(\"nonExistingId\", \"f62cd001-b574-4dee-9ec4-29994bbe0be5\");",
									"pm.environment.set(\"typeLink\", \"package\");",
									"pm.environment.set(\"linkId\", \"583-2356521-758039\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteIdSecond}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-links",
								"type",
								"{{typeLink}}",
								"id",
								"{{linkId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "notes",
			"item": [
				{
					"name": "GET notes collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c67cca8f-49e2-4156-94db-08be55eebdce",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).to.be.at.most(10);// limit default",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Returns a list of notes"
									},
									"response": []
								},
								{
									"name": "/notes?query=id=={id} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.notes.length).to.equal(1);",
													"    pm.expect(response.notes[0].id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.notes[0].typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"noteTypeId does not match\");",
													"    pm.expect(response.notes[0].type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.notes[0].title).to.equal(pm.environment.get(\"noteTitle\"), \"title does not match\");",
													"    pm.expect(response.notes[0].content).to.equal(pm.environment.get(\"noteContent\"), \"content does not match\");",
													"    pm.expect(response.notes[0].domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"    pm.expect(response.notes[0].links[0].id).to.equal(pm.environment.get(\"noteLinkId\"), \"link's field does not match\");",
													"    pm.expect(response.notes[0].links[0].type).to.equal(pm.environment.get(\"noteLinkType\"), \"link's field does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=id={{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "id={{noteId}}"
												}
											]
										},
										"description": "Returns an existing note via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?query=title={{noteTitle}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.notes.length).to.equal(1);",
													"    pm.expect(response.notes[0].id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.notes[0].typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"typeId does not match\");",
													"    pm.expect(response.notes[0].type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.notes[0].title).to.equal(pm.environment.get(\"noteTitle\"), \"noteTitle does not match\");",
													"    pm.expect(response.notes[0].content).to.equal(pm.environment.get(\"noteContent\"), \"content does not match\");",
													"    pm.expect(response.notes[0].domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"    pm.expect(response.notes[0].links[0].id).to.equal(pm.environment.get(\"noteLinkId\"), \"link's field does not match\");",
													"    pm.expect(response.notes[0].links[0].type).to.equal(pm.environment.get(\"noteLinkType\"), \"link's field does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=title={{noteTitle}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "title={{noteTitle}}"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?query=domain={{noteDomain}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbf759c2-93cb-457d-8bbc-10f9e064b2e8",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"    pm.test(\"validate domain\", function() {",
													"    if(response.notes.length > 0) {",
													"        for(let i in response.notes) {",
													"            pm.expect(response.notes[i].domain).to.equal(pm.environment.get(\"noteDomain\"), \"noteDomain does not match\");",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=domain={{noteDomain}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "domain={{noteDomain}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/notes?limit=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.notes.length).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?limit=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.notes.length).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?offset=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.notes.length).to.be.at.most(10);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/notes?offset=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.notes.length).to.be.at.most(10);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daf13e9a-8f7d-43c2-aa2f-f0e98d6aafe2",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.domain.all\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes?offset=-1 - 400 (offset less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/notes?limit=-1 - 400 (limit less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/notes?offset= - 400 (offset is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7da61625-d75f-456f-b082-2101521ac31f",
												"exec": [
													"pm.test(\"400 test - empty offset\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": ""
												}
											]
										},
										"description": "Failure case where the offset query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/notes?limit= - 400 (limit is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b3c5e24-9263-4f44-a63f-a7fab5df40e7",
												"exec": [
													"pm.test(\"400 test - empty limit\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": ""
												}
											]
										},
										"description": "Failure case where the limit query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/notes?offset=-2147483649 - 400 (offset less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36347953-3a34-4cde-9b77-1d7d4e4dac6c",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/notes?limit=-2147483649 - 400 (limit less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02c0cb09-b11b-4368-91cf-044a9c62d36c",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/notes?offset=2147483648 - 400 (offset exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6289db22-451e-473b-8452-655f62fbaeb6",
												"exec": [
													"pm.test(\"400 test - offset exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the offset query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/notes?limit=2147483648 - 400 (limit exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "753e0caa-4c9c-422b-bf94-3d1e1b7ca9b9",
												"exec": [
													"pm.test(\"400 test - limit exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?limit=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "limit",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the limit query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/notes?query=foo* - 422 (bad query CQL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5044925b-6a51-4254-b1fa-6213ea20ffff",
												"exec": [
													"pm.test(\"422 test - invalid CQL in query\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=foo*",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": "foo*"
												}
											]
										},
										"description": "Failure case where the \"query\" query parameter is not valid CQL."
									},
									"response": []
								},
								{
									"name": "/notes?query= - 422 (empty query)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a081674e-9cf5-4a1d-82eb-32c2264b45df",
												"exec": [
													"pm.test(\"422 test - empty query\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?query=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "query",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"query\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb905b1-c769-4098-8a08-dbf039375edc",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "508c294a-9bd8-4191-b222-19d75ee89c95",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "84c61312-9ca0-4008-b4f6-237e865fb2b0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1fff3046-28c3-4e88-b688-c42a1bf7c7c4",
								"type": "text/javascript",
								"exec": [
									" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
									" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
									" tv4.addSchema(\"schema_link.json\", pm.environment.get(\"schema_link\"));",
									" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
									" tv4.addSchema(\"schema_note.json\", pm.environment.get(\"schema_note\"));"
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST note",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes - 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d2c58203-5ec6-4cab-969f-6a3d088bd3f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9892fde5-887e-4dec-87b2-3aae99c4742b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response).to.include.all.keys(\"id\", \"typeId\", \"title\", \"content\", \"domain\", \"creator\", \"metadata\", \"links\");",
													"});",
													"",
													"//Test that title matches what was passed in POST request",
													"pm.test('title matches value passed in', function() {",
													"    pm.expect(response.title).to.eq('BU Campus Access Issues');",
													"});",
													"",
													"//Test that domain matches what was passed in POST request",
													"pm.test('domain matches', function() {",
													"    pm.expect(response.domain).to.eq('eholdings');",
													"});",
													"    ",
													"//Test that content matches what was passed in POST request",
													"pm.test('content matches', function() {",
													"    pm.expect(response.content).to.eq('There have been access issues at the BU campus since the weekend');",
													"});",
													"    ",
													"//Check that linksList is not empty",
													"pm.test('LinksList is not empty', function(){",
													"    pm.expect(response.links.size).to.not.eq(0);",
													"});",
													"    ",
													"//Check that linksList element matches with value",
													"pm.test('checking linksList', function(){",
													"    pm.expect(response.links[0].type).eq(\"package\");",
													"});",
													"",
													"if(response.id){",
													"pm.environment.set(\"noteId-creating-in-post\", response.id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"type\": \"Low Priority\",\r\n  \"title\" : \"BU Campus Access Issues\",\r\n  \"content\": \"There have been access issues at the BU campus since the weekend\",\r\n  \"typeId\": \"{{noteTypeId}}\",\r\n  \"domain\": \"eholdings\",\r\n  \"links\": [\r\n    {\r\n      \"id\" : \"583-2356521\",\r\n      \"type\": \"package\"\r\n    }\r\n  ]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note"
									},
									"response": []
								},
								{
									"name": "/notes - 201 (ignore read only fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "489cefc9-561e-4e0a-9ea8-a535867f5859",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"createDate\", \"2001-01-01T19:18:27.437+0000\");",
													"pm.variables.set(\"createUser\", uuid.v4());",
													"pm.variables.set(\"updateDate\", \"2001-02-02T18:17:21.427+0000\");",
													"pm.variables.set(\"updateUser\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "363e43fd-a2ba-467d-8b4d-4670122c4043",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response).to.include.all.keys(\"id\", \"typeId\", \"title\", \"content\", \"domain\", \"creator\", ",
													"    \"metadata\", \"links\");",
													"});",
													"",
													"//Test that title matches what was passed in POST request",
													"pm.test('title matches value passed in', function() {",
													"    pm.expect(response.title).to.eq('BU Campus Access Issues');",
													"});",
													"    ",
													"//Test that content matches what was passed in POST request",
													"pm.test('content matches', function() {",
													"    pm.expect(response.content).to.eq('There have been access issues at the BU campus since the weekend');",
													"});",
													"",
													"//Test that domain matches what was passed in POST request",
													"pm.test('domain matches', function() {",
													"    pm.expect(response.domain).to.eq('eholdings');",
													"});",
													"    ",
													"//Check that linksList is not empty",
													"pm.test('LinksList is not empty', function(){",
													"    pm.expect(response.links.size) !== 0;",
													"});",
													"    ",
													"//Check that linksList element matches with value",
													"pm.test('checking linksList', function(){",
													"    pm.expect(response.links[0].type).eq(\"resource\");",
													"});",
													"",
													"pm.test(\"validate Location header\", () => {",
													"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(\"/notes/\" + pm.response.json().id);",
													"});",
													"",
													"if(response.id){",
													"pm.environment.set(\"noteId-creating-in-post-second\", response.id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"BU Campus Access Issues\",\n    \"content\": \"There have been access issues at the BU campus since the weekend\",\n    \"typeId\": \"{{noteTypeId}}\",\n    \"domain\": \"eholdings\",\n    \"metadata\": {\n    \t\"createdDate\": \"{{createDate}}\",\n        \"createdByUserId\": \"{{createUser}}\",\n        \"updatedDate\": \"{{updateDate}}\",\n        \"updatedByUserId\": \"{{updateUser}}\"\n    \t\n    },\n    \"links\": [\n        {\n            \"id\": \"583-2356521-758038\",\n            \"type\": \"resource\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with read only fields set. These will be replaced with server side enforced values. The read only values will be ignored and note creation will succeed."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes - 400 (bad JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d2c58203-5ec6-4cab-969f-6a3d088bd3f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "47249d58-d9fe-4c06-b174-bb8c46778178",
												"exec": [
													"pm.test(\"400 - bad JSON\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"title\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\",\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with invalid JSON."
									},
									"response": []
								},
								{
									"name": "/notes - 400 (no body)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98af75d3-f8fd-43e3-87ef-9713cde5fc63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85d07ea2-1cbd-4c69-bfcd-22bc4792b46c",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with no body."
									},
									"response": []
								},
								{
									"name": "/notes - 400 (wrong content-type)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98af75d3-f8fd-43e3-87ef-9713cde5fc63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85d07ea2-1cbd-4c69-bfcd-22bc4792b46c",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with the wrong content type header."
									},
									"response": []
								},
								{
									"name": "/notes?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4eb31aa-fd01-42bd-889f-8d45f89b86a6",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e76c1f39-e634-4afc-a603-c482f7ee0ffe",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"title\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\",\n\t\"domain\": \"eholdings\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46027576-3136-4e2e-aa98-cff058f7668c",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a4fa2d9-1ca3-466d-9344-87f789ce83b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"title\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\",\n\t\"domain\": \"eholdings\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bc0c240-5aad-45d2-84e5-c23c7f9ccd87",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.domain.all\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a7dd8211-8177-4859-a0b5-7f6b8114f935",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"{{link}}\",\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (missing text field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79e5a5b5-32d7-464d-ac1d-dc8b705f203b",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"title\" : \"BU Campus Access Issues\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body missing the required \"text\" field."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (missing text field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f227b010-9c69-4bc5-b568-773b342946cc",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"text\": \"{{text}}\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body missing the required \"link\" field."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dcdb7118-883d-4c89-a2c7-560672229ad7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4e71988-38dc-47dd-b8f2-bdb44975b9c7",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (unknown field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2e75c0f3-53e7-4bbf-900e-3a175d80b399",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"InvalidTitle\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/notes - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aaa94bf3-30a7-4bd4-b873-83e8bb420e63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cacf3aec-fdb5-4d5c-b4ec-8753466a3932",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"type\": \"Low Priority\",\n\t\"InvalidTitle\" : \"BU Campus Access Issues\",\n\t\"content\": \"There have been access issues at the BU campus since the weekend\",\n\t\"typeId\": \"13d00c36-a94f-434d-9cd2-c7ea159303da\",\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											]
										},
										"description": "Create a new note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8544f7e4-03ea-4d81-af2e-2a71e8eab0a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d3290ae-11b6-45f3-b73b-221b4c9df8e2",
								"type": "text/javascript",
								"exec": [
									" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
									" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
									" tv4.addSchema(\"schema_link.json\", pm.environment.get(\"schema_link\"));",
									" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
									" "
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET note by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes/{id} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbd0e8e4-24e5-41e3-9d86-deb965629337",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_note\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"typeId does not match\");",
													"    pm.expect(response.type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.title).to.equal(pm.environment.get(\"noteTitle\"), \"title does not match\");",
													"    pm.expect(response.content).to.equal(pm.environment.get(\"noteContent\"), \"title does not match\");",
													"    pm.expect(response.domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Returns an existing note"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c311bd3-3072-4897-9763-6910c868d89e",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a7071e2-187d-4496-9cd3-442d978289d8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"12345"
											]
										},
										"description": "Returns an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb905b1-c769-4098-8a08-dbf039375edc",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "508c294a-9bd8-4191-b222-19d75ee89c95",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ee448c2-4b9b-493f-99f8-fe1644cf5c80",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec2c712e-07cf-4077-903c-915fc8f89511",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a7071e2-187d-4496-9cd3-442d978289d8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Returns an existing note with an unknown id"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "acf39a76-6fee-4ec1-8ca2-53544ff67ed7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f315105-f4c6-496f-9778-d0f3cb34beaf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT note by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes/{id} - 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check changes\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.typeId).to.equal(pm.environment.get(\"noteTypeId\"));",
													"        pm.expect(response.title).to.equal(\"Updated title\");",
													"        pm.expect(response.content).to.equal(\"Updated content\");",
													"        pm.expect(response.domain).to.equal(\"Updated domain\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"type\" : \"Type\",\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"Updated domain\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId-creating-in-post}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/notes/{id} - (empty fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79e5a5b5-32d7-464d-ac1d-dc8b705f203b",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Fields is changed\", function () {",
													"        pm.expect(res.json().title).to.equal(\"\");",
													"        pm.expect(res.json().content).to.equal(\"\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"\",\r\n\t\"content\": \"\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"updated domain\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"\",\r\n\t\t\t\"type\": \"\"\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId-creating-in-post}}"
											]
										},
										"description": "Update an existing note with JSON body missing the required \"text\" field."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0535ffb-0247-43b7-880c-e90e74a7b09a",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d37b73e-f81e-4079-88e8-dcc2ae81db02",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{incorrectNoteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{incorrectNoteId}}"
											]
										},
										"description": "Updates an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31babbce-2c1e-4294-8f22-5ebd3aec6082",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0ca33893-8a80-4ac1-adc9-728a40946110",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31ad0b1a-c324-4c5b-8a70-b1d9384495a5",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8e9cab5c-0e43-4bfd-815f-396cda5bf9c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37417d71-7f2c-4ff0-b4c3-420aac5bf6b7",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.domain.all\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7323028-c782-4e36-9f00-e7209fe3b99d",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d4351f0f-adb3-4994-9f25-9869782c708d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"title\" : \"Updated title\",\r\n\t\"content\": \"Updated content\",\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Updates an existing note with an unknown id"
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (missing some fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79e5a5b5-32d7-464d-ac1d-dc8b705f203b",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"checking message\", function(){",
													"    pm.expect(response.errors[0].message).eq(\"may not be null\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"typeId\": \"{{noteTypeId}}\",\r\n\t\"domain\": \"eholdings\",\r\n\t\"links\": [\r\n\t\t{\r\n\t\t\t\"id\" : \"583-2356521\",\r\n\t\t\t\"type\": \"package\"\r\n\t\t\t\r\n\t\t}\r\n\t\t]\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Update an existing note with JSON body missing the required \"text\" field."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "42676a49-83cc-4c27-afc1-efb64fb18d0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8664ff6c-55c7-4014-b869-fce54a563bc1",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"checking message\", function(){",
													"    pm.expect(response.errors[0].message).eq(\"may not be null\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Update an existing note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (unknown fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "310ebf88-f3ce-4d20-a640-f28bdd343e07",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7c8c6944-72ba-421f-8c17-0acefe2b56cc",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"/items/xxxxxx\",\n\t\"text\": \"xxxxxxxx\",\n\t\"xyzzy\": \"867-5309\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8834cd24-eb40-44d1-ba86-4a32b7e63259",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8bd865f6-0eef-473b-acb4-d0f5c1735ef9",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE note by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/notes/{id} - 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74319e3b-65c9-43b1-8f6c-331a9f759d1f",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.test(\"retrieve deleted note\", function() {",
													"",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.variables.get(\"noteId-creating-in-post\"),",
													"        method: 'GET',",
													"        header: {",
													"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"            'X-Okapi-Token': pm.environment.get(\"xokapitoken\")",
													"        }",
													"    }, function(err, res) {",
													"        pm.test(\"verify deleted\", function() {",
													"            pm.expect(res.code).to.equal(404);",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28b19e45-bf64-4c6c-8c2d-a86adb332023",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId-creating-in-post}}"
											]
										},
										"description": "Deletes an existing note"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/notes/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7e0b3eb-3e78-4519-b003-93bf02c70893",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b3962f16-3072-4026-9e9e-07feb06da642",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"12345"
											]
										},
										"description": "Deletes an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b617cb55-aa0b-4b31-92cf-8e31ff60749f",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec7e628a-a933-436b-a6c0-240bf1ebf36d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/notes/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdee0fe5-3495-45bd-a57e-e0ca0e95fdc7",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "556b7f35-5ca7-489e-9f0d-a30e47f55a02",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c6b20c8-c027-4413-abe5-7798c292a260",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.item.delete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f05d1a1-3956-4909-a59c-47f3bda6c3c5",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f46888bc-4f6a-4600-b1e1-5cf2f268e264",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Deletes an existing note with an unknown id"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5b07068d-07c5-4361-ac57-e2e65ad0d2e0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8c592509-db0f-429d-858f-9e192c9239e3",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));"
						]
					}
				}
			]
		},
		{
			"name": "note-types",
			"item": [
				{
					"name": "GET note-types collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types?query=id=={id} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.noteTypes.length).to.equal(1);",
													"    pm.expect(response.noteTypes[0].id).to.equal(pm.environment.get(\"noteTypeId\"), \"id does not match\");",
													"    pm.expect(response.noteTypes[0].name).to.equal(pm.environment.get(\"noteTypeName\"), \"name does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=id=={{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{noteTypeId}}"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?query=name={{noteTypesName}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.equal(1);",
													"    pm.expect(response.noteTypes.length).to.equal(1);",
													"    pm.expect(response.noteTypes[0].id).to.equal(pm.environment.get(\"noteTypeId\"), \"id does not match\");",
													"    pm.expect(response.noteTypes[0].name).to.equal(pm.environment.get(\"noteTypeName\"), \"name does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=name={{noteTypeName}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": "name={{noteTypeName}}"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c67cca8f-49e2-4156-94db-08be55eebdce",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.noteTypes.length);",
													"    pm.expect(response.noteTypes.length).to.be.at.most(10); // limit default",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Returns a list of notes"
									},
									"response": []
								},
								{
									"name": "/note-types?limit=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.noteTypes.length).to.equal(1);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?limit=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.noteTypes.length).to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?offset=1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.noteTypes.length).to.be.at.most(10);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "1"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								},
								{
									"name": "/note-types?offset=0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.noteTypes.length).to.be.at.most(10);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "0"
												}
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daf13e9a-8f7d-43c2-aa2f-f0e98d6aafe2",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"note.types.collection.get\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"exec": [
													"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types?offset=-1 - 400 (offset less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/note-types?limit=-1 - 400 (limit less than min 0)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
												"exec": [
													"pm.test(\"400 test - is less than min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "-1"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value, currently 0."
									},
									"response": []
								},
								{
									"name": "/note-types?offset= - 400 (offset is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7da61625-d75f-456f-b082-2101521ac31f",
												"exec": [
													"pm.test(\"400 test - empty offset\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": ""
												}
											]
										},
										"description": "Failure case where the offset query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/note-types?limit= - 400 (limit is empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b3c5e24-9263-4f44-a63f-a7fab5df40e7",
												"exec": [
													"pm.test(\"400 test - empty limit\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": ""
												}
											]
										},
										"description": "Failure case where the limit query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
									},
									"response": []
								},
								{
									"name": "/notes?offset=-2147483649 - 400 (offset less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36347953-3a34-4cde-9b77-1d7d4e4dac6c",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes?offset=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes"
											],
											"query": [
												{
													"key": "offset",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the offset query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/note-types?limit=-2147483649 - 400 (limit less than Integer.MIN_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02c0cb09-b11b-4368-91cf-044a9c62d36c",
												"exec": [
													"pm.test(\"400 test - is less than int min\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=-2147483649",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "-2147483649"
												}
											]
										},
										"description": "Failure case where the limit query parameter is less that the min value for an int, currently -2,147,483,648."
									},
									"response": []
								},
								{
									"name": "/note-types?offset=2147483648 - 400 (offset exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6289db22-451e-473b-8452-655f62fbaeb6",
												"exec": [
													"pm.test(\"400 test - offset exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?offset=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "offset",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the offset query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/note-types?limit=2147483648 - 400 (limit exceeds Integer.MAX_VALUE)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "753e0caa-4c9c-422b-bf94-3d1e1b7ca9b9",
												"exec": [
													"pm.test(\"400 test - limit exceeds int max\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?limit=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "limit",
													"value": "2147483648"
												}
											]
										},
										"description": "Failure case where the limit query parameter exceeds the max int value, currently 2,147,483,647."
									},
									"response": []
								},
								{
									"name": "/note-types?query= - 400 (empty query)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb905b1-c769-4098-8a08-dbf039375edc",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?query=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "query",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST note-types",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types - 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d2c58203-5ec6-4cab-969f-6a3d088bd3f3",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"noteType-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9892fde5-887e-4dec-87b2-3aae99c4742b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response).to.include.all.keys(\"id\", \"name\");",
													"});",
													"    ",
													"//Test that name matches",
													"pm.test('Name matches value passed in', function() {",
													"    pm.expect(response.name).to.eq('Note-Type - ' + pm.variables.get('noteType-uuid'));",
													"});",
													"",
													"if(response.id){",
													"pm.environment.set(\"noteTypeId-creating-in-post\", response.id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Note-Type - {{noteType-uuid}}\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note"
									},
									"response": []
								},
								{
									"name": "/note-types - 201 (ignore read only fields)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "489cefc9-561e-4e0a-9ea8-a535867f5859",
												"exec": [
													"var uuid = require('uuid');",
													"",
													"pm.variables.set(\"createDate\", \"2001-01-01T19:18:27.437+0000\");",
													"pm.variables.set(\"createUser\", uuid.v4());",
													"pm.variables.set(\"updateDate\", \"2001-02-02T18:17:21.427+0000\");",
													"pm.variables.set(\"updateUser\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "363e43fd-a2ba-467d-8b4d-4670122c4043",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test('expected attributes are present', function() {",
													"    pm.expect(response).to.be.an('object');",
													"    pm.expect(response).to.include.all.keys(\"id\", \"name\");",
													"});",
													"    ",
													"//Test that name matches",
													"pm.test('Name matches value passed in', function() {",
													"    pm.expect(response.name).to.eq('Creating Second NoteType');",
													"});",
													"",
													"if(response.id){",
													"pm.environment.set(\"noteTypeId-creating-in-post-second\", response.id);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Creating Second NoteType\",\n    \"metadata\": {\n    \t\"createdDate\": \"{{createDate}}\",\n        \"createdByUserId\": \"{{createUser}}\",\n        \"updatedDate\": \"{{updateDate}}\",\n        \"updatedByUserId\": \"{{updateUser}}\"\n    \t\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with read only fields set. These will be replaced with server side enforced values. The read only values will be ignored and note creation will succeed."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types - 400 (already existing note-type)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50e4af93-4308-4650-b077-2ea16c8d2a27",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Creating Second NoteType\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										}
									},
									"response": []
								},
								{
									"name": "/note-types - 400 (bad JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d2c58203-5ec6-4cab-969f-6a3d088bd3f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "47249d58-d9fe-4c06-b174-bb8c46778178",
												"exec": [
													"pm.test(\"400 - bad JSON\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Bad Json\"\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with invalid JSON."
									},
									"response": []
								},
								{
									"name": "/note-types - 400 (no body)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98af75d3-f8fd-43e3-87ef-9713cde5fc63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85d07ea2-1cbd-4c69-bfcd-22bc4792b46c",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Json content error HV000116: The object to be validated must not be null.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with no body."
									},
									"response": []
								},
								{
									"name": "/note-types - 400 (wrong content-type)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98af75d3-f8fd-43e3-87ef-9713cde5fc63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85d07ea2-1cbd-4c69-bfcd-22bc4792b46c",
												"exec": [
													"pm.test(\"400 - no body\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Content-type header must be [\\\"application/json\\\"] but it is \\\"application/xml\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/xml"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with the wrong content type header."
									},
									"response": []
								},
								{
									"name": "/note-types?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4eb31aa-fd01-42bd-889f-8d45f89b86a6",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative lang parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e76c1f39-e634-4afc-a603-c482f7ee0ffe",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Empty Lang\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/note-types?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46027576-3136-4e2e-aa98-cff058f7668c",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative lang parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a4fa2d9-1ca3-466d-9344-87f789ce83b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Wrong Lang\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/note-types - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bc0c240-5aad-45d2-84e5-c23c7f9ccd87",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"note.types.item.post\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a7dd8211-8177-4859-a0b5-7f6b8114f935",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Forbidden Access\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dcdb7118-883d-4c89-a2c7-560672229ad7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4e71988-38dc-47dd-b8f2-bdb44975b9c7",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/note-types - 422 (unknown field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2e75c0f3-53e7-4bbf-900e-3a175d80b399",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"InvalidName\" : \"Invalid name\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/note-types - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aaa94bf3-30a7-4bd4-b873-83e8bb420e63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cacf3aec-fdb5-4d5c-b4ec-8753466a3932",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Invalid metadata\",\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types"
											]
										},
										"description": "Create a new note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8544f7e4-03ea-4d81-af2e-2a71e8eab0a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d3290ae-11b6-45f3-b73b-221b4c9df8e2",
								"type": "text/javascript",
								"exec": [
									" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
									" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
									" tv4.addSchema(\"schema_link.json\", pm.environment.get(\"schema_link\"));",
									" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
									" "
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET note-types by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types/{noteTypeId} - 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c8c16a-7bf6-47c0-9321-16c30c41a6c1",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.id).to.equal(pm.environment.get(\"noteTypeId\"), \"id does not match\");",
													"    pm.expect(response.name).to.equal(pm.environment.get(\"noteTypeName\"), \"name does not match\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Returns an existing note-types via a collection"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0dd3ff7e-2ace-4327-8389-88f2e2382ee2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a4c0753b-8408-4aad-bffc-0251c1255f4d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c311bd3-3072-4897-9763-6910c868d89e",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a7071e2-187d-4496-9cd3-442d978289d8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"12345"
											]
										},
										"description": "Returns an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/note-types/{id}?lang= - 400 (empty lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb905b1-c769-4098-8a08-dbf039375edc",
												"exec": [
													"pm.test(\"400 test - empty lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{$guid}}?lang=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": ""
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is empty."
									},
									"response": []
								},
								{
									"name": "/note-types/{id}?lang=A1 - 400 (bad lang)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "508c294a-9bd8-4191-b222-19d75ee89c95",
												"exec": [
													"pm.test(\"400 test - bad lang\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'lang' parameter is incorrect. parameter value {A1} is not valid: must match \\\"[a-zA-Z]{2}\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{$guid}}?lang=A1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{$guid}}"
											],
											"query": [
												{
													"key": "lang",
													"value": "A1"
												}
											]
										},
										"description": "Failure case where the \"lang\" query parameter is invalid. It should be [a-zA-Z]{2}."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ee448c2-4b9b-493f-99f8-fe1644cf5c80",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec2c712e-07cf-4077-903c-915fc8f89511",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a7071e2-187d-4496-9cd3-442d978289d8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{$guid}}"
											]
										},
										"description": "Returns an existing note with an unknown id"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "82825c43-05bd-4a45-b666-c8eb36cc9352",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3db315ee-8292-4f84-92fd-e0fa6a6d1ed1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT note-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types/{id} - 204",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Name is changed\", function () {",
													"        pm.expect(res.json().name).to.equal(\"Test - Updated\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Test - Updated\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId-creating-in-post}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - (empty name)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d64c5c0-aa66-470a-a622-01b26b186f3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79e5a5b5-32d7-464d-ac1d-dc8b705f203b",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Name is changed\", function () {",
													"        pm.expect(res.json().name).to.equal(\"\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId-creating-in-post}}"
											]
										},
										"description": "Update an existing note with JSON body missing the required \"text\" field."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0535ffb-0247-43b7-880c-e90e74a7b09a",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative lang parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n \\'typeId\\' parameter is incorrect. parameter value {12345} is not valid: must match \"  +",
													"    \"\\\"^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d37b73e-f81e-4079-88e8-dcc2ae81db02",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Invalid Format URl\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/12345",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"12345"
											]
										},
										"description": "Updates an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37417d71-7f2c-4ff0-b4c3-420aac5bf6b7",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"note.types.item.put\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7323028-c782-4e36-9f00-e7209fe3b99d",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d4351f0f-adb3-4994-9f25-9869782c708d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Not Found\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeIdNotExisting}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeIdNotExisting}}"
											]
										},
										"description": "Updates an existing note with an unknown id"
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 422 (empty JSON)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "42676a49-83cc-4c27-afc1-efb64fb18d0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8664ff6c-55c7-4014-b869-fce54a563bc1",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Error message exist\", function() {",
													"    pm.expect(response.errors[0].message).to.eq(\"may not be null\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Update an existing note with an empty JSON body."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 422 (unknown field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "310ebf88-f3ce-4d20-a640-f28bdd343e07",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7c8c6944-72ba-421f-8c17-0acefe2b56cc",
												"exec": [
													"pm.test(\"422 - missing text field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\" : \"Name\",\n\t\"xyzzy\": \"867-5309\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown field."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 422 (unknown metadata field)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8834cd24-eb40-44d1-ba86-4a32b7e63259",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8bd865f6-0eef-473b-acb4-d0f5c1735ef9",
												"exec": [
													"pm.test(\"422 - unknown metadata field\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													" pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"link\": \"/items/xxxxxx\",\n\t\"text\": \"xxxxxxxx\",\n\t\"metadata\": {\n\t\t\"xyzzy\": \"867-5309\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId}}"
											]
										},
										"description": "Update an existing note with JSON body containing an unknown metadata field."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "DELETE note-type by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-types/{{noteTypeId-creating-in-post}} - 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d2c58203-5ec6-4cab-969f-6a3d088bd3f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9892fde5-887e-4dec-87b2-3aae99c4742b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Note does not exist\", function () {",
													"         res.code === 404;",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-in-post}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-types",
												"{{noteTypeId-creating-in-post}}"
											]
										},
										"description": "Create a new note"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-types/{id} - 400 (invalid id format in URL)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7e0b3eb-3e78-4519-b003-93bf02c70893",
												"exec": [
													"pm.test(\"400 test - invalid id format in URL\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.expect(pm.response.text()).to.include(\"'id' parameter is incorrect\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b3962f16-3072-4026-9e9e-07feb06da642",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{incorrectNoteTypeId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{incorrectNoteTypeId}}"
											]
										},
										"description": "Deletes an existing note with an invalid id format"
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 403",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c6b20c8-c027-4413-abe5-7798c292a260",
												"exec": [
													"pm.test(\"403 test\", function() {",
													"    pm.response.to.have.status(403);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"validate permission\", function() {",
													"    pm.expect(pm.response.text()).to.include(\"notes.item.delete\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Failure test for a user missing the required permission."
									},
									"response": []
								},
								{
									"name": "/note-types/{id} - 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f05d1a1-3956-4909-a59c-47f3bda6c3c5",
												"exec": [
													"pm.test(\"404 test\", function() {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f46888bc-4f6a-4600-b1e1-5cf2f268e264",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-Oakpi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{$guid}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{$guid}}"
											]
										},
										"description": "Deletes an existing note with an unknown id"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5a9cb89f-6fcd-455b-8c77-020866d1be38",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a40df983-879b-4ff2-89dc-b9b71b200ac6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3b1a928b-a834-43cd-a415-3297c266894d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cf476f90-4123-4dc7-9ce1-3c9eddec1a2b",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_noteTypeItem.json\", pm.environment.get(\"schema_noteTypeItem\"));",
							" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							" tv4.addSchema(\"schema_noteTypeUsage.json\", pm.environment.get(\"schema_noteTypeUsage\"));"
						]
					}
				}
			]
		},
		{
			"name": "note links",
			"item": [
				{
					"name": "GET note-links with domain",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 collection of notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).to.be.at.most(10);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 with assigned param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    allNotesHaveLink = response.notes.every((note) => ",
													"    containsLink(note, pm.environment.get(\"linkId\"), pm.environment.get(\"typeLink\")));",
													"    ",
													"    pm.expect(allNotesHaveLink).eq(true)",
													"});",
													"",
													"function containsLink(note, linkId, linkType){",
													"    return note.links.filter(link => ",
													"        link.id === pm.environment.get(\"linkId\") && ",
													"        link.type === pm.environment.get(\"typeLink\")",
													"        )",
													"        .length > 0;",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?status=ASSIGNED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "status",
													"value": "ASSIGNED"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 status UNASSIGNED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    anyNoteHasLink = response.notes.any((note) => ",
													"    containsLink(note, pm.environment.get(\"linkId\"), pm.environment.get(\"typeLink\")));",
													"    ",
													"    pm.expect(anyNoteHasLink).eq(false)",
													"});",
													"",
													"function containsLink(note, linkId, linkType){",
													"    return note.links.filter(link => ",
													"        link.id === pm.environment.get(\"linkId\") && ",
													"        link.type === pm.environment.get(\"typeLink\")",
													"        )",
													"        .length > 0;",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?status=UNASSIGNED",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "status",
													"value": "UNASSIGNED"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 order asc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes[0].links.length).to.be.at.least(2);",
													"    ",
													"    let note = response.notes[0];",
													"    pm.expect(containsLink(note, pm.environment.get(\"linkId\"), pm.environment.get(\"typeLink\"))).eq(true);",
													"});",
													"",
													"function containsLink(note, linkId, linkType){",
													"    return note.links.filter(link => ",
													"        link.id === pm.environment.get(\"linkId\") && ",
													"        link.type === pm.environment.get(\"typeLink\")",
													"        )",
													"        .length > 0;",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?status=ALL&order=asc&orderBy=status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "status",
													"value": "ALL"
												},
												{
													"key": "order",
													"value": "asc"
												},
												{
													"key": "orderBy",
													"value": "status"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 order desc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3b27b3e-7cdd-4437-ae7a-aca6e342fba4",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    let note = response.notes[0];",
													"    pm.expect(containsLink(note, pm.environment.get(\"linkId\"), pm.environment.get(\"typeLink\"))).eq(false);",
													"});",
													"",
													"function containsLink(note, linkId, linkType){",
													"    return note.links.filter(link => ",
													"        link.id === pm.environment.get(\"linkId\") && ",
													"        link.type === pm.environment.get(\"typeLink\")",
													"        )",
													"        .length > 0;",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "684ab5e1-2e99-4171-9e2f-5f1242440a00",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?order=desc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 orderBy title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    let firstNote = response.notes[0];",
													"    let lastNote = response.notes[response.notes.length - 1];",
													"    ",
													"    pm.expect(firstNote.title < lastNote.title).eq(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?orderBy=title&order=asc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "title"
												},
												{
													"key": "order",
													"value": "asc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 orderBy title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    let firstNote = response.notes[0];",
													"    let lastNote = response.notes[response.notes.length - 1];",
													"    ",
													"    pm.expect(firstNote.title > lastNote.title).eq(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?orderBy=title&order=desc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "orderBy",
													"value": "title"
												},
												{
													"key": "order",
													"value": "desc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 search title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    ",
													"    pm.expect(response.notes[0].title.includes(\"Title\")).eq(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?title=Title",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "title",
													"value": "Title "
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 limit and offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?limit=1&offset=0",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "offset",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 200 nonexisting link id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.totalRecords).to.be.at.least(response.notes.length);",
													"    pm.expect(response.notes.length).to.be.at.most(10);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{nonExistingId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{nonExistingId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 incorrect params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Status is incorrect. Possible values: \\\"ASSIGNED\\\",\\\"UNASSIGNED\\\",\\\"ALL\\\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?status=incorrect",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "status",
													"value": "incorrect"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 empty order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Order is incorrect. Possible values: \\\"asc\\\",\\\"desc\\\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?order=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "order",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 incorrect limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"\\n 'limit' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "limit",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "note-links/domain/eholdings/type/{type}/id/{id} - 400 empty offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "622cc0ba-4d80-46db-b117-5347020eff64",
												"exec": [
													"pm.test(\"400 test - incorrect params\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having negative error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"offset does not have a default value in the RAML and has been passed empty\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5a6b64-ff61-41da-91c3-38178c61036e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/domain/eholdings/type/{{typeLink}}/id/{{linkId}}?offset=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"domain",
												"eholdings",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											],
											"query": [
												{
													"key": "offset",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "teardow for links",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
										"exec": [
											"pm.test(\"success test - 204 and no body\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.be.withBody;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteIdSecond}}\",\r\n      \"status\" : \"UNASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"note-links",
										"type",
										"{{typeLink}}",
										"id",
										"{{linkId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT note-links with domain",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/note-links/type/{{typeLink}}/id/{{linkId}}",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"nonExistingId\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\")",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Status not found\", function() {",
													"    pm.expect(res.status).eq(\"Not Found\");",
													"});",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{nonExistingId}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 empty JSON",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"success test - 204 and empty Json\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 assign link to empty list of notes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : []\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 assign link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check second link\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"));",
													"        pm.expect(response.links[1].type).to.equal(\"package\");",
													"        pm.expect(response.links[1].id).to.equal(\"583-2356521-758039\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteId}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 unassign link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check second link\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"));",
													"        pm.expect(response.links.length === 1);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteId}}\",\r\n      \"status\" : \"UNASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 multiply assign link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteId}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    },\r\n     {\r\n      \"id\" : \"{{noteId-creating-in-post-second}}\",\r\n      \"status\" : \"ASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 200 check multiply assign",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbd0e8e4-24e5-41e3-9d86-deb965629337",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"typeId does not match\");",
													"    pm.expect(response.type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.title).to.equal(pm.environment.get(\"noteTitle\"), \"title does not match\");",
													"    pm.expect(response.content).to.equal(pm.environment.get(\"noteContent\"), \"title does not match\");",
													"    pm.expect(response.domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"});",
													"",
													"pm.test(\"Check quantity of links\", function () {",
													"    pm.expect(response.links.length).to.eq(2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId-creating-in-post-second\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check third link\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.id).to.equal(pm.environment.get(\"noteId-creating-in-post-second\"));",
													"        pm.expect(response.links.length).to.eq(2);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Returns an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 204 multiply unassign link",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"success test - 204 and no body\", function() {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.not.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{noteId}}\",\r\n      \"status\" : \"UNASSIGNED\"\r\n    },\r\n     {\r\n      \"id\" : \"{{noteId-creating-in-post-second}}\",\r\n      \"status\" : \"UNASSIGNED\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/notes/{id} - 200 check multiply unassign",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbd0e8e4-24e5-41e3-9d86-deb965629337",
												"exec": [
													"pm.test(\"success test - 200 and JSON body\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"pm.test(\"validate data\", function() {",
													"    pm.expect(response.id).to.equal(pm.environment.get(\"noteId\"), \"id does not match\");",
													"    pm.expect(response.typeId).to.equal(pm.environment.get(\"noteTypeId\"), \"typeId does not match\");",
													"    pm.expect(response.type).to.equal(pm.environment.get(\"noteTypeName\"), \"noteTypeName does not match\");",
													"    pm.expect(response.title).to.equal(pm.environment.get(\"noteTitle\"), \"title does not match\");",
													"    pm.expect(response.content).to.equal(pm.environment.get(\"noteContent\"), \"title does not match\");",
													"    pm.expect(response.domain).to.equal(pm.environment.get(\"noteDomain\"), \"domain does not match\");",
													"});",
													"",
													"pm.test(\"Check quantity of links\", function () {",
													"    pm.expect(response.links.length).to.eq(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0dd47a4b-2c8e-4fb9-8fc3-3a75ba8d776e",
												"exec": [
													"pm.sendRequest({",
													"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/notes/\" + pm.environment.get(\"noteId-creating-in-post-second\"),",
													"    method: 'GET',",
													"    header: {",
													"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
													"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
													"        'Content-Type': 'application/json'",
													"    },",
													"}, function(err, res) {",
													"    pm.test(\"Check third link\", function () {",
													"        var response = res.json();",
													"        pm.expect(response.id).to.equal(pm.environment.get(\"noteId-creating-in-post-second\"));",
													"        pm.expect(response.links.length).to.eq(1);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"notes",
												"{{noteId}}"
											]
										},
										"description": "Returns an existing note"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/note-links/type/{type}/id/{id}/ - 422 assign link without field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"422 test - bad lang\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"pm.test(\"Validate schema\", function () {",
													"       pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"       pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"id\" : \"{{nonExistingId}}\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 400 assign link without body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"400 test - invalid request\", function() {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body(\"Json content error HV000116: The object to be validated must not be null.\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								},
								{
									"name": "/note-links/type/{type}/id/{id}/ - 422 assign link with unknown field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b83dd-dd78-4091-a71a-2cb8a75e0bc7",
												"exec": [
													"pm.test(\"422 test - invalid request\", function() {",
													"    pm.response.to.have.status(422);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"var response = pm.response.json();",
													"",
													"   pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_errors\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3c91d9cc-4f5a-4416-957b-7848bf43fd38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"notes\" : [\r\n    {\r\n      \"unknownField\" : \"{{noteId}}\"\r\n    }\r\n  ]\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-links/type/{{typeLink}}/id/{{linkId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"note-links",
												"type",
												"{{typeLink}}",
												"id",
												"{{linkId}}"
											]
										},
										"description": "Updates an existing note"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3efe20a7-e4bf-4234-9b5c-5da6109ef1c7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4fbf69f3-689e-483d-8dfa-c470fbe85588",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							" tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));",
							" tv4.addSchema(\"schema_error.schema\", pm.environment.get(\"schema_error\"));",
							" tv4.addSchema(\"schema_userDisplayInfo.json\", pm.environment.get(\"schema_userDisplayInfo\"));",
							" tv4.addSchema(\"schema_note.json\", pm.environment.get(\"schema_note\"));"
						]
					}
				}
			]
		},
		{
			"name": "limit config",
			"item": [
				{
					"name": "Check if type config exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if(jsonData.configs.length > 0) {",
									"    if(jsonData.configs[0].value !== pm.environment.get(\"config-value-three\")){",
									"        pm.environment.set(\"config-value\", jsonData.configs[0].value);",
									"        pm.environment.set(\"notes-config-id\", jsonData.configs[0].id);",
									"        pm.sendRequest({",
									"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/configurations/entries/\" + jsonData.configs[0].id,",
									"        method: 'PUT',",
									"        header: {",
									"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"            'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"            'Content-Type': 'application/json'",
									"        },",
									"         body: {",
									"           mode: 'raw',",
									"            raw:  JSON.stringify({",
									"                \"module\": \"NOTES\",",
									"                \"configName\": \"api_access\",",
									"                \"code\": \"note.types.number.limit\",",
									"                \"value\": pm.environment.get(\"config-value-three\")",
									"            })",
									"        }",
									"    }, function(err, res) {",
									"        pm.test(\"Status no content\", function() {",
									"        pm.expect(res.status).eq(\"No Content\");",
									"        });",
									"    });",
									"    }",
									"    postman.setNextRequest(\"POST create note-type for tests\");",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									"pm.environment.set(\"config-value-three\",3)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==NOTES and code==note.types.number.limit)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==NOTES and code==note.types.number.limit)"
								}
							]
						},
						"description": "Check if limit configuration has already been configured for test user.  If so, update existing configuration settings"
					},
					"response": []
				},
				{
					"name": "/configurations/entries - POST note types limit to 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40e32515-40b6-4c0d-b958-fb4f11430a41",
								"exec": [
									"",
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var response = pm.response.json();",
									"",
									"//Value of records is 3",
									"pm.test(\"Value matches 3\", function () {",
									"    pm.expect(response.value).to.eq(\"3\");",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});",
									"",
									"let body = JSON.parse(responseBody);",
									"if(response){",
									"pm.environment.set(\"notes-config-id\", body.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"module\": \"NOTES\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"note.types.number.limit\",\r\n    \"value\": \"3\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create note-type for tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteType-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"pm.test(\"400 test - max number of records\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"Response having negative limit parameter error message\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.have.body(\"Maximum number of note types allowed is 3\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test - {{noteType-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/configurations/entries - DELETE config with limit 3",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{notes-config-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{notes-config-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST create note-type for tests after deleting config",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"noteTypeConf-uuid\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"var response = pm.response.json();",
									"",
									" pm.test(\"Validate schema\", function () {",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_noteTypeItem\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test('expected attributes are present', function() {",
									"    pm.expect(response).to.be.an('object');",
									"    pm.expect(response).to.include.all.keys(\"id\", \"name\");",
									"});",
									"",
									"if(response.id){",
									"pm.environment.set(\"noteTypeId-creating-for-test-config\", response.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Test - {{noteTypeConf-uuid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if type config exists after changes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if(jsonData.configs.length === 0) {",
									"        pm.sendRequest({",
									"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/configurations/entries\",",
									"        method: 'POST',",
									"        header: {",
									"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"            'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"            'Content-Type': \"application/json\"",
									"        },",
									"        body: {",
									"           mode: 'raw',",
									"            raw:  JSON.stringify({",
									"                \"module\": \"NOTES\",",
									"                \"configName\": \"api_access\",",
									"                \"code\": \"note.types.number.limit\",",
									"                \"value\": pm.environment.get(\"config-value\")",
									"            })",
									"        }",
									"    }, function(err, res) {",
									"        pm.test(\"Status created\", function() {",
									"        pm.expect(res.status).eq(\"Created\");",
									"        });",
									"    });",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==NOTES and code==note.types.number.limit)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==NOTES and code==note.types.number.limit)"
								}
							]
						},
						"description": "Check if limit config has already been configured for test user.  If not, post new configuration settings with old values"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "964f1339-b1c8-4467-a3b3-1f12c296dfd9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a9613d2c-2f5a-4ede-9272-df17c4353699",
						"type": "text/javascript",
						"exec": [
							" tv4.addSchema(\"schema_noteTypeItem.json\", pm.environment.get(\"schema_noteTypeItem\"));",
							"  tv4.addSchema(\"schema_metadata.schema\", pm.environment.get(\"schema_metadata\"));"
						]
					}
				}
			]
		},
		{
			"name": "teardown notes",
			"item": [
				{
					"name": "DELETE testing note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteId\");",
									"pm.environment.unset(\"noteContent\");",
									"pm.environment.unset(\"noteTitle\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes",
								"{{noteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE second testing note",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteIdSecond\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteIdSecond}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes",
								"{{noteIdSecond}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/note/{{noteId-creating-in-post-second}}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "489cefc9-561e-4e0a-9ea8-a535867f5859",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "363e43fd-a2ba-467d-8b4d-4670122c4043",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post-second\"),",
									"    method: 'GET',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"        'Content-Type': 'application/json'",
									"    },",
									"}, function(err, res) {",
									"    pm.test(\"Note does not exist\", function () {",
									"         res.code === 404;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/notes/{{noteId-creating-in-post-second}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"notes",
								"{{noteId-creating-in-post-second}}"
							]
						},
						"description": "Create a new note with read only fields set. These will be replaced with server side enforced values. The read only values will be ignored and note creation will succeed."
					},
					"response": []
				}
			]
		},
		{
			"name": "teardown note-types",
			"item": [
				{
					"name": "/note-types/{{noteType-creating-in-post-second}} - 201",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "489cefc9-561e-4e0a-9ea8-a535867f5859",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "363e43fd-a2ba-467d-8b4d-4670122c4043",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/note-types/\" + pm.environment.get(\"noteTypeId-creating-in-post-second\"),",
									"    method: 'GET',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"        'Content-Type': 'application/json'",
									"    },",
									"}, function(err, res) {",
									"    pm.test(\"Note does not exist\", function () {",
									"         res.code === 404;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-in-post-second}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeId-creating-in-post-second}}"
							]
						},
						"description": "Create a new note with read only fields set. These will be replaced with server side enforced values. The read only values will be ignored and note creation will succeed."
					},
					"response": []
				},
				{
					"name": "DELETE testing note-type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteTypeId\");",
									"pm.environment.unset(\"noteTypeName\");",
									"pm.environment.unset(\"noteTypeIdNotExisting\");",
									"pm.environment.unset(\"incorrectNoteTypeId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE second testing note-type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteTypeIdSecond\");",
									"pm.environment.unset(\"noteTypeNameSecond\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeIdSecond}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeIdSecond}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE note-type after limit test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28b5c6af-1d14-4c12-bf64-4ad6b13b3c1e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d7912ab7-5630-4a3c-9608-c03a42bed5fe",
								"exec": [
									"//Check that status is 204",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.environment.unset(\"noteTypeId-creating-for-test-config\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"type": "text",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/note-types/{{noteTypeId-creating-for-test-config}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"note-types",
								"{{noteTypeId-creating-for-test-config}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "124bec89-0d24-4921-aa03-2c61f1ba8485",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "fbb6eafb-6433-4a97-b1f2-e079c6cc56bf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}