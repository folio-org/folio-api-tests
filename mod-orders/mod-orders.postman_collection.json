{
	"info": {
		"_postman_id": "8bbcb92a-b265-45c4-b694-b8c131c23a3f",
		"name": "mod-orders",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc9affcd-09e7-483d-a3b6-505b15c2cb7d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b08a80d8-1110-4b35-98ee-c2bccb7af8b4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "38b0bdfc-2693-4b70-96f1-c56d94768009",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a5f8a43b-ccbc-45ee-b9ce-1ce53cb2cbe7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-orders\", bodyHandler);",
											"utils.getModuleId(\"mod-finance-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"utils.getModuleId(\"mod-circulation\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6697ae3-48d0-4cf1-b8f6-c170efec0bfd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b31ae10d-fcc1-47aa-9ef0-02fda9cc5991",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2172095d-7a8b-4420-8203-700c75b77fb7",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c60dc9c-3484-4646-9b4b-f8f4e8a28e9e",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c35b9c70-0cc3-49f0-8b19-2e18e1336f31",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0bd72e1-0b46-486e-abc1-c69265bef980",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2afb2079-5eba-4ad3-a249-66b8f2cedf40",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pmRq = {",
											"    url: utils.buildOkapiUrl('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),",
											"    method: \"GET\",",
											"    header: {\"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")}",
											"};",
											"pm.sendRequest(pmRq, (err, res) => {",
											"    let userPermissions = globals.testData.users.admin.permissions;",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e3ab6ce8-adc5-4fec-81e4-89eacdbbb13a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8d5b99b8-eb16-4ad6-aa8c-722994ace373",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c313411b-3ee1-41b6-8b88-f614d64d59c8",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6dd9b704-a7c2-4040-be6d-d53916e4b3f3",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order approve permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6ae7b30a-b1f3-4864-a3f3-84da388ab5a2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9234b8cc-9b64-4fc2-aa0f-d000a9dada06",
										"exec": [
											"pm.test(\"Permission is created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissionName\": \"orders.item.approve\",\r\n  \"displayName\": \"Permission to approve order\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order unopen permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d42d17de-7a45-4a53-a074-6d92ee469342",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "06aed44b-57f8-4925-ad2a-c608615666a2",
										"exec": [
											"pm.test(\"Permission is created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissionName\": \"orders.item.unopen\",\r\n  \"displayName\": \"Permission to unopen order\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f14d8e40-0eec-4d6d-b9d4-a6ebe59e6196",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1700272a-6d8f-4707-a214-0c7aad5a942e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check TENANT configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df7d31ab-c482-4af9-b0f2-7655e68896a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testTenantConfigs = globals.testData.tenantConfig;",
											"let bodyTemplate = globals.testData.tenantConfig.bodyTemplate;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current tenant configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-tenant-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testTenantConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    console.log(configName + \": \" + value);",
											"    utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-tenant-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ddc4c81-61a6-44a8-8543-0fd2ab045162",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==TENANT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==TENANT"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6c5dbfb-8170-4953-adb1-f6a4ebacc734",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0c29a6e4-9da8-4f57-bd5b-471a9340651d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load all schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e509659-0fef-4bf0-a40f-c154f8e2b560",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modOrdersId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05979e2d-42fb-410f-b436-abc19e9f1cab",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moduleName = 'mod-orders';",
											"",
											"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(response.text()).to.include(moduleName);",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];",
											"        pm.variables.set('modOrdersId', moduleId);",
											"    });",
											"});",
											"",
											"",
											"function buildPmRequest1(path) {",
											"    return {",
											"        url: utils.buildOkapiUrl(path),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
											"        }",
											"    };",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modOrdersId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3b45c90a-2b6f-4392-9f98-b3d769a516b2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e5d4357-3a64-46d1-b250-875ece1f776e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare global data",
					"item": [
						{
							"name": "Institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04809138-26d3-4bc9-9b0e-569a1ff611fa",
										"exec": [
											"pm.test(\"Record is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e07d65b4-3c62-4f56-b1d9-b81761bc024d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \"Universitet\",\n    \"code\": \"TU\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Campus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95073086-c6ca-47d2-8244-0c17b3bd3388",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d9f71f39-f7f3-4b33-a627-2262fe9f179b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \" Campus\",\n    \"code\": \"TC\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"campuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Library",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfaf77b5-38fb-4357-8033-e349e71b62ce",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "613fc736-40dc-4d4a-a328-84a1adcca41f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"name\": \"Library\",\n    \"code\": \"TL\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"libraries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Service point",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a717266f-a1e1-43d3-82c8-dc863757547c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "385e7dab-b44b-4a46-ae9a-a1cc5e77db7b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"name\": \"Service point\",\n    \"code\": \"TSP\",\n    \"discoveryDisplayName\": \"Service point 1\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"service-points"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0bb00c68-c855-4c2c-a6ae-a676a148add8",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c089123a-756a-4e3f-9869-5c30a89386e8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"b32c5ce2-6738-42db-a291-2796b1c3c4c6\",\n    \"name\": \"Location 1\",\n    \"code\": \"LOC1\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94df22b6-7b9f-42a4-9d07-ad6c33fd951c",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41209f28-575d-49b0-8f2e-41db4eeaef2a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n    \"name\": \"Location 2\",\n    \"code\": \"LOC2\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d01ab6d-f9b9-493b-9adc-b5b0ca12c8a0",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId3\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa13a1fb-0270-4ebf-83d7-53b9725ba418",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"f17914b0-048a-42f2-b6c1-fc6f38edf157\",\n    \"name\": \"Location 3\",\n    \"code\": \"LOC3\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare vendors",
					"item": [
						{
							"name": "Post active vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e59f998-ae2e-4e92-9f24-5883cf46f490",
										"exec": [
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1454911-7dff-4ecd-922d-6dd76180ed8c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post inactive vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa5a42ef-43c7-46f2-b98b-d49549d9e347",
										"exec": [
											"pm.test(\"Storing inactive vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"inactiveVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f914e23e-38f6-4ddf-bafb-4f0e2bbced9e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test inactive vendor\",\n\t\"code\": \"TIV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Inactive\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "Fiscal Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "174d3072-dcf1-4476-84c9-394c181ba330",
										"exec": [
											"pm.test(\"Fiscal Year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5be847a9-2d76-4851-badc-1c0b52563584",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\n  \"name\": \"TST-Fiscal Year 2020\",\n  \"code\": \"FY2020\",\n  \"description\": \"January 1 - December 30\",\n  \"periodStart\": \"2020-01-01T00:00:00Z\",\n  \"periodEnd\": \"2020-12-30T23:59:59Z\",\n  \"series\": \"FY\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Creates a Fiscal Year record which will be used to create a ledger record"
							},
							"response": []
						},
						{
							"name": "Fiscal Year 2021",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab74894b-6bb2-40d1-b28d-511492e96781",
										"exec": [
											"pm.test(\"Fiscal Year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ca66cef-0fcf-4f3a-b8e4-b20a29168a8a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf3\",\n  \"name\": \"TST-Fiscal Year 2021\",\n  \"code\": \"FY2021\",\n  \"description\": \"January 1 - December 30\",\n  \"periodStart\": \"2021-01-01T00:00:00Z\",\n  \"periodEnd\": \"2021-12-30T23:59:59Z\",\n  \"series\": \"FY\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Creates a Fiscal Year record which will be used to create a ledger record"
							},
							"response": []
						},
						{
							"name": "Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf517e56-b0f0-45c8-82bc-871b25314ace",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d6139f3-275b-4bd7-90ef-a90ea8f384dd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n\t\"code\": \"TST-LDG\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Test ledger\",\r\n    \"fiscalYearOneId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n    \"restrictEncumbrance\": false\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6869cf2-5824-49a8-a149-e746e89b8a5e",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fundId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80ec7ac5-9d97-494b-b2cf-345ec33f3e9e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"TST-FND\",\r\n  \"description\": \"Fund for orders API Tests\",\r\n  \"externalAccountNo\": \"1111111111111111111111111\",\r\n  \"fundStatus\": \"Active\",\r\n  \"ledgerId\": \"{{ledgerId}}\",\r\n  \"name\": \"Fund for orders API Tests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20a9a34e-c170-4a60-90c5-7ca6b1b24fae",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c34fb92d-0216-4904-9303-06b4958f9f58",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Active\",\r\n  \"fundId\": \"{{fundId}}\",\r\n  \"name\": \"Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n  \"allocated\": 9999999\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be24e8f6-bbed-4447-ae26-ddf519b75538",
										"exec": [
											"var id = pm.response.json().fund.id",
											"var code = pm.response.json().fund.code",
											"pm.environment.set(\"fundId-2\", id);",
											"pm.environment.set(\"fundCode-2\", code);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4a61ff3-833b-4176-9777-f5591eead26a",
										"exec": [
											"pm.environment.set(\"fundCode-2\", \"first\" + Math.floor(Math.random() * 999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"fundStatus\": \"Active\",\n        \"name\": \"{{fundCode-2}}\",\n        \"code\": \"{{fundCode-2}}\",\n        \"externalAccountNo\": \"tttt\",\n        \"ledgerId\": \"{{ledgerId}}\"\n    },\n    \"groupIds\": []\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Planned Budget for Fund1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7db9a9ab-030a-47a3-ba57-1fc5d07d8b20",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf06ec37-35b9-4d4f-94d9-54dba9a02d7b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Planned\",\r\n  \"fundId\": \"{{fundId}}\",\r\n  \"name\": \"Plannet Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf3\",\r\n  \"allocated\": 0\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b86cf82-dc51-45d1-9428-34fe40c3bc45",
										"exec": [
											"var id = pm.response.json().id",
											"pm.environment.set(\"budgetId-2\", id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "869fa7b6-716c-4518-b9cc-a2bbf5a5441d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fiscalYearId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\n    \"budgetStatus\": \"Active\",\n    \"allowableExpenditure\": 100,\n    \"allowableEncumbrance\": \"\",\n    \"allocated\": \"100\",\n    \"fundId\": \"{{fundId-2}}\",\n    \"name\": \"{{fundCode-2}}-FY2020\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare inventory types",
					"item": [
						{
							"name": "Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8e48570-18be-4ee8-a3bf-1f98c85fc82d",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"identifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ee47786-7d92-4e1d-bcd7-bbc26a398ebe",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0010-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-identifierTypeName}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "ISBN Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64426ee1-fee5-40a6-abba-42b6065cb90f",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"isbnIdentifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3868b9b9-edf2-4317-be08-f4ba3567930e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n  \"name\": \"ISBN\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates ISBN identifier type to be used for ISBN validation"
							},
							"response": []
						},
						{
							"name": "Instance Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48cf5245-0ac0-4bfa-888c-4623c0ea47f1",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b9eacc59-1219-4cec-bf2e-bf5b5285fa66",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceTypeCode}}\",\r\n  \"name\": \"{{inventory-instanceTypeCode}}\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Type - zzz",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63ca262a-cd92-4835-833f-c425fd096a11",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d338c618-c0f6-4f57-95f8-d0963232ec8b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"30fffe0e-e985-4144-b2e2-1e8179bdb41f\",\r\n  \"code\": \"zzz\",\r\n  \"name\": \"unspecified\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd2d3181-326c-477a-8daf-ce5d11cb42b4",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceStatusId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f0b3d71f-66a2-494d-ae1b-56baaf8c2563",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceStatusCode}}\",\r\n  \"name\": \"{{inventory-instanceStatusCode}}\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses"
									]
								},
								"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Loan Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8498f82-ef0b-4ef9-ba08-ad08e073919f",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"loanTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a248837d-42d1-48f4-99d3-22fe99ecb198",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-loanTypeName}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-types"
									]
								},
								"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Material Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09456cdc-f202-459b-b0c8-74e0e8bd608a",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"materialTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "678146dd-1640-47d1-8a08-4765c19ca9d2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\r\n  \"name\": \"materialTypeName\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Contributor name type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5448c7e-9445-4023-8dee-16261ddb1b83",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"contributorNameTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e099ef2-669b-47c9-abda-3a7cd3310dbf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0005-1111-aaaa-6f7264657273\",\r\n  \"name\": \"contributorNameType\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"contributor-name-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Patron Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ca3c798f-ee1c-4e3f-b9ba-66a094b0fe80",
										"exec": [
											"let user = globals.testData.users.regular.user;",
											"user.patronGroup",
											"pm.variables.set(\"userData\", JSON.stringify(user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "293cc3ae-ebc7-4527-a4a4-d94e125a27eb",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"_patron_group_id\", pm.response.json().id)",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\" : \"Test Patron Group\",\n    \"desc\" : \"Test Patron Group Member\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d05bd069-a236-465b-9518-e49394da91fd",
										"exec": [
											"let user = globals.testData.users.regular.user;",
											"user.type = \"patron\",",
											"user.active = true,",
											"user.barcode = \"236964750970123\",",
											"user.patronGroup = pm.environment.get(\"_patron_group_id\");",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a6cb1e3b-0cff-4cb0-ab04-bd15ed39ba12",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "310e2d2e-19e3-4c85-88ce-ab8003035295",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8c3deb6-45b4-41a4-9649-7a9ba6d9da38",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "939f3ce0-7bc9-4255-a28c-3eeb0b2e187b",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "03dc2db0-5552-49c3-ae69-28431e2007b8",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89639cda-c1ab-47cd-b028-3a45bf9ba125",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c670c81-8544-4cc6-bd72-ae3cee471c8d",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create restricted user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "782e70d6-b869-4914-90b8-e018dcaa6f1c",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.restricted.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cacc42e6-ca0d-4097-841f-fb49dbb4f0be",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "263b2374-12eb-4bde-bdc3-f194c891bf4f",
										"exec": [
											"pm.test(globals.testData.users.restricted.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "216afa95-1716-4066-b346-a562e5b5a27d",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.restricted.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f55f69f-3415-4d1a-9efc-6063dcee1428",
										"exec": [
											"pm.test(globals.testData.users.restricted.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5bd63392-c3c0-4e28-a108-4b470dfe6065",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.restricted.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "872a00ef-38e1-4edb-9d96-7f10ab4de40d",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-restricted\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9593af0c-bafa-47a6-937b-5153c411ff3e",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.restricted.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20960bd0-54bf-4c7d-ab0a-8088b4116882",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50bc3418-98fc-4d35-b4fe-e74d1fb63958",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Empty Order",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "673e2347-7b8a-4f64-9c8f-1aed7ea15f02",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5505dafd-d670-462e-97c0-4f1b05c7736e",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(0);",
											"    });",
											"",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"    ",
											"    pm.test(\"MODORDERS-145: Verify status to be Pending\", function(){",
											"        pm.expect(jsonData.workflowStatus).to.equal(\"Pending\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get created empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e146823-d8f1-45fc-aebc-77c05c97b07e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a0edb455-fc5a-46cc-a220-07a7910c0dd1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});",
											"",
											"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
											"    let order = pm.response.json();",
											"    pm.expect(order.approved).to.be.false;",
											"    pm.expect(order.reEncumber).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Update order with new poNumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d950385-74ec-4038-9d25-888d881c8af7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get Order and update poNumber only (MODORDERS-150)",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"    let order  = res.json();",
											"    let number = \"UPD\" + order.poNumber;",
											"    order.poNumber = number;",
											"    pm.variables.set(\"updatedNumber\", number);",
											"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9a963034-5966-4528-8eb1-5fbf11dcaed1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"        pm.test(\"Verify order updated with new PO number\", () => pm.expect(res.json().poNumber).to.equal(pm.variables.get(\"updatedNumber\")));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Get empty order by order id and validate totalItems",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6140e90d-d4c8-4708-bc0f-720780ddc980",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "91c5c7df-0420-4722-8286-5ff73ab2d808",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2bbf271a-50b4-45f2-906f-bbdaaf90956b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0160d1d5-5b01-40b6-be63-049f57d9ec3c",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"description": "Verifies that an order can be created and deleted without order lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d9868e9b-3086-40de-b490-0e03b084d312",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d825a29d-fbff-41ef-b276-a85257137428",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending Order",
					"item": [
						{
							"name": "Create Pending order",
							"item": [
								{
									"name": "Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1569fd51-840a-42f7-970f-c5688acb7bfc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8a78dc5d-faf8-46df-8a79-0fd47baf95bc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"utils.verifyOrderCalculatedInfo(jsonData);",
													"",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"completeOrderId\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.globals.set(\"completeOrderPoNumber\",\"\\\"\"+jsonData.poNumber+\"\\\"\");",
													"    pm.expect(jsonData.notes).to.exist;",
													"    pm.expect(jsonData.vendor).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_listed_print_monograph}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Create order in Pending status without material types",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b4c5ab5-4375-4d62-9c61-7016c07d0a30",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_po_line_without_material_type.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.compositePoLines[0].alerts = [];",
													"    order.compositePoLines[0].reportingCodes = [];",
													"    pm.globals.set(\"create_order_po_line_without_material_type\", JSON.stringify(order));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8c659c7a-0685-445d-87ad-ac729dcb0218",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    console.log(jsonData)",
													"    pm.globals.set(\"order_po_line_without_material_type\", jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{create_order_po_line_without_material_type}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update second line and delete",
							"item": [
								{
									"name": "Update second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c00a229-fcb2-45e9-8a07-7e340c0a8023",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.purchaseOrderId = globals.completeOrderId;",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dfdb39bc-7959-418c-a1b1-f33273d6e7eb",
												"exec": [
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Verifies that second line can be sussessfully updated"
									},
									"response": []
								},
								{
									"name": "Get second line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "007872b8-cc6a-4d54-b616-0cf98793bbbb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3b844505-b48e-4c6f-8761-106307d78ad7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "399ad2a1-599a-4558-a65b-fad8925d9cf4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66b34777-3ee2-4269-8465-b3e26182cb1e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f1667655-661b-4088-a5ee-9c7f59325df4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "55a9c2ab-a159-44d8-b545-462b638fa099",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"1 PO Line exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200 and verifies that only one line exists"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add empty line, update and delete",
							"item": [
								{
									"name": "Add empty line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "46faef79-d1dc-486a-8e0d-f24fd2715896",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.globals.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "13e67bb6-f085-459f-9e9e-8375ae585b17",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/order-lines requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c01c9685-f394-4da6-b844-e482131d1990",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4bb18f93-ea67-47e3-a9be-5591dfbc818b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update empty line with complex content without location and createInventory=Instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c71e42fa-16eb-4edc-9649-9fac2438e247",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.physical.createInventory = \"Instance\";",
													"    poline.locations = [];",
													"    poline.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"    poline.isPackage = false;",
													"    poline.instanceId = \"5bf370e0-8cca-4d9c-82e4-5170ab2a0a39\";",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "80022b27-790c-42a8-9793-242d4aac85dc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Status code is 204\", function() {",
													"    utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + pm.variables.get(\"poLineId\"), (err, res) => {",
													"        pm.test(\"Verify title updated with new instanceId\", () => pm.expect(res.json().titles[0].instanceId).to.equal(\"5bf370e0-8cca-4d9c-82e4-5170ab2a0a39\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Validates that empty line can be updated with complex content"
									},
									"response": []
								},
								{
									"name": "Get order and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "12cea3c6-c011-435b-b54d-e0351db41c97",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "120f4017-38dd-48bf-9465-33d4aad863dc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "`GET /orders/composite-orders/<id>` request and validate content"
									},
									"response": []
								},
								{
									"name": "Delete last line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3221c27f-24c1-4bc5-ab0f-3dc4503dd85b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));",
													"",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c8217ebe-5c54-4b8b-b27b-1cb66b6123dd",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 204"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add line and update content",
							"item": [
								{
									"name": "Add line with complex content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7f98884b-364b-4625-8112-733ed9cc8be8",
												"exec": [
													"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"// make sure there is no id provided",
													"delete line.id;",
													"line.poLineNumber += \"1\";",
													"line.poLineDescription += \" another PO Line\";",
													"line.eresource.createInventory = \"Instance\";",
													"line.locations.pop();",
													"line.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "06415334-af54-4c62-bfca-1aed9a38b119",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_listed_print_monograph}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/id/lines/id requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "35c38665-a952-4ae3-9788-9d379bf58a73",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "11c69683-b327-4713-b950-056e0898171a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a0dce199-2918-4472-9242-c070d5355b65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e0179ea9-8361-483b-9ffc-f9ad9ce28a9f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update last line with empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0f6e0384-69b9-409c-99b7-5c0877c63168",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"pm.variables.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "824decac-4ef2-4cf4-8228-567842011f53",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get last line and verify empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f258091e-f9bf-4b33-a657-1c6963ab46f6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "90543eb4-7bd2-4aae-9d58-21f28ff51230",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0213494b-f6dc-4f17-a4f8-7d8b97b156c2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "16094332-9278-4596-890e-3656df65ef74",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": " Add expected receipt date to PO Line",
							"item": [
								{
									"name": "Update last line with expected receipt date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6e513574-bb96-40f2-8cfe-aca640281ad5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"// Using id of the last PO Line",
													"let poLineId = utils.getLastPoLineId();",
													"pm.variables.set(\"poLineId\", poLineId);",
													"utils.sendGetRequest(\"/orders/order-lines/\" + poLineId, (err, res) => {",
													"    // Get physical object",
													"    let compositePoLine = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"    let physical = compositePoLine.physical;",
													"    // make sure there is no id provided",
													"    delete physical.id;",
													"",
													"    // Get current date and add 1 month",
													"    let expectedReceiptDate = moment().utc().add(1, 'month').format();",
													"    pm.variables.set(\"expectedReceiptDate\", expectedReceiptDate);",
													"    physical.expectedReceiptDate = expectedReceiptDate;",
													"",
													"    let poLine  = res.json();",
													"    poLine.physical = physical;",
													"    poLine.locations = [compositePoLine.locations[0]];",
													"    pm.variables.set(\"updated_po_line\", JSON.stringify(poLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0949fcc-dc23-463d-9661-54ae0d57c301",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"// Get updated PO Line",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.variables.get(\"poLineId\"), function (err, res) {",
													"    pm.test(\"PO Line updated with expected receipt date\", function () {",
													"        let poLine  = res.json();",
													"        // Dates should be in the same format",
													"        let expectedReceiptDate = moment(pm.variables.get(\"expectedReceiptDate\")).utc().format();",
													"        let actualDate = moment(poLine.physical.expectedReceiptDate).utc().format();",
													"",
													"        pm.expect(actualDate).to.equal(expectedReceiptDate);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updated_po_line}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Gets content of last PO Line and updates it adding expected receipt date"
									},
									"response": []
								}
							],
							"description": "[MODORDERS-135](https://issues.folio.org/browse/MODORDERS-135)\n\nAdd an `expectedReceiptDate` field to the physical sub-object.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7b399a4b-7c4c-4941-83fa-ab351038b319",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b9e54887-9172-40f4-afd3-c252176bc258",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update order",
							"item": [
								{
									"name": "Update order leaving one line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5664db7d-a314-4fd5-8291-708099393545",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"",
													"let completePolineIds = pm.globals.get(\"completePolineIds\") ? JSON.parse(pm.globals.get(\"completePolineIds\")) : [];",
													"utils.deleteTitlesByLineId(completePolineIds[completePolineIds.length - 2]);",
													"",
													"pm.variables.set(\"listUnitPriceUpdate\", 537.96);",
													"pm.variables.set(\"discountUpdate\", 19.84);",
													"pm.variables.set(\"discountTypeUpdate\", \"percentage\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 9);",
													"pm.variables.set(\"currencyUpdate\", \"EUR\");",
													"",
													"// Expected PO Line's total based on values above will be 3881.058624 and rounded to value below",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 3881.06);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77bf3a27-6efd-473b-a215-1ee510e55a61",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // Retrieve order to verify updates",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        var order = {};",
													"         ",
													"        pm.test(\"Order retrieved after update\", function () {",
													"            pm.expect(err).to.equal(null);",
													"            pm.expect(res.code).to.eql(200);",
													"            pm.expect(res.json()).to.exist;",
													"            order = res.json();",
													"        });",
													"        ",
													"        pm.test(\"Order now has 1 PO Line\", function () {",
													"            utils.validatePoLines(order, 1);",
													"        });",
													"        ",
													"        pm.test(\"Validate poLineNumber after update\", function() {",
													"            utils.validatePoLinesNumber(order);",
													"        });",
													"        ",
													"        let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"",
													"        // The PO has one line so its total price equals to PO Line's total",
													"        utils.verifyOrderCalculatedInfo(order);",
													"",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            let cost = order.compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.currency).to.equal(pm.variables.get(\"currencyUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": \"268758test2\",\n  \"reEncumber\": false,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"id\": \"{{poLineId}}\",\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"{{currencyUpdate}}\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityElectronic\": 0,\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204\nReplaces content leaving only one line."
									},
									"response": []
								},
								{
									"name": "Update order changing POL cost again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "989a40b6-9cd6-46ce-9c81-5fe0cafa9f5d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"listUnitPriceUpdate\", 10.0);",
													"pm.variables.set(\"additionalCostUpdate\", 5.0);",
													"pm.variables.set(\"discountUpdate\", 15.01);",
													"pm.variables.set(\"discountTypeUpdate\", \"amount\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 21);",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));",
													"",
													"// Expected PO Line's total based on values above",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 199.99);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "292b93f2-3374-4e78-a884-d720f5353fa7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            pm.expect(res.json()).to.exist;",
													"            pm.expect(res.json().compositePoLines).to.have.lengthOf(1);",
													"",
													"            let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"            // The PO has one line so its total price equals to PO Line's total",
													"            utils.verifyOrderCalculatedInfo(res.json(), expectedTotalPrice);",
													"",
													"            let cost = res.json().compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.additionalCost).to.equal(pm.variables.get(\"additionalCostUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": {{completeOrderPoNumber}},\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 100.99,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"additionalCost\": {{additionalCostUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"USD\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update PO number",
							"item": [
								{
									"name": "Update order with new poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5941620b-68b8-4c4e-9028-c0ce3b58d96a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Order and update poNumber only",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"    let order  = res.json();",
													"    order.poNumber = \"newponumber\";",
													"    delete order.totalItems;",
													"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
													"});",
													"",
													"pm.globals.set(\"poNumber\", \"newponumber\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "35aeb35b-102d-4027-b8b0-936882e3bc8d",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedOrder}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order and validate poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "93b6ba3c-b016-4c47-b61e-1c44e35031b4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a21190fb-6a7a-4578-a9f7-ab55fa48fb95",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"Validate poNumber\", function() {",
													"    pm.expect(jsonData.poNumber).to.equal(pm.globals.get(\"poNumber\"));",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da084bdd-51c3-4a9b-a90b-954778805bf9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "03f047ef-f8fe-4e61-82a4-50d24bce0781",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"approved\": false,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"{{poNumber}}\",\n    \"orderType\": \"One-Time\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 99.99,\n    \"totalItems\": 2,\n    \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n    \"workflowStatus\": \"Pending\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get order and validate line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9749c882-f165-422c-9dbe-094c1db11508",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0c3bc55-66b1-4870-bea4-31cb61c5915b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"1 po line exists\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate poLineNumber\", function() {",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order summary leaving only PO number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8fe315d-870a-4d85-835d-d78050138017",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4fd13aee-6e81-4bfb-8903-86db81b74738",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"poNumber\": \"{{poNumber}}\",\n\t\"orderType\": \"One-Time\",\n\t\"vendor\": \"{{activeVendorId}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f293b7b7-cef8-480a-a650-c6f680adb385",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f92f9883-dbba-42f4-8e6e-78f39a672521",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate that response contains default fields on creating an empty order\", function () {",
													"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
													"    pm.expect(jsonData.compositePoLines).to.have.lengthOf(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "891a9c85-ecb5-4843-85dd-17e32fcef527",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89902176-1319-4ce7-affa-591caf914bc2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create another Pending order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1912d048-5e09-444a-b478-bc57ce22e6db",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let order = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Pending\";",
											"    // Setting create inventory to None for PO Line with P/E Mix format",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.poNumber = \"1MIX1EL1PHYS1OTH\";",
											"",
											"    // add billTo an shipTo properties",
											"    utils.sendGetRequest(\"/configurations/entries?query=module==TENANT and code==\" + globals.testData.tenantConfig.bodyTemplate.code, (congifErr, configRes) => {",
											"        let addressConfId = configRes.json().configs[0].id;",
											"        order.billTo = addressConfId;",
											"        order.shipTo = addressConfId;",
											"        pm.variables.set(\"tenantAddressConfigId\", addressConfId);",
											"        pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "59168db6-0300-4253-80a6-d9a11db40db3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"anotherCompleteOrderId\", jsonData.id);",
											"    pm.globals.set(\"another_complete_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Test billTo and shipTo properties existance\", function() {",
											"    pm.expect(jsonData.billTo).to.exist;",
											"    pm.expect(jsonData.shipTo).to.exist;",
											"    ",
											"    pm.expect(jsonData.billTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"    pm.expect(jsonData.shipTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open and adding 2 more lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fcef0f78-7d51-4a94-bc88-e415a1b1d9e0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"another_complete_order_content\");",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    // Few more cases for MODORDERS-117",
											"    order.compositePoLines[0].orderFormat = \"Physical Resource\";",
											"    setPhysicalInfo(order.compositePoLines[0]);",
											"    order.compositePoLines[1].orderFormat = \"Other\";",
											"    setPhysicalInfo(order.compositePoLines[1]);",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Open\";",
											"    pendingOrder.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Pending\");",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"another_complete_order_content\");",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef6313b4-a0a1-4a17-850f-7fa3b8582342",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        //check status changed",
											"        order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"        order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"       ",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Titles",
					"item": [
						{
							"name": "Create package po line for title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb89a8e0-660b-48ea-a2c0-c0d2c7854746",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"// make sure there is no id provided",
											"delete line.id;",
											"line.poLineNumber += \"1\";",
											"line.poLineDescription += \" another PO Line\";",
											"line.eresource.createInventory = \"Instance\";",
											"line.locations.pop();",
											"line.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
											"line.isPackage = true;",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3b8da412-35c6-47ad-96c2-36bf04b1a4af",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    ",
											"    ",
											"    pm.environment.set(\"poLineIdForTitle\", jsonData.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/id/lines/id requests that return 201"
							},
							"response": []
						},
						{
							"name": "Create title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d4e0ab64-879a-4b4d-97a4-53c0be1a1a7b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "296d56a6-d732-458c-826e-82d1affadd76",
										"exec": [
											"pm.test(\"Title status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"    let title = pm.response.json();",
											"    pm.expect(title.id).to.exist;",
											"    pm.variables.set(\"titleId\", title.id);",
											"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get title by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a6d4dc24-18ce-4d3d-8958-4b9355b895fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c76ac93b-0d63-4c89-8628-56e31a6fe664",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let retrievedTitle = pm.response.json();",
											"    pm.expect(retrievedTitle.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0220bbe7-59f5-4c77-8c5a-fa70901d132a",
										"exec": [
											"let titleBody = JSON.parse(pm.variables.get(\"titleContent\"));",
											"",
											"titleBody.title = \"New title name\";",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(titleBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ed9e18a4-9182-4cec-9f1c-4470ef9a65c1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/titles/\" + pm.variables.get(\"titleId\"), (err, res) => {",
											"        pm.test(\"Title is updated\", () => {",
											"            pm.expect(res.code).to.eql(200);",
											"            var title = res.json();",
											"            pm.expect(title.title).to.eql(\"New title name\");",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get title collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "08096e86-beb6-4620-868f-1fa19588e843",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c875c4d4-7a2c-4404-95d1-b772a1babe16",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"",
											"    var titles = pm.response.json();",
											"",
											"    pm.test(\"Verify order templates collection contains order templates\", () => {",
											"        pm.expect(titles.totalRecords).to.be.above(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "07847e06-ec24-4652-92c4-70ad1da291fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f14d5ca6-ab8a-4a17-8bc0-6c68dab793d0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/titles/\" + pm.variables.get(\"titleId\"), (err, res) => {",
											"        pm.test(\"title is deleted\", () => {",
											"             pm.expect(res.code).to.eql(404);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces",
					"item": [
						{
							"name": "create title for piece",
							"item": [
								{
									"name": "Create title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "92cefba3-7f21-451c-b3d8-3b5eec846bdf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "06ecf942-60a9-4e5b-8e6e-52772d2027c0",
												"exec": [
													"pm.test(\"Title status code is 201\", function() {",
													"    pm.response.to.have.status(201);",
													"    let title = pm.response.json();",
													"    pm.expect(title.id).to.exist;",
													"    pm.variables.set(\"titleId\", title.id);",
													"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{titleContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2c9117fa-8e92-44e4-b02e-d6c7962d35e4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    let piece = res.json();",
											"    piece.poLineId = pm.environment.get(\"poLineIdForTitle\");",
											"    piece.titleId = pm.variables.get(\"titleId\");",
											"    piece.locationId = pm.environment.get(\"locationId1\");",
											"    pm.globals.set(\"pieceRecord\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "84d1ae22-a49d-4a35-b01a-6ab21858224d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.globals.set(\"pieceIdToUpdate\", jsonData.id);",
											"    utils.validatePiece(jsonData);",
											"});",
											"",
											"pm.test(\"Each piece has these optional fields\", function () {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.expect(jsonData.caption).to.exist;",
											"    pm.expect(jsonData.comment).to.exist;",
											"    pm.expect(jsonData.itemId).to.exist;",
											"    pm.expect(jsonData.locationId).to.exist;",
											"    pm.expect(jsonData.supplement).to.exist;",
											"    pm.expect(jsonData.receivedDate).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{pieceRecord}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Edit piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "62d634be-7414-4fbb-8992-403a90535046",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let piece = pm.globals.get(\"pieceRecord\");",
											"",
											"// Update piece format to Electronic",
											"piece.format = \"Electronic\";",
											"// Use this pieceIdToUpdate to delete in next delete request",
											"pm.variables.set(\"updatedPiece\", piece);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f403dbbc-426a-46d2-bbc2-c5072b4ff8ba",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.have.status(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedPiece}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "06893326-68b8-4c88-a174-7d2dfb32e8c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "037c88c9-3c46-41cf-8db3-1cbe99bec8f4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "delete title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7cbb16a4-12c7-4bab-a85e-40e7c6621787",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5ee8242b-d899-4fea-a9d7-62f970ff04d2",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ensure receiptStatus consistency between Pieces PoLine",
					"item": [
						{
							"name": "Verify PoLine Awaiting ReceiptStatus",
							"item": [
								{
									"name": "create title for piece",
									"item": [
										{
											"name": "Create title",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "77a2f369-0ae7-4b4d-a642-ba697932c201",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.variables.set(\"titleContent1\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2c1e9ae7-ccda-4691-8eba-fdd15afe8f92",
														"exec": [
															"pm.test(\"Title status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"    let title = pm.response.json();",
															"    pm.expect(title.id).to.exist;",
															"    pm.variables.set(\"titleId1\", title.id);",
															"    pm.variables.set(\"titleContent1\", JSON.stringify(title));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{titleContent1}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create 1st Piece - Received",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d43188d3-1991-4d58-a499-12b0697bb710",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.globals.set(\"poLineIdToCreatePiece\", utils.getLastPoLineId());",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    piece.titleId = pm.variables.get(\"titleId1\");",
													"    piece.locationId = pm.environment.get(\"locationId1\");",
													"    pm.globals.set(\"pieceRecordAwaiting1\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6adeb4c-cf8c-45d4-8301-416e7f0c3bdc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pieceId1ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function () {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										},
										"description": "MODORDERS-173 - ensure receiptStatus consistency between piece and poLine"
									},
									"response": []
								},
								{
									"name": "Create 2nd Piece - Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62fa9454-df07-46e9-bd02-eb1df9fba1ff",
												"exec": [
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    piece.caption = \"Tutorial Volume 99\";",
													"    piece.comment = \"Special Edition II\";",
													"    piece.format = \"Physical\";",
													"    piece.itemId = \"522a501a-56b5-48d9-b28a-3a8f02482d97\";",
													"    piece.receivingStatus = \"Expected\";",
													"    piece.supplement = true;",
													"    piece.receivedDate = \"2018-10-10T00:00:00.000+0000\";",
													"    piece.titleId = pm.variables.get(\"titleId1\");",
													"    piece.locationId = pm.environment.get(\"locationId1\");",
													"    pm.globals.set(\"pieceRecordAwaiting2\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f3fb34fc-b2aa-4215-9fc6-475351814293",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pieceId2ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function () {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting2}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 1st piece - to Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "662abaef-1df1-4e89-a2d9-1bf7cb445e7f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let pieceId1ToUpdate = pm.variables.get(\"pieceId1ToUpdate\");",
													"utils.sendGetRequest(\"/orders-storage/pieces/\" + pieceId1ToUpdate, function (err, res) {",
													"    piece = res.json();",
													"    let receivingStatus = piece.receivingStatus;",
													"    console.log(\"receivingStatus storage: \" + receivingStatus);",
													"});",
													"",
													"var piece1 = {};",
													"piece1 = JSON.parse(pm.globals.get(\"pieceRecordAwaiting1\"));",
													"",
													"// Update piece1 receivingStatus to Expected",
													"piece1.receivingStatus = \"Expected\"; // Received -> Expected will trigger event",
													"",
													"// Use this pieceIdToUpdate to delete in next delete request",
													"pm.variables.set(\"updatedPieceRecordAwaiting1\", JSON.stringify(piece1));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e5ed75f1-0540-4b0e-b88b-9ebea1bb2f3f",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPieceRecordAwaiting1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all pieces by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e649a025-6b2f-4935-b3a9-7164ff911aba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4f270d8b-bb83-48e7-b7a2-f358df03677c",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces[0].receivingStatus).to.equal(\"Expected\");",
													"    pm.expect(jsonData.pieces[1].receivingStatus).to.equal(\"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdToCreatePiece}}"
												}
											]
										},
										"description": "GET /orders-storage/pieces requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get PoLine by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "006553c7-b3f3-4e0a-821d-1f009c897b36",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0e095025-e924-485f-95ac-7eebe43d2d6d",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    ",
													"    // All pieces receiving status is \"Expected\" so receiptStatus should be \"Awaiting Receipt\"",
													"    pm.expect(jsonData.receiptStatus).to.equal(\"Awaiting Receipt\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineIdToCreatePiece}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete first piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b82963fe-ca16-4a9c-9c02-15c525bf2339",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77bb775d-1218-482d-9bc1-67cc1e8f5038",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId1ToUpdate\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								},
								{
									"name": "Delete second piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4649478a-7b5e-4d4c-ab77-b0b84c71b7e9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "40d69861-476f-4e18-820e-1162150b3ad1",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId2ToUpdate\");",
													"pm.globals.unset(\"poLineIdToCreatePiece\");",
													"pm.globals.unset(\"pieceRecordAwaiting1\");",
													"pm.globals.unset(\"pieceRecordAwaiting2\");",
													"pm.globals.unset(\"updatedPieceRecordAwaiting1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId2ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId2ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								},
								{
									"name": "delete title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a6125054-a205-4e24-9d12-3123e95a11a3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7f3eba0c-52d4-4da0-86f7-8170e7a8573e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles",
												"{{titleId1}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f85de179-49cb-4ce8-a590-48b677642ac3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c24142e8-130c-45ad-a077-d50216b5b3d2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5777dbb3-6c24-4a31-9782-76f9a80651e2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1798d129-25d6-49dd-bd6d-58e8b28850c2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Open order",
					"item": [
						{
							"name": "Open order flows",
							"item": [
								{
									"name": "Simple open order flow",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e729fc27-b53e-4faf-96ef-250f6dabb0a6",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5287d27f-1111-4f11-910e-6f77e9c4f3c6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder410-1\", beOrder);",
															"    pm.variables.set(\"beOrderId410-1\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber410-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c83bf725-69e5-404e-a434-b9810d760ad9",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "398244e2-14ab-43e9-9777-54251e4182f6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine410-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId410-1\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId410-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db50bd67-49dd-4b55-abdd-caa5c7182dcf",
														"exec": [
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId410-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber410-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId410-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId410-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-1 Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fa072335-a8e2-4b62-b056-438f0cd8e20f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrder410-1\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.variables.set(\"fundEncumbranceId-1-410-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId410-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId410-1}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2b329d27-ce87-46a4-98d0-1c691d7d5840",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"1MIX1EL\";",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7c0c5c07-fcce-4d0d-b7ac-6ae82b89b307",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Partially Paid\"));",
											"utils.verifyOrderCalculatedInfo(jsonData);",
											"",
											"pm.test(\"Each order has these fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"completeOpenOrderId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"    // the approval details are set on OPEN if \"approval required\" is set to false",
											"    pm.expect(jsonData.approvalDate).to.exist;",
											"    pm.expect(jsonData.approvedById).to.exist;",
											"  ",
											"});",
											"  utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "917c8cfd-ecd7-4130-ac26-5d9e9345e40b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order = utils.prepareOrder(res.json());",
											"    pm.variables.set(\"po_one_physical_one_electronic_lines\", JSON.stringify(order));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b8f560f8-a8ef-4543-aca9-ceb90eb894e1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"physElecOpenOrderId\", order.id); ",
											"});",
											"",
											"pm.test(\"2 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"    order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"    order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Fully Paid\"));",
											"});",
											"    utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_one_physical_one_electronic_lines}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Create Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a96b4c55-da7a-440d-8010-0b1583875fcb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
											"        method: \"GET\"",
											"    },",
											"    function (err, res) {",
											"        let order  = res.json();",
											"        order.workflowStatus = \"Open\";",
											"        order = utils.deletePoNumber(order);",
											"        for(var i = 0; i < order.compositePoLines.length; i++) {",
											"    \t  order.compositePoLines[i].receiptStatus = \"Receipt Not Required\";",
											"    \t  order.compositePoLines[i].paymentStatus = \"Pending\";",
											"        }",
											"        ",
											"        pm.variables.set(\"orderWithReceiptNotRequiredLines\", JSON.stringify(utils.prepareOrder(order)));",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fbfa34ff-9e43-4c21-9bbb-5160d845fddc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Receipt Not Required\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"orderWithReceiptNotRequiredId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithReceiptNotRequiredLines}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\n[MODORDERS-304](https://issues.folio.org/browse/MODORDERS-304). Even though Receiving is not required, Inventory interaction happens based on CreateInventory setting"
							},
							"response": []
						},
						{
							"name": "Create Open order for receiving history test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "20513454-4f71-4cba-b29d-b775ea3aa045",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = false;",
											"    order = utils.deletePoNumber(order);",
											"    pm.variables.set(\"poListedPrintMonographForReceivingHistory\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51710514-3185-4dee-999f-e25e382f745f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"receivingHistoryPoId\", order.id); ",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"});",
											"",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForReceivingHistory}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total, checkinItems is `true`.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `false`."
							},
							"response": []
						},
						{
							"name": "Create Open order. POLines with checkinItems = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fd1a8447-99ae-4a46-bb25-5ee8021ec7f6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1N\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = true;",
											"    ",
											"    pm.variables.set(\"poListedPrintMonographForPartialCheckIn\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "290ebcde-c69a-4782-9fa5-15c0710a2228",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poToCheckinItemsId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForPartialCheckIn}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						},
						{
							"name": "Create order all po lines checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "591b443a-be34-46d3-bdaf-c57e450e84f0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1NPHYELEC\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = true;",
											"    order.compositePoLines[1].checkinItems = true;",
											"",
											"    // Set new product ids to be sure that new instances will be created",
											"    order.compositePoLines[0].details.productIds.pop();",
											"    ",
											"    order.compositePoLines[0].titleOrPackage = \"Hey! Just API testing checkin\"",
											"    order.compositePoLines[1].titleOrPackage = \"Hey! Just API testing checkin with no items\"",
											"    ",
											"    //set create Inventory so that no item interaction is necessary",
											"    order.compositePoLines[1].eresource.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"poForTestingCheckin\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66f5c3af-6382-4464-9249-6f9be6b26844",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => {",
											"     utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    if(line.orderFormat === \"Physical Resource\"){",
											"        pm.globals.set(\"checkin_physical_poLine\", line);",
											"    }else{",
											"        pm.globals.set(\"checkin_electronic_poLine\", line);",
											"    }",
											"    });",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poAllPoLineCheckin\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poForTestingCheckin}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order. POLines with isPackage = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "74a37435-4b84-460b-a1e2-e8e9a9ad5be7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    let line = order.compositePoLines[0];",
											"    line.isPackage = true;",
											"    // Set checkingItems flag",
											"    order.compositePoLines = [line];",
											"    ",
											"    pm.variables.set(\"poListedPrintMonographForPartialCheckIn\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0561491b-b294-4217-8a47-541d51137f5d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory not entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 1);",
											"});",
											"",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForPartialCheckIn}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Unopen order",
					"item": [
						{
							"name": "Unopen workflows",
							"item": [
								{
									"name": "Unpopen order and add addition POL and 1 Fund",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "be616fdf-75ae-4f2a-965e-2c6031c6fed5",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "83d75ffd-428a-43e8-ad2b-08fe87840f63",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder177-1\", beOrder);",
															"    pm.variables.set(\"beOrderId177-1\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber177-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0b79ac8e-2bad-4428-9e40-c64c839c29e0",
														"exec": [
															"console.log(\"Create first line for PO : \" + pm.variables.get(\"beOrderId177-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "769c38bb-2a97-441b-b185-92d2a03af852",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line 1 is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine177-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId177-1\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId177-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "98e2809a-4d3e-4ce4-aae1-c18f78172646",
														"exec": [
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId177-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber177-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId177-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId177-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ff476c2a-1ca5-4414-8930-aba0f0708278",
														"exec": [
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId177-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber177-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId177-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId177-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order after unOpen",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "882225f6-6448-4e75-a2c7-4c312d46cd84",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after unOpen\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(\"Purchase order : \" + beOrder.id);",
															"    pm.variables.set(\"beOrde177-1\", beOrder);",
															"    pm.environment.set(\"bePOLEncumbrance177-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.expect(beOrder.compositePoLines[0].purchaseOrderId).to.equal(beOrder.id);",
															"    pm.expect(beOrder.workflowStatus).to.equal(\"Pending\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId177-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId177-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "15e22b44-6a68-4651-9c6e-3374071622a8",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Check first encumbrance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "074e4170-24b3-4aa3-8b4b-26e55808d6e6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance177-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance177-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d909c0b4-28f3-442e-aeef-452b19d0d838",
														"exec": [
															"console.log(\"Create second line for PO : \" + pm.variables.get(\"beOrderId177-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1baa0168-96d2-4fab-9183-4ddcfcccef3a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line 2 is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine177-2\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId177-2\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId177-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReOpen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cc6d96f0-91e3-4dd9-9c2e-10b22481f5ac",
														"exec": [
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId177-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber177-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 7.2,\n  \"totalItems\": 4,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId177-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId177-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order after Open",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "114a1321-ba53-4829-8b4c-e34adc584551",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(\"Purchase order : \" + beOrder.id);",
															"    pm.variables.set(\"beOrde177-1\", beOrder);",
															"    pm.expect(beOrder.workflowStatus).to.equal(\"Open\");",
															"    pm.expect(beOrder.totalEstimatedPrice).to.equal(7.2);",
															"    pm.expect(beOrder.totalItems).to.equal(4);",
															"    pm.environment.set(\"bePOLEncumbrance177-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.expect(beOrder.compositePoLines[0].purchaseOrderId).to.equal(beOrder.id);",
															"    pm.environment.set(\"bePOLEncumbrance177-2\", beOrder.compositePoLines[1].fundDistribution[0].encumbrance);",
															"    pm.expect(beOrder.compositePoLines[1].purchaseOrderId).to.equal(beOrder.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId177-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId177-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get after reopen encumbrance by id 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8a72cb0-b67f-4e0c-b409-f73a7e2a9229",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Check first encumbrance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0c60c66a-8d21-4ee4-92bd-abccc680db39",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance177-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance177-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get after reopen encumbrance by id 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "488a16fa-9a6d-46f9-8816-2352adbd7f07",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Check second encumbrance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "53386ac5-92d0-4679-a44e-8b8a56bc1a99",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance177-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance177-2}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7f709229-2d4a-461e-93df-9c3e11c47883",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6ef17444-f3e7-4339-8cc9-b9cf19e30286",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Unpopen order with 1POL and 1 Fund",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fb23fde2-ed95-4d90-bee6-b7eaaa8822f5",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ff8b566f-866a-4042-8c72-3f072563a4b4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder338-1\", beOrder);",
															"    pm.variables.set(\"beOrderId338-1\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber338-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3521c071-8a2b-4ab7-8df9-c93497dd398e",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dcc636e4-c0c1-4b3a-a047-c47370432c9e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine338-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId338-1\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d56ecdde-207e-4e04-a875-695102bbce3a",
														"exec": [
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "49a8dd3a-6102-411d-acd3-639835693c48",
														"exec": [
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a2f5fde-71a5-4f45-9dc8-5ae436d30eb2",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrde338-1\", beOrder);",
															"    pm.environment.set(\"bePOLEncumbrance338-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d1695691-7da6-4e4c-bfd8-1e120da2389c",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"     pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2f7d3280-97e3-469c-a7f2-611c979d0a34",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance338-1}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f0f57dbf-08f4-4363-abbe-39b3d7fac92c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d55438e1-62c1-40a3-968e-5cf507d7dcca",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "From Unpopen to Open with 1POL and 1 Fund and POL quantity changed",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f98123b6-fed4-41fd-b5df-8f786a3a11f4",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4adbd95e-a451-4e1b-83cd-546cda5d50d0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder338-2\", beOrder);",
															"    pm.variables.set(\"beOrderId338-2\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber338-2\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f33eab6f-8a6b-4186-b5db-355f26c53e92",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5cb0afeb-5df2-447d-9340-d51ccf72ffc3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine338-2-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId338-2-1\", beOrderLine.id);",
															"    pm.variables.set(\"poLineNumber338-2-1\", beOrderLine.poLineNumber);",
															"    console.log(\"Id pol : \" + pm.variables.get(\"beOrderLineId338-2-1\"));",
															"});",
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-2}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1dd0a286-4538-4ee7-98bc-36b03576944d",
														"exec": [
															"setTimeout(function(){}, 1100);\r",
															"let utils = eval(globals.loadUtils);\r",
															"let order = {};\r",
															"\r",
															"pm.test(\"Order is open\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-2-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a62f90b2-8516-4dce-98cb-c2166cac4446",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrder338-2\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.variables.set(\"fundEncumbranceId338-2-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-2-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2d261f3f-334d-487e-a3d5-3b5d195207a9",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    transactionArray = pm.response.json();\r",
															"    transactionArray.transactions.forEach(encumbrance => {\r",
															"        pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"        pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"        pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9a163d27-9ae2-4c67-8255-11afee196fc6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0b8a1fec-665f-41cc-be5e-bea4727ea594",
														"exec": [
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ec8a39e8-184d-4a98-8e38-1c2693ff6608",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4e6ae114-6548-41aa-8371-274892243391",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId338-2-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId338-2-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change quantity and cost for product in order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e0a45e7-48c9-467a-888b-af0f91096207",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2b8e6192-f00b-4ced-940e-e29121da619a",
														"exec": [
															"console.log(\"POL id\" + pm.variables.get(\"beOrderLineId338-2-1\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n      \"id\": \"{{beOrderLineId338-2-1}}\",\r\n      \"checkinItems\": false,\r\n      \"acquisitionMethod\": \"Approval Plan\",\r\n      \"alerts\": [],\r\n      \"claims\": [],\r\n      \"collection\": false,\r\n      \"contributors\": [\r\n        {\r\n          \"contributor\": \"Moutinho, Luiz\",\r\n          \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\r\n        }\r\n      ],\r\n      \"cost\": {\r\n        \"listUnitPrice\": 2.0,\r\n        \"currency\": \"USD\",\r\n        \"discount\": 10.0,\r\n        \"discountType\": \"percentage\",\r\n        \"quantityPhysical\": 3,\r\n        \"poLineEstimatedPrice\": 5.4\r\n      },\r\n      \"details\": {\r\n        \"productIds\": [\r\n          {\r\n        \t\"productId\": \"3319643991\",\r\n    \t\t\"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n            \"qualifier\": \"\"\r\n          }\r\n        ],\r\n        \"subscriptionInterval\": 0\r\n      },\r\n      \"eresource\": {\r\n        \"activated\": false,\r\n        \"createInventory\": \"Instance, Holding\",\r\n        \"trial\": false,\r\n        \"accessProvider\": \"{{activeVendorId}}\"\r\n      },\r\n      \"fundDistribution\": [\r\n        {\r\n          \"encumbrance\": \"{{fundEncumbranceId338-2-1}}\",\r\n          \"fundId\": \"{{fundId}}\",\r\n          \"distributionType\": \"percentage\",\r\n          \"value\": 100.0\r\n        }\r\n      ],\r\n      \"isPackage\": false,\r\n      \"locations\": [\r\n        {\r\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\r\n          \"quantity\": 3,\r\n          \"quantityPhysical\": 3\r\n        }\r\n      ],\r\n      \"orderFormat\": \"Physical Resource\",\r\n       \"paymentStatus\" : \"Awaiting Payment\",\r\n      \"physical\": {\r\n        \"createInventory\": \"None\",\r\n    \t\"materialSupplier\": \"{{activeVendorId}}\",\r\n    \t\"materialType\": \"{{materialTypeId}}\",\r\n        \"volumes\": []\r\n      },\r\n      \"poLineNumber\": \"{{poLineNumber338-2-1}}\",\r\n      \"publisher\": \"Palgrave Macmillan\",\r\n      \"purchaseOrderId\": \"{{beOrderId338-2}}\",\r\n     \"receiptStatus\" : \"Awaiting Receipt\",\r\n      \"reportingCodes\": [],\r\n      \"rush\": false,\r\n      \"source\": \"User\",\r\n      \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\r\n      \"vendorDetail\": {\r\n        \"instructions\": \"\",\r\n        \"vendorAccount\": \"BRXXXXX-01\"\r\n      },\r\n      \"metadata\": {\r\n        \"createdDate\": \"2020-06-03T07:32:15.794+0000\",\r\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\r\n        \"updatedDate\": \"2020-06-03T07:38:34.754+0000\",\r\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\r\n      }\r\n    }"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{beOrderLineId338-2-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines",
														"{{beOrderLineId338-2-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-2-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "33eeaada-5f20-4054-b1ba-e48c2772442a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrder338-2\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.variables.set(\"fundEncumbranceId338-2-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e86cb389-b8ba-42bf-8ecc-82e5b7cc07cf",
														"exec": [
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-2-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d7dae84e-6265-40b0-9341-612bc5cf2fa0",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    transactionArray = pm.response.json();\r",
															"    transactionArray.transactions.forEach(encumbrance => {\r",
															"        pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"        pm.expect(encumbrance.amount).to.equal(5.4);\r",
															"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(5.4);\r",
															"        pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"    });\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "23c6c4fd-6bff-48c0-ad59-0ebbb94444fc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d006e1f8-3b7d-4913-a100-517d7b0f0eda",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85253966-bdba-4904-abaf-785e868ca907",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "From Unpopen to Open with 1POL and 1 Fund and fund changed",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "319c04e9-62d7-4c46-a0e8-370bd5bdab4c",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d4e4fc71-cc73-476d-b6c3-034e01f67c79",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    pm.environment.set(\"beOrderId338-3\", beOrder.id);",
															"    pm.environment.set(\"beOrderNumber338-3\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5d566053-9967-4158-b7d0-d483d13bd289",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-2\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "308a7306-f95c-45f2-a4ea-dddecb83e5a8",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"beOrderLine338-3\", beOrderLine);",
															"    pm.environment.set(\"beOrderLineId338-3\", beOrderLine.id);",
															"    pm.environment.set(\"poLineNumber338-3\", beOrderLine.poLineNumber);",
															"});",
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-3}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7b049dd4-3757-4873-827c-842a09331e17",
														"exec": [
															"setTimeout(function(){}, 1500);\r",
															"let utils = eval(globals.loadUtils);\r",
															"let order = {};\r",
															"\r",
															"pm.test(\"Order is open\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"setTimeout(function(){}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8fb77f2b-0be4-4298-9538-81d5d8adccca",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId-1-338-3\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d826e793-7fa5-4172-aa75-4593b11934ff",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ec3dee43-1bba-4a56-9439-40d7a51e5dcf",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c145fa75-5189-4ab0-99f6-9a56be15ef95",
														"exec": [
															"setTimeout(function(){}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8aa55d6a-fea4-4842-95b7-183aa28efd12",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "dbabef60-d974-4f17-8f7e-24d1f7482b5b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change fund in order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4bab3457-8750-4201-b73f-769822c8e75e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "00f23c60-e8cb-4706-bcac-86dca144096e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"setTimeout(function(){}, 1500);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n      \"id\": \"{{beOrderLineId338-3}}\",\r\n      \"checkinItems\": false,\r\n      \"acquisitionMethod\": \"Approval Plan\",\r\n      \"alerts\": [],\r\n      \"claims\": [],\r\n      \"collection\": false,\r\n      \"contributors\": [\r\n        {\r\n          \"contributor\": \"Moutinho, Luiz\",\r\n          \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\r\n        }\r\n      ],\r\n      \"cost\": {\r\n        \"listUnitPrice\": 2.0,\r\n        \"currency\": \"USD\",\r\n        \"discount\": 10.0,\r\n        \"discountType\": \"percentage\",\r\n        \"quantityPhysical\": 3,\r\n        \"poLineEstimatedPrice\": 5.4\r\n      },\r\n      \"details\": {\r\n        \"productIds\": [\r\n          {\r\n        \t\"productId\": \"3319643991\",\r\n    \t\t\"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n            \"qualifier\": \"\"\r\n          }\r\n        ],\r\n        \"subscriptionInterval\": 0\r\n      },\r\n      \"eresource\": {\r\n        \"activated\": false,\r\n        \"createInventory\": \"Instance, Holding\",\r\n        \"trial\": false,\r\n        \"accessProvider\": \"{{activeVendorId}}\"\r\n      },\r\n      \"fundDistribution\": [\r\n        {\r\n          \"encumbrance\": \"{{fundEncumbranceId-1-338-3}}\",\r\n          \"fundId\": \"{{fundId-2}}\",\r\n          \"distributionType\": \"percentage\",\r\n          \"value\": 100.0\r\n        }\r\n      ],\r\n      \"isPackage\": false,\r\n      \"locations\": [\r\n        {\r\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\r\n          \"quantity\": 3,\r\n          \"quantityPhysical\": 3\r\n        }\r\n      ],\r\n      \"orderFormat\": \"Physical Resource\",\r\n       \"paymentStatus\" : \"Awaiting Payment\",\r\n      \"physical\": {\r\n        \"createInventory\": \"None\",\r\n    \t\"materialSupplier\": \"{{activeVendorId}}\",\r\n    \t\"materialType\": \"{{materialTypeId}}\",\r\n        \"volumes\": []\r\n      },\r\n      \"poLineNumber\": \"{{poLineNumber338-3}}\",\r\n      \"publisher\": \"Palgrave Macmillan\",\r\n      \"purchaseOrderId\": \"{{beOrderId338-3}}\",\r\n     \"receiptStatus\" : \"Awaiting Receipt\",\r\n      \"reportingCodes\": [],\r\n      \"rush\": false,\r\n      \"source\": \"User\",\r\n      \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\r\n      \"vendorDetail\": {\r\n        \"instructions\": \"\",\r\n        \"vendorAccount\": \"BRXXXXX-01\"\r\n      },\r\n      \"metadata\": {\r\n        \"createdDate\": \"2020-06-03T07:32:15.794+0000\",\r\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\r\n        \"updatedDate\": \"2020-06-03T07:38:34.754+0000\",\r\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\r\n      }\r\n    }"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{beOrderLineId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines",
														"{{beOrderLineId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a86b0d8f-46c7-452f-890d-da05569efbd0",
														"exec": [
															"setTimeout(function(){}, 1100);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "31c386fa-51aa-4e20-97c8-f43dc5a87cb2",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId338-2-3\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get released encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a12ccdae-696b-4f1f-acb1-7d04764476f8",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Released\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "603c8722-ec63-4c26-bda0-78e7c96571f7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get new encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c97e9c6c-f22b-4089-a044-b68858157aa3",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(5.4);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(5.4);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c9c0ed9b-4fd6-43fb-956a-dec8b5b9207a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId338-2-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId338-2-3}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "17ac2477-ee65-4da0-995b-0a8bb49e83d4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7d599fb-f750-4fe7-b30f-d17e4f05367d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d39e287-d764-40dd-91e5-64105291f098",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"UN0P3N\";",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.environment.set(\"orderForUnopenFlow\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be401215-95ae-46f1-8405-22b9ba129cd3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"orderForUnopenFlowId\", jsonData.id);",
											"    pm.environment.set(\"orderForUnopenFlowBody\", jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForUnopenFlow}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Unopen order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "218dcde2-3fcd-4ad3-9cd2-ae597546dc66",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let orderForUnopen = pm.environment.get(\"orderForUnopenFlowBody\");",
											"orderForUnopen.workflowStatus = \"Pending\";",
											"",
											"pm.variables.set(\"orderForUnopenBody\", JSON.stringify(orderForUnopen));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2382569d-2a72-4882-a30e-dda73c79c032",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForUnopenBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUnopenFlowId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUnopenFlowId}}"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund Distribution",
					"item": [
						{
							"name": "Open order 422 - fund distri total greater than poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e674a09-3cd5-4eaf-802a-25ad7f770899",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 100;",
											"    order.compositePoLines[0].fundDistribution[1].value = 100;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "480841c7-d9a9-42db-8670-bfb9306f21c7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var error = {};",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    error = pm.response.json();",
											"    pm.expect(error).to.exist;",
											"    pm.expect(error.errors[0].code).to.equal(\"incorrectFundDistributionTotal\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44bc1f9c-48fd-4473-b6ab-8319b0864044",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = res.json();",
											"",
											"    pm.variables.set(\"delOrderWithPoNumber\", order.poNumber);",
											"    ",
											"    utils.sendGetRequest(\"/orders/composite-orders?query=poNumber=\" + pm.variables.get(\"delOrderWithPoNumber\"), function (err, res) {",
											"         let orderToDelete = res.json();",
											"         pm.variables.set(\"delOrderId\", orderToDelete.purchaseOrders[0].id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "42bc580d-b5a7-41ae-8a20-9f669c836f19",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Open order 422 - fund distri total less than poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "02b888f8-eafa-4760-b4f7-6872ad6d217d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 90;",
											"    order.compositePoLines[0].fundDistribution[1].value = 9;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66ac466b-11eb-4d24-80a3-db912671b921",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var error = {};",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    error = pm.response.json();",
											"    pm.expect(error).to.exist;",
											"    pm.expect(error.errors[0].code).to.equal(\"incorrectFundDistributionTotal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ba9f6cdc-5bcf-42db-8055-3dced63fa80e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = res.json();",
											"    pm.variables.set(\"delOrderWithPoNumber\", order.poNumber);",
											"    ",
											"    utils.sendGetRequest(\"/orders/composite-orders?query=poNumber=\" + pm.variables.get(\"delOrderWithPoNumber\"), function (err, res) {",
											"        let orderToDelete = res.json();",
											"        pm.variables.set(\"delOrderId\", orderToDelete.purchaseOrders[0].id);",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "14518a5a-8d0c-40cc-bb09-fa1b2bfd4dad",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Open order 201 - fund distri total equals poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9525a618-feb7-4fce-a083-539bf5e220a9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 90;",
											"    order.compositePoLines[0].fundDistribution[1].value = 10;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d759012e-c713-4fe8-89c9-b0839e50c91e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.environment.set(\"delOrderId201\", order.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ebb8db32-4e10-4ec6-881d-440daa0f0e70",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a5ae4cf-8b08-494e-80af-82050404418a",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId201}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId201}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Should recieve Pieces if item.status = \"Order closed\" and order.workflowStatus = \"Closed\"",
							"item": [
								{
									"name": "Create order One-Time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ddb43b02-57b1-45ce-a136-43b5d06c864f",
												"exec": [
													"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
													"if (bePoNumberNum === null) {",
													"    pm.environment.set(\"poNumberNum\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "badcd6d7-a25b-4018-bd53-b0c995c04c95",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrder = pm.response.json();",
													"    pm.environment.set(\"order\", beOrder);",
													"    pm.environment.set(\"orderId\", beOrder.id);",
													"    pm.environment.set(\"orderNumber\", beOrder.poNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"poNumber\": \"45\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add order lines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba3055e3-5374-4761-a8d8-68a3885266a8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrderLine = {};",
													"",
													"pm.test(\"Order line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrderLine = pm.response.json();",
													"    pm.environment.set(\"orderLine\", beOrderLine);",
													"    pm.environment.set(\"orderLineId\", beOrderLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{orderId}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Open order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49b977ea-d993-48e2-8a25-154b531afc4a",
												"exec": [
													"setTimeout(function(){}, 1100);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{orderId}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order is OPen",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Close order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02886862-3e30-4f94-b2a4-44cbf776b33f",
												"exec": [
													"setTimeout(function(){}, 1100);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{orderId}}\",\n  \"approved\": false,\n  \"approvedById\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n  \"approvalDate\": \"2020-04-14T11:31:47.034+0000\",\n  \"dateOrdered\": \"2020-04-14T11:31:47.034+0000\",\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Closed\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:31:48.038+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  },\n  \"closeReason\": {\n    \"reason\": \"Ceased\",\n    \"note\": \"\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order is Close",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Recieve piece(Check-in)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df1195f9-5490-4025-bd05-96805b376287",
												"exec": [
													"pm.test(\"Pieces is retrieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    let piecesArray = pm.response.json();",
													"    pm.environment.set(\"pieceId1\", piecesArray.pieces[0].id);",
													"    console.log(piecesArray.pieces[0].id)",
													"    pm.environment.set(\"pieceId2\", piecesArray.pieces[1].id);",
													"    console.log(piecesArray.pieces[1].id)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"value": "no-cache",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{orderLineId}} sortby locationId",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{orderLineId}} sortby locationId"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Recieve piece(Check-in)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f316f1b2-117b-40f7-baac-6c10368b2d78",
												"exec": [
													"pm.test(\"Piece is recieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    receivingResultsArray = pm.response.json();",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[0].pieceId).to.be.equal( pm.environment.get(\"pieceId1\"));",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[0].processingStatus.type).to.be.equal(\"success\");",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[1].pieceId).to.be.equal( pm.environment.get(\"pieceId2\"));",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[1].processingStatus.type).to.be.equal(\"success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"toBeCheckedIn\": [\n    {\n      \"poLineId\": \"{{orderLineId}}\",\n      \"checkedIn\": 2,\n      \"checkInPieces\": [\n        {\n          \"id\": \"{{pieceId1}}\",\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n          \"itemStatus\": \"Order closed\"\n        },\n        {\n          \"id\": \"{{pieceId2}}\",\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n          \"itemStatus\": \"Order closed\"\n        }\n      ]\n    }\n  ],\n  \"totalRecords\": 2\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"check-in"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Receive all pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ccf9b6b6-0d56-4ff3-adea-737563793412",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7a7b0a05-7be7-4dba-8304-e86f920c7d06",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "602e1e25-b0e2-4a9a-9090-4a8f2515ff67",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71a08a8a-5861-4d66-8f64-7b536c5dce73",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert all received piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive 10 pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "841bb57b-1ced-4b82-bc02-ffe70f755fea",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\", 10);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "81df4415-e515-4a64-951e-5d94e6922642",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 10);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 10, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives 10 piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e354959-a4eb-450f-86d0-66cdc329d0fe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61c84892-8e1a-488c-91ff-1494d0457db5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 10 received piece records back to `Expected` and Inventory items back to `On order` for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4e51539d-7314-4f0a-b78c-1b34133ee09a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ffacdb6-d625-4914-b4bd-85e6c807f358",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "850c4c77-0abd-4622-ac15-8701cd2c1633",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c13f11c1-5374-4ccc-b015-e9e50bfe7866",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 10 pieces, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Revert 2 received pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0b2dd459-9744-41fc-a37d-c49794289e86",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\", 2);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24227b76-5bc2-4497-929b-90964748feab",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 2, \"Expected\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 2 received piece records back to `Expected` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1220b445-4e4d-44c3-9757-ba3b8066645d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5c0b1756-5332-41c9-899c-e84d9c4c11d5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 3 pieces, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Revert 1 received piece for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac89ac8f-3071-4c56-88a2-64eb82ae6b7f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9ee142c1-7358-404b-856e-ad2063df3400",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, receivingHistoryTotalRecords - 1);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3534a94f-d561-4bc9-af54-235493e0cec9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.completeOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c5bd8903-c21c-4fc4-be1d-9ae569843500",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with P/E Mix and Electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will be still `Open` after this operation because all PO Lines have `Partially Paid` payment status (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bec4d540-2d93-4d43-8b91-bb0fe8c5c0e5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.physElecOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a8efd992-b43d-4f03-bdc6-ee003aca2ddb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with physical and electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will become `Closed` after this operation because all PO Lines have `Fully Paid` payment status and `Fully Received` receipt status once all piece records are received (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with 4 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f5ecb899-2c6d-48e5-9c60-ed7945f3d5b2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.anotherCompleteOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0fda0902-7dae-4a92-af44-5b7310f0823c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by requests from `Pending To Open order` folder (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).\nThe order will be closed after this operation (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Close orders updating payment status of each PO Line",
					"item": [
						{
							"name": "Get order with 4 lines and update each one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be04a4eb-ab56-4ef0-b2ee-05f14c4cc150",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "60659928-6646-434a-ae7c-2caf2dedeca6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.anotherCompleteOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].receiptStatus = \"Receipt Not Required\";",
											"        //let locations = lines[i].locations;",
											"       // for (let j = 0; j < locations.length; j++) {",
											"       //     locations[j].quantity = 9999;",
											"       // }      ",
											"    }",
											"        ",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(4);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get order with receipt not required and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "602c516d-35cd-4156-a9cc-ffb4107dd9b1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "affbeb9f-db39-466f-9ac0-a7e6836b576c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].receiptStatus = \"Receipt Not Required\";",
											"        //let locations = lines[i].locations;",
											"        //for (let j = 0; j < locations.length; j++) {",
											"        //    locations[j].quantity = 9999;",
											"        //}      ",
											"    }",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get Mixed order and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5a3a4abb-6e07-4260-bfc8-8360511a3528",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9a9ec6cb-736b-4d74-95d4-d484e0e22319",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].receiptStatus = \"Receipt Not Required\";",
											"        //let locations = lines[i].locations;",
											"        //for (let j = 0; j < locations.length; j++) {",
											"        //    locations[j].quantity = 9999;",
											"        //}    ",
											"    }",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "Update PO Lines' payment statuses of `Open` orders so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218)).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5100c55e-ed62-47f1-ae82-e5ef7b43541c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c3640000-0686-4926-b0a9-2401a4946838",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check closed orders and re-open",
					"item": [
						{
							"name": "Order with 4 PO Lines should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d0bd6408-38fe-4eeb-8767-28a3b1f9265c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61795f56-7c06-4998-8e58-9e35754b4518",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Cancelled\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2bf79906-7e3c-427e-a003-d2745d356d3a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "663ca921-e5e8-46ca-8fdf-037a5b2835f2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Partially Paid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "54944346-1f05-4ced-874f-afeb22d95359",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4c2b97cc-fdfc-4404-b736-de4cc00a2499",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order: revert 1 received piece for Electronic line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "271a5d26-8dea-480c-b982-28ce1929ff96",
										"exec": [
											"eval(globals.loadUtils).prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "27cb5a21-4b12-491d-9c95-f8323a269910",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has successfully reverted piece\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Order with 4 PO Lines should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1747b6e7-69cd-465f-b622-bf34e1f5dbdd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d92ffeb6-3ea5-4f95-bae6-a2fa6c5eb8b0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff74aa02-76e3-4f9c-9789-8ca4763eed61",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9e57f936-c3f8-4ca1-9de8-85be6598bfb8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7fe3c850-3aff-4954-a0a3-74c3636318b7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "adbb3c78-7796-4fb9-8d6a-a7975e86c444",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "The folder contains sets of requests:  \n1. Get orders and verify that their workflow status is `Closed`. If this is true, modify one of PO Line's payment status so the order becomes `Open` eventually.\n2. Roll back one of received piece so the order becomes `Open` eventually.\n3. Verify that orders were successfully re-opened by operations described above.\n\nSee [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218) for more details.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "546913bc-46e6-402a-90ef-d210e04fb844",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bcd96245-2fa2-4bdf-9e4c-cbec59ae285c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate New POnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "88071235-5885-4154-a581-07b15642ddb6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ada28da-7fca-4fb4-b898-f45a4b9f574e",
										"exec": [
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"NewPO111NewPO\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 204 if a valid and unique PO Number is given"
							},
							"response": []
						},
						{
							"name": "Get poNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0fe02b3-476f-43de-bb4d-2a07bf7b17ae",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify response status\r",
											"pm.test(\"First response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Validate PoNumber schema\r",
											"var schema = JSON.parse(pm.environment.get(utils.schemaPrefix + \"po_number.json\"));\r",
											"pm.test('PoNumber schema is valid', function() {\r",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//3.  Verify po number generation process\r",
											"utils.sendGetRequest(\"/orders/po-number\", function (err, res) {\r",
											"    pm.test(\"Second response status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Second request po number : \" + res.json().poNumber);\r",
											"\r",
											"        pm.test(\"po numbers are not same\", function () {\r",
											"            pm.expect(jsonData.poNumber).to.not.eql(res.json().poNumber);\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b43fd10e-b34e-4b03-9d34-7f8d89217352",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number"
									]
								},
								"description": "GET /orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Orders",
					"item": [
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2177aa1-ed19-4d6e-866e-456ef2b8a7e4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eeb1603e-c8e1-41dc-8738-38dff7aefbdc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 3 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.purchaseOrders).to.have.lengthOf.at.least(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders by query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fbd6e133-25aa-4d3b-9afc-9c59a98b9e3f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fca46dd8-5bd7-4554-bd82-c4df25cf61fd",
										"exec": [
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate that response contains orders with proper workflow status\", function () {",
											"    for(var i = 0; i < jsonData.purchaseOrders.length; i++) {",
											"    \tpm.expect(jsonData.purchaseOrders[i].workflowStatus).to.equal(\"Open\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8a71f9f8-0784-4d88-9bf9-2da9d3c9d651",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6cdf084f-b35f-42f9-a6ff-c6001a061ee7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var purchaseOrdersData = {};",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    purchaseOrdersData = pm.response.json();",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"    ",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Validate that response contains orders sorted by dateOrdered ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    let purchaseOrders = pm.response.json().purchaseOrders;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"Validate that PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											"",
											"",
											"    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4b27a8b5-501b-4cbc-8189-844f67dfd261",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "42dc9e8c-e0e9-41e6-b375-e37f9beb20ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Response contains orders sorted by dateOrdered descending\", function () {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.most(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders with date range and nested field sorting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a09b7c23-7d5e-4876-87b1-31c983edd257",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0d20aedd-79d8-4f25-8df6-9a4aa4450244",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment');",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order with metadata.createdDate\", function () {",
											"    let numOfOrdersWithMetadata = 0;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(purchaseOrders[i]).to.have.property(\"metadata\");",
											"        if (purchaseOrders[i].hasOwnProperty('metadata') && purchaseOrders[i].metadata.hasOwnProperty('createdDate')) {",
											"            numOfOrdersWithMetadata++;",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.not.be.below(2);",
											"    pm.expect(numOfOrdersWithMetadata).to.not.be.below(2);",
											"    ",
											"    pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].metadata.createdDate);",
											"    }});",
											"    pm.test(\"Response contains orders in the fixed date range\", function () {",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"    }});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}} sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}} sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Order Lines",
					"item": [
						{
							"name": "Get list of lines by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "787d33d2-7885-48c1-b54d-48e4acafd414",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03f7ba1d-3196-4045-82f9-14d453893841",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 4 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.poLines).to.have.lengthOf.above(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of lines with \"Awaiting Payment\" status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "444d6d30-5b23-4bf4-9ace-7de99794dfaf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53626ffc-632b-4dbf-849b-d0b532c5540f",
										"exec": [
											"pm.test(\"Validate that response contains orders with proper payment status\", function () {",
											"    pm.response.to.have.status(200);",
											"    let poLines = pm.response.json().poLines;",
											"    pm.expect(poLines).to.have.lengthOf.at.least(5);",
											"    poLines.forEach(pol => pm.expect(pol.paymentStatus).to.equal(\"Awaiting Payment\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=10&query=paymentStatus==Awaiting Payment",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "query",
											"value": "paymentStatus==Awaiting Payment"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "070cbad5-46f8-4b23-ab48-16607f0d0f19",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "27b3ee5d-5d12-486f-aa76-58c3a29d7b5e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.test(\"Check if polines sorted by order metadata.createdDate field\", function() {",
											"            if (poLines[i].hasOwnProperty('metadata')) {",
											"                pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"                date = new Date(poLines[i].metadata.createdDate);",
											"            }",
											"        });",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of order lines with date range and nested search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "03ee9a27-b22d-4d4e-ae66-266da597d9a3",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db57d165-cb8e-416e-9f9d-e468bd7db701",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment')",
											"",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.expect(poLines[i]).to.have.property(\"metadata\");",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"        //check polines date range",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"        date = new Date(poLines[i].metadata.createdDate);",
											"",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=physical.createInventory==Instance, Holding, Item AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bedd8dde-06f3-4fcd-80aa-d1e34871181a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d1efd98e-027d-4fa2-bf69-e1a565d971b2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder line response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 PO line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.expect(poLines[i]).to.have.property(\"metadata\");",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(date);",
											"        date = new Date(poLines[i].metadata.createdDate);",
											"",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"PoLines with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fe67081f-18bf-4639-8699-d2744f92259a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "41776606-dbb2-4695-b474-84cc9f034a77",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces Creation",
					"item": [
						{
							"name": "P/E Mix Order (Physical and Electronic resources)",
							"item": [
								{
									"name": "Pieces PE Mix - Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "38295462-6eae-44bd-938c-9af32cfd59b8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order.compositePoLines[0].orderFormat = \"P/E Mix\";",
													"    ",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.variables.set(\"poListedPrintMonographPiece\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "48ea013a-ca31-4bd3-8e51-53cba8a047a7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"orderIdPEMix\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{poListedPrintMonographPiece}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c350ecc7-d549-47c6-a8da-dbc01d434d23",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fe8acf2d-2056-4310-9700-120bd0b6378d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 2);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"P/E Mix\")[0].id); ",
													"    pm.globals.set(\"poLine2IdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"Electronic Resource\")[0].id);",
													"    pm.globals.set(\"requestBodyToBeUpdated\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(7);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receiving History initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8e95ed9c-f536-4353-93bd-214af078cea6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e3f13029-a800-4f5b-aa65-68cbc54944d5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8fd23a04-4f24-4807-861f-b8252109534b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9fb52286-6680-43c9-a9d3-4229746c8a0c",
												"exec": [
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyToBeUpdated}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "317c27b2-6b1f-47f6-bf90-6f3a90614de8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e0094a4b-44ba-461b-a03b-535d7c5c721b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(7);",
													"    jsonData.pieces.forEach(piece => utils.validatePiece(piece));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId==({{poLineIdPEMix}} or {{poLine2IdPEMix}})",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId==({{poLineIdPEMix}} or {{poLine2IdPEMix}})"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f67a6ae2-abad-4c5f-9f26-1125c4bfc0bc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8444a72c-df8e-4a5b-9b49-6c308dd14fcf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// poLine1 -> 3 physical + 1 electronic = 4 pieces",
													"// poLine2 -> 3 electronic = 3 pieces",
													"// 3 + 4 -> 7 Pieces",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(7);",
													"    let receivingHistory = jsonData.receivingHistory;",
													"",
													"    let pol1PhysQty = receivingHistory.filter(entry => entry.pieceFormat === \"Physical\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol1ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol2ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLine2IdPEMix).length;",
													"    pm.expect(pol1PhysQty).to.eql(3);",
													"    pm.expect(pol1ElQty).to.eql(1);",
													"    pm.expect(pol2ElQty).to.eql(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for P/E Mix resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d9d49418-549d-43ac-86f4-e67c19d9c5d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"P/E Mix\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4804d772-0f69-40dc-b529-ebe5c81aedc9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for Electronic resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "04ef131a-216e-4204-813d-e1d46dc4145b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"Electronic Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "036f7a53-3449-46e7-9d59-6e4d54aabb1e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 4 pieces, create inventory is `true`."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1106073a-f947-49ab-b53b-f55134924234",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8816adfb-874e-427e-b235-4a2bd8c0a58f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Order with only Physical resource",
							"item": [
								{
									"name": "Pieces Phy - Create Draft order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "72bab9b0-b1d7-42a7-a240-0abee35a814c",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"randomUUId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8a277484-b458-4341-bf53-1b5164142e72",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{randomUUId}}\",\n    \"approved\": true,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"PIECE100674545\",\n    \"orderType\": \"One-Time\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 152.63,\n    \"totalItems\": 6,\n    \"workflowStatus\": \"Pending\",\n    \"vendor\": \"{{activeVendorId}}\",\n    \"compositePoLines\": [\n        {\n            \"id\": \"4186d931-3965-4794-bfbf-a398944127c2\",\n            \"acquisitionMethod\": \"Purchase At Vendor System\",\n            \"alerts\": [\n                {\n                    \"id\": \"a8129c90-208d-4a0d-aba1-71faa188fe84\",\n                    \"alert\": \"Receipt overdue\"\n                }\n            ],\n            \"cancellationRestriction\": false,\n            \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n            \"claims\": [\n                {\n                    \"claimed\": false,\n                    \"sent\": \"2018-10-09T00:00:00.000+0000\",\n                    \"grace\": 30\n                }\n            ],\n            \"collection\": false,\n            \"contributors\": [\n                {\n                    \"contributor\": \"Ed Mashburn\",\n                    \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n                }\n            ],\n            \"cost\": {\n                \"listUnitPrice\": 24.99,\n                \"currency\": \"USD\",\n                \"additionalCost\": 10,\n                \"discount\": 5,\n                \"discountType\": \"percentage\",\n                \"quantityPhysical\": 3,\n                \"quantityElectronic\": 0,\n                \"poLineEstimatedPrice\": 81.22\n            },\n            \"description\": \"ABCDEFGH\",\n            \"details\": {\n                \"receivingNote\": \"ABCDEFGHIJKL\",\n                \"productIds\": [\n                    {\n                        \"productId\": \"9780764354113\",\n                        \"productIdType\": \"{{identifierTypeId}}\"\n                    }\n                ],\n                \"subscriptionFrom\": \"2018-10-09T00:00:00.000+0000\",\n                \"subscriptionInterval\": 824,\n                \"subscriptionTo\": \"2020-10-09T00:00:00.000+0000\"\n            },\n            \"donor\": \"ABCDEFGHIJKLM\",\n            \"fundDistribution\": [\n                {\n                    \"code\": \"HIST\",\n        \t\t\t\"fundId\": \"{{fundId}}\",\n        \t\t\t\"distributionType\": \"percentage\",\n        \t\t\t\"value\": 80\n                },\n                {\n                    \"code\": \"GENRL\",\n        \t\t\t\"fundId\": \"{{fundId}}\",\n                    \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\",\n        \t\t\t\"distributionType\": \"percentage\",\n        \t\t\t\"value\": 20\n                }\n            ],\n            \"locations\": [\n                {\n                    \"locationId\": \"{{locationId1}}\",\n                    \"quantity\": 1,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 1\n                },\n                {\n                    \"locationId\": \"{{locationId2}}\",\n                    \"quantity\": 2,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 2\n                }\n            ],\n            \"orderFormat\": \"Physical Resource\",\n            \"paymentStatus\": \"Awaiting Payment\",\n            \"physical\": {\n                \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n                \"receiptDue\": \"2018-10-10T00:00:00.000+0000\",\n                \"volumes\": [\n                    \"vol.1\"\n                ],\n                \"materialType\": \"{{materialTypeId}}\"\n            },\n            \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n            \"publicationDate\": \"2017\",\n            \"publisher\": \"Schiffer Publishing\",\n            \"purchaseOrderId\": \"8b854f27-06cf-41ed-a7cb-d00d5d8fe5e4\",\n            \"receiptStatus\": \"Pending\",\n            \"reportingCodes\": [\n                {\n                    \"id\": \"9f49a9b0-5868-45ac-a2ec-c5a405311f4a\",\n                    \"code\": \"CODE1\",\n                    \"description\": \"ABCDEF\"\n                },\n                {\n                    \"id\": \"4bf527d2-0a01-41ec-bb56-eb660f970248\",\n                    \"code\": \"CODE2\",\n                    \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                },\n                {\n                    \"id\": \"8fd796e5-6b8d-4f60-9302-4071e9e844da\",\n                    \"code\": \"CODE3\",\n                    \"description\": \"ABCDE\"\n                }\n            ],\n            \"requester\": \"Leo Bulero\",\n            \"rush\": true,\n            \"selector\": \"ABCD\",\n            \"source\": \"API\",\n            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n            \"vendorDetail\": {\n                \"instructions\": \"ABCDEFG\",\n                \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n                \"refNumber\": \"123456-78\",\n                \"refNumberType\": \"Supplier's unique order line reference number\",\n                \"vendorAccount\": \"8910-10\"\n            },\n            \"metadata\": {\n                \"createdDate\": \"2010-10-08T03:53:00.000+0000\",\n                \"createdByUserId\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7d79c879-0a08-4370-a878-0850c5d92749",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66fa3ff0-75e8-4a11-8a03-571956a7573c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 1);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPhysical\", order.compositePoLines[0].id); ",
													"    pm.globals.set(\"requestBodyPhysical\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(3);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receiving history initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cadde69d-8a49-4073-9ba4-145d38f3c3e8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0cbea050-750f-402c-b251-019c07d4d880",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4f89b672-b728-4926-a499-6b12f16be14b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7b8a1672-ef9d-487e-8786-67298f31b1a9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyPhysical}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e1e9574-392d-44dc-8c3a-3d49885fe047",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "005ec1e4-4886-4015-9716-8b5b3081219c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(3);",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Expected\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4defac3e-1504-49ab-8dd8-3909a8c72942",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0296d54b-0adb-439a-8f2d-47b89b7e1b7a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// 3 pieces created for 3 physical resources",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => {",
													"        utils.validateReceivingHistory(history);",
													"        pm.expect(history.pieceFormat).to.equal(\"Physical\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receive all pieces for Physical resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a4d07217-ba98-4e78-8a9c-582114d4b5b4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.randomUUId, \"Physical Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "efbfac5e-aa6b-445f-91bd-f640a446ba8f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
									},
									"response": []
								},
								{
									"name": "Get all pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2d2e3344-c11d-46bb-8f36-34ce574efad5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4138358f-f9be-4400-a1f2-704cfeaa054c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(3);",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Received\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2286fe2-2643-486c-9ec3-2cbf8fa2a516",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6741f015-7926-4289-9c19-b8f7483c4453",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create piece with itemId",
							"item": [
								{
									"name": "init inventory data",
									"item": [
										{
											"name": "create instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "11a73071-b56a-4922-9f93-4b2496b55a5f",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "931c3582-fb51-4bbb-a80d-9e17d98f92da",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"_instance_id\", uuid.v4());",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"discoverySuppress\": false,\n    \"staffSuppress\": false,\n    \"previouslyHeld\": false,\n    \"source\": \"FOLIO\",\n    \"title\": \"test\",\n    \"instanceTypeId\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\n    \"precedingTitles\": [],\n    \"succeedingTitles\": [],\n    \"id\": \"{{_instance_id}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances"
													]
												}
											},
											"response": []
										},
										{
											"name": "create holding",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8c2da4f-75fc-428b-b8d4-3deac58cc1a9",
														"exec": [
															"pm.environment.set(\"_holding_id\", pm.response.json().id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"permanentLocationId\" : \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n\t\"instanceId\" : \"{{_instance_id}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{instanceId}}%20and%20permanentLocationId==53cf956f-c1df-410b-8bea-27f712cca7c0",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create item",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a8861313-d3e7-4096-a8c1-2ec9408cc1f0",
														"exec": [
															"pm.environment.set(\"_item_id\", pm.response.json().id);",
															"",
															"pm.test(\"purchaseOrderLineIdentifier is null\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.purchaseOrderLineIdentifier).to.eql(null);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\" : \"{{_holding_id}}\",\n    \"barcode\": \"{{$guid}}\",\n    \"materialType\": {\n        \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\"\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"items"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "create order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71af0583-bf32-4e0e-b2d3-fc508e893b4d",
												"exec": [
													"var id = pm.response.json().id",
													"pm.environment.set(\"_order_id\", id);",
													"pm.environment.set(\"_poNumber\", pm.response.json().poNumber);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7277c429-2e05-4c10-87e7-d0a3f96eca70",
												"exec": [
													"var poNumberNum = pm.environment.get(\"poNumberNum\");",
													"if (poNumberNum === null) {",
													"    pm.environment.set(\"poNumberNum\", 1);",
													"    console.log('1');",
													"}else",
													"{",
													"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
													"    console.log('2');",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"poNumber\": \"99999{{poNumberNum}}\",\n    \"orderType\": \"One-Time\",\n    \"vendor\": \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "create order-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a2c25ef-1695-4023-ac87-3df414e8ad8f",
												"exec": [
													"pm.environment.set(\"_poline_id\", pm.response.json().id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"edition\" : \"First edition.\",\n  \"checkinItems\" : true,\n  \"instanceId\" : \"271827e7-8e62-4669-bb3a-fac5ed92c4e9\",\n  \"acquisitionMethod\" : \"Approval Plan\",\n  \"alerts\" : [ ],\n  \"claims\" : [ ],\n  \"contributors\" : [ {\n    \"contributor\" : \"Burnett, William (Consulting professor of design),\",\n    \"contributorNameTypeId\" : \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n  }, {\n    \"contributor\" : \"Evans, David J. (David John), 1953-\",\n    \"contributorNameTypeId\" : \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n  } ],\n  \"cost\" : {\n    \"listUnitPrice\" : 1.0,\n    \"currency\" : \"USD\",\n    \"discountType\" : \"percentage\",\n    \"quantityPhysical\" : 1,\n    \"poLineEstimatedPrice\" : 1.0\n  },\n  \"details\" : {\n    \"productIds\" : [ {\n      \"productId\" : \"9780525655244\",\n      \"productIdType\" : \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n      \"qualifier\" : \"(hardcover)\"\n    } ],\n    \"subscriptionInterval\" : 365\n  },\n  \"eresource\" : {\n    \"activated\" : false,\n    \"createInventory\" : \"Instance, Holding\",\n    \"trial\" : false,\n    \"accessProvider\" : \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\"\n  },\n  \"fundDistribution\" : [ {\n    \"fundId\" : \"65032151-39a5-4cef-8810-5350eb316300\",\n    \"distributionType\" : \"percentage\",\n    \"value\" : 100.0\n  } ],\n  \"isPackage\" : false,\n  \"locations\" : [ {\n    \"locationId\" : \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"quantity\" : 1,\n    \"quantityPhysical\" : 1\n  } ],\n  \"orderFormat\" : \"Physical Resource\",\n  \"paymentStatus\" : \"Pending\",\n  \"physical\" : {\n    \"createInventory\" : \"Instance, Holding, Item\",\n    \"materialType\" : \"1a54b431-2e4f-452d-9cae-9cee66c9a892\",\n    \"materialSupplier\" : \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\",\n    \"volumes\" : [ ]\n  },\n  \"poLineNumber\" : \"{{_poNumber}}-1\",\n  \"publicationDate\" : \"2020\",\n  \"publisher\" : \"Alfred A. Knopf\",\n  \"purchaseOrderId\" : \"{{_order_id}}\",\n  \"receiptStatus\" : \"Pending\",\n  \"reportingCodes\" : [ ],\n  \"source\" : \"User\",\n  \"titleOrPackage\" : \"Designing your work life : how to thrive and change and find happiness at work / Bill Burnett and Dave Evans.\",\n  \"vendorDetail\" : {\n    \"instructions\" : \"\",\n    \"vendorAccount\" : \"1234\"\n  },\n  \"metadata\" : {\n    \"createdDate\" : \"2020-04-17T12:07:19.778+0000\",\n    \"createdByUserId\" : \"b6c6415e-acec-561a-b7b6-a5f474393cbf\",\n    \"updatedDate\" : \"2020-04-17T12:07:19.778+0000\",\n    \"updatedByUserId\" : \"b6c6415e-acec-561a-b7b6-a5f474393cbf\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "get title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ee6a8379-dc31-409d-96b4-d320937b506b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "33544116-39dd-453b-9feb-077a6139d91b",
												"exec": [
													"pm.test(\"Title status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"    let title = pm.response.json().titles[0];",
													"    pm.expect(title.id).to.exist;",
													"    pm.variables.set(\"titleId\", title.id);",
													"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{_poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{_poline_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "create piece",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57bfa1c3-6710-4229-bb33-f4236add7315",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Physical\",\n    \"caption\": \"test\",\n    \"locationId\": \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{titleId}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										}
									},
									"response": []
								},
								{
									"name": "get item with purchaseOrderLineIdentifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "faed9929-c0ac-4066-a141-538b3aa91515",
												"exec": [
													"",
													"pm.test(\"purchaseOrderLineIdentifier isn't null\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.purchaseOrderLineIdentifier).to.eql(pm.environment.get(\"_poline_id\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\": \"4e7762bf-eb3a-4fd4-bb9a-cf102bc122d1\",\n    \"barcode\": \"1234{{poNumber}}\",\n    \"materialType\": {\n        \"id\": \"615b8413-82d5-4203-aa6e-e37984cb5ac3\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"2b94c631-fca9-4892-a730-03ee529ffe27\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_item_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"inventory",
												"items",
												"{{_item_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5379c5f-7bda-4fea-81ed-1af4f42bbefe",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b8f73f5c-6c78-44b8-8957-3ad1c02be8bb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create holdings/instance/item in time manual piece creation for POL is package",
							"item": [
								{
									"name": "Create holdings/instance/item in time manual piece creation where POL is package",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "058ab1d9-6c81-465b-9915-a01cb5f14023",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f9f7a1a3-33c9-4ce5-b5e2-6ddfdab3edec",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"order356-1\", beOrder);",
															"    pm.variables.set(\"orderId356-1\", beOrder.id);",
															"    pm.variables.set(\"orderNumber356-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"35611\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add package order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e1236bb6-fd59-43d1-9f13-d8bd852656ad",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"orderLine356-1\", beOrderLine);",
															"    pm.variables.set(\"orderLineId356-1\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-1}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance, Holding, Item\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3fc2ca5f-26c6-47aa-a59a-9906eb61ef74",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.variables.set(\"title356-1\", title);",
															"    pm.variables.set(\"titleId356-1\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-1}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fad8c9bb-57bf-4095-a9cc-8e8bcd9679d3",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Order line is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.variables.set(\"pieceId356-1\", piece.id);\r",
															"    pm.variables.set(\"pieceTitleId356-1\", piece.titleId);\r",
															"    pm.variables.set(\"pieceLocationId356-1\", piece.locationId);\r",
															"    pm.variables.set(\"piecePoLineId356-1\", piece.poLineId);\r",
															"    pm.variables.set(\"pieceItemId356-1\", piece.itemId);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-1}}\",\n\t\"titleId\":\"{{titleId356-1}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ebbba9df-2b20-47b1-aad1-6b7a221ec31d",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let line = {};\r",
															"\r",
															"pm.test(\"Get order\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    line = pm.response.json();\r",
															"    pm.expect(line.compositePoLines[0].instanceId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "18a23cb2-7cdd-41eb-8c40-d69b1e063428",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.variables.set(\"titleId356-1\", title.id);\r",
															"    pm.variables.set(\"titleInstanceId356-1\", title.instanceId);\r",
															"    pm.variables.set(\"titleTitle356-1\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.variables.get(\"orderLineId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4453f543-0ecc-4c9c-a179-4d060eddbeb3",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get instance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.variables.set(\"instanceId356-1\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.variables.get(\"titleTitle356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Item has link to title, POL, location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ac68ced4-995c-47d1-b275-7eb25e3408dc",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let item = {};\r",
															"\r",
															"pm.test(\"Get item\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    item = pm.response.json();\r",
															"    pm.variables.set(\"itemId356-1\", item.id);\r",
															"    pm.variables.set(\"itemHoldingId356-1\", item.holdingsRecordId);\r",
															"    pm.expect(item.title).to.be.equal(pm.variables.get(\"titleTitle356-1\"));\r",
															"    pm.expect(item.purchaseOrderLineIdentifier).to.be.equal(pm.variables.get(\"orderLineId356-1\"));\r",
															"    pm.expect(item.effectiveLocation.id).to.be.equal(pm.variables.get(\"pieceLocationId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{pieceItemId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"items",
														"{{pieceItemId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "38755bc6-21c3-4959-aa04-08583b292730",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holding = {};\r",
															"\r",
															"pm.test(\"Get holding\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holding = pm.response.json();\r",
															"    pm.variables.set(\"holdingId356-1\", holding.id);\r",
															"    pm.expect(holding.instanceId).to.be.equal(pm.variables.get(\"instanceId356-1\"));\r",
															"    pm.expect(holding.permanentLocationId).to.be.equal(pm.variables.get(\"pieceLocationId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{itemHoldingId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings",
														"{{itemHoldingId356-1}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create holdings/instancein time manual piece creation where POL is package Copy",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b9c176a1-4e84-4b27-832a-3b58d9ec70c9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b77e9fdb-f4ae-49b8-a8f8-1377e20778d2",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"order356-2\", beOrder);",
															"    pm.environment.set(\"orderId356-2\", beOrder.id);",
															"    pm.environment.set(\"orderNumber356-2\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"35621\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Package order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7a2b8283-eadd-498e-b2d8-e121578c3ed0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"orderLine356-2\", beOrderLine);",
															"    pm.environment.set(\"orderLineId356-2\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-2}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c0baae83-469b-4584-8eae-6fe0ef19564f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Title is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.environment.set(\"title356-2\", title);",
															"    pm.environment.set(\"titleId356-2\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-2}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5089ac4b-89fe-4980-aace-6b293fc3ec58",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Piece is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.environment.set(\"pieceId356-2\", piece.id);\r",
															"    pm.environment.set(\"pieceTitleId356-2\", piece.titleId);\r",
															"    pm.environment.set(\"pieceLocationId356-2\", piece.locationId);\r",
															"    pm.environment.set(\"piecePoLineId356-2\", piece.poLineId);\r",
															"    pm.expect(piece.itemId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-2}}\",\n\t\"titleId\":\"{{titleId356-2}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c518c036-630e-4f2c-b086-95247cf59d4a",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let line = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    line = pm.response.json();\r",
															"    pm.expect(line.compositePoLines[0].instanceId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7efac914-bdef-46d3-9836-2cd3a67c1481",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.environment.set(\"titleId356-2\", title.id);\r",
															"    pm.environment.set(\"titleInstanceId356-2\", title.instanceId);\r",
															"    pm.environment.set(\"titleTitle356-2\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.environment.get(\"orderLineId356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e38704da-4120-4744-bcdd-9dd53ddf2eb0",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.environment.set(\"instanceId356-2\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.environment.get(\"titleTitle356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "398825ba-c025-43dd-b212-a3b882545955",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holdings = {};\r",
															"\r",
															"pm.test(\"Get holding\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holdings = pm.response.json();\r",
															"    pm.environment.set(\"holdingId356-2\", holdings.holdingsRecords[0].id);\r",
															"    pm.expect(holdings.holdingsRecords[0].instanceId).to.be.equal(pm.environment.get(\"instanceId356-2\"));\r",
															"    pm.expect(holdings.holdingsRecords[0].permanentLocationId).to.be.equal(pm.environment.get(\"pieceLocationId356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{titleInstanceId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{titleInstanceId356-2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create instance time manual piece creation where POL is package Copy Copy",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "599b1471-faa4-40f6-a43d-bd3befbececa",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dde82499-40cd-4bef-b492-232a08e2e31d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"order356-3\", beOrder);",
															"    pm.environment.set(\"orderId356-3\", beOrder.id);",
															"    pm.environment.set(\"orderNumber356-3\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"35631\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b791470-2b74-4f6a-99d3-88d1fd5b00df",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"orderLine356-3\", beOrderLine);",
															"    pm.environment.set(\"orderLineId356-3\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-3}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7461189b-58bf-44c1-a235-962fe07fff4c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Piece is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.environment.set(\"title356-3\", title);",
															"    pm.environment.set(\"titleId356-3\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-3}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c54ad0b8-937b-4b57-a637-3ea33300dd2a",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Piece is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.environment.set(\"pieceId356-3\", piece.id);\r",
															"    pm.environment.set(\"pieceTitleId356-3\", piece.titleId);\r",
															"    pm.environment.set(\"pieceLocationId356-3\", piece.locationId);\r",
															"    pm.environment.set(\"piecePoLineId356-3\", piece.poLineId);\r",
															"    pm.expect(piece.itemId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-3}}\",\n\t\"titleId\":\"{{titleId356-3}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fa82a637-8178-4211-a37c-f4f6b88a8e9c",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.environment.set(\"titleId356-3\", title.id);\r",
															"    pm.environment.set(\"titleInstanceId356-3\", title.instanceId);\r",
															"    pm.environment.set(\"titleTitle356-3\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.environment.get(\"orderLineId356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a4016831-31a4-46a5-818f-3d304ffe8575",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.environment.set(\"instanceId356-3\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.environment.get(\"titleTitle356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "658a2031-8f8e-4418-8ddb-ba063367dc47",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holdings = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holdings = pm.response.json();\r",
															"    pm.environment.set(\"holdingId356-3\", holdings.holdingsRecords[0].id);\r",
															"    pm.expect(holdings.holdingsRecords[0].instanceId).to.be.equal(pm.environment.get(\"instanceId356-3\"));\r",
															"    pm.expect(holdings.holdingsRecords[0].permanentLocationId).to.be.equal(pm.environment.get(\"pieceLocationId356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{titleInstanceId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{titleInstanceId356-3}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4208028f-a268-4f46-9174-8435adc1e1c8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cfffbf6f-6de0-4691-80a9-cbc0e382cf6a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving History",
					"item": [
						{
							"name": "Get receiving history for Open Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "57d2795d-7759-4905-8a97-dc3184ca43a5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0b82231c-1788-4c58-8e1f-9d927ab04148",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"History has pieces to receive\", function() {",
											"    pm.expect(jsonData.totalRecords).to.equal(7);",
											"});",
											"",
											"pm.test(\"History contains all expected fields\", function(){",
											"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{receivingHistoryPoId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{receivingHistoryPoId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history for Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b4c0f745-c3be-4f80-8919-2544f3317687",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cc515239-e4fa-43ef-ab25-95939a544099",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"History has no pieces to receive\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{orderWithReceiptNotRequiredId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Inventory",
					"item": [
						{
							"name": "Test createInventory defaults",
							"item": [
								{
									"name": "Create order with createInventory system value from config (createInventory config removed)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "932887c8-871f-4b83-a1f4-a5f880945ff0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV5\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull1\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8dd7ed35-8441-4833-b492-45a3d69e8c27",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId1\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Create order with createInventory default config value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "57d22f03-0ca6-4989-a78b-7fbcb760ccc5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"",
													"    let bodyTemplate = testConfigs.bodyTemplate;",
													"    let configName = \"createInventory\";",
													"",
													"    bodyTemplate.configName = configName;",
													"    bodyTemplate.value = \"{\\\"eresource\\\": \\\"None\\\",\\\"physical\\\": \\\"None\\\", \\\"other\\\": \\\"None\\\"}\";",
													"    utils.createConfig(bodyTemplate);",
													"",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV6\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull2\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4c3997ae-5c5c-4a82-b7eb-787a1468bd87",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId2\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull2}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Get configs and delete them all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc5f53e0-4658-4494-b229-8db631b9c5cf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Removing all current configs\", function() {",
													"    pm.response.to.be.ok;",
													"",
													"    let currentConfigs = pm.response.json().configs;",
													"    console.log(\"Current configs: \", currentConfigs);",
													"    for (var i = 0; i < currentConfigs.length; i++) {",
													"        let configId = currentConfigs[i].id;",
													"        utils.deleteConfig(configId);",
													"    }",
													"",
													"    pm.environment.unset(\"current-orders-configs\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26a7f778-b9be-4492-8cb9-ad544fe03692",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS"
												}
											]
										},
										"description": "Delete configs to excercise next step. The case when order created with empty configuration"
									},
									"response": []
								},
								{
									"name": "Instance Status - temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2f2b4ad-14a1-4479-8a18-4cf011036e61",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4a9abc9f-6243-4c9c-8c49-5ce5522c9ddd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"daf2681c-25af-4202-a3fa-e58fdf806183\",\r\n  \"code\": \"temp\",\r\n  \"name\": \"Temporary\",\r\n  \"source\": \"folio\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"instance-statuses"
											]
										},
										"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Loan Type - Can circulate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc767ffd-143c-4306-be60-51ea17f175db",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38d29d4d-b105-4dfa-ae02-131bdf7acb11",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\":\"2b94c631-fca9-4892-a730-03ee529ffe27\",\r\n  \"name\":\"Can circulate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"loan-types"
											]
										},
										"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Create order with createInventory system value (configs are empty)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c914a90d-f786-451a-9829-d008f5c813b0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV7\";",
													"",
													"    // remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull3\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "715eb89d-4051-47be-9d10-f760c9c86d3b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function() {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId3\", order.id);",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function() {",
													"    utils.validatePoLines(order, 1, true);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull3}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Test for the case described in [MODORDERS-209](https://issues.folio.org/browse/MODORDERS-209)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4770ae49-bc49-42c0-a22e-62647209bdc1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "342fa822-f809-4001-85e8-ec1961f8a1dd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create order with createInventory NONE and empty locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bccdde62-d8ca-4b38-a2e2-1cf3b52b09b6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV1\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.compositePoLines[0].physical.createInventory = \"None\";",
											"    ",
											"    order.compositePoLines[0].locations = [];",
											"",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryNone\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "52213215-7e3f-4eef-ab09-7c1e0fc5622a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryNoneId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Line and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryNone}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "94558c0b-216f-4179-8211-47e9f1d4cb41",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV2\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstance\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8febfb1d-84ef-4e75-b019-873b3d2864cc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstance}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b286af2a-fcdc-4193-a9cd-9ca41b057663",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV3\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHolding\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7b47f64d-32d2-4100-9d06-2f7bf5145d50",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHolding}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING_ITEM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35e311e5-cb2c-45d6-8e40-84c9735d616b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV4\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHoldingItem\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2fd59ca5-cbb0-4d60-b9d1-127f5a60fb05",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingItemId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHoldingItem}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Open order with P/E Mix, physical Instance, Holding, Items, electronic - None with locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "81238ebc-beb5-4169-8590-cbab74ebe671",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines.pop();",
											"    order.compositePoLines[0].cost.quantityPhysical = 2;",
											"    order.compositePoLines[0].cost.quantityElectronic = 2;",
											"    let location = {",
											"        \"locationId\": pm.environment.get(\"locationId1\"),",
											"        \"quantityElectronic\": 2,",
											"        \"quantityPhysical\": 2",
											"    };",
											"    ",
											"     order.compositePoLines[0].locations = [location];",
											"  ",
											"    pm.variables.set(\"po_mixed\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "74b3341b-a564-43cf-8c97-9aadcf6922fe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 1);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_mixed}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Get current configs and restore test values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35ae2313-bd8f-4750-86b2-cb3b5422f282",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"let configNamesToProcess = testConfigs.configNames;",
											"",
											"let configs = [];",
											"pm.test(\"Get configs response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    configs = pm.response.json().configs;",
											"});",
											"",
											"console.log(\"Config codes to restore test values: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);",
											"pm.environment.set(\"temp-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84398bf7-e1ff-4b0a-8077-6cc31084e183",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "get title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5d35c261-a797-405c-a917-c248c31813c5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"pm.environment.set(\"poLIneIdForTitle\", compPoLine.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5295fd86-1f3b-4044-8fc1-a5da9b0c49c8",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let titles = pm.response.json();",
											"    pm.variables.set(\"titleId\", titles.titles[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{poLIneIdForTitle}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLIneIdForTitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check-in pieces without items in Inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5cbf7b46-12a9-42c2-ac9e-0de44c7102c5",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"",
											"utils.createPieceAndCheckInBody(compPoLine);",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e894feb1-9b75-4498-9fb3-f177ff464aec",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece without items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a04841ec-a40f-4ef7-a661-c8990aece805",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "590fcd60-05b9-4da1-a8f5-0655803680bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece in the prior request to Expected status"
							},
							"response": []
						},
						{
							"name": "check-in the existing piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a843cb0b-990b-4fb8-bd25-5bf204b89784",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e33a67a-2038-4a6f-b22e-8cc053eb1abf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Expected\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "Do not create a new piece, but the existing piece must be successfully checked in"
							},
							"response": []
						},
						{
							"name": "check-in pieces with items in inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5f5b7182-8b5f-4eb9-a378-a65ef8ac5193",
										"exec": [
											"//get holdings record Id -> need instance id and location id",
											"//get loan type id",
											"//create item -> need material type, loan type and holdings Id",
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"",
											"utils.prepareCheckinBodyWithItems(compPoLine);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f7e2d3b-28cd-4b99-a10d-1d0b8c447013",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function() {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function() {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 1, \"In Process\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece with items in inventory and performs check-in. Tests to see if the piece status is changed and also the Po line status. The order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece with items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43d84d0c-3544-425f-8fa4-f72b1e8a8835",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_physical_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"     utils.validateInventoryItemsReceived(line, 1, \"On order\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41971aa6-a9db-4e84-867a-2338c8bac787",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Physical and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece with items. The item status as well as the piece status must be modified"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb8fde6a-7f29-460c-91bc-26c952ccb86a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "304d463f-9a6d-4c3b-b232-ebad72ff6ea6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check Order  automatically changes workflowStatus",
					"item": [
						{
							"name": "Create Pending order, that should be automatically closed on transition to open",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "601e0105-7242-4c59-b978-eba3fd480ce6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(pendingOrder));",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											" ",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = pendingOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.globals.set(\"automatically_closed_order_content\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"            ",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0927dd3-7661-4bc8-87f6-31d3618908f7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_closed_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{automatically_closed_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open, adding 2 more lines make all lines completed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f77dbe1a-1281-4102-9367-24d049d8f81e",
										"exec": [
											"let pendingOrder = pm.globals.get(\"automatically_closed_order_content\");",
											"",
											"// Set Open status",
											"pendingOrder.workflowStatus = \"Open\";",
											"",
											"",
											"pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"pm.globals.unset(\"automatically_closed_order_content\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96f70a44-9062-4243-8944-cc9be6b51621",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyClosedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        ",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyClosedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyClosedOrder}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Create Open order, that should be automatically closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "94f9c85c-a772-4975-ada2-56c1c850cdb4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let openOrder = res.json();",
											"    openOrder.workflowStatus = \"Open\";",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(openOrder));",
											"    delete openOrder.poNumber;",
											"",
											" ",
											"    // add 2 new PO lines",
											"    openOrder.compositePoLines = openOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = openOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.variables.set(\"request_body\", JSON.stringify(utils.prepareOrder(openOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5b16be50-b3ea-4464-b13d-3f5094eaf902",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Order id exist\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOpenOrder\", jsonData.id);",
											"    pm.expect(jsonData.closeReason.reason).is.equal(\"Complete\");",
											"});",
											"",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Pending order, that should be automatically open in an attempt to close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ca87aedb-ab42-4dd7-a074-1e9ce518057f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											"    // Setting create inventory to false for PO Line with P/E Mix format",
											"    pendingOrder.compositePoLines[0].paymentStatus = \"Pending\";",
											"",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "09f36b81-66b5-41af-b5d1-6499fe6d305a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyOpenedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_opened_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4f53eda5-9f3f-42c3-beca-f892e6e03da4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"automatically_opened_order_content\");",
											"",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Closed\";",
											"    pendingOrder.closeReason = {",
											"        \"reason\": \"Complete\"",
											"    };",
											" ",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"automatically_opened_order_content\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f75eb0f-cc9e-4659-a3a0-fdca51257f15",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyOpenedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyOpenedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyOpenedOrder}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d63e98e-3a77-46af-b5ea-4a76026e00dc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c203deb8-fb52-4fa2-8331-8dbad066b05e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check order without PO line",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4be076f-07aa-4da2-b99b-a25a6e1bcec2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"THIS IS TEST FOR ORDER WITHOUT POLINES\"];",
											"",
											"pm.variables.set(\"orderWithoutPoLinesBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4688e90f-da94-4064-9c41-6f79fa6ab310",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(1);",
											"    });",
											"    ",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderWithoutPoLinesId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithoutPoLinesBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "beae89f8-9f4c-471f-b94f-9ff4911df634",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check orders without po-lines\", function () {",
											"    var jsonData = pm.response.json();",
											"    var purchaseOrders = jsonData.purchaseOrders;",
											"    ",
											"    pm.expect(purchaseOrders).to.have.lengthOf.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9131dc4f-f0a7-4d5f-859e-da58b7ae26ff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=notes=THIS IS TEST FOR ORDER WITHOUT POLINES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "notes=THIS IS TEST FOR ORDER WITHOUT POLINES"
										}
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c7dc91a3-4c81-41a3-894b-895047b3ef72",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71644daf-c936-4f03-b421-971ecbe4e446",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderWithoutPoLinesId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderWithoutPoLinesId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ISBN validation",
					"item": [
						{
							"name": "Create Order with duplicate ISBN numbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec390e4a-81fd-4b19-a0e2-715d4cbf0eb3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    order = utils.deletePoNumber(order);",
											"    order.compositePoLines.pop();",
											"    let preparedOrder = utils.prepareOrder(order);",
											"    preparedOrder.compositePoLines[0].details.productIds = [];",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"1-4028-9462-7\", null));",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"1-4028-9462-7\", \"(q1)\"));",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"9781402894626\", \"(q2)\"));",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"9781402894626\", null));",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(preparedOrder));",
											"})",
											"",
											"function buildProductId(isbn, qualifier) {",
											"    return {",
											"        \"productId\": isbn,",
											"        \"productIdType\": pm.environment.get(\"isbnIdentifierTypeId\"),",
											"        \"qualifier\": qualifier",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4babba83-9c41-49c7-8ffd-d91de3e4ee47",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"isbnOrderId\", jsonData.id); ",
											"    pm.globals.set(\"isbn_Order_content\", jsonData);",
											"});",
											"",
											"pm.test(\"validate ISBN 13 is returned\", function () {",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds).to.have.lengthOf(2);",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[0].productId).to.equal(\"9781402894626\");",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[0].qualifier).to.equal(\"(q1)\");",
											"    ",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[1].productId).to.equal(\"9781402894626\");",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[1].qualifier).to.equal(\"(q2)\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						},
						{
							"name": "Update Order with ISBN10 - with hyphens",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "77f60224-5b87-4ccf-8956-c775a0a2556c",
										"exec": [
											"     let pendingOrder = pm.globals.get(\"isbn_Order_content\");",
											"    ",
											"    //set ISBN10",
											"    pendingOrder.compositePoLines[0].details.productIds = [];",
											"    pendingOrder.compositePoLines[0].details.productIds.push(buildProductId(\"81-7525-766-0\", \"(q1)\"));",
											"    pendingOrder.compositePoLines[0].details.productIds.push(buildProductId(\"81-7525-766-0\", \"(q1)\"));",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(pendingOrder));",
											"    ",
											"    function buildProductId(isbn, qualifier) {",
											"    return {",
											"        \"productId\": isbn,",
											"        \"productIdType\": pm.environment.get(\"isbnIdentifierTypeId\"),",
											"        \"qualifier\": qualifier",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "905118f2-32be-4349-b8f3-085f20514e4e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.isbnOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.test(\"ISBN value is modified to ISBN 13\", function () {",
											"            pm.expect(order.compositePoLines[0].details.productIds).to.have.lengthOf(1);",
											"            pm.expect(order.compositePoLines[0].details.productIds[0].productId).to.equal(\"9788175257665\");",
											"            pm.expect(order.compositePoLines[0].details.productIds[0].qualifier).to.equal(\"(q1)\");",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{isbnOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{isbnOrderId}}"
									]
								},
								"description": "Update a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Templates",
					"item": [
						{
							"name": "Create order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e856c93-6584-4347-b1c7-e917867f3f70",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"pm.variables.set(\"orderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "02c2565c-7018-4b4e-80f0-bba3e0f21692",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    var orderTemplate = pm.response.json();",
											"",
											"    pm.test(\"Verify order template\", () => {",
											"        pm.expect(orderTemplate.id).to.exist;",
											"        pm.expect(orderTemplate.templateCode).to.eql(expectedOrderTemplate.templateCode);",
											"        pm.expect(orderTemplate.templateDescription).to.eql(expectedOrderTemplate.templateDescription);",
											"        pm.expect(orderTemplate.templateName).to.eql(expectedOrderTemplate.templateName);",
											"        pm.expect(orderTemplate.acquisitionMethod).to.eql(expectedOrderTemplate.acquisitionMethod);",
											"        pm.expect(orderTemplate.approved).to.be.true;",
											"        pm.environment.set(\"orderTemplateId\", orderTemplate.id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order template by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dafcb867-ab29-4b11-99d8-2d6a87c1dca7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "72643bcc-5487-49a1-afab-884bdf7eb973",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var orderTemplate = pm.response.json();",
											"",
											"    pm.test(\"Verify order template\", () => {",
											"        pm.expect(orderTemplate.id).to.exist;",
											"        pm.expect(orderTemplate.templateCode).to.eql(expectedOrderTemplate.templateCode);",
											"        pm.expect(orderTemplate.templateDescription).to.eql(expectedOrderTemplate.templateDescription);",
											"        pm.expect(orderTemplate.templateName).to.eql(expectedOrderTemplate.templateName);",
											"        pm.expect(orderTemplate.acquisitionMethod).to.eql(expectedOrderTemplate.acquisitionMethod);",
											"        pm.expect(orderTemplate.approved).to.be.true;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26381a60-41a8-4e4d-8696-fa301e800f3e",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"body.templateCode = \"Amazon-LLL\";",
											"pm.variables.set(\"updatedTemplateCode\", body.templateCode);",
											"pm.variables.set(\"updatedOrderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f3c6854-052d-4951-9263-851f0d1f2bfc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/order-templates/\" + pm.environment.get(\"orderTemplateId\"), (err, res) => {",
											"        pm.test(\"Order template is updated\", () => {",
											"            pm.expect(res.code).to.eql(200);",
											"            var orderTemplate = res.json();",
											"            pm.expect(orderTemplate.templateCode).to.eql(pm.variables.get(\"updatedTemplateCode\"));",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated order templates collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35e69335-5fd7-44d1-8be3-24f7de2b7214",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bbc89bf2-668c-4efd-b126-8ac7502fb7fe",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var orderTemplatesCollection = pm.response.json();",
											"",
											"    pm.test(\"Verify order templates collection contains order templates\", () => {",
											"        orderTemplatesCollection.totalRecords > 0;",
											"        pm.expect(orderTemplatesCollection.orderTemplates.length).to.eql(orderTemplatesCollection.totalRecords);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2e09ed86-bc27-479c-b485-87e77e17ed2c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ca38c7a-c934-4be5-8250-da10cd9eb99b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/order-templates/\" + pm.environment.get(\"orderTemplateId\"), (err, res) => {",
											"        pm.test(\"Order template is deleted\", () => {",
											"             pm.expect(res.code).to.eql(404);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check items status changes upon Closing/Reopening order",
					"item": [
						{
							"name": "Create Open order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a191133a-931a-475d-8aed-f3a5cd192e4e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let order = res.json();",
											"",
											"    order.workflowStatus = \"Open\";",
											"    delete order.poNumber;",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = \"Fully Paid\";",
											"        lines[i].receiptStatus = \"Awaiting Receipt\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(utils.prepareOrder(order)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"            ",
											"        };",
											"    }",
											"    line.physical.createInventory = \"Instance, Holding, Item\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9bb5139e-e9a1-4fc2-a5cf-9564c409dcb1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"checkItemStatusOrderId\", jsonData.id);",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(jsonData));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order make all lines completed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a3e460e-9b54-478a-bc00-34b73b94df82",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines.forEach(line => {",
											"    line.paymentStatus = \"Fully Paid\";",
											"    line.receiptStatus = \"Fully Received\";",
											"    delete line.instanceId;",
											"})",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "39dd0adc-825d-45a0-9a9d-90be134a3ef3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = {};",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"Order closed\"));",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Update order make lines uncompleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f1d68037-38a5-453b-8b3b-a05daee64cc9",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines.forEach(line => {",
											"    line.paymentStatus = \"Partially Paid\";",
											"    delete line.instanceId;",
											"})",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "076cfae9-2b77-44e3-ac83-685c6bc53855",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = {};",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"On order\"));",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Update order without poLine with status Closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64159e98-bb92-4d4d-9d51-202b7e04637f",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines = [];",
											"order.workflowStatus = \"Closed\";",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7f5daa5b-431f-47bd-8247-3257837f670c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.test(\"Verify order updated with expected workflow status\", function () {",
											"        pm.expect(order.workflowStatus).is.equal(\"Closed\");",
											"    });",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"Order closed\"));",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Reopen order without poLine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b5782a34-7556-4146-bfe8-67124a1e331f",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines = [];",
											"order.workflowStatus = \"Open\";",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "246f6a3b-9b61-401c-972f-683388d9f275",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order = res.json();",
											"    ",
											"    pm.test(\"Verify order updated with expected workflow status\", function () {",
											"         pm.expect(order.workflowStatus).is.equal(\"Open\");",
											"    });",
											"   ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"On order\"));",
											"    ",
											"    pm.globals.unset(\"check_item_status_order_content\");",
											"    pm.globals.unset(\"checkItemStatusOrderId\");",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Reason for closure",
							"item": [
								{
									"name": "Create reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eefa84ea-68ec-451f-8345-7c11f818458e",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.source = \"System\";",
													"pm.variables.set(\"reasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34d5314f-d07d-4b75-8f18-b02fe50cf8ce",
												"exec": [
													"let expectedReasonForClosure = globals.testData.reasonForClosure;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var reasonForClosure = pm.response.json();",
													"    ",
													"    pm.test(\"Verify reason for closure\", () => {",
													"        pm.expect(reasonForClosure.id).to.exist;",
													"        pm.expect(reasonForClosure.reason).to.eql(expectedReasonForClosure.reason);",
													"        pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"        pm.environment.set(\"reasonForClosureId\", reasonForClosure.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{reasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b1b566d9-425a-4504-afc4-fcbb9c54dd24",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7ee94787-29ec-46f1-9e6f-66abcd227672",
												"exec": [
													"let expectedReasonForClosure = globals.testData.reasonForClosure;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var reasonForClosure = pm.response.json();",
													"",
													"    pm.test(\"Verify reason for closure\", () => {",
													"        pm.expect(reasonForClosure.id).to.exist;",
													"        pm.expect(reasonForClosure.reason).to.eql(expectedReasonForClosure.reason);",
													"        pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f60537d9-d5fa-4df1-89bf-10abeeecbc0e",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.reason = \"Updated reason\";",
													"body.source = \"System\";",
													"pm.variables.set(\"updatedReason\", body.reason);",
													"pm.variables.set(\"updatedReasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6b9a006-2ecf-4650-b8da-7747d58d6d87",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/reasons-for-closure/\" + pm.environment.get(\"reasonForClosureId\"), (err, res) => {",
													"        pm.test(\"Reason for closure is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var reasonForClosure = res.json();",
													"            pm.expect(reasonForClosure.reason).to.eql(pm.variables.get(\"updatedReason\"));",
													"            pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedReasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4a2a792e-80ab-4f4b-a8b6-fff50a163511",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "520ec55f-34db-4bec-8bfe-eb09ad6a33fc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var reasonForClosureCollection = pm.response.json();",
													"    pm.test(\"Verify reason for closure collection contains reasons for closure\", () => {",
													"        reasonForClosureCollection.totalRecords > 0;",
													"        pm.expect(reasonForClosureCollection.reasonsForClosure.length).to.eql(reasonForClosureCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9e2feee3-ff26-48ae-8cd2-80fdaf95957c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d198ef9c-3b8a-414d-85a1-43a5b7e81c90",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/reasons-for-closure/\" + pm.environment.get(\"reasonForClosureId\"), (err, res) => {",
													"        pm.test(\"Reason for closure is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prefix",
							"item": [
								{
									"name": "Create prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bd1e023b-72f9-4b07-a701-af37717172c9",
												"exec": [
													"let body = globals.testData.prefix;",
													"pm.variables.set(\"prefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8ab9d421-64fa-4683-ad34-f3636bc33b0a",
												"exec": [
													"let expectedPrefix = globals.testData.prefix;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var prefix = pm.response.json();",
													"    ",
													"    pm.test(\"Verify prefix\", () => {",
													"        pm.expect(prefix.id).to.exist;",
													"        pm.expect(prefix.name).to.eql(expectedPrefix.name);",
													"        pm.expect(prefix.description).to.eql(expectedPrefix.description);",
													"        pm.environment.set(\"prefixId\", prefix.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{prefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aadf9d7b-7000-4c7d-9e28-1ccf3a828ec3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "58128e8e-9ef5-4b05-8059-a88fa57a380a",
												"exec": [
													"let expectedPrefix = globals.testData.prefix;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var prefix = pm.response.json();",
													"",
													"    pm.test(\"Verify prefix\", () => {",
													"        pm.expect(prefix.id).to.exist;",
													"        pm.expect(prefix.name).to.eql(expectedPrefix.name);",
													"        pm.expect(prefix.description).to.eql(expectedPrefix.description);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7dd3fef5-fc19-462c-84cb-1a6eea8def54",
												"exec": [
													"let body = globals.testData.prefix;",
													"body.name = \"Updated name\";",
													"pm.variables.set(\"updatedName\", body.name);",
													"pm.variables.set(\"updatedPrefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a0e3388c-c061-4cf9-9f81-c63c767ce3ed",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var prefix = res.json();",
													"            pm.expect(prefix.name).to.eql(pm.variables.get(\"updatedName\"));",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPrefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b2223763-ceb0-4ebb-be0c-42d33d5152dd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "692ae247-660a-446d-8dcc-d567d25a3a01",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var prefixCollection = pm.response.json();",
													"    pm.test(\"Verify prefix collection contains prefixes\", () => {",
													"        prefixCollection.totalRecords > 0;",
													"        pm.expect(prefixCollection.prefixes.length).to.eql(prefixCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create order with prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f4f467e4-5681-480f-88b0-ef8e4d3acb17",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.poNumberPrefix = \"Updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0a33cd6e-612c-42df-8f20-6fbd336a4a67",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.globals.set(\"prefixOrderId\", jsonData.id); ",
													"    pm.globals.set(\"prefixOrder\", jsonData);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete cannot delete used prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ed122404-c471-4b82-97ac-08758fe583b0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f6565872-7b9c-4ece-b923-445041f3d51f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"prefixIsUsed\");",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is not deleted\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update order's prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8e55d4f2-a223-4c3b-9958-f1db415e3c31",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = pm.globals.get(\"prefixOrder\");",
													"order.poNumberPrefix = \"New updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ebf88411-1435-4f6d-8f19-d953e11b9a95",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{prefixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{prefixOrderId}}"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62fb6be8-af35-4b2e-bc87-c14a2332d06a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d6916117-c2fe-4bfb-a11a-19f737b86b26",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8ae99c03-b810-45b8-94f2-6fc60e5b4fd7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f02042ab-d2c3-4a8b-9b63-012147487d43",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.globals.unset(\"prefixOrderId\");",
													"    pm.globals.unset(\"prefixOrder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{prefixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{prefixOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Suffix",
							"item": [
								{
									"name": "Create suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "46613a79-78f5-4635-8d4b-1caf80a34298",
												"exec": [
													"let body = globals.testData.suffix;",
													"pm.variables.set(\"suffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "665e1458-2ba7-4bf4-9239-88572bc57732",
												"exec": [
													"let expectedSuffix = globals.testData.suffix;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var suffix = pm.response.json();",
													"    ",
													"    pm.test(\"Verify suffix\", () => {",
													"        pm.expect(suffix.id).to.exist;",
													"        pm.expect(suffix.name).to.eql(expectedSuffix.name);",
													"        pm.expect(suffix.description).to.eql(expectedSuffix.description);",
													"        pm.environment.set(\"suffixId\", suffix.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{suffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "80181e1f-beac-4e06-811d-61fbf911ac56",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2782f1ff-f976-4355-bbf9-dc4131fe92c7",
												"exec": [
													"let expectedSuffix = globals.testData.suffix;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var suffix = pm.response.json();",
													"",
													"    pm.test(\"Verify suffix\", () => {",
													"        pm.expect(suffix.id).to.exist;",
													"        pm.expect(suffix.name).to.eql(expectedSuffix.name);",
													"        pm.expect(suffix.description).to.eql(expectedSuffix.description);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "51325912-9d96-4f08-a3b7-816f634e357b",
												"exec": [
													"let body = globals.testData.suffix;",
													"body.name = \"Updated name\";",
													"pm.variables.set(\"updatedName\", body.name);",
													"pm.variables.set(\"updatedSuffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c53af9cd-f857-48f5-8c9a-823db1c82c41",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var suffix = res.json();",
													"            pm.expect(suffix.name).to.eql(pm.variables.get(\"updatedName\"));",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedSuffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b9e7d4b8-2bd8-4fae-9129-ca679bcd3f8e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "899bf328-92e6-43c4-a89d-a281c650803a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var suffixCollection = pm.response.json();",
													"    pm.test(\"Verify suffix collection contains suffixes\", () => {",
													"        suffixCollection.totalRecords > 0;",
													"        pm.expect(suffixCollection.suffixes.length).to.eql(suffixCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create order with suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "703f6615-2755-4436-a10d-185b0e388b8b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.poNumberSuffix = \"Updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "385f8089-8e88-4640-84a5-ee562916ef2f",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.globals.set(\"suffixOrderId\", jsonData.id); ",
													"     pm.globals.set(\"suffixOrder\", jsonData);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete cannot delete used suffx",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "549be7bc-b265-44a4-ae04-5d9756dff419",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f562b209-cd12-4610-92b3-7cdcea6ec5d2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"suffixIsUsed\");",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is not deleted\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update order's suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b5a7415e-1261-46dc-bd95-fd613d52c67f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = pm.globals.get(\"suffixOrder\");",
													"order.poNumberSuffix = \"New updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b1f8cc9c-7fa8-445f-be63-f96663f01c74",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{suffixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{suffixOrderId}}"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7d9e5ffc-4b10-4744-a6dc-f7e5d921e210",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "65c2dab2-709c-409b-877f-d6e1cb0834bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "517d29a1-fcdc-4b87-a50d-949f5358f278",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85508836-db37-444a-98e6-3460239f92b1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.globals.unset(\"suffixOrderId\");",
													"    pm.globals.unset(\"suffixOrder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{suffixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{suffixOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check holding creation upon receiving/chek-in",
					"item": [
						{
							"name": "Create Open order with P/E Mix",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "862b5871-51a2-498b-9053-53caeb0dc052",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    delete order.poNumber;",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines.pop();",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c22ca3a1-9076-411f-a014-043fd232e511",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"mixLineForCheckIn\", JSON.stringify(jsonData.compositePoLines[0]));",
											"    pm.environment.set(\"mixLineForCheckInId\", JSON.stringify(jsonData.compositePoLines[0].id));",
											"    pm.environment.set(\"instanceId\", jsonData.compositePoLines[0].instanceId);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Partially Paid\"));",
											"utils.verifyOrderCalculatedInfo(jsonData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create new location",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ecc6856-0a9d-4d63-bbb0-c13443e21d50",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"checkinLocationId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f3d74fad-56a8-48f5-8dcd-4bafdc96cd1c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"tes Loaction\",\n    \"code\": \"LOC_TEST\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get receiving history Order Line With Electronic format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "00d8bee9-737b-4e16-a3a0-318c7ee86345",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cecd0f4f-c80f-434b-904c-01b4e5973617",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let receivingHistory = pm.response.json().receivingHistory;",
											"    pm.expect(receivingHistory.length).to.be.above(0);",
											"    pm.environment.set(\"electronicResourceId\", receivingHistory[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{mixLineForCheckInId}} and pieceFormat==Electronic",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{mixLineForCheckInId}} and pieceFormat==Electronic"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in electronic piece, createInventory-\"instance\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ad3a1ee3-8c5b-4747-bfc1-82f24727d785",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = JSON.parse(pm.environment.get(\"mixLineForCheckIn\"));",
											"",
											"",
											"utils.prepareCheckinBody(compPoLine, pm.environment.get(\"electronicResourceId\"));",
											"let checkinBody = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"checkinBody.toBeCheckedIn[0].checkInPieces[0].locationId = pm.environment.get(\"checkinLocationId\");",
											"pm.variables.set(\"checkinBody\", JSON.stringify(checkinBody));",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "640d8cff-ea9e-4159-9f20-c6a885160123",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"mixLineForCheckInId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "Check that no holding for new location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8d587127-e9f7-4fef-ba69-8553a3ea9f33",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4d3eeaae-d3d5-4261-930f-7fdccc7713a0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let holdings = pm.response.json().holdingsRecords;",
											"    pm.expect(holdings).to.have.lengthOf(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history Order Line With Physical format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ef72d87-e170-4e4e-9302-098e0f46a480",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f82f9dd1-7774-436b-9ae6-b0399cfa7299",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let receivingHistory = pm.response.json().receivingHistory;",
											"    pm.expect(receivingHistory.length).to.be.above(0);",
											"    pm.environment.set(\"physicalResourceId\", receivingHistory[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{mixLineForCheckInId}} and pieceFormat==Physical",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{mixLineForCheckInId}} and pieceFormat==Physical"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in physical piece, createInventory-\"instance, Holding\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d2b4b2c5-19e2-4fe7-9205-e9cf10e6c8a0",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = JSON.parse(pm.environment.get(\"mixLineForCheckIn\"));",
											"",
											"",
											"utils.prepareCheckinBody(compPoLine, pm.environment.get(\"physicalResourceId\"));",
											"let checkinBody = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"checkinBody.toBeCheckedIn[0].checkInPieces[0].locationId = pm.environment.get(\"checkinLocationId\");",
											"pm.variables.set(\"checkinBody\", JSON.stringify(checkinBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bc668b1-adaa-471c-b537-c06fa9e02002",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"mixLineForCheckInId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "Check that holding created for new location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fe439847-68d0-4dc5-baf6-4bab67f59089",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f607ede1-a178-47fd-b02f-c28c53deada7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let holdings = pm.response.json().holdingsRecords;",
											"    pm.expect(holdings).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify prefix and suffix within composite order",
					"item": [
						{
							"name": "create order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93673f76-ed8d-4195-832e-c7e4c193e8b6",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix');",
											"});",
											"",
											"pm.environment.set(\"order_id\", jsonData.id);",
											"pm.environment.set(\"order_rs\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "770af3fe-db02-48ca-8ea6-36458da844f0",
										"exec": [
											"var poNumberNum = pm.environment.get(\"poNumberNum\");",
											"if (poNumberNum === null) {",
											"    pm.environment.set(\"poNumberNum\", 1);",
											"}else",
											"{",
											"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poNumber\": \"990001{{poNumberNum}}\",\n    \"poNumberPrefix\": \"pref\",\n    \"poNumberSuffix\": \"suf\",\n    \"orderType\": \"One-Time\",\n    \"vendor\": \"{{activeVendorId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "get order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce917456-c497-41ea-8fa5-882755068f70",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c317785-69a1-43ce-a414-ee0451291c57",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8a608ab-9910-4673-97d9-28f5fc186a59",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9083a57e-bc0c-4bb2-a97a-c6ba7c805051",
										"exec": [
											"var orderRs = pm.environment.get(\"order_rs\");",
											"orderRs.poNumberPrefix = \"pref1\";",
											"orderRs.poNumberSuffix = \"suf1\";",
											"pm.environment.set(\"order_open_rq\", JSON.stringify(orderRs));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_open_rq}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "order with prefix and suffix with updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4b7d96f-c01e-498b-9f71-598eade96979",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix', 'pref1');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix', 'suf1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b049d7a-bb58-4f56-88d5-f24b394bc895",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receive piece with specified itemId when item wa deleted",
					"item": [
						{
							"name": "Create order with createInventory INSTANCE_HOLDING_ITEM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0a365823-079d-44ee-9aa9-bb7a134e15f6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    delete order.poNumber;",
											"    order.compositePoLines.pop();",
											"    //set createInventory value",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines[0].locations.pop();",
											"    order.compositePoLines[0].locations[0].quantityPhysical = 1;",
											"    order.compositePoLines[0].cost.quantityPhysical = 1;",
											"    ",
											"    pm.variables.set(\"orderForReceiving\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d68ad996-9834-4b08-9650-a454c8b4fb27",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderForReceivingId\", order.id);",
											"    pm.globals.set(\"orderForReceiving\", order);",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForReceiving}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Close order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fbf04015-cb57-4da1-b82d-1310a1d076bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order =  pm.globals.get(\"orderForReceiving\");",
											"order.workflowStatus = \"Closed\";",
											"",
											"pm.variables.set(\"orderForReceiving\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e77cd87-050a-4789-af70-15554853d01e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForReceiving}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForReceivingId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForReceivingId}}"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Delete item from inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec15975c-dde5-4cdb-b2a0-6689a5919102",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"",
											"utils.sendGetRequest(\"/item-storage/items?limit=1&query=purchaseOrderLineIdentifier==\"+compPoLine.id, (err,res) => {",
											"    pm.variables.set(\"itemId\",  res.json().items[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "efd9983e-34a6-44e1-948e-40d6aa49f6d6",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"item-storage",
										"items",
										"{{itemId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in the existing piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8af3fd9-fe73-4861-ba0c-0ffa65c5b7ab",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(1);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(1);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, 1, 0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a7323e2-b4e3-40d9-b3e7-3a3c23f2ed4c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id, (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine, res.json().pieces[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "Do not create a new piece, but the existing piece must be successfully checked in"
							},
							"response": []
						},
						{
							"name": "Get pieces by poLineId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3da7dfc7-3a07-4bf4-970d-aa66d08a73ec",
										"exec": [
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"pm.variables.set(\"poLineId\", compPoLine.id);",
											"",
											"pm.globals.unset(\"orderForReceiving\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a98445b3-7aec-4713-a291-f626349924b4",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"",
											"    piece = pm.response.json().pieces[0];",
											"    pm.globals.set(\"pieceId\", piece.id);",
											"",
											"});",
											"",
											"pm.test(\"The reference to unexisting item was removed\", function() {",
											"    pm.expect(piece.itemId).to.be.an('undefined');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders-storage",
										"pieces"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLineId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14a640b5-fec5-4233-9635-8b038c33eefa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b27322e5-5c6d-46e1-bbd1-1dea682f1c89",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.globals.unset(\"pieceId\");",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces and Location Consistency",
					"item": [
						{
							"name": "Create Instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27b1ab30-32a1-458d-80e8-a5214c737287",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb8b4178-cdb8-4e91-998e-3af992f0cbf7",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"_instanceId\", uuid.v4());",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"discoverySuppress\": false,\n    \"staffSuppress\": false,\n    \"previouslyHeld\": false,\n    \"source\": \"FOLIO\",\n    \"title\": \"test\",\n    \"instanceTypeId\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\n    \"precedingTitles\": [],\n    \"succeedingTitles\": [],\n    \"id\": \"{{_instanceId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Holding",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "131665fd-42f5-4365-8c07-4319832400df",
										"exec": [
											"pm.environment.set(\"_holdingId\", pm.response.json().id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"permanentLocationId\" : \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n\t\"instanceId\" : \"{{_instanceId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}}%20and%20permanentLocationId==53cf956f-c1df-410b-8bea-27f712cca7c0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ada9c2a2-2c82-458f-b541-b285943ff7c2",
										"exec": [
											"pm.environment.set(\"_itemId\", pm.response.json().id);",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\" : \"{{_holdingId}}\",\n    \"barcode\": \"{{$guid}}\",\n    \"materialType\": {\n        \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f27de955-6800-4430-af3a-d9c5e7431933",
										"exec": [
											"pm.environment.set(\"_requestId\", pm.response.json().id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"requestType\":\"Hold\",\n   \"fulfilmentPreference\":\"Hold Shelf\",\n   \"item\":{\n      \"barcode\":\"A14837334314\"\n   },\n   \"itemId\":\"{{_itemId}}\",\n   \"requester\":{\n      \"barcode\":\"236964750970123\"\n   },\n   \"status\": \"Open - Awaiting pickup\",\n   \"requesterId\":\"00000001-1111-5555-9999-999999999999\",\n   \"pickupServicePointId\":\"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n   \"requestDate\":\"2020-06-08T06:31:02Z\",\n   \"id\": \"489081f2-76de-4f22-8c0e-cdb7b91c5ffe\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"request-storage",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d12f99c-c824-4c1b-844a-d9b423eb5f3b",
										"exec": [
											"var id = pm.response.json().id",
											"pm.environment.set(\"_order_id\", id);",
											"pm.environment.set(\"_poNumber\", pm.response.json().poNumber);",
											"pm.environment.set(\"_poline_id\", pm.response.json().compositePoLines[0].id);",
											"pm.environment.set(\"_location_id\", pm.response.json().compositePoLines[0].locations[0].locationId);",
											"pm.environment.set(\"_purchaseOrder\", pm.response.json());",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a82b7bb-4c9a-452d-9296-5de152ddcc32",
										"exec": [
											"var poNumberNum = pm.environment.get(\"poNumberNum\");",
											"if (poNumberNum === null) {",
											"    pm.environment.set(\"poNumberNum\", 1);",
											"    console.log('1');",
											"}else",
											"{",
											"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
											"    console.log('2');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"billTo\": \"5b608726-3ab6-4ea3-bdb2-b5106f45f5b3\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"poNumber\": \"99999{{poNumberNum}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"shipTo\": \"5b608726-3ab6-4ea3-bdb2-b5106f45f5b3\",\n  \"totalEstimatedPrice\": 101.16,\n  \"totalItems\": 4,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"checkinItems\": false,\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000+0000\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"6d6f642d-0005-1111-aaaa-6f7264657273\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": 24.99,\n        \"listUnitPriceElectronic\": 20.99,\n        \"currency\": \"USD\",\n        \"additionalCost\": 10.0,\n        \"discount\": 5.0,\n        \"discountType\": \"percentage\",\n        \"quantityPhysical\": 1,\n        \"quantityElectronic\": 1,\n        \"poLineEstimatedPrice\": 101.16\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"10000000155\",\n            \"productIdType\": \"6d6f642d-0010-1111-aaaa-6f7264657273\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000+0000\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000+0000\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"eresource\": {\n        \"activated\": false,\n        \"createInventory\": \"Instance, Holding, Item\",\n        \"trial\": false,\n        \"accessProvider\": \"{{activeVendorId}}\",\n        \"materialType\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n      },\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"{{fundId}}\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"{{fundId}}\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0\n        }\n      ],\n      \"isPackage\": false,\n      \"locations\": [\n        {\n          \"locationId\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n          \"quantity\": 2,\n          \"quantityElectronic\": 1,\n          \"quantityPhysical\": 1\n        }\n      ],\n      \"orderFormat\": \"P/E Mix\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"createInventory\": \"Instance, Holding, Item\",\n        \"materialType\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000+0000\",\n        \"volumes\": [\n          \"vol.1\"\n        ]\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"99999{{poNumberNum}}-1\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"purchaseOrderId\": \"4e743b7d-1852-4f04-8502-ab24e8adb918\",\n      \"receiptStatus\": \"Pending\",\n      \"reportingCodes\": [],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"tags\": {\n        \"tagList\": [\n          \"important\"\n        ]\n      },\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      },\n      \"metadata\": {\n        \"createdDate\": \"2020-06-07T17:37:12.481+0000\",\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\n        \"updatedDate\": \"2020-06-07T17:37:12.481+0000\",\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\n      }\n    }\n  ],\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-06-07T17:37:04.546+0000\",\n    \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\n    \"updatedDate\": \"2020-06-07T17:37:04.546+0000\",\n    \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa9a004a-5e42-44f3-8306-274a69910504",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let title = pm.response.json().titles[0];",
											"    pm.expect(title.id).to.exist;",
											"    pm.environment.set(\"_title_id\", title.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33bea620-e044-4240-ad20-80f660039d8c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{_poline_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{_poline_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0273b483-2a93-40d2-83a3-1ab07419e6a7",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"_first_piece_id\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d4c14ea-08ce-4642-ba57-67fdeae68599",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Physical\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_itemId}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5896d154-8538-40ed-b17a-a882b1dc5dff",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Electronic\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a5e49ce-87e9-454b-b316-b34a3e7a77d6",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Electronic\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order - Pieces Need To Be Deleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a572a6c1-d036-478c-89bd-2f7bba148f99",
										"exec": [
											"let updatedOrder = pm.environment.get(\"_purchaseOrder\");",
											"updatedOrder.workflowStatus = \"Open\";",
											"console.log(updatedOrder);",
											"pm.variables.set(\"updatedOrder\", JSON.stringify(updatedOrder));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "579e06c6-7e0d-41d3-ab97-3e13b46c746d",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.text()).to.include(\"piecesNeedToBeDeleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{_order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Piece #1 - There are Requests on Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "880afdfb-a79c-47b1-b22c-c02f941e142d",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.text()).to.include(\"thereAreRequestsOnItem\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{_first_piece_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{_first_piece_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item - Item is not deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "303c76db-9b6d-43eb-a300-8469e07c60e3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items",
										"{{_itemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4056f6b5-2e02-4f80-9667-8d2138d92ea9",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "text/plain"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests/{{_requestId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"request-storage",
										"requests",
										"{{_requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Piece - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a06ac25-67e2-4cc9-8709-438e21e98ef0",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{_first_piece_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{_first_piece_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item - Item is deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c15ce2c-d003-4812-acf6-64bcb8ebc9bf",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items",
										"{{_itemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4fa332e3-d4b5-4778-abe4-139168f03fdf",
										"exec": [
											"let updatedOrder = pm.environment.get(\"_purchaseOrder\");",
											"updatedOrder.workflowStatus = \"Open\";",
											"console.log(updatedOrder);",
											"pm.variables.set(\"updatedOrder\", JSON.stringify(updatedOrder));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6325729d-279b-4bf2-9c1e-3621d39aefe3",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{_order_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4b6aa16-1ba0-472c-bfa9-aad54cad5a25",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "00052c53-90b9-4b13-902b-1fa5157a1fb8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "898769c9-ff3a-4028-9604-d661b01c3df7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "874164eb-49fe-4a66-9863-9af4b230b4ca",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create finances with restrictions",
					"item": [
						{
							"name": "Restricted Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b27efcfa-13ab-4694-a9be-efe0053a8046",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedLedgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2ee44a9-2320-4a6a-ad27-2cbe74ed1f1d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"ce353f9c-f089-4701-90d1-951d008348f2\",\r\n\t\"code\": \"RESTRICTED-LDGR\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Restricted ledger\",\r\n    \"fiscalYearOneId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n    \"restrictEncumbrance\": true,\r\n    \"restrictExpenditures\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Restricted Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f32f9abf-19df-491a-ab62-0c9d446698e9",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedFundId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0369e3b-2c0d-4818-92a2-4a8b4eb0b499",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"RESTRICTED-FND\",\r\n  \"description\": \"Fund for orders API Tests\",\r\n  \"externalAccountNo\": \"1111111111111111111111111\",\r\n  \"fundStatus\": \"Active\",\r\n  \"ledgerId\": \"{{restrictedLedgerId}}\",\r\n  \"name\": \"Fund for orders API Tests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Restricted Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dba30a96-6891-4bf0-802d-b665339dc80e",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedBudgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5beeb57-7d3c-469b-a7de-648dd51f6da9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Active\",\r\n  \"fundId\": \"{{restrictedFundId}}\",\r\n  \"name\": \"Restricted Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n  \"allowableEncumbrance\": 100.0,\r\n  \"allowableExpenditure\": 100.0,\r\n  \"allocated\": 25,\r\n  \"awaitingPayment\": 2.0,\r\n  \"available\": 3.0,\r\n  \"encumbered\": 4.0,\r\n  \"expenditures\": 5.0,\r\n  \"unavailable\": 14.0\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Order for tests",
					"item": [
						{
							"name": "Create Open order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14f9440e-28c9-4593-9dcc-ab40001fe6c1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6699659-46e7-4c1f-ae92-6eaec0b4676d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Open order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsOpenOrderId\", order.id);",
											"    pm.globals.set(\"negativeTestsOpenPOLineId\", order.compositePoLines[0].id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Open order with one electronic line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "468f6a00-af04-4682-b170-2ec5a380dd1a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildElectronicPoLineContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"line.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
											"",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderWithElectronicPOLBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0f1abdf5-045e-42d8-b98a-973339024100",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Open order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.environment.set(\"negativeTestsOpenElectronicOrderId\", order.id);",
											"    pm.environment.set(\"negativeTestsOpenElectronicOrderBody\", order);",
											"    pm.environment.set(\"negativeTestsOpenElectronicPOLineId\", order.compositePoLines[0].id);",
											"    pm.environment.set(\"negativeTestsOpenElectronicPOLineBody\", JSON.stringify(order.compositePoLines[0]));",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithElectronicPOLBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Closed order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "279b6465-7ddc-4f4d-bd76-ab73efe2ab33",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Closed\";",
											"order.notes = [\"Closed Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"line.paymentStatus = \"Fully Paid\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61b70415-7024-4bd3-83c7-51c99f95eabe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Closed order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsClosedOrderId\", order.id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Pending order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dd985abc-2d3c-4319-9709-fcc3af0ebfbb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"Pending Order for Negative API Tests\"];",
											"order.compositePoLines = [utils.buildPoLineWithMinContent(null)];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2d621031-e7da-476f-b40a-d9a70cb846c9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Pending order created\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let order = pm.response.json();",
											"    pm.globals.set(\"negativeTestsPendingOrderId\", order.id);",
											"    pm.globals.set(\"negativeTestsPendingOrderContent\", JSON.stringify(order));",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Pending\");",
											"",
											"    pm.test(\"Validate that PO Line contains desired data\", function () {",
											"        utils.validatePoLines(order, 1);",
											"        pm.globals.set(\"poLineForNegativeTests\", JSON.stringify(order.compositePoLines[0]));",
											"        pm.globals.set(\"poLineForNegativeTestsId\", order.compositePoLines[0].id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "PUT order isPackage validation",
							"item": [
								{
									"name": "PUT order - package poline with instanceId - 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e89c5567-ee8d-4d90-bc9f-6ad5952da781",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var uuid = require(\"uuid\");",
													"",
													"let orderFor422 = JSON.parse(pm.globals.get(\"negativeTestsPendingOrderContent\"));",
													"orderFor422.compositePoLines[0].isPackage = true;",
													"orderFor422.compositePoLines[0].instanceId = uuid.v4();",
													"",
													"pm.variables.set(\"orderBody422\", JSON.stringify(orderFor422));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bb739832-2033-4163-95fb-46a6443ba9db",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"",
													"    pm.expect(pm.response.text()).to.include(\"InstanceIdNotAllowedForPackagePoLine\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody422}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14b56974-a22c-46fb-a158-585b61666526",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "87937eb3-f837-4f0d-9cdf-e8d6474b19df",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST order - vendor validation",
							"item": [
								{
									"name": "Post order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9d855b7c-f8ac-4ddf-b41b-bc9301442b87",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a852\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "06b845ee-98aa-44e1-84c2-a131ea9189c2",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0f44a975-e833-4730-bb78-034633bd3c8c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "874b280d-5049-42a6-bf58-6a5041eb96f2",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2a61122a-5051-49da-8a07-7cda2cb21292",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3740261d-c929-4a33-bfb8-8d5acd3921a3",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "44295352-3eae-45f3-84b8-a5bcc35c5ae6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d32805ff-9e67-402c-b7b1-e471ef87ab0b",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b1ba0aa-98df-48bb-aea2-8ed1b7e40c57",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "11570278-53ab-49da-96d6-38d27ec9a3b7",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6c89a6b-811d-41bb-8c36-570a10fda886",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "10eb12ae-4324-407b-a17b-a8aa18737625",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Put order - vendor validation",
							"item": [
								{
									"name": "Put order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cd84d381-a0a5-4a18-9b6a-9171ef55719a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0a150fd7-f378-4294-8327-a38e9d1c5e80",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c23cb4fd-0726-433b-8497-a22aa618f657",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2c255b67-522a-4214-9532-82fdce71eed5",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3ce45239-007d-41f2-b9ec-4610204a4b98",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "33b6c512-69ce-44b0-b1d4-6384774bf551",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f2db0a93-a5b2-479c-8cdc-3fae5c600a66",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "592f68bb-bf3e-40a7-af4f-04b317cf95b3",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1f150208-ed14-48c4-9eca-774e65ff1004",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "49e48c7d-8cbe-40ba-adbd-8dda30fbe4be",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c61ecb4a-a70e-4177-af27-3cc5141e861c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "515739f3-0e65-4ba9-b431-54fc45ca8d19",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify missing inventory enties errors",
							"item": [
								{
									"name": "Update pending order to open with missing contributorNameType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "91c67888-d936-4abf-b1fd-661b22a191e2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"uuid = require('uuid')",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"contributorType\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"let contributor = {};",
													"let randomUUID = uuid.v4();",
													"contributor.contributor = \"Test\";",
													"contributor.contributorNameTypeId = randomUUID;",
													"line.contributors = [contributor];",
													"pm.variables.set(\"randomContributorNameTypeId\", randomUUID);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c24109d6-d789-4ac1-b918-2877636f8ca7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingContributorNameType\");",
													"    pm.expect(error.parameters[0].value).to.equal(pm.variables.get(\"randomContributorNameTypeId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing instanceTypeCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b42d50e7-91bd-496a-b097-e5c1f6f874fe",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceTypeCode\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b00328c0-fc6f-46e9-ac5d-eb474b61196e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceTypeCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceTypeCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingInstanceType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "01d4b837-bd83-4559-88de-7851f0954e05",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for missingInstanceType error test\"];",
													"",
													"let line = utils.buildPoLineWithMinContent(null);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3550098f-dd27-404b-aa4b-7fc897e6a7d3",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "08ed5d55-03a7-4ba0-aea4-925df5c92020",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceType\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "deea43f4-1889-4138-898a-d6c232abd531",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceTypeCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing instanceStatusCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25ce7aba-fb98-4d9e-af92-e7d0b14947dc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceStatusCode\";",
													"let value = \"missing-status\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "82667509-bde3-4902-b03a-344bb794fac3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceStatusCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceStatusCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingInstanceStatus error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "01455a7e-d2a7-4e2b-a01e-7c94fca04d33",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for missingInstanceStatus error test\"];",
													"",
													"let line = utils.buildPoLineWithMinContent(null);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "39c2df44-bce6-40c2-a501-0d72fb5f0d39",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceStatus\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-status\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceStatus error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c813d95-3a02-4b28-a3c9-40841e92f2cc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceStatus\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7e2bc14e-dd6e-4e9a-bf3f-eadc5542f4f4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceStatus\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-status\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceStatusCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing loanTypeName config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9a3e656-26c0-4217-aa96-bfd76a4b0113",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-loanTypeName\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a4765386-8b2d-47fd-9cbd-56866b9eb6a2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-loanTypeName",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-loanTypeName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingLoanType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d625e6bf-5da7-4aca-bceb-26cfe224b3bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const uuidv4 = require('uuid');",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"loanType1\";",
													"    ",
													"    //set createInventory value",
													"    order.compositePoLines[0].id = JSON.parse(globals.poLineForNegativeTests).id;",
													"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].titleOrPackage = \"Test title\";",
													"    order.compositePoLines[0].details.productIds[0].productIdType = uuid.v4();",
													"    ",
													"    pm.variables.set(\"orderBody\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9df04adb-ed12-46eb-91c5-d01c7cf07a84",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingLoanType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingLoanType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "88b34e38-48c9-462a-906c-0a5bab4d207e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const uuidv4 = require('uuid');",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order  = utils.prepareOrder(res.json());",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"loanType2\";",
													"    ",
													"    //set createInventory value",
													"    order.compositePoLines[0].id = JSON.parse(globals.poLineForNegativeTests).id;",
													"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].titleOrPackage = \"Test title\";",
													"    order.compositePoLines[0].details.productIds[0].productIdType = uuid.v4();",
													"    ",
													"    pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a72c44ee-0b81-4d05-8440-b8c8c52ae704",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingLoanType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-loanTypeName\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Encumbrance creation failure",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify protected fields modification",
							"item": [
								{
									"name": "Put Open order - Modify Purchase Order Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "33e4ba33-4dfa-40a2-8aa4-8136cb32ad05",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.orderType = \"One-Time\";",
													"    json.approved = true;",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.manualPo = true;",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fc1deb75-9069-485e-b2d2-ac1d380f37fc",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										},
										"description": "Verify that protected fields cannot be modified once order is \"Open\""
									},
									"response": []
								},
								{
									"name": "Put Open order - Modify Composite PO Line Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "63f8c5ee-1776-44b9-af26-2de6c49c408f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let json;",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.globals.get(\"negativeTestsOpenOrderId\"), (err, res) => {",
													"    json = res.json();",
													"    json.compositePoLines[0].acquisitionMethod = \"Exchange\";",
													"    json.compositePoLines[0].rush = true;",
													"    json.compositePoLines[0].titleOrPackage = \"Changing Title\";",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "907500a6-b679-4df8-bea9-00d90b0857d4",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										},
										"description": "Verify that protected fields in Purchase Order Line cannot be modified once order is \"Open\""
									},
									"response": []
								},
								{
									"name": "Put Open order - Modify PO Line Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b8c90205-19c7-4279-8c47-7e3f0432da41",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let json;",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.globals.get(\"negativeTestsOpenPOLineId\"), (err, res) => {",
													"    json = res.json();",
													"    json.donor = \"Donor\";",
													"    json.checkinItems = true;",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4d8f5103-0f7f-4af4-ae05-e6bac40818e5",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{negativeTestsOpenPOLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{negativeTestsOpenPOLineId}}"
											]
										},
										"description": "Verify that protected fields in Purchase Order Line cannot be modified once order is \"Open\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "63d331c5-5e39-4cd8-bd2f-aff0d3cdb45a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f4b354c-3e46-47df-8574-0c3aa0236e02",
										"exec": [
											"pm.test(\"Response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 400"
							},
							"response": []
						},
						{
							"name": "Create empty order with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4b99ffd4-6196-4e56-b290-f7790dc9f3ab",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a14a0cca-5964-4523-8af3-6bf90fd8c7dd",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Vendor and orderType is missing\", function () {",
											"     ",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"vendor\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"orderType\").parameters[0].value).to.equal(\"null\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Create Ongoing order with empty ongoing field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "123f8b53-2bf2-4084-b19e-b0e20d797540",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order = utils.buildOrderWithMinContent();",
											"order.orderType = \"Ongoing\";",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6322b3e1-ea99-4d26-adf0-27d81d9abc96",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Ongoing is missing\", function () {",
											"        pm.expect(jsonData.errors[0].code === \"missingOngoing\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Create One-Time order with ongoing field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "97767605-9174-4012-96a6-cc07036b7b88",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order = utils.buildOrderWithMinContent();",
											"order.ongoing = {};",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "50f1353f-3c9b-4cc4-9b16-79c8e6a99588",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Ongoing is missing\", function () {",
											"        pm.expect(jsonData.errors[0].code === \"ongoingNotAllowed\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Get order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d2497639-5b7b-4c12-8832-9f632f80ee8f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3599a7a2-201f-4f0e-a572-d23b27e2c536",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Update order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fb9af8bb-5d9a-4dda-b1e9-85bab708245f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3c7722c9-cdb0-4dfc-8131-d617fbfc4ccc",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Delete order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d4a5559d-95c1-4f73-85ef-daad418d37d8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32f7b310-2231-46c2-a502-9db153155293",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Get order - valid token, invalid tenant - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4868b565-0ed0-4c59-9558-967052faa56e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ab355ba-8f12-4b88-bb75-1cb012e2a050",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "fs12345678"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 400"
							},
							"response": []
						},
						{
							"name": "Get order - bad token format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d0d49c67-2a6b-483b-b7f4-4a26b756a3da",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "089adc6f-654a-48cc-94f7-c85273682f4e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "bad-token"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get order - invalid token - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6ea210ce-5daf-47d8-8752-00353e4f7ac5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c42d9e7c-64ee-44a5-a978-0b685feae378",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id request that return 401"
							},
							"response": []
						},
						{
							"name": "Get order - random order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48be21e5-11f0-4c3c-b8bd-a2eae75e95a1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0eba014-5aee-4e38-a96a-5f6ae0f262a9",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get order - empty order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83993e77-6e50-4e49-98fc-151e3bbc75c5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e53f8a07-286b-4f5e-95ff-5f49862871eb",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										""
									]
								},
								"description": "GET /orders/composite-orders/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update order - empty poNumber - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cdc0dfe-ff70-4d4f-91bc-f82fe22c31e3",
										"exec": [
											"pm.variables.set(\"poLineId\", eval(globals.loadUtils).getLastPoLineId());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f568566e-2544-417b-bf30-10f794314dc7",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsPendingOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5d436316-4ac3-4200-adca-b0f17a7cbc59",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsOpenOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eda2ddd9-6abb-4aac-a599-4857c598dac6",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Closed order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dd273d81-20ec-416b-a126-72b78856298b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsClosedOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6d12dc0c-7355-4fa0-b5c0-afc7edf60aac",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsClosedOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsClosedOrderId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lines",
					"item": [
						{
							"name": "isPackageValidation",
							"item": [
								{
									"name": "PUT line - package with insanceId - 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "561ece32-43b0-4cb2-b0a8-f1a0806fb510",
												"exec": [
													"var uuid = require(\"uuid\");",
													"",
													"let line = JSON.parse(pm.globals.get(\"poLineForNegativeTests\"));",
													"",
													"line.isPackage = true;",
													"line.instanceId = uuid.v4();",
													"pm.variables.set(\"po_line_isPackage422\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d1b743f2-b66a-4d3f-b5e5-39e8b9379647",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"",
													"    pm.expect(pm.response.text()).to.include(\"InstanceIdNotAllowedForPackagePoLine\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_isPackage422}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineForNegativeTestsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineForNegativeTestsId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 422"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify PO Line required properties",
							"item": [
								{
									"name": "Create line - without required fields- 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "28b4c1e6-f0f6-4f59-8f0f-88d688b9ebc3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
													"delete line.source;",
													"delete line.cost;",
													"delete line.titleOrPackage;",
													"delete line.orderFormat;",
													"delete line.acquisitionMethod;",
													"pm.variables.set(\"line_body\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db9dbaed-5dca-41b4-aa41-5f46c3d9bc86",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    ",
													"});",
													"pm.test(\"5 validation errors\", function () {",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Quantity validation",
							"item": [
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9969283c-0166-4a33-849d-3fbad994c1f9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Physical Resource\";",
													"        line.cost.quantityElectronic = 5;",
													"        line.cost.quantityPhysical = 0;",
													"        line.cost.listUnitPrice = 10;",
													"        line.cost.listUnitPriceElectronic = 0;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"        var emptyLocation = {};",
													"        emptyLocation.locationId = line.locations[0].locationId;",
													"        emptyLocation.quantityElectronic = 0;",
													"        emptyLocation.quantityPhysical = 0;",
													"        ",
													"        line.locations.push(emptyLocation);",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "20ef261a-2613-4585-9de1-45e5dda0c728",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"5 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8df74afe-3469-42b4-9541-fb84b7af3365",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Electronic Resource\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        line.cost.listUnitPrice = 0;",
													"        line.cost.listUnitPriceElectronic = 10;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "39e2e9e3-54fe-4041-a6c6-1cba4f8a70cd",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"4 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify P/E Mix Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e18d39d5-df09-4643-ad52-ead297107552",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.id = JSON.parse(globals.poLineForNegativeTests).id;",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"P/E Mix\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"        pm.variables.set(\"lineId\", line.id);",
													"",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d415e757-8ff7-46ed-9df7-da1ab4546711",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"3 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{lineId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cost Prices",
							"item": [
								{
									"name": "Verify P/E Mix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "afaa0a74-87ec-4ae2-89f4-66ca348dc392",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph_pe_mix.json\", (err, res) => {",
													"    let line = res.json().compositePoLines[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = -1;",
													"    // Zero price is allowed MODORDERS-197",
													"    line.cost.listUnitPriceElectronic = 0;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = 101;",
													"    line.cost.discountType = \"percentage\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3f7930cc-2ad3-4f8c-aecf-6e63976276d9",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7d3e3fcc-6bed-48bc-ab52-29bacd1d5016",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Physical Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 0;",
													"    line.cost.listUnitPriceElectronic = 10;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46e21c9d-939b-433a-a813-8556bf0cdc1b",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e9eaf204-cb8d-42f9-83f5-cba04a327000",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Electronic Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 10;",
													"    line.cost.listUnitPriceElectronic = -0.00000000001;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "505fd893-2117-4a73-bcd0-6842a0779466",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order lines - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "880a8178-b9de-407f-a8f8-a41aab3810ae",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1287155f-18bb-4537-a578-12aa3f2e2bcc",
										"exec": [
											"pm.test(\"PO line response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "33eba53f-ad8f-4b35-8577-f7ff139b4512",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79b66152-7ba8-4bb8-8b8f-faa48f9ecefc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "93a16acc-aa84-4e43-bea8-5800782ec77d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bda9e05a-a55f-4638-8602-27646ef32828",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get line - empty polineId - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "08bfcedb-cd60-4e2f-a8fa-fde74338a5ee",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "278775f5-00f2-4ec2-8d2e-11877a20f558",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										""
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - inactive accessProvider - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "709f58be-9d56-4820-b1e8-0abdc96038fa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + pm.environment.get(\"negativeTestsOpenElectronicPOLineId\"), (err, res) => {",
											"    let electr_line = res.json();",
											"",
											"    electr_line.eresource.accessProvider = pm.environment.get(\"inactiveVendorId\");",
											"",
											"    pm.variables.set(\"electr_line_body\", JSON.stringify(electr_line));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "491b1cf8-cf30-42dc-a7de-1acf68671457",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{electr_line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{negativeTestsOpenElectronicPOLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{negativeTestsOpenElectronicPOLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "20e2b368-a578-4001-b3ba-ecad1c8696ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b467530e-b315-4684-bd6c-7a5fffc1363e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14f4a86f-2185-41ed-a4db-842308a57937",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c66cf96-a945-4164-8050-fe144195e37d",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d3223169-7392-4f58-8ed8-e684c75c0545",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "255456f9-648d-43d6-ba25-dd66e2a6886d",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aa0d7557-4a4a-4171-8f3b-7ef8e1ea3c37",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "08d7f426-10c5-46cd-9baf-dfe5e1079839",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Update line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "00fa91ec-b0b0-4db2-bbbe-e9250e514f97",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89d89f1a-e2db-4e54-bb74-610b7a3d8595",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Delete line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d0df3222-a9a4-47ec-94bc-c9d85a9ec686",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bb9d9b97-36b2-47ed-9ddc-934191fcccd8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line - invalid order Id in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f35459ac-9f1d-49cf-8c08-c9a7a7788f04",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"line.purchaseOrderId = \"\";",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8f35fce7-8dc7-44f9-8a17-def1fa0ef2f6",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/order-lines/id requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line to Open order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a6bc40d3-fcdf-4405-8d20-52fb1a45683f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsOpenOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58e42c65-1157-4379-a14c-648eaecfff5c",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add line to Closed order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d599f11-2be1-479a-bf60-3919f5262e5b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsClosedOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a275203f-f7f0-4c6b-b8e7-c4e92ba2e2c0",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate - existing PO Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "988a411f-c980-4f25-9295-ae61e9ceb80e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsPendingOrderId, function (err, res) {",
											"    pm.variables.set(\"existing_number\", res.json().poNumber);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b9778f50-20c9-4f4e-ba6f-96916e1f2597",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : {{existing_number}}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 400 if an existing PO Number is supplied"
							},
							"response": []
						},
						{
							"name": "Validate - invalid PONumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c98ee282-94ae-4fbc-80ee-514e198d72e2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "de20ab44-0d1e-4fca-a776-6d44506ed483",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"12-12-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 422 when an invalid PO Number is specified"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Attempt to receive already received pieces for physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f17515b3-f027-4ae3-8724-543993d33a3a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/receiving-history?limit=10&query=receivingStatus==Received and purchaseOrderId=\" + globals.physElecOpenOrderId, (err, res) => {",
											"    let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory);",
											"    pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4d4e1d54-3e41-4696-a518-cb05b0ac4d12",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"All items should be failed because already received before\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(10);",
											"    let processedWithError = 0;",
											"    for(let i = 0; i < jsonRs.receivingResults.length; i++) {",
											"        let result = jsonRs.receivingResults[i];",
											"        pm.expect(result.processedSuccessfully).to.equal(0);",
											"        processedWithError += result.processedWithError;",
											"        for(let j = 0; j < result.receivingItemResults.length; j++) {",
											"            pm.expect(result.receivingItemResults[j].processingStatus).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.type).to.equal(\"failure\");",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"        }",
											"    }",
											"    pm.expect(processedWithError).to.equal(jsonRs.totalRecords);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records created by previous request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "check-in already received piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d7fd35d-3a08-4257-9db4-a94f7f728197",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 piece failed to process\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, 0, 1);",
											"    let receivingItemResults = jsonRs.receivingResults[0].receivingItemResults;",
											"     pm.expect(receivingItemResults[0].processingStatus).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.type).to.equal(\"failure\");",
											"     pm.expect(receivingItemResults[0].processingStatus.error).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c331d2b-92a3-4215-bbf9-320bdd1bc4e6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Title",
					"item": [
						{
							"name": "Create po line for title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16a429b8-628b-4fab-882d-269eb91b0338",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70232221-f9f2-4662-85d0-0ea4c4359b47",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    ",
											"    pm.environment.set(\"poLineIdForTitle\", jsonData.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/id/lines/id requests that return 201"
							},
							"response": []
						},
						{
							"name": "Create title with titleExist error",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a17ad4f-0c86-4984-9adc-565148a4a3e1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d290f3f9-6b1b-4a18-99b9-fb4886fc6dbc",
										"exec": [
											"pm.test(\"Title status code is 422\", function() {",
											"    pm.response.to.have.status(422);",
											"});",
											"pm.test(\"Response contains titleExist error code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"titleExist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Piece",
					"item": [
						{
							"name": "Update piece by id - bad id 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2dbcc3df-694b-45fe-a8fa-aca712925a89",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6eb9c0ff-69ef-4d53-9aa1-74c0feb4c609",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Edit piece by id - bad format 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bf14da70-70c1-4f86-b068-b44094772534",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "80fd835e-e2fb-41c5-8c7c-6b98321de225",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"bad-id-format\",\n    \"caption\": \"Tutorial Volume 5\",\n    \"comment\": \"Special Edition\",\n    \"format\": \"Physical\",\n    \"itemId\": \"522a501a-56b5-48d9-b28a-3a8f02482d97\",\n    \"locationId\": \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"poLineId\": \"7decd831-8295-4a9d-9247-320d165583bf\",\n    \"receivingStatus\": \"Expected\",\n    \"supplement\": true,\n    \"receivedDate\": \"2018-10-10T00:00:00.000+0000\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id-format"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id - bad format 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "015afae6-6cd6-40d3-8c44-67f6d744312e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b764072c-83f9-479b-bcec-9fbd9560a164",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Create empty piece with missing required fields 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "058acf6e-5559-4306-8d10-d892c3df8a6f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef1f85f2-e2e4-4cf3-a605-4c11439bd674",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"        requiredObj(errors, \"poLineId\");",
											"        requiredObj(errors, \"format\");",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"must not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											"",
											"function requiredArray(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"size must be between 1 and 2147483647\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"[]\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a piece with empty body"
							},
							"response": []
						},
						{
							"name": "get title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5dff8797-cb26-4d9c-8a4f-7d70c9cf72c3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.environment.set(\"poLIneIdForTitle\", utils.getLastPoLineId());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca4e31a8-3f31-49c3-ade2-7c7e103e3eb3",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let titles = pm.response.json();",
											"    pm.variables.set(\"titleId\", titles.titles[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{poLIneIdForTitle}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLIneIdForTitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create piece with missing receiptDate 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "11bb0ecd-20a8-4cef-aa43-32680ca35dc1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function(err, res) {",
											"    let piece = res.json();",
											"    delete piece.receiptDate;",
											"    piece.poLineId = pm.variables.get(\"poLineId\");",
											"    piece.titleId = pm.variables.get(\"titleId\");",
											"    pm.globals.set(\"pieceRecord\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "088aa8d3-f04a-407a-8d85-87945b911a25",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{pieceRecord}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a piece with empty body"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ISBN validation",
					"item": [
						{
							"name": "Create Order with invalid ISBN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6eee455c-e175-4ab7-bc06-3ae2e66e0e73",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    order = utils.deletePoNumber(order);",
											"    order.compositePoLines.pop();",
											"    let preparedOrder = utils.prepareOrder(order);",
											"    ",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds[0].productId = \"1-4028-9462-7456\";",
											"    preparedOrder.compositePoLines[0].details.productIds[0].productIdType = pm.environment.get(\"isbnIdentifierTypeId\");",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(preparedOrder));",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aaa47307-4f7f-4747-881e-b6c97083b0dc",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"invalidISBN\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Approval",
					"item": [
						{
							"name": "Create order with \"approval required\" set to true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4378ab02-53c4-4a96-a269-6d0a33cc46ef",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/configurations/entries?query=module==ORDERS and configName==approvals\", (err, res) => {",
											"  let configName = \"approvals\";",
											"  let value = \"{\\\"isApprovalRequired\\\":true}\";",
											"",
											"  utils.updateOrCreateOrdersConfig(res.json().configs, configName, value);",
											"});",
											"",
											"    ",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_without_po_lines.json\", (err, res) => {",
											"    let order = utils.prepareOrder(res.json());",
											"    order.poNumber = \"TSTAPPROVAL\";",
											"    order.approved = false;",
											"    order.workflowStatus = \"Open\";",
											"    ",
											"    order.id = \"00000001-1111-5555-8888-888888888888\";",
											"",
											"    pm.globals.set(\"orderWithApprovalReqTrueId\", order.id); ",
											"    pm.variables.set(\"orderWithApprovalReqTrue\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0f1ded1a-bb07-4e85-a53d-6be002d3ad2f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"Approval is required to open order\");",
											"    pm.expect(pm.response.text()).to.include(\"orderApprovalRequired\");",
											"    ",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithApprovalReqTrue}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved for it to be transitioned to be open status"
							},
							"response": []
						},
						{
							"name": "Create order with user not having approval permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c66a1e2f-0c2a-43aa-8e84-9d08eb199e36",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_without_po_lines.json\", (err, res) => {",
											"    let order = res.json();",
											"    order.poNumber = \"TST123APPROVAL1\";",
											"    order.approved = true;",
											"    ",
											"    pm.variables.set(\"orderWithNoApprovalPerms\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7c856f0d-6552-4c57-a1f4-9fa4d6ef6d98",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User does not have permissions to approve order - operation is restricted\");",
											"    pm.expect(pm.response.text()).to.include(\"userHasNoApprovalPermission\");",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-restricted}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithNoApprovalPerms}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Unopen",
					"item": [
						{
							"name": "Unopen order with user not having permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a5a6731-35b2-4f89-af94-2bb72aff716b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let orderForUnopen = pm.environment.get(\"negativeTestsOpenElectronicOrderBody\");",
											"",
											"orderForUnopen.workflowStatus = \"Pending\";",
											"",
											"pm.variables.set(\"orderUnopenBody\", JSON.stringify(orderForUnopen));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "13b3bd2c-e5ff-40e2-9c51-7e935dfe3192",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User does not have permissions to move order from open to pending - operation is restricted\");",
											"    pm.expect(pm.response.text()).to.include(\"userHasNoOrderUnopenPermission\");",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-restricted}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderUnopenBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenElectronicOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenElectronicOrderId}}"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ecc959ea-1ef5-4ed9-beb3-a07e84bb5cda",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c37292a-38e5-4532-aaa9-83eacfbfd15e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Templates",
					"item": [
						{
							"name": "Get updated order templates collection - invalid query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f0aaddbc-2752-4fc1-a438-eca0c3df7244",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d092819f-63ed-4793-a650-8c66e2ff180f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates?query=invalid-query",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid-query"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order template - not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a053fcbd-bae1-4c87-8513-d3ee2031e07e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f901b94-dc8e-44e9-aab5-fce4dbf29153",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"configuration",
										"suffixes",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order template - id mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "394f1776-23cd-4b1a-b6c4-4e99ad7d8fd9",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
											"pm.variables.set(\"updatedOrderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "34989694-2e52-4860-8b06-d398d7018e06",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order template - not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bc63da1f-6037-4a67-824d-9c4dfa605af2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8e936123-3c35-4be5-86f1-75c27cced768",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Encumbrance creation failure",
					"item": [
						{
							"name": "Create Open order with lines pointing to unexisting fund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9739c31-25fd-48f7-9c71-d0ac4b575b2a",
										"exec": [
											"let utils = eval(globals.loadUtils);\t\r",
											"var uuid = require('uuid');\t\r",
											"\r",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {\t\r",
											"    let order  = utils.prepareOrder(res.json());\r",
											"    order.workflowStatus = \"Open\";\r",
											"    // Setting specific PO Number to delete this order in cleanup\"\r",
											"    order.poNumber = \"APIFAILENCUMB1\";\r",
											"    order.compositePoLines.forEach(poLine => {\r",
											"        poLine.receiptStatus = \"Receipt Not Required\";\r",
											"        // Setting random fund id\"\r",
											"        poLine.fundDistribution.forEach(distrib => distrib.fundId = uuid.v4());\r",
											"    });\r",
											"    pm.variables.set(\"order_with_unexisting_fund\", JSON.stringify(order));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "52aa542e-1a3f-456d-a921-22516d4f2ce8",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\t\r",
											"pm.test(\"Server error is expected: encumbranceCreationFailure\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    let errors = pm.response.json().errors;\r",
											"    pm.expect(errors).to.have.lengthOf(1);\r",
											"    pm.expect(errors[0].code).to.equal(\"fundsNotFound\");\r",
											"});\r",
											"\t\r",
											"utils.sendGetRequest(\"/orders/order-lines?query=poNumber==APIFAILENCUMB1\", function (err, res) {\r",
											"    pm.expect(err).to.equal(null);\r",
											"\t\r",
											"    res.json().poLines.forEach(poLine => {\r",
											"        utils.validateEncumbranceRecords(poLine, \"Pending\");\r",
											"        pm.globals.set(\"negativeTestsFailedEncumbrances\", poLine.purchaseOrderId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_with_unexisting_fund}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Open order. Ledger is restricted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0fb9414-74ac-4a4e-9e0b-2a21ce67b951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let openOrder = utils.prepareOrder(res.json());",
											"    openOrder.workflowStatus = \"Open\";",
											"    delete openOrder.poNumber;",
											"",
											"    // Setting restricted fund id\"",
											"    openOrder.compositePoLines[0].fundDistribution[0].fundId = pm.environment.get(\"restrictedFundId\");",
											"",
											"    pm.variables.set(\"order_with_insufficient_funds\", JSON.stringify(openOrder));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f74f6fc-c80f-4342-bb5a-50a98d0fb4e2",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\t\r",
											"pm.test(\"Server error is expected: encumbranceCreationFailure\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    let errors = pm.response.json().errors;\r",
											"    pm.expect(errors).to.have.lengthOf(1);\r",
											"    pm.expect(errors[0].code).to.equal(\"fundCannotBePaid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_with_insufficient_funds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Reason for closure",
							"item": [
								{
									"name": "Get reason for closure collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8792812d-a54c-4b42-bdfa-27fbe40eee13",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b614ead1-32b3-4ce3-af3b-b4d774c42f86",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6d6c3098-ba0c-4736-ac33-95ccf8b34da3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8b292fa9-ae2f-42f7-8691-fa26c7f144a1",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update reason for closure - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d7c31d82-6a21-47cb-82d0-1651aa67f2e6",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedReasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "54b24585-4e71-44b4-b080-d4ec4fe6bde8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedReasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete reason for closure - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2328855b-294f-482e-a3de-1a49d6e2fbf8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5de1556a-dce7-41f7-bc9f-419b572843cd",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prefix",
							"item": [
								{
									"name": "Get prefix collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fff58661-2f1a-4a4b-b3e5-e8dbc4973c39",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ec667f59-4cbd-4f8b-945a-30c2ebf119fd",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "caa9b636-ce46-417d-832b-5c3aedc7fb54",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "06537ee5-f88a-462e-8ba4-4a3f9c3bedab",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-templates",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update prefix - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b16908b3-1f37-457b-a29a-ce3893a2b75f",
												"exec": [
													"let body = globals.testData.prefix;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedPrefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d3c8e5d4-beec-45d4-82ae-fe85e884fc46",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPrefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete prefix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ba89e8bd-d0b7-4af0-bdd1-2b02de54b94b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2938ebdf-67e5-41ea-a99b-44bd9077d736",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Suffix",
							"item": [
								{
									"name": "Get suffix collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "edbfdc05-fd11-4f7b-bb81-13a166bfa542",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b371e1ae-7732-4ae4-b848-c80054109ce9",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "22eda864-ea82-4e8e-b2ac-dad521a8309a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b3f2d01b-c472-41b5-90db-512d6079ff22",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update suffix - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "69506bfc-0efd-4c1a-a681-0be822288693",
												"exec": [
													"let body = globals.testData.suffix;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedSuffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "754def1d-7dcb-4881-ab37-85f1f143d100",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedSuffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete suffix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "28c74d7d-b27a-46a7-9347-beb7481cb838",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3f9ccbae-634d-4273-8693-fdbf7ee3d0cf",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create order in Pending status without material types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8fafa2b-4d67-4408-8d11-dec52af2e32d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_po_line_without_material_type.json\", function (err, res) {",
											" let order  = res.json()//utils.buildOrderWithMinContent();",
											" order.compositePoLines[0].alerts = [];",
											" order.compositePoLines[0].reportingCodes = [];",
											"",
											" pm.environment.set(\"prepared_string_order_po_line_without_material_type\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9f9f853d-d1c0-421f-b286-70d7cc29afa2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.environment.set(\"orderIdWithoutMaterialType\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{prepared_string_order_po_line_without_material_type}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Get composite order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2cba1f2-f71b-476b-b8de-571aa4627035",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.environment.set(\"prepared_order_po_line_without_material_type_for_transfer\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2732c37c-0175-4ef3-b370-3423ff5e7910",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdWithoutMaterialType}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderIdWithoutMaterialType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failed transition from Pending to Open without material type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e31720a5-e4ed-4534-8d17-360748e3a5d6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"  let originOrder  = pm.environment.get(\"prepared_order_po_line_without_material_type_for_transfer\");",
											"  console.log(originOrder)",
											"  let orderForPut = utils.buildOrderWithMinContent();",
											"  console.log(orderForPut)",
											"",
											"",
											"  orderForPut.id = originOrder.id;",
											"  orderForPut.poNumber = originOrder.poNumber;",
											"   orderForPut.reEncumber = originOrder.reEncumber;",
											"   orderForPut.totalEstimatedPrice = originOrder.totalEstimatedPrice",
											"   orderForPut.totalItems = originOrder.totalItems",
											"   orderForPut.vendor = originOrder.vendor",
											"  orderForPut.workflowStatus = \"Open\"",
											"   orderForPut.acqUnitIds = []",
											"   orderForPut.metadata = originOrder.metadata",
											"",
											"  pm.environment.set(\"orderForPut_without_material_type\", JSON.stringify(orderForPut));    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6a57f60f-5f44-4434-816a-0a1f384e7eb6",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForPut_without_material_type}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdWithoutMaterialType}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderIdWithoutMaterialType}}"
									]
								},
								"description": "Transition from Pending to Open without material type should be blocked\n[MODORDERS-176](https://issues.folio.org/browse/MODORDERS-176)"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1744d6d-1826-4ca1-ae4e-afcc4b964618",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1de9826d-fe7a-489b-bf6f-596446d86e0e",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "866aaa25-9644-4c50-bd60-378189148269",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5640d244-bf84-437c-82fa-ec49f985194e",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b44beb94-2db7-4d98-9bda-a52004550626",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [",
					"            \"poLines-limit\",",
					"            \"inventory-instanceTypeCode\",",
					"            \"inventory-instanceStatusCode\",",
					"            \"inventory-loanTypeName\",",
					"            \"approvals\"",
					"        ],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    tenantConfig: {",
					"        configNames: [\"tenant.addresses\"],",
					"        bodyTemplate: {",
					"            \"module\": \"TENANT\",",
					"            \"code\": \"ADRESSES_123\",",
					"            \"configName\": \"Test TENANT Config\",",
					"            \"description\": \"Tenant config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Admin\",",
					"                    \"lastName\": \"Orders API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": []",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"User\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-user\",",
					"                \"password\": \"mod-orders-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\",",
					"                    \"orders.item.approve\",",
					"                    \"orders.item.unopen\",",
					"                    \"orders-storage.pieces.collection.get\",",
					"                    // To be removed when MODINV-120 is resolved",
					"                    \"inventory-storage.items.collection.get\",",
					"                    \"inventory-storage.items.item.get\",",
					"                    \"inventory-storage.instances.item.get\",",
					"                    \"inventory.items.item.get\"",
					"                ]",
					"            }",
					"        },",
					"        restricted: {",
					"            user: {",
					"                \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-restricted-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"User\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-restricted-user\",",
					"                \"password\": \"mod-orders-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\",",
					"                    \"orders-storage.pieces.collection.get\",",
					"                    // To be removed when MODINV-120 is resolved",
					"                    \"inventory-storage.items.collection.get\",",
					"                    \"inventory-storage.items.item.get\",",
					"                    // To be removed when",
					"                    \"inventory-storage.instances.item.get\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test orders tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    },",
					"    receiving: {",
					"        bodyTemplate: {",
					"            \"toBeReceived\": [{",
					"                \"poLineId\": \"\",",
					"                \"received\": 1,",
					"                \"receivedItems\": [{",
					"                    \"barcode\": \"11111111111\",",
					"                    \"callNumber\": \"BF2050 .M335 1999\",",
					"                    \"comment\": \"Very important note\",",
					"                    \"caption\": \"Vol. 1\",",
					"                    \"itemStatus\": \"In process\",",
					"                    \"locationId\": pm.variables.get(\"locationId2\"),",
					"                    \"pieceId\": \"\"",
					"                }]",
					"            }],",
					"            \"totalRecords\": 1",
					"        }",
					"    },",
					"    piece: {",
					"        bodyTemplate: {",
					"            \"caption\": \"Volume\",",
					"            \"comment\": \"creating Piece from API test\",",
					"            \"format\": \"\",",
					"            \"locationId\": \"\",",
					"            \"poLineId\": \"\",",
					"            \"receivingStatus\": \"Expected\",",
					"            \"supplement\": true",
					"        }",
					"    },",
					"    checkin: {",
					"        bodyTemplate: {",
					"            \"toBeCheckedIn\": [",
					"                {",
					"                    \"poLineId\": \"\",",
					"                    \"checkedIn\": \"\",",
					"                    \"checkInPieces\": [",
					"                        {",
					"                            \"id\": \"\",",
					"                            \"barcode\": Math.floor(Math.random() * 1000),",
					"                            \"callNumber\": \"BF2050 .M335 1999\",",
					"                            \"comment\": \"checkedin from API test\",",
					"                            \"caption\": \"Vol. 1\",",
					"                            \"createItem\": true,",
					"                            \"supplement\": false,",
					"                            \"locationId\": \"\",",
					"                            \"accessionNumber\": \"1956.1\",",
					"                            \"itemDescription\": \"This is the piece item checkin\",",
					"                            \"electronicBookplate\": \"This item is from API tests\"",
					"                        }]",
					"                }],",
					"            \"totalRecords\": 1",
					"        }",
					"    },",
					"    item: {",
					"        bodyTemplate: {",
					"            \"holdingsRecordId\": \"\",",
					"            \"permanentLoanTypeId\": pm.variables.get(\"loanTypeId\"),",
					"            \"materialTypeId\": pm.variables.get(\"materialTypeId\"),",
					"            \"status\": {",
					"                \"name\": \"On order\"",
					"            },",
					"            \"purchaseOrderLineIdentifier\": \"\"",
					"        }",
					"    },",
					"    orderTemplate: {",
					"        id: \"f5b6ad51-58a3-44cd-88e3-b612ea8ff15b\",",
					"        templateCode: \"Amazon-L\",",
					"        templateDescription: \"Use to create orders in FOLIO after they are placed on Amazon\",",
					"        templateName: \"Amazon orders\",",
					"        acquisitionMethod: \"Purchase At Vendor System\",",
					"        approved: true",
					"    },",
					"    reasonForClosure: {",
					"        reason: \"Test closure reason\",",
					"        source: \"User\"",
					"    },",
					"    prefix: {",
					"        name: \"Test prefix\",",
					"        description: \"Test prefix description\"",
					"    },",
					"    suffix: {",
					"        name: \"Test suffix\",",
					"        description: \"Test suffix description\"",
					"    },",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"orders_schema_\";",
					"",
					"    utils.validateReceivingHistory = function (history) {",
					"        pm.expect(history.id, \"Piece id expected\").to.exist;",
					"        pm.expect(history.dateOrdered, \"Order date expected\").to.exist;",
					"        pm.expect(history.checkin, \"Checkin expected\").to.exist;",
					"        pm.expect(history.poLineId, \"PO Line id expected\").to.exist;",
					"        pm.expect(history.poLineNumber, \"PO Line number expected\").to.exist;",
					"        pm.expect(history.pieceFormat, \"Piece format expected\").to.exist;",
					"        pm.expect(history.poLineReceiptStatus, \"Receipt status expected\").to.exist;",
					"        pm.expect(history.purchaseOrderId, \"Purchase order id expected\").to.exist;",
					"",
					"    };",
					"",
					"    utils.validatePiece = function (piece) {",
					"        pm.expect(piece.id, \"Piece id expected\").to.exist;",
					"        pm.expect(piece.format, \"Piece format expected\").to.exist;",
					"        pm.expect(piece.poLineId, \"Piece Po LineId expected\").to.exist;",
					"        pm.expect(piece.receivingStatus, \"Piece receiving status expected\").to.exist;",
					"    };",
					"",
					"    utils.validateEncumbrance = function (encumbrance, fundDistributions) {",
					"        pm.expect(encumbrance.id, \"Encumbrance id expected\").to.exist;",
					"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered, \"Amount encumbered expected\").to.exist;",
					"        pm.expect(encumbrance.fromFundId, \"Encumbrance fund id expected\").to.exist;",
					"        pm.expect(encumbrance.encumbrance.status, \"Encumbrance receiving status expected\").to.exist;",
					"        pm.expect(encumbrance.amount, \"Encumbrance amount is expected\").to.exist;",
					"",
					"        let filteredArray = fundDistributions.filter(fundDistribution => fundDistribution.encumbrance === encumbrance.id);",
					"        pm.expect(filteredArray).to.have.lengthOf(1);",
					"        let fundDistribution = filteredArray[0];",
					"        pm.expect(encumbrance.fromFundId).to.eql(fundDistribution.fundId);",
					"    };",
					"",
					"    /**",
					"     * Sends request with specified Method and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function (path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines for Fund Distribution.",
					"     */",
					"    utils.prepareOrderFundDistri = function (order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLineFundDistri(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data for Fund Distribution.",
					"     */",
					"    utils.preparePoLineFundDistri = function (poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function (order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLine(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function (poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"cost\")) {",
					"            delete poLine.cost.poLineEstimatedPrice;",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Sets new unique product ID.",
					"     */",
					"    utils.makeProductIdUnique = function (productId) {",
					"        let newProductId = pm.environment.has(\"uniqueProductId\") ? pm.environment.get(\"uniqueProductId\") : 10000000000;",
					"        pm.environment.set(\"uniqueProductId\", ++newProductId);",
					"",
					"        // Update productId with new values",
					"        productId.productId = newProductId;",
					"        productId.productIdType = pm.environment.get(\"identifierTypeId\");",
					"    };",
					"",
					"    /**",
					"     * Build Order with minimal required fields.",
					"     */",
					"    utils.buildOrderWithMinContent = function () {",
					"        return {",
					"            \"vendor\": pm.variables.get(\"activeVendorId\"),",
					"            \"orderType\": \"One-Time\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build PO line with minimal required fields.",
					"     */",
					"    utils.buildPoLineWithMinContent = function (orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": \"User\",",
					"            \"orderFormat\": \"Physical Resource\",",
					"            \"physical\": {",
					"                \"createInventory\": \"None\"",
					"            },",
					"            \"cost\": {",
					"                \"currency\": \"USD\",",
					"                \"listUnitPrice\": 1,",
					"                \"quantityPhysical\": 1",
					"            },",
					"            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					" * Build PO line with minimal required fields.",
					" */",
					"    utils.buildElectronicPoLineContent = function (orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": \"User\",",
					"            \"orderFormat\": \"Electronic Resource\",",
					"            \"eresource\": {",
					"                \"createInventory\": \"None\"",
					"            },",
					"            \"cost\": {",
					"                \"currency\": \"USD\",",
					"                \"listUnitPriceElectronic\": 1,",
					"                \"quantityElectronic\": 1",
					"            },",
					"            \"locations\": [",
					"                {",
					"                    \"locationId\": pm.environment.get(\"locationId1\"),",
					"                    \"quantity\": 1,",
					"                    \"quantityElectronic\": 1,",
					"                    \"quantityPhysical\": 0",
					"                }",
					"            ],",
					"            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Title with minimal required fields.",
					"     */",
					"    utils.buildTitleWithMinContent = function (lineId) {",
					"        return {",
					"            \"title\": \"Test Title\",",
					"            \"poLineId\": lineId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Order in status \"Open\" without PO Number.",
					"     */",
					"    utils.prepareOpenOrderWithoutPoNumber = function (order) {",
					"        let json = utils.prepareOrder(order);",
					"        json.workflowStatus = \"Open\";",
					"        utils.deletePoNumber(json);",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO lines of expected quantity and its sub-object elements",
					"     */",
					"    utils.validatePoLines = function (order, expectedCount) {",
					"        let checkInventory = order.workflowStatus !== \"Pending\";",
					"        pm.expect(order.compositePoLines).to.have.lengthOf(expectedCount);",
					"        order.compositePoLines.forEach(poLine => {",
					"            pm.test(\"Validating PO Line with number=\" + poLine.poLineNumber, function () {",
					"                utils.rememberPoLineId(poLine);",
					"                pm.expect(poLine.purchaseOrderId, \"Line has to have order id\").to.equal(order.id);",
					"                utils.validatePoLineAgainstSchema(poLine);",
					"                poLine.locations.forEach(location => utils.validateLocationQuantity(location));",
					"",
					"                if (checkInventory) {",
					"                    utils.validatePoLinesInventoryLinks(poLine);",
					"                } else {",
					"                    utils.verifyNoInventoryItemsExist(poLine);",
					"                }",
					"                // Validate that expected piece quantity created of expected format",
					"                utils.validatePieceRecords(poLine, checkInventory);",
					"                utils.validateEncumbranceRecords(poLine, order.workflowStatus);",
					"",
					"                if (poLine.cost) {",
					"                    pm.expect(poLine.cost.poLineEstimatedPrice).to.be.above(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates presence of links to Inventory entities (e.g. Instance) and that these links are correct",
					"     */",
					"    utils.validatePoLinesInventoryLinks = function (poLine) {",
					"        // Instance should created only",
					"        if (!utils.inventoryUpdateNotRequired(poLine)) {",
					"            utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + poLine.id, (err, res) => {",
					"                let title = res.json().titles[0];",
					"                utils.sendGetRequest(\"/instance-storage/instances/\" + title.instanceId, (err1, res1) => {",
					"                    pm.test(\"Instance Record exist for PO Line with number=\" + poLine.poLineNumber, () => {",
					"                        let instance = res1.json();",
					"                        pm.expect(instance).to.exist;",
					"",
					"                        //Check if holdings record is created",
					"                        utils.validateHoldingsRecord(poLine);",
					"                        // Now check items",
					"                        utils.validateInventoryItems(poLine);",
					"",
					"                        // Now validate expected instance's content",
					"                        utils.validateInstanceContent(instance, poLine);",
					"                    });",
					"                    pm.expect(title.instanceId, \"Instance id is expected\").to.exist;",
					"                });",
					"            });",
					"",
					"",
					"        } else {",
					"            utils.verifyNoInventoryItemsExist(poLine);",
					"        }",
					"    };",
					"",
					"    utils.validateInstanceContent = function (instance, poLine) {",
					"        pm.expect(instance.title, \"Instance's title is not the same as PO Line's\").to.equal(poLine.titleOrPackage);",
					"",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceStatusCode\") !== null) {",
					"            pm.expect(instance.statusId, \"Instance's status id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceStatusId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's status id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceStatusId\"));",
					"        }",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceTypeCode\") !== null) {",
					"            pm.expect(instance.instanceTypeId, \"Instance's type id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceTypeId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceTypeId\"));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.validateInventoryItems = function (line) {",
					"        let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"        utils.getItemsByPoLineId(line.id, expectedCount, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records exist for PO Line with number=\" + line.poLineNumber, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                let isCheckin = typeof line.checkinItems === \"undefined\" ? false : line.checkinItems;",
					"                //items are not created for checkin while opening the order, but can be created later",
					"                if (utils.isItemsUpdateRequired(line) && !isCheckin) {",
					"                    pm.expect(body.totalRecords, \"Quantity of items created for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                    body.items.forEach(item => utils.validateItemContent(item));",
					"                } else {",
					"                    pm.expect(body.totalRecords, \"Quantity of items should be zero\").to.equal(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.validateItemContent = function (item) {",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-loanTypeName\") !== null) {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id is not the same as created for API tests\").to.equal(pm.variables.get(\"loanTypeId\"));",
					"        } else {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"loanTypeId\"));",
					"        }",
					"",
					"        pm.expect(item.status.name, \"Item's status name is incorrect\").to.equal(\"On order\");",
					"        pm.expect(item.materialTypeId, \"Item's material type id is not the same as created for API tests\").to.equal(pm.variables.get(\"materialTypeId\"));",
					"    }",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.getItemsByPoLineId = function (id, limit, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=\" + limit + \"&query=purchaseOrderLineIdentifier==\" + id, handler);",
					"    };",
					"    /**",
					"     * Search items by holdingId",
					"     */",
					"    utils.getItemsByHoldingId = function (holdingId, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=999&query=holdingsRecordId==\" + holdingId, handler);",
					"    };",
					"",
					"    /**",
					"     * Validates that Holdings Record was created  in the inventory",
					"     */",
					"    utils.validateHoldingsRecord = function (poLine) {",
					"        let instanceId = poLine.instanceId;",
					"        pm.expect(instanceId).to.exist;",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=0&query=instanceId==\" + instanceId, (err, res) => {",
					"            let body = res.json();",
					"            if (utils.isHoldingsUpdateRequired(poLine)) {",
					"                pm.test(\"Holding Records exist for Created Instance=\" + instanceId, function () {",
					"                    pm.expect(body.totalRecords).to.be.above(0);",
					"                });",
					"            } else {",
					"                pm.test(\"Holding Records not exist for instance=\" + instanceId, function () {",
					"                    pm.expect(body.totalRecords).to.be.equal(0);",
					"                });",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that there is no any item associated with the PO Line",
					"     */",
					"    utils.verifyNoInventoryItemsExist = function (line, handler) {",
					"        utils.getItemsByPoLineId(line.id, 0, (err, res) => {",
					"            pm.test(\"No item records found for PO Line with number=\" + line.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords).to.eql(0);",
					"            });",
					"            if (typeof handler === \"function\") {",
					"                handler();",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that items has specified status",
					"     */",
					"    utils.verifyItemsStatus = function (line, itemStatus) {",
					"        utils.getItemsByPoLineId(line.id, 1000, (err, res) => {",
					"            let items = {};",
					"            pm.test(\"All item records for PO Line with number=\" + line.poLineNumber + \" retrieved\", function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                items = res.json().items;",
					"            });",
					"            pm.test(items.length + \" item records for PO Line with number=\" + line.poLineNumber + \" have status=\" + itemStatus, function () {",
					"                res.json().items.forEach(item => pm.expect(item.status.name).to.eql(itemStatus))",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate pieces for PoLine",
					"     */",
					"    utils.validatePieceRecords = function (poLine, arePiecesCreated) {",
					"        let expectedQuantity = arePiecesCreated ? utils.calculateExpectedPiecesQuantity(poLine) : 0;",
					"        utils.sendGetRequest(\"/orders-storage/pieces?limit=\" + expectedQuantity + \"&query=poLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" piece record(s) found for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created pieces does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    let pieces = res.json().pieces;",
					"                    pieces.forEach(piece => utils.validatePiece(piece));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Physical\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Physical\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Electronic\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Electronic\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Other\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Other\"));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate encumbrances for PO Line",
					"     */",
					"    utils.validateEncumbranceRecords = function (poLine, orderStatus) {",
					"        let expectedQuantity = orderStatus === \"Pending\" ? 0 : poLine.fundDistribution.length;",
					"        utils.sendGetRequest(\"/finance/transactions?limit=\" + expectedQuantity + \"&query=encumbrance.sourcePoLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" encumbrance record(s) found for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created encumbrances does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    res.json().transactions.forEach(encumbrance => utils.validateEncumbrance(encumbrance, poLine.fundDistribution));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's receipt status updated to expected,",
					"     * and incase of checkin the receipt date has to be validated",
					"     * if receipt status is partially received, as it is updated for first piece checkec-in",
					"     */",
					"    utils.validateReceiptStatus = function (poLine, receiptStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + receiptStatus + \" receipt status\", function () {",
					"            pm.expect(poLine.receiptStatus, \"Receipt status should be \" + receiptStatus).to.equal(receiptStatus);",
					"            if (\"Fully Received\" === receiptStatus || (poLine.checkinItems === true && \"Partially Received\" === receiptStatus)) {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be set\").to.not.be.empty;",
					"            } else {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be empty\").to.not.exist;",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's payment status updated to expected",
					"     */",
					"    utils.validatePaymentStatus = function (poLine, paymentStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + paymentStatus + \" payment status\", function () {",
					"            pm.expect(poLine.paymentStatus, \"Payment status should be \" + paymentStatus).to.equal(paymentStatus);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that items received in the inventory (MODORDERS-103)",
					"     */",
					"    utils.validateInventoryItemsReceived = function (poLine, expectedQuantity, itemStatus) {",
					"        let expectedCount = typeof expectedQuantity === \"undefined\" ? utils.calculateExpectedItemsQuantity(poLine) : expectedQuantity;",
					"        let status = typeof itemStatus === \"undefined\" ? \"In process\" : itemStatus;",
					"        utils.sendGetRequest(\"/item-storage/items?limit=100&query=status.name==\" + status + \" and purchaseOrderLineIdentifier==\" + poLine.id, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records marked as received for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                pm.expect(body.totalRecords, \"Quantity of items received for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                body.items.forEach(function (item) {",
					"                    pm.expect(item.barcode, \"Barcode should not be empty\").to.not.be.empty;",
					"                    pm.expect(item.itemLevelCallNumber, \"Item level call number should not be empty\").to.not.be.empty;",
					"                });",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that expected number of pieces received using receiving history endpoint (MODORDERS-103)",
					"     */",
					"    utils.validateReceivingHistoryNumberOfPiecesByStatus = function (poLine, expectedQuantity, receivingStatus) {",
					"        receivingStatus = typeof receivingStatus === \"undefined\" ? \"Expected\" : receivingStatus;",
					"        utils.sendGetRequest(\"/orders/receiving-history?limit=0&query=receivingStatus==\" + receivingStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"            pm.test(expectedQuantity + \" \" + receivingStatus + \" pieces for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.json().totalRecords).to.equal(expectedQuantity);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.verifyItemsReceivedIntoAppropriateHolding = function (line, receivingResult) {",
					"        for (i = 0; i < receivingResult.receivingItemResults.length; i++) {",
					"            utils.sendGetRequest(\"/orders-storage/pieces/\" + receivingResult.receivingItemResults[i].pieceId, (err, piece) => {",
					"                //check if piece has changed location",
					"                if (piece.json().locationId === pm.environment.get(\"locationId1\")) {",
					"                    utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + line.instanceId + \" and permanentLocationId==\" + piece.json().locationId, (err, holding) => {",
					"                        pm.test(\"created holding for location \" + piece.json().locationId, function () {",
					"                            pm.expect(holding.json().holdingsRecords.length).to.be.above(0);",
					"                        });",
					"",
					"                        if (utils.isItemsUpdateRequired(line)) {",
					"                            utils.sendGetRequest(\"/item-storage/items?limit=1&query=holdingsRecordId==\" + holding.json().holdingsRecords[0].id + \" and id==\" + piece.json().itemId, (err, items) => {",
					"                                pm.test(\"item \" + items.json().items[0].id + \" received into holding \" + holding.json().holdingsRecords[0].id, function () {",
					"                                    pm.expect(items.json().items.length).to.be.above(0);",
					"                                    // MODORDERS-315 itemStatus cannot be empty",
					"                                    pm.expect(items.json().items[0].status.name).to.not.be.empty;",
					"                                });",
					"                            });",
					"                        }",
					"                    });",
					"                }",
					"            });",
					"        }",
					"    };",
					"",
					"",
					"    utils.validateLocationQuantity = function (location) {",
					"        let physicalQuantity = location.hasOwnProperty(\"quantityPhysical\") ? location.quantityPhysical : 0;",
					"        let electronicQuantity = location.hasOwnProperty(\"quantityElectronic\") ? location.quantityElectronic : 0;",
					"        pm.expect(location.quantity).to.equal(physicalQuantity + electronicQuantity);",
					"    };",
					"",
					"    utils.inventoryUpdateNotRequired = function (compPOL) {",
					"        if (compPOL.isPackage === true) {",
					"            return true;",
					"        }",
					"",
					"        // in case of \"Other\" order format check Physical createInventory value only",
					"        if (compPOL.orderFormat === \"Other\") {",
					"            return compPOL.physical == null || compPOL.physical.createInventory === \"None\";",
					"        }",
					"        let physicalUpdateNotRequired = (compPOL.physical == null || compPOL.physical.createInventory === \"None\");",
					"        let eresourceUpdateNotRequired = (compPOL.eresource == null || compPOL.eresource.createInventory === \"None\");",
					"",
					"        return physicalUpdateNotRequired && eresourceUpdateNotRequired;",
					"    };",
					"",
					"    utils.isHoldingsUpdateRequired = function (compPOL) {",
					"        let updatesRequiredForEresource = false;",
					"        let updateRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            updatesRequiredForEresource = (compPOL.eresource.createInventory === \"Instance, Holding\" || compPOL.eresource.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        if (compPOL.physical != null) {",
					"            updateRequiredForPhysical = (compPOL.physical.createInventory === \"Instance, Holding\" || compPOL.physical.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        return updatesRequiredForEresource || updateRequiredForPhysical;",
					"    };",
					"",
					"    utils.isItemsUpdateRequired = function (compPOL) {",
					"        let itemsRequiredForEresource = false;",
					"        let itemsRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            itemsRequiredForEresource = compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        if (compPOL.physical != null) {",
					"            itemsRequiredForPhysical = compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        return itemsRequiredForEresource || itemsRequiredForPhysical;",
					"    };",
					"",
					"",
					"    /**",
					"     * Prepare receiving request body for all PO Lines of an order",
					"     * The function sets following variable:",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive one PO Line of the desired order format",
					"     * @param quantityToReceive number of pieces to receive. In case if not specified, all pieces will be received",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForOrder = function (orderId, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            pm.test(\"Preparing receiving request for entire order with id=\" + orderId, function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"            });",
					"",
					"            if (typeof quantityToReceive === \"undefined\") {",
					"                quantityToReceive = 1000;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and purchaseOrderId=\" + orderId, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForOrder = function (orderId, quantity) {",
					"        utils.prepareReceivingRequestForOrder(orderId, quantity, \"On order\");",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForPoLineOfFormat = function (orderId, orderFormat, quantity) {",
					"        utils.prepareReceivingRequestForPoLineOfFormat(orderId, orderFormat, quantity, \"On order\");",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body for PO Line of expected order format",
					"     * The function sets 2 variables:",
					"     * - `receivingPoLineId` the PO Line id receiving request is going to be sent",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive/revert pieces of the PO Line of the desired order format",
					"     * @param orderFormat the desired order format of the PO Line",
					"     * @param quantityToReceive number of pieces to receive/revert. In case if not specified, all pieces will be received/reverted",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForPoLineOfFormat = function (orderId, orderFormat, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            let poLine;",
					"            pm.test(\"One PO Line with \" + orderFormat + \" order format expected\", function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"                let lines = res.json().compositePoLines.filter(line => line.orderFormat === orderFormat);",
					"                pm.expect(lines.length).to.equal(1);",
					"                poLine = lines[0];",
					"            });",
					"",
					"            pm.variables.set(\"receivingPoLineId\", poLine.id);",
					"            let piecesQuantity = utils.calculateExpectedPiecesQuantity(poLine);",
					"            if (typeof quantityToReceive === \"undefined\" || quantityToReceive > piecesQuantity) {",
					"                quantityToReceive = piecesQuantity;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body based on receiving history array (MODORDERS-103)",
					"     */",
					"    utils.prepareReceivingRequest = function (receivingHistory, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let isRevertCase = itemStatus === \"On order\";",
					"",
					"        let totalQty = receivingHistory.length;",
					"        let piecesGroupedByPol = new Map();",
					"        for (let i = 0; i < totalQty; i++) {",
					"            let record = receivingHistory[i];",
					"            if (!piecesGroupedByPol.has(record.poLineId)) {",
					"                piecesGroupedByPol.set(record.poLineId, []);",
					"            }",
					"            piecesGroupedByPol.get(record.poLineId).push(record.id);",
					"        }",
					"",
					"        let receivingRq = globals.testData.receiving.bodyTemplate;",
					"        let toBeReceivedTemplate = receivingRq.toBeReceived.pop();",
					"        let receivedItemTemplate = toBeReceivedTemplate.receivedItems.pop();",
					"        receivedItemTemplate.itemStatus = itemStatus;",
					"",
					"        let barcode;",
					"        if (isRevertCase) {",
					"            delete receivedItemTemplate.barcode;",
					"            delete receivedItemTemplate.comment;",
					"            delete receivedItemTemplate.caption;",
					"            delete receivedItemTemplate.locationId;",
					"        } else {",
					"            barcode = parseInt(pm.environment.get(\"receivingItemBarcode\") ? pm.environment.get(\"receivingItemBarcode\") : receivedItemTemplate.barcode);",
					"        }",
					"",
					"        let total = 0;",
					"        for (var [polId, pieceIds] of piecesGroupedByPol) {",
					"            let toBeReceived = utils.copyJsonObj(toBeReceivedTemplate);",
					"            toBeReceived.poLineId = polId;",
					"            toBeReceived.received = pieceIds.length;",
					"            for (let i = 0; i < pieceIds.length; i++) {",
					"                let receivedItem = utils.copyJsonObj(receivedItemTemplate);",
					"                receivedItem.pieceId = pieceIds[i];",
					"                //set new location ids for the half of the pieces",
					"                if (i % 2 == 0) {",
					"                    receivedItem.locationId = pm.environment.get(\"locationId1\");",
					"                }",
					"",
					"                if (!isRevertCase) {",
					"                    // Inventory requires unique barcodes",
					"                    receivedItem.barcode = ++barcode;",
					"                }",
					"                toBeReceived.receivedItems.push(receivedItem);",
					"                total++;",
					"            }",
					"            receivingRq.toBeReceived.push(toBeReceived);",
					"        }",
					"        receivingRq.totalRecords = total;",
					"",
					"        if (!isRevertCase) {",
					"            pm.environment.set(\"receivingItemBarcode\", barcode);",
					"        }",
					"        return receivingRq;",
					"    };",
					"",
					"    /**",
					"     * Verify receiving response body",
					"     */",
					"    utils.verifyReceivingResponse = function (jsonRs, expectedSucceededQuantity, expectedFailedQuantity) {",
					"        pm.expect(jsonRs.totalRecords).to.be.above(0);",
					"        let processedSuccessfully = 0;",
					"        let processedWithError = 0;",
					"        jsonRs.receivingResults.forEach(result => {",
					"            processedSuccessfully += result.processedSuccessfully;",
					"            processedWithError += result.processedWithError;",
					"            let succeeded = 0;",
					"            let failed = 0;",
					"            result.receivingItemResults.forEach(receivingItemResult => {",
					"                pm.expect(receivingItemResult.pieceId).to.exist;",
					"                pm.expect(receivingItemResult.processingStatus).to.exist;",
					"                receivingItemResult.processingStatus.type === \"success\" ? succeeded++ : failed++;",
					"            });",
					"            pm.expect(succeeded).to.equal(result.processedSuccessfully);",
					"            pm.expect(failed).to.equal(result.processedWithError);",
					"        });",
					"        pm.expect(processedWithError).to.equal(expectedFailedQuantity);",
					"        pm.expect(processedSuccessfully).to.equal(expectedSucceededQuantity);",
					"        pm.expect(processedWithError + processedSuccessfully).to.equal(jsonRs.totalRecords);",
					"    };",
					"",
					"    utils.copyJsonObj = function (obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-178",
					"     */",
					"    utils.calculateExpectedItemsQuantity = function (poLine) {",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                let quantity = utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"                quantity += utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"                return quantity;",
					"            case \"Electronic Resource\":",
					"                return utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"            case \"Physical Resource\":",
					"            case \"Other\":",
					"                return utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-100, MODORDERS-194",
					"     */",
					"    utils.calculateExpectedPiecesQuantity = function (poLine, pieceFormat) {",
					"        if (poLine.receiptStatus === \"Receipt Not Required\" || poLine.checkinItems || poLine.isPackage) {",
					"            return 0;",
					"        }",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                if (typeof pieceFormat === \"undefined\") {",
					"                    return poLine.cost.quantityPhysical + poLine.cost.quantityElectronic;",
					"                } else if (pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else if (pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Physical Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Other\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Other\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Electronic Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of physical resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getPhysicalItemsQuantity = function (poLine) {",
					"        let total = 0;",
					"        let locations = poLine.locations;",
					"        if (locations) {",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityPhysical;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of electronic resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getElectronicItemsQuantity = function (poLine) {",
					"        let total = 0;",
					"        if (poLine.eresource && poLine.eresource.createInventory && poLine.locations) {",
					"            let locations = poLine.locations;",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityElectronic;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.verifyOrderCalculatedInfo = function (order, expectedTotalPrice) {",
					"        pm.test(\"Verify PO has calculated data: MODORDERS-181 and MODORDERS-193\", function () {",
					"            pm.expect(order.totalItems).to.exist;",
					"            pm.expect(order.totalItems).to.equal(utils.getTotalResourcesQuantity(order));",
					"            if (typeof expectedTotalPrice === \"undefined\") {",
					"                pm.expect(order.totalEstimatedPrice).to.be.above(0);",
					"            } else {",
					"                pm.expect(order.totalEstimatedPrice).to.equal(expectedTotalPrice);",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.getTotalResourcesQuantity = function (order) {",
					"        let total = 0;",
					"        order.compositePoLines.forEach(poLine => {",
					"            let cost = poLine.cost;",
					"            if (cost) {",
					"                total += (cost.quantityElectronic ? cost.quantityElectronic : 0);",
					"                total += (cost.quantityPhysical ? cost.quantityPhysical : 0)",
					"            }",
					"        });",
					"        return total;",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForEresource = function (compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.eresource != null && compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForPhysical = function (compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.physical != null && compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO line sub-object elements",
					"     */",
					"    utils.validatePoLineSubObjetcsPresence = function (poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote expected\").to.exist;",
					"        pm.expect(poLine.claims, \"claims expected\").to.exist;",
					"        pm.expect(poLine.contributors, \"contributors expected\").to.exist;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.cost.poLineEstimatedPrice, \"cost.poLineEstimatedPrice expected to be above 0\").to.be.above(0);",
					"        pm.expect(poLine.description, \"description expected\").to.exist;",
					"        pm.expect(poLine.donor, \"donor expected\").to.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution expected\").to.exist;",
					"        pm.expect(poLine.locations, \"locations expected\").to.exist;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus expected\").to.exist;",
					"        pm.expect(poLine.physical, \"physical expected\").to.exist;",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription expected\").to.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate expected\").to.exist;",
					"        pm.expect(poLine.publisher, \"publisher expected\").to.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus expected\").to.exist;",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes expected\").to.exist;",
					"        pm.expect(poLine.requester, \"requester expected\").to.exist;",
					"        pm.expect(poLine.rush, \"rush expected\").to.exist;",
					"        pm.expect(poLine.selector, \"selector expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.tags, \"tags expected\").to.exist;",
					"        pm.expect(poLine.titleOrPackage, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail expected\").to.exist;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line is empty except line and order ids",
					"     */",
					"    utils.validatePoLineWithMinimalContent = function (poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.purchaseOrderId, \"PO id expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction not expected\").to.not.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote not expected\").to.not.exist;",
					"        pm.expect(poLine.claims, \"claims should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.contributors, \"contributors should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.description, \"description not expected\").to.not.exist;",
					"        pm.expect(poLine.donor, \"donor not expected\").to.not.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.locations, \"locations should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus is Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription not expected\").to.not.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber is expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate not expected\").to.not.exist;",
					"        pm.expect(poLine.publisher, \"publisher not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptDate, \"receiptDate not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus must be Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.requester, \"requester not expected\").to.not.exist;",
					"        pm.expect(poLine.selector, \"selector not expected\").to.not.exist;",
					"        pm.expect(poLine.tags, \"tags should be empty\").to.not.exist;",
					"        pm.expect(poLine.titleOrPackage, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Updates each PO Line's payment status with provided one.",
					"     * If status is not provided, \"Fully Paid\" is used for even and \"Payment Not Required\" for odd ones.",
					"     */",
					"    utils.updatePoLinesPaymentStatus = function (order, status) {",
					"        // Update only payment status",
					"        let lines = order.compositePoLines;",
					"        for (let i = 0; i < lines.length; i++) {",
					"            let newStatus = status;",
					"            if (!newStatus) {",
					"                newStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
					"            }",
					"            // Send update line request with delay",
					"            setTimeout((function (newStatus) {",
					"                console.log(newStatus);",
					"                utils.updatePoLinePaymentStatus(lines[i], newStatus)",
					"            }).bind(null, newStatus), 500 * i);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Updates PO Line's payment status with provided one and sends PUT request.",
					"     */",
					"    utils.updatePoLinePaymentStatus = function (poLine, status) {",
					"        // Update only payment status",
					"        poLine.paymentStatus = status;",
					"        utils.sendPutRequest(\"/orders/order-lines/\" + poLine.id, poLine, (err, response) => {",
					"            pm.test(\"PO Line updated with number=\" + poLine.poLineNumber, () => pm.expect(response.code).to.eql(204));",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Adds PO line id to `completePolineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberPoLineId = function (poLine) {",
					"        if (poLine && poLine.id) {",
					"            let completePolineIds = pm.globals.get(\"completePolineIds\") ? JSON.parse(pm.globals.get(\"completePolineIds\")) : [];",
					"            completePolineIds.push(poLine.id);",
					"            pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completePolineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastPoLineId = function (withRemoval) {",
					"        let completePolineIds = globals.completePolineIds ? JSON.parse(globals.completePolineIds) : [];",
					"        if (completePolineIds.length > 0) {",
					"            let lineId = completePolineIds.pop();",
					"            if (withRemoval) {",
					"                pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line content against schemas",
					"     */",
					"    utils.validatePoLineAgainstSchema = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_po_line.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO content against schemas",
					"     */",
					"    utils.validateOrderAgainstSchema = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_purchase_order.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO Lines number",
					"     */",
					"    utils.validatePoLinesNumber = function (order) {",
					"        let poLineSuffix = \"(-[0-9]{1,3})\";",
					"        let regex = new RegExp(order.poNumber + poLineSuffix);",
					"        for (let i = 0; i < order.compositePoLines.length; i++) {",
					"            let poLineNumber = order.compositePoLines[i].poLineNumber;",
					"            let match = regex.exec(poLineNumber);",
					"            pm.expect(match).not.equal(null);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validate order workflowStatus",
					"     */",
					"    utils.validateWorkflowStatus = function (order) {",
					"        pm.test(\"Verify Order updated with expected workflow status\", function () {",
					"            if (order.workflowStatus != \"Pending\") {",
					"                if (utils.isCompletedAllPoLines(order.compositePoLines)) {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Closed\");",
					"                } else {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Open\");",
					"                }",
					"            }",
					"        });",
					"    };",
					"",
					"    utils.isCompletedAllPoLines = function (poLines) {",
					"        for (let i = 0; i < poLines.length; i++) {",
					"            let paymentStatus = poLines[i].paymentStatus;",
					"            let receiptStatus = poLines[i].receiptStatus;",
					"            if (!(paymentStatus === \"Payment Not Required\" || paymentStatus === \"Fully Paid\") || !(receiptStatus === \"Fully Received\" || receiptStatus === \"Receipt Not Required\")) {",
					"                return false;",
					"            }",
					"        }",
					"        return true;",
					"    };",
					"",
					"    utils.postRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * This method creates a piece and also calls the prepares the check-in body.",
					"     * If itemId is not provided the check-in flow just updates the piece record",
					"     */",
					"    utils.createPieceAndCheckInBody = function (compPoLine, itemId) {",
					"        let pieceTemplate = globals.testData.piece.bodyTemplate;",
					"        // set new location for checkin piece",
					"        pieceTemplate.locationId = compPoLine.locations[0].locationId;",
					"        pieceTemplate.poLineId = compPoLine.id;",
					"        if (compPoLine.orderFormat === \"Electronic Resource\") {",
					"            pieceTemplate.format = \"Electronic\";",
					"        } else {",
					"            pieceTemplate.format = \"Physical\";",
					"        }",
					"        if (typeof itemId === \"undefined\") {",
					"            delete pieceTemplate.itemId;",
					"        } else {",
					"            pieceTemplate.itemId = itemId;",
					"        }",
					"        pieceTemplate.titleId = pm.variables.get(\"titleId\");",
					"        pieceTemplate.receiptDate = new Date();",
					"        pm.variables.set(\"checkinPoLineId\", compPoLine.id);",
					"        utils.postRequest(\"/orders/pieces\", pieceTemplate, (err, res) => {",
					"            pm.test(\"creating piece for check-in \", function () {",
					"                pm.expect(res).to.have.property('code', 201);",
					"            });",
					"            utils.prepareCheckinBody(compPoLine, res.json().id);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * This method is used for both checking in a piece and also reverting it,",
					"     * If the checkinstatus is not provided by default it is set to check-in item",
					"     *",
					"     */",
					"    utils.prepareCheckinBody = function (compPoLine, pieceId, checkinStatus) {",
					"        let checkinRq = globals.testData.checkin.bodyTemplate;",
					"        let toBeCheckedInTemplate = checkinRq.toBeCheckedIn.pop();",
					"        let checkinPiecesTemplate = toBeCheckedInTemplate.checkInPieces.pop();",
					"        toBeCheckedInTemplate.poLineId = compPoLine.id;",
					"        toBeCheckedInTemplate.checkedIn = 1;",
					"        checkinPiecesTemplate.id = pieceId;",
					"        checkinPiecesTemplate.locationId = pm.environment.get(\"locationId1\");",
					"        if (typeof checkinStatus === \"undefined\") {",
					"            checkinPiecesTemplate.itemStatus = \"In process\";",
					"        } else {",
					"            checkinPiecesTemplate.itemStatus = checkinStatus;",
					"        }",
					"        toBeCheckedInTemplate.checkInPieces.push(checkinPiecesTemplate);",
					"        checkinRq.toBeCheckedIn.push(toBeCheckedInTemplate);",
					"        console.log(JSON.stringify(checkinRq));",
					"        pm.variables.set(\"checkinBody\", JSON.stringify(checkinRq));",
					"    };",
					"",
					"    /**",
					"     * Get the holding where the item needs to be created , create an item",
					"     * and then use the item id to create a piece",
					"     *",
					"     */",
					"    utils.prepareCheckinBodyWithItems = function (compPoLine) {",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + compPoLine.instanceId + \" and permanentLocationId==\" + compPoLine.locations[0].locationId, (err, res) => {",
					"            utils.createItem(compPoLine.id, res.json().holdingsRecords[0].id, (err, res) => {",
					"                pm.test(\"creating item for check-in\", function () {",
					"                    pm.expect(res).to.have.property('code', 201);",
					"                });",
					"                utils.createPieceAndCheckInBody(compPoLine, res.json().id);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.createItem = function (poLineId, holdingsRecordId, handler) {",
					"        let itemTemplate = globals.testData.item.bodyTemplate;",
					"        itemTemplate.holdingsRecordId = holdingsRecordId;",
					"        itemTemplate.purchaseOrderLineIdentifier = poLineId;",
					"        utils.postRequest(\"/item-storage/items\", itemTemplate, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function (path) {",
					"        return new Promise((resolve) => {",
					"            utils.sendDeleteRequest(path, (err, response) => {",
					"                resolve(response.code);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function (code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function () {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function (configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function (configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function (configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function (configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function (configs, configName, value) {",
					"        let bodyTemplate = globals.testData.configs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function (body) {",
					"        utils.postRequest(\"/configurations/entries\", body, function (err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function (body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function (id) {",
					"        const timerId = setTimeout(() => { }, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Delete titles by poLine id",
					"     *",
					"     */",
					"    utils.deleteTitlesByLineId = function (poLineId) {",
					"        utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + poLineId, (err, res) => {",
					"            let titles = res.json().titles;",
					"            titles.forEach(title => {",
					"                const timerId = setTimeout(() => { }, 60000);",
					"                utils.processDeleteRequest(\"/orders/titles/\" + title.id)",
					"                    .then(result => clearTimeout(timerId))",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on Items deletion:\", err);",
					"                        clearTimeout(timerId);",
					"                    });",
					"            });",
					"",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function (path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.globals.unset(\"emptyOrderWithoutPoLinesId\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"emptyOrderId\");",
					"        pm.globals.unset(\"isbnOrderId\");",
					"        pm.globals.unset(\"isbn_Order_content\");",
					"        pm.globals.unset(\"po_listed_print_monograph\");",
					"        pm.globals.unset(\"completePolineIds\");",
					"        pm.globals.unset(\"completeOrderId\");",
					"        pm.globals.unset(\"completeOrderPoNumber\");",
					"        pm.globals.unset(\"physElecOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsPendingOrderId\");",
					"        pm.globals.unset(\"negativeTestsOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsClosedOrderId\");",
					"        pm.globals.unset(\"negativeTestsFailedEncumbrances\");",
					"        pm.globals.unset(\"negativeTestsOpenPOLineId\");",
					"        pm.globals.unset(\"anotherCompleteOrderId\");",
					"        pm.globals.unset(\"completeOpenOrderId\");",
					"        pm.globals.unset(\"checkin_physical_poLine\");",
					"        pm.globals.unset(\"checkin_electronic_poLine\");",
					"        pm.globals.unset(\"poLineForNegativeTests\");",
					"        pm.globals.unset(\"randomUUId\");",
					"        pm.globals.unset(\"receivingHistoryPoId\");",
					"        pm.globals.unset(\"requestBodyPhysical\");",
					"        pm.globals.unset(\"requestBodyToBeUpdated\");",
					"        pm.globals.unset(\"poAllPoLineCheckin\");",
					"        pm.globals.unset(\"poLineIdPhysical\");",
					"        pm.globals.unset(\"poToCheckinItemsId\");",
					"        pm.globals.unset(\"orderIdPEMix\");",
					"        pm.globals.unset(\"orderWithApprovalReqTrueId\");",
					"        pm.globals.unset(\"orderWithReceiptNotRequiredId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId1\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId2\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId3\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNoneId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingItemId\");",
					"        pm.globals.unset(\"order_isbn_validation\");",
					"        pm.globals.unset(\"automaticallyClosedOrder\");",
					"        pm.globals.unset(\"automaticallyClosedOpenOrder\");",
					"        pm.globals.unset(\"automaticallyOpenedOrder\");",
					"        pm.globals.unset(\"newEmptyPoLine\");",
					"        pm.globals.unset(\"poNumber\");",
					"        pm.globals.unset(\"poLineIdPEMix\");",
					"        pm.globals.unset(\"poLine2IdPEMix\");",
					"        pm.globals.unset(\"loanType\");",
					"        pm.globals.unset(\"materialType\");",
					"        pm.globals.unset(\"testTenant\");",
					"        pm.globals.unset(\"testTenantActiveVendorId\");",
					"        pm.globals.unset(\"pieceIdToUpdate\");",
					"        pm.globals.unset(\"pieceRecord\");",
					"",
					"        pm.environment.unset(\"activeVendorId\");",
					"        pm.environment.unset(\"contributorNameTypeId\");",
					"        pm.environment.unset(\"current-orders-configs\");",
					"        pm.environment.unset(\"current-tenant-configs\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"budgetId\");",
					"        pm.environment.unset(\"identifierTypeId\");",
					"        pm.environment.unset(\"isbnIdentifierTypeId\");",
					"        pm.environment.unset(\"inactiveVendorId\");",
					"        pm.environment.unset(\"instanceTypeId\");",
					"        pm.environment.unset(\"instanceStatusId\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"loanTypeId\");",
					"        pm.environment.unset(\"locationId1\");",
					"        pm.environment.unset(\"locationId2\");",
					"        pm.environment.unset(\"locationId3\");",
					"        pm.environment.unset(\"materialTypeId\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"mod-tenant-configs\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"        pm.environment.unset(\"temp-orders-configs\");",
					"        pm.environment.unset(\"reasonForClosureId\");",
					"        pm.environment.unset(\"prefixId\");",
					"        pm.environment.unset(\"suffixId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"xokapitoken-restricted\");",
					"        pm.environment.unset(\"newLocationId\");",
					"        pm.environment.unset(\"orderTemplateId\");",
					"        pm.environment.unset(\"restrictedLedgerId\");",
					"        pm.environment.unset(\"restrictedFundId\");",
					"        pm.environment.unset(\"restrictedBudgetId\");",
					"        pm.environment.unset(\"uniqueProductId\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"        pm.environment.unset(\"mixLineForCheckIn\");",
					"        pm.environment.unset(\"mixLineForCheckInId\");",
					"        pm.environment.unset(\"instanceId\");",
					"        pm.environment.unset(\"checkinLocationId\");",
					"        pm.environment.unset(\"electronicResourceId\");",
					"        pm.environment.unset(\"physicalResourceId\");",
					"        pm.environment.unset(\"delOrderId201\");",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function (jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function (data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.deletePoNumber = function (order) {",
					"        delete order.poNumber;",
					"",
					"        return order;",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "92f75e83-684c-4d30-b982-391bc981bfc6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "58b5377b-ad5c-46aa-b1d7-3c69e34bd09d",
			"key": "testTenant",
			"value": "orders_api_tests"
		},
		{
			"id": "b9436778-00e0-492e-8b54-6c8692ba29a3",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources"
		},
		{
			"id": "120e6eb2-8108-4eac-b54f-56f82d422343",
			"key": "poLines-limit",
			"value": "10"
		},
		{
			"id": "5f4c1ce1-a236-47d9-9edc-5eed3cb7f41d",
			"key": "inventory-identifierTypeName",
			"value": "ordersApiTestsIdentifierTypeName"
		},
		{
			"id": "8f3bf08a-53e0-466d-b83d-575e50e6ef56",
			"key": "inventory-instanceTypeCode",
			"value": "ordersApiTestsInstanceTypeCode"
		},
		{
			"id": "63a1cd5a-1c0c-4f94-9444-ff78dfd79d39",
			"key": "inventory-instanceStatusCode",
			"value": "ordersApiTestsInstanceStatusCode"
		},
		{
			"id": "8434bfd6-4ff9-4048-8c6d-515f798616b4",
			"key": "inventory-loanTypeName",
			"value": "ordersApiTestsLoanTypeName"
		},
		{
			"id": "7d9a6422-628b-4e05-b8b7-e0a644de400b",
			"key": "tenant.addresses",
			"value": "{\n  \"address\": \"sample address\",\n  \"name\": \"sample name\"\n}\n"
		},
		{
			"id": "d06cd30a-c5e6-4b58-a1d3-66eb78caa621",
			"key": "approvals",
			"value": "{\"isApprovalRequired\":false}"
		}
	],
	"protocolProfileBehavior": {}
}