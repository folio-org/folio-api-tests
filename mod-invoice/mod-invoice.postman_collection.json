{
	"info": {
		"_postman_id": "d5c98397-98b7-40b4-b457-61fe01cac30b",
		"name": "mod-invoice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0bf0388-6975-466e-af02-cd94ecdd048c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bcfb49c8-0593-4838-97a1-d7de59e9728e",
										"exec": [
											"pm.test(\"Preparing request to create test tenant. Tenant creation might take up to 1 minute...\", () => {",
											"    pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c8a59128-88bc-4b9d-924a-6c86dfc66800",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - created (201) or already exists (400 with Duplicate tenant id error)\", () => {",
											"    pm.expect(pm.response.code).be.oneOf([201, 400]);",
											"    if (pm.response.code === 400) {",
											"        pm.expect(pm.response.text()).to.include(\"Duplicate tenant id\");",
											"        purgeMudulesData();",
											"    } else {",
											"        // All is okay, running further requests",
											"        postman.setNextRequest();",
											"    }",
											"});",
											"",
											"function purgeMudulesData() {",
											"    let utils = eval(globals.loadUtils);",
											"    let tenantBaseUrl = utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\"));",
											"    pm.sendRequest(tenantBaseUrl + \"/modules\", (err, res) => {",
											"        let modulesToDisable = null;",
											"        pm.test(\"Preparing request to disable modules if any installed before...\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res.code).to.equal(200);",
											"",
											"            modulesToDisable = res.json();",
											"            modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"            console.log(modulesToDisable);",
											"        });",
											"",
											"        if (modulesToDisable !== null) {",
											"            // In case the response indicates that there are some modules are already installed, their data have to be purged first",
											"            if (modulesToDisable.length > 0) {",
											"                pm.sendRequest({",
											"                    url: tenantBaseUrl + \"/install?purge=true\",",
											"                    method: \"POST\",",
											"                    header: {",
											"                        \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\"),",
											"                        \"Content-type\": \"application/json\"",
											"                    },",
											"                    body: JSON.stringify(modulesToDisable)",
											"                }, (error, response) => {",
											"                    pm.test(\"Purging the data for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                        pm.expect(error).to.equal(null);",
											"                        pm.expect(response).to.be.ok;",
											"                        // All the data have been purged. Now wait for a minute and run next request",
											"                        setTimeout(() => postman.setNextRequest(), 61000);",
											"                    });",
											"                });",
											"            } else {",
											"                pm.test(\"No modules to purge for '\" + pm.variables.get(\"testTenant\") + \"' tenant\", () => {",
											"                    // Run next request",
											"                    postman.setNextRequest();",
											"                });",
											"            }",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2553eb6f-2b6e-458a-b153-4aa4272cb622",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-invoice\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "006b751a-2d1f-4baf-8426-409b08078506",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "645d0d6e-3444-4977-8699-b30f74124664",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f2a76bed-7a4f-459b-9a37-f38bad184b4e",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcfed51b-4107-48a6-af14-1c3be630e60a",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c6f96923-c1f4-4b67-8de9-1de0a86e3f91",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6f09ebc-1294-4fa8-8879-6dd0a7bbfad7",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d65ef3b-1cc0-41ac-b5b9-e4f60ce3f65c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pmRq = {",
											"    url: utils.buildOkapiUrl('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),",
											"    method: \"GET\",",
											"    header: {\"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")}",
											"};",
											"pm.sendRequest(pmRq, (err, res) => {",
											"    let userPermissions = globals.testData.users.admin.permissions;",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4f4cd0a7-c888-4e14-82fc-563498a47d61",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d95c496b-4f2b-4e06-a4a4-77347167088b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ff06218-bd98-4288-8d71-bb942ce95c87",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b50e361-0872-48f3-85a9-775722c92c30",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9229787f-ffb9-4a1c-8dc8-7a0a4d8991fd",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "75ccf029-d5fb-4de3-9d32-a658b36c307b",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a8f81bb-6c2f-4dfc-8f24-d3506e063024",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3cd2590e-f880-4a51-8d5f-02434e5f0168",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add invoice permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "110a7ee4-3173-4486-9b61-6304192b0821",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd49ab4b-1d6f-45ad-a7a5-a5698752f52c",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54999d67-7643-4aac-8f2e-9351f4cdca72",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc385c99-8c55-4660-99e9-b0082dc84614",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check invoice configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64aea223-c674-4818-aad3-393416bef2fe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.invoicesConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + configs);",
											"    pm.environment.set(\"mod-invoices-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
											"}",
											"// Store current version of configs",
											"pm.environment.set(\"current-invoices-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b951f28-6d8d-458b-8da3-f11e67e16d60",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check orders configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60b3ad4d-362d-443b-b766-3cc44bc5fe91",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.ordersConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc0fe2d8-74ce-4fa7-aa4d-fe56dd7d7ab7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1640288-a00d-4057-b45c-17d86c2cdaa0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ee6a1919-3760-44f0-bdfb-3c731ed7eca5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8e8c71d-fa49-4f48-9b94-381a6892552e",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modInvoiceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9e88a396-e4f2-4586-a645-71f093e96a3e",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-invoice';\r",
											"\r",
											"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"        pm.variables.set('modInvoiceId', moduleId);\r",
											"    });\r",
											"});\r",
											"\r",
											"function buildPmRequest1(path) {\r",
											"    return {\r",
											"        url: utils.buildOkapiUrl(path),\r",
											"        method: \"GET\",\r",
											"        header: {\r",
											"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),\r",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")\r",
											"        }\r",
											"    };\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modInvoiceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ad77797c-0cf1-471b-aec6-dcdb1b9be234",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3ec150f4-d488-438d-be50-c9812a6b9f8f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare vendors",
					"item": [
						{
							"name": "Post active vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4397732f-7fbf-474a-a307-1d9cdcc983f1",
										"exec": [
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f45b875-14d1-4e39-8ba1-41ac3ab85068",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post inactive vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30b993a0-f4ed-4093-a7c6-bf15ccb11104",
										"exec": [
											"pm.test(\"Storing inactive vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"inactiveVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3cf52953-fa53-41a5-af3b-0171d130a64d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test inactive vendor\",\n\t\"code\": \"TIV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Inactive\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare inventory data",
					"item": [
						{
							"name": "Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51fee52b-a380-4e4f-9aca-e4102ac8341f",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"identifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7858c4ba-b6c4-481c-9041-ccc6704ef820",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0010-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-identifierTypeName}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "ISBN Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4063e80-b478-4f6c-8a09-3529892b1ec3",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"isbnIdentifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "751b0684-e383-4094-85e8-4f4c015c1698",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n  \"name\": \"ISBN\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates ISBN identifier type to be used for ISBN validation"
							},
							"response": []
						},
						{
							"name": "Instance Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8ded5af-b02a-47aa-9219-b67c6fb4a76d",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65be5727-bd6c-4a07-8656-f0bb8a80d466",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceTypeCode}}\",\r\n  \"name\": \"{{inventory-instanceTypeCode}}\",\r\n  \"source\": \"apiTests\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ea81736-4388-4979-bb8c-482b5687214d",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceStatusId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "632e9893-377d-4991-bdc1-0eaec7cf5023",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceStatusCode}}\",\r\n  \"name\": \"{{inventory-instanceStatusCode}}\",\r\n  \"source\": \"apiTests\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses"
									]
								},
								"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Material Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d78c7ab-c59d-4dbf-9a84-d164fa4ba38a",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"materialTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de826549-27d6-4c6b-bd2d-ebe6be9c5bba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\r\n  \"name\": \"materialTypeName\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "ExpenseClass Elec",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4b19c71-04b2-4245-8a6a-ac0ae324bb7d",
										"exec": [
											"pm.test(\"Expense class electronic is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"expenseClassElecId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf62a6be-396b-4cc1-a4cf-e758569665a1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"Elec\",\n  \"name\": \"Electronic\",\n  \"externalAccountNumberExt\": \"01\"\n}\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/expense-classes",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"expense-classes"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "ExpenseClass Print",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4db99de-3eba-443a-a50b-47efd024ad64",
										"exec": [
											"pm.test(\"Expense class print is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"expenseClassPrnId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "341954e8-5bfa-4088-83ae-833a247ae49c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"Prn\",\n  \"name\": \"Print\",\n  \"externalAccountNumberExt\": \"02\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/expense-classes",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"expense-classes"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "FiscalYear",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0271116c-f4b2-40c3-8510-6df874608ac2",
										"exec": [
											"pm.test(\"Fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fiscYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3efbb2cd-4477-449d-b80b-4caaedc728e1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"FY2019\",\n    \"name\": \"Test fiscal year\",\n    \"periodStart\": \"2019-01-01T00:00:00Z\",\n    \"periodEnd\": \"2025-12-30T23:59:59Z\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88ec68f7-04ee-4cdb-a938-1532b1dfcea3",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3ab35ab-8d09-438c-9371-21093b4b5ec8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n\t\"code\": \"TST-LDG\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Test ledger\",\r\n\t\"fiscalYearOneId\": \"{{fiscYearId}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d94db610-b326-4f74-898b-bb37f55e3651",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fundId\", pm.response.json().fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b0cbf4bd-6ca3-4fa6-a7ba-760e4f94bc00",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"code\": \"TST-FND\",\n        \"description\": \"Fund for orders API Tests\",\n        \"externalAccountNo\": \"1111111111111111111111111\",\n        \"fundStatus\": \"Active\",\n        \"ledgerId\": \"{{ledgerId}}\",\n        \"name\": \"Fund for orders API Tests\"\n    },\n    \"groupIds\": []\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund - 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc4239e5-625a-49b8-b06a-25c0e2b6d248",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fund2Id\", pm.response.json().fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92b0dda4-71ba-4118-a6e2-81c078ce7737",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"code\": \"TST2-FND\",\n        \"description\": \"2nd Fund for orders API Tests\",\n        \"externalAccountNo\": \"2222222222222222222222222\",\n        \"fundStatus\": \"Active\",\n        \"ledgerId\": \"{{ledgerId}}\",\n        \"name\": \"2nd Fund for orders API Tests\"\n    },\n    \"groupIds\": []\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20108ad0-36ef-4fcd-ba18-17fe71bd5dee",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f4e59ab-1df0-46e1-854d-b2ca22bb8b83",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allocated\": \"1000000\",\n    \"budgetStatus\": \"Active\",\n    \"name\": \"Budget for invoice API tests\",\n    \"fundId\": \"{{fundId}}\",\n    \"fiscalYearId\": \"{{fiscYearId}}\",\n    \"allowableEncumbrance\": 100,\n    \"allowableExpenditure\": 100\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Budget-2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d21339c9-6ed8-4de6-b62b-8cda3e5ae3a0",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budget2Id\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "30bffd9b-45b9-471c-8aa8-c696e8ebbf08",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"allocated\": \"1000000\",\n    \"budgetStatus\": \"Active\",\n    \"name\": \"Budget 2 for invoice API tests\",\n    \"fundId\": \"{{fund2Id}}\",\n    \"fiscalYearId\": \"{{fiscYearId}}\",\n    \"allowableEncumbrance\": 100,\n    \"allowableExpenditure\": 100\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Budget-expense class Active",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d624077-64c7-45f3-b985-263e14fc3e91",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetExpenseClassActiveId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6108a80c-414f-4ca2-bd0d-70b75e23e706",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"budgetId\": \"{{budgetId}}\",\n  \"expenseClassId\": \"{{expenseClassPrnId}}\",\n  \"status\": \"Active\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/budget-expense-classes",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"budget-expense-classes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare orders",
					"item": [
						{
							"name": "Create Pending order with 2 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c335cec1-93de-46e1-9af8-e3e84a1ff488",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    delete order.poNumber;",
											"    order.compositePoLines[0].paymentStatus = \"Awaiting Payment\";",
											"    order.compositePoLines[1].paymentStatus = \"Awaiting Payment\";",
											"    // Set retrieved content for further requests",
											"    order.compositePoLines.forEach(it=>it.eresource.accessProvider = pm.environment.get(\"activeVendorId\"));",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "147aa1da-9e87-482d-84a9-4f04433ad9ef",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"completeOrderId\", order.id); ",
											"    pm.globals.set(\"poLine1Id\",  order.compositePoLines[0].id);",
											"    pm.globals.set(\"poLine2Id\",  order.compositePoLines[1].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load mock data",
					"item": [
						{
							"name": "Load mock invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3c9086c-fc21-47b9-977a-aaa324761cfe",
										"exec": [
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1dde2518-b430-4933-bceb-2904280aa6fb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
											"    pm.globals.set(\"mock-invoices\",  JSON.stringify(res.json()));",
											"",
											"    let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
											"    invoice.note += \" - for batch-group system record delete test\";",
											"    invoice.status = \"Reviewed\";",
											"    delete invoice.adjustments;",
											"    delete invoice.voucherNumber;",
											"    delete invoice.approvalDate;",
											"    delete invoice.approvedBy;",
											"    ",
											"    pm.environment.set(\"mockInvoice\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{mockInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare invoice data",
					"item": [
						{
							"name": "Create batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6aa952b-d1e3-412b-a366-df2bdd14b30f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroup = {};",
											"",
											"pm.test(\"Batch-group is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    pm.expect(batchGroup.name).to.exist;",
											"    pm.environment.set(\"batchGroupId\", batchGroup.id);",
											"    ",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8ac7e78-02ca-4ecc-bf0b-782c0c9d9f28",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.metadata;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94a1462f-0e37-467b-8ab6-a8b24623d188",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"minInvoiceId\", invoice.id);",
													"    pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    ",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4eba4251-6063-4b48-ab5e-8e3b03b0ae82",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with new vendor invoice number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c8256750-9636-4cff-910d-732c462569fb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    let number = \"UPD\" + invoice.vendorInvoiceNo;",
													"    invoice.vendorInvoiceNo = number;",
													"    pm.variables.set(\"updatedNumber\", number);",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c0848e29-c5ee-4f01-8178-2a073bf1d205",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"        pm.test(\"Verify invoice updated with new vendor invoice number\", () => {",
													"            let invoice = res.json();",
													"            pm.expect(invoice.vendorInvoiceNo).to.equal(pm.variables.get(\"updatedNumber\"));",
													"            utils.validateInvoice(invoice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								},
								{
									"name": "Get invoice by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91c09f85-70b8-4e93-96ae-79a731aef1c5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // Validate fields",
													"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"minInvoiceId\"));",
													"    pm.response.to.have.jsonBody(\"folioInvoiceNo\", pm.environment.get(\"folioInvoiceNo\"));",
													"",
													"    // validate against schema",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d249dcba-6af1-4e72-a7cf-9107ae269f57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Filter invoices",
							"item": [
								{
									"name": "Create another invoice for filtering",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a2b0158-010a-45af-bfe6-1176d7d5edd2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"filterInvoiceId\", invoice.id);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60597a6c-e9ac-441a-b510-30568ddb4eb0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
													"    pm.globals.set(\"mock-invoices\",  JSON.stringify(res.json()));",
													"    let invoice = utils.prepareInvoice(res.json().invoices[1]);",
													"",
													"    invoice.note += \" - filtering\";",
													"",
													"    pm.variables.set(\"invoiceToFilterContent\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceToFilterContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de6bc31f-9613-47bf-a2f1-ba741fc1867d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.at.least(2);",
													"    invoices = pm.response.json().invoices;",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c785a70-4d0c-46fb-9780-3891a44db0b0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices filter by query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce0239db-0ce6-4bf5-b389-1fa7c3538bc7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
													"    invoices = pm.response.json().invoices;",
													"    pm.expect(invoices[0].note).to.equal('Invoice for API Tests - filtering');",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bcd66ce2-670b-4d4e-833e-54a3d3381fca",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=1&query=note=\"filtering\" and note=\"Invoice for API Tests\"",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "query",
													"value": "note=\"filtering\" and note=\"Invoice for API Tests\""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Invoice and associated lines",
							"item": [
								{
									"name": "Create invoice for deletion test",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5207ac0e-6249-412d-a524-c86986c645ab",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.environment.set(\"InvoiceIdForDelete\", invoice.id);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9568c8a7-cfb3-4e45-acd4-45c8c27cfcdb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceForDelete\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice line for delete with invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6c4c521-644f-43c7-b817-9f78c82dbb7d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"InvoiceIdForDelete\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.environment.set(\"InvoiceLineIdForDelete\", invoiceLine.id);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "220af569-8625-4493-987d-3d41e6a0451f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"InvoiceIdForDelete\"));",
													"",
													"pm.variables.set(\"InvoiceLineForDelete\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceLineForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete  invoice and associated lines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "998a61be-3a17-43d2-b3e9-80e058b95317",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is deleted\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"pm.test(\"invoce line deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"InvoiceIdForDelete\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoice-lines?query=invoiceId==\" + invoiceId , (err, response) => {",
													"        pm.expect(response).to.have.status(200);",
													"        pm.expect(response.json().invoiceLines.length).to.be.equal(0);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4db6456e-9abd-461f-9795-314eaef8cebc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceIdForDelete}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceIdForDelete}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Documents",
							"item": [
								{
									"name": "Create document with url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa3adf14-d183-4516-95a2-f81bd7f280e5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceDocument = pm.response.json();",
													"    pm.environment.set(\"documentWithUrlId\", invoiceDocument.documentMetadata.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7e363dab-b17f-4aaf-a1e9-437128dbe0c5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let sampleFileURL = pm.variables.get(\"resourcesUrl\") + \"/mockdata/documents/10a34f8a-98d1-45af-a9f6-14b7174ceb51.json\";",
													"",
													"pm.sendRequest(sampleFileURL, (err, res) => {",
													"    let invDocumentWithUrl = res.json();",
													"    invDocumentWithUrl.documentMetadata.invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    pm.environment.set(\"documentWithURL\", JSON.stringify(invDocumentWithUrl));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{documentWithURL}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document with base64 content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f47f953-33ed-4015-b557-0f6bede3c49b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceDocument = pm.response.json();",
													"    pm.environment.set(\"documentWithBase64Id\", invoiceDocument.documentMetadata.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "466f524c-4445-4690-9f3f-9ab539ab70e2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let sampleFileURL = pm.variables.get(\"resourcesUrl\") + \"/mockdata/documents/b3ed45f1-9347-43b7-992d-519048d8041c.json\";",
													"",
													"pm.sendRequest(sampleFileURL, (err, res) => {",
													"    let invDocument = res.json();",
													"    invDocument.documentMetadata.invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    pm.environment.set(\"documentWithBase64Content\", JSON.stringify(invDocument));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/octet-stream"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{documentWithBase64Content}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08d6d3ab-5203-4df7-a81b-c43ddea8f0e8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"    pm.expect(invoiceDocument.documents.length, \"document list size\").to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28e33e68-7ece-4300-ae1c-dcd046f8e3e9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document list by query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb985d40-d61e-409e-b6c5-2cdedf791089",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"    pm.expect(invoiceDocument.documents.length, \"document list size\").to.equal(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "661ba427-53eb-4777-a56c-a8e5cf3d3c55",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents?query=url<>null",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents"
											],
											"query": [
												{
													"key": "query",
													"value": "url<>null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66e19d96-a140-46e9-8124-623e57825308",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceDocument = {};",
													"",
													"pm.test(\"Document is created\", function() {",
													"    pm.response.to.have.status(200);",
													"    invoiceDocument = pm.response.json();",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6590f0ef-703b-4ec2-8e30-6acbb4628f99",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithBase64Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithBase64Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete document with base64 content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de224845-bb21-42df-9ca2-02d6135f9cc3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Docoment was deleted\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"pm.test(\"Verify document was deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    let docId = pm.environment.get(\"documentWithBase64Id\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + invoiceId + \"/documents/\" + docId, (err, response) => {",
													"        pm.expect(response).to.have.status(404);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2b834357-3f75-41d9-a422-97183f0953ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithBase64Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithBase64Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete document with url",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbf2e294-23ee-46c1-ae6c-02b3d2ad6ed6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Verify document was deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"minInvoiceId\");",
													"    let docId = pm.environment.get(\"documentWithUrlId\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + invoiceId + \"/documents/\" + docId, (err, response) => {",
													"        pm.expect(response).to.have.status(404);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ddfd3f74-7673-4580-9474-21c49b4cb500",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}/documents/{{documentWithUrlId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}",
												"documents",
												"{{documentWithUrlId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2283a537-5c93-4e4f-bcef-a78de51b0b74",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Invoice content is valid\", function() {",
											"    pm.expect(invoice.id).to.exist;",
											"    pm.expect(invoice.folioInvoiceNo).to.exist;",
											"    pm.environment.set(\"invoiceId\", invoice.id);",
											"    ",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "384b2b42-4cf0-4a73-aad1-b59f85339352",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/52fd6ec7-ddc3-4c53-bc26-2779afc27136.json\", function (err, res) {",
											"    pm.variables.set(\"invoiceContent\", JSON.stringify(utils.prepareInvoice(res.json())));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with minimal content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "02ca2995-83b7-4961-b67e-842f0007b053",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "52fd59eb-5b6d-48e2-9d21-b48fa2c20fd0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceId\"), (err, res) => {",
											"        utils.validateInvoiceWithMinimalContent(res.json());",
											"      ",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with invoices",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7001f4d1-7230-4ae9-935b-31a904bc2475",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50008384-111c-4396-8984-f7e33644c6eb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "973eb36d-e12f-48cb-a8b6-645f972ca749",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"minInvoiceId\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3e4246c5-3c13-4742-8860-8b97aa7d9756",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"",
													"pm.variables.set(\"minContentInvoiceLine\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{minContentInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9bc20eb0-50f1-49a1-8630-9de72efdfb68",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cfca0d9e-72e6-4d12-be05-13c521c21194",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice Line has minimal content\", function () {",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.test(\"Validate schema for invoice_line.json\", function () {",
													"    utils.validateInvoiceLine(invoiceLine);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by empty query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "361baaab-bb38-4211-a7d3-c80f146e0dbc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97ef25cd-408f-441d-a26c-50628d410cb0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLines = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(invoiceLines.invoiceLines).to.have.lengthOf.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c931c5a9-9e30-436e-8b16-4abcba476b5e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e2c172eb-b462-4ada-82ff-df6ced23c635",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var resp = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    resp = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(resp.invoiceLines).to.have.lengthOf.above(0);",
													"});",
													"",
													"pm.test(\"Validate that response contains lines with proper status\", function () {",
													"    for(var i = 0; i < resp.invoiceLines.length; i++) {",
													"    \tpm.expect(resp.invoiceLines[i].invoiceLineStatus).to.equal(\"Open\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?limit=30&query=invoiceLineStatus==Open",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											],
											"query": [
												{
													"key": "limit",
													"value": "30"
												},
												{
													"key": "query",
													"value": "invoiceLineStatus==Open"
												}
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4644e4d7-dc87-432c-9d27-64a8e4ef9985",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.variables.get(\"invoiceLineId\"), function (err, res) {",
													"    pm.expect(err).to.equal(null);",
													"    let invoiceLine  = res.json();",
													"    pm.test(\"Verify updated fields\", function () {",
													"       pm.expect(res.json().description).to.equal(pm.variables.get(\"invLineDescription\"));",
													"       pm.expect(res.json().quantity).to.equal(pm.variables.get(\"invLineQuantity\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3072caf1-4433-4a67-8be0-c1b5377eab26",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());",
													"",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"invoiceLine.description = \"Updating given description\";",
													"invoiceLine.quantity = 4;",
													"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));",
													"pm.variables.set(\"invLineDescription\",invoiceLine.description);",
													"pm.variables.set(\"invLineQuantity\",invoiceLine.quantity);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete invoice line by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99475f49-b78b-4c90-9862-ce0fd64ceb1b",
												"exec": [
													"pm.test(\"Invoice is deleted\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "adjustments",
							"item": [
								{
									"name": "Create invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc512d0b-ece3-4ea1-8417-bc66e7b27841",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to include only In addition to relation\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(10.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "506278e5-c09c-49bb-94f4-671036bad8de",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoiceLines/e0d08448-343b-118a-8c2f-4fb50248d672.json\", function (err, res) {",
													"    let invoiceLine = res.json();",
													"    delete invoiceLine.id;",
													"    delete invoiceLine.invoiceLineNumber;",
													"    delete invoiceLine.poLineId;",
													"    pm.globals.set(\"mock-invoiceLine\",  JSON.stringify(invoiceLine));",
													"    ",
													"    ",
													"    delete invoiceLine.adjustments;",
													"    ",
													"    invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"    invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"    let adjustment1 = utils.buildAdjustmentObject();",
													"    adjustmentsArray.push(adjustment1);",
													"",
													"    let adjustment2 = utils.buildAdjustmentObject();",
													"    adjustment2.relationToTotal = \"Included in\";",
													"    adjustmentsArray.push(adjustment2);",
													"    ",
													"    let adjustment3 = utils.buildAdjustmentObject(12.222, \"Percentage\");",
													"    adjustmentsArray.push(adjustment3);",
													"",
													"    invoiceLine.adjustments = adjustmentsArray;",
													"",
													"    pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Create invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9a8356b-045f-461c-b41a-fb7271e45503",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"negativeAdjInLineId\",invoiceLine.id)",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.below(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to be negative\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(-28.21);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "24779ddc-12fa-46d4-a41e-bd35afc15d8a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = utils.getMockInvoiceLine();",
													"delete invoiceLine.id;",
													"delete invoiceLine.invoiceLineNumber;",
													"delete invoiceLine.adjustments;",
													"delete invoiceLine.fundDistribution;",
													"delete invoiceLine.poLineId;",
													"invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"let adjustment1 = utils.buildAdjustmentObject();",
													"adjustment1.value = -13.88;",
													"adjustmentsArray.push(adjustment1);",
													"",
													"let adjustment2 = utils.buildAdjustmentObject();",
													"adjustment2.value = -14.33;",
													"adjustmentsArray.push(adjustment2);",
													"",
													"invoiceLine.adjustments = adjustmentsArray;",
													"",
													" pm.environment.set(\"negativeInvoiceLineContent\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b27f71ce-949c-4f21-90c1-eccc4d7086c6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1187ee07-0ab2-44ce-b6df-b117587e70f5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"negativeInvoiceLineContent\"));",
													"invoiceLine.adjustments[0].value = 15;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1062c69e-ae66-4c82-9d44-31dbfdc34405",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is successfully retrieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total is recalulated\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(0.67);",
													"    pm.expect(invoiceLine.total).to.equal(2.87);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cacd2aaa-a84f-4952-8ad1-37e65961534b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										},
										"description": "validate that the adjustments are recalculated after a PUT with adjustment values changed"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with invoice lines. The invoices are used from `Invoices` tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8ae488e1-c3ac-424a-a8e3-7ce420d8674e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f9687d0e-3eb0-420d-96f2-6fd709e4a193",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prorated adjustments",
					"item": [
						{
							"name": "Invoice without lines and one prorated adjustment",
							"item": [
								{
									"name": "Create invoice with percentage adjustment prorated by line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "510dddd6-5e14-4e7d-8147-ca539ae92132",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let invoice = utils.prepareInvoice(utils.buildInvoiceWithMinContent(\"MODINVOICE-54\"));",
													"",
													"invoice.note += \" - prorated adjustments\";",
													"invoice.status = \"Open\";",
													"",
													"invoice.adjustments = [utils.buildAdjustmentObject(10, \"Percentage\", \"By line\")];",
													"",
													"pm.variables.set(\"invoiceContentBody\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c13e357-7824-4b22-a8be-5b3476102e54",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsId\", invoice.id);",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    // The invoice has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate totals are zero",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContentBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice without lines yet",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cc0b49c-5fb2-4740-bbe5-219b8577bc52",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"One adjustment and zero totals\", function() {",
													"    // validate against schema",
													"    utils.validateInvoice(invoice);",
													"    // The invoice has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "92bc57cc-c6d2-41bc-94c5-3176b8789c57",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add first line",
							"item": [
								{
									"name": "Create invoice line with 1 non prorated adjustment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "076d5e91-536d-448f-8b95-0d7b30fa1346",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsId\", invoiceLine.id);",
													"",
													"    // The invoice line has one non prorated and one prorated adjustments.",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 1);",
													"",
													"    // 2 adjustments. Total adj amount is 10% of 100.15 plus 11.11",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.13);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(121.28);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bba42e18-fbde-4d76-8770-367cab91356d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 100.15;",
													"invoiceLine.quantity = 5;",
													"invoiceLine.adjustments = [utils.buildAdjustmentObject(11.11)];",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify invoice line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d502d658-887a-4c2b-b768-4b1085b68713",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and one prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 1);",
													"",
													"    // 2 adjustments. Total adj amount is 10% of 100.15 plus 11.11",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.13);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(121.28);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a7689f92-9d38-4578-a736-5df5655766ba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with one line and one prorated adj",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec65a2bc-8113-4d75-a901-187c79f3e1bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate totals\", function() {",
													"    // The invoice still has 1 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 1);",
													"",
													"    // validate calculated totals - same as in line",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(21.13);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoice.total, \"total\").to.equal(121.28);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed9d9656-18f2-4b28-8f68-6c550aad724a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add second prorated adjustment",
							"item": [
								{
									"name": "Add fixed amount adjustment prorated by line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16d3e1c7-aa92-4c16-98d3-a8d0b423ca49",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Amount\", \"By line\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d2c920bd-7eeb-4c51-9978-cd658a27a410",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with one line and two prorated adj",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38fa40f1-4167-41e4-8950-e075d4a37cdf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // The invoice has 2 prorated adjustment",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - same as in line",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(46.13);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoice.total, \"total\").to.equal(146.28);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9fa15178-35aa-4e2e-8473-50233d3d6443",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32543aea-8a6e-4702-8667-cbeaabfc2842",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 10% of 100.15 plus 11.11 plus 25",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(46.13);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(146.28);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6fa268d-e0df-4768-bab9-89c2c526f91d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add second line",
							"item": [
								{
									"name": "Create invoice line without non prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc9d088c-c9cf-4c32-b5f5-83718ee54d1b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine2WithProratedAdjustmentsId\", invoiceLine.id);",
													"",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // 2 adjustments. Total adj amount is 5% of 300.35 plus 12.5",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(27.52);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(227.72);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "febaf12c-7341-4e91-8b22-8958d7ed344d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 200.20;",
													"invoiceLine.quantity = 15;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f68c2df1-8a18-4255-bdb6-4851caae09ef",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // 2 adjustments. Total adj amount is 5% of 300.35 plus 12.5",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(27.52);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(227.72);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5bd5c536-2d29-410b-bcac-989d44878c33",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "145f74c1-278f-46ce-a23d-476b2d810d46",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    // Total adj amount is 11.11 plus 5% of 300.35 (10% devided by 2) plus 12.5 (25 devided by 2)",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(38.63);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(138.78);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7f7d2145-e50d-4343-9186-482e20afb786",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36e5ff5f-b879-4b21-b912-8e514ab1b6c6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 2 prorated adjustments",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(66.15);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(366.5);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "636667f2-d4f3-4ede-b005-c5a5d73ee70d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add third prorated adjustment",
							"item": [
								{
									"name": "Add fixed amount adjustment prorated by amount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe199a98-f0ad-4f30-969b-0d69f220b980",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(50, \"Amount\", \"By amount\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2f393d72-fe8d-4b5c-bf18-1d8a0f54a9d5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals - 3 prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e279adc9-001c-4942-9901-faf088c020e0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 3 prorated adjustments",
													"    utils.validateInvoiceProratedAdjustments(invoice, 3);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(116.15);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(416.5);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d292b969-f5d3-4f1c-9e40-fbdb6646ca3a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ff10bc2-72a6-4632-83dd-217314ce3b44",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and two prorated adjustments.",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 3);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 5% of 300.35 (10% devided by 2)",
													"     * 3. 12.5 (25 devided by 2)",
													"     * 4. 16.67 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(55.3);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(155.45);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a73235bd-62ab-4ef3-b3d7-d802162f1e64",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4702c0d-5bff-440f-adf4-b698770d1509",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 3);",
													"",
													"    // 3 adjustments. Total adj amount is 5% of 200.20 (10% devided by 2) plus 12.5 (25 devided by 2) plus 33.33 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(60.85);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(261.05);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4aa51f8a-ed92-4f60-b3da-cd18131043f4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add fourth prorated adjustment",
							"item": [
								{
									"name": "Add percentage adjustment prorated by amount",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9ae9e8e-ad8e-45d3-93ea-61859390f45c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(5, \"Percentage\", \"By amount\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77e3f8d7-abea-4e4a-9aaa-e8b16990551a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals - 4 prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73913b4c-66d7-4766-830d-1111713b88ce",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 4);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(131.17);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(300.35);",
													"    pm.expect(invoice.total, \"total\").to.equal(431.52);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d47656e-df30-499a-8545-af303b0c20cb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "720fdcff-cfe0-4960-854a-78dcadb604ac",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 5% of 300.35 (10% devided by 2)",
													"     * 3. 12.5 (25 devided by 2)",
													"     * 4. 16.67 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 5. 5% of 300.35 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(60.31);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(160.46);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "68ae972c-4bc3-45a3-9191-1e058fc9b284",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a345eae-66d2-4a56-bed7-971557d0de95",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 5% of 300.35 (10% devided by 2)",
													"     * 2. 12.5 (25 devided by 2)",
													"     * 3. 33.33 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 5% of 300.35 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(70.86);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(271.06);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6985213a-a76f-4baf-aa4c-a6d9572cb538",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add third line",
							"item": [
								{
									"name": "Create invoice line without non prorated adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a4b7657-5a40-4fb7-a99a-f06bfbe15439",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Calculated totals\",function(){",
													"    pm.environment.set(\"invoiceLine3WithProratedAdjustmentsId\", invoiceLine.id);",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    invoiceLine.adjustments.forEach(adjustment => pm.expect(adjustment, \"adjustment must have id to invoice's adjustment\").to.exist);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 16.66 i.e. 10% of 500 devided by 3 ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 500 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(54.95);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(254.60);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c9790891-8bc6-477a-809d-b74b971115bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceWithProratedAdjustmentsId\"));",
													"",
													"invoiceLine.subTotal = 199.65;",
													"invoiceLine.quantity = 30;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Verify third line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c05dbf0e-f2d3-48c6-9efc-373a0cdd5740",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 16.66 i.e. 10% of 500 devided by 3 ",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.9825 i.e. 5% of 500 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(54.95);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(254.60);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aca2d6e5-cff9-4806-93bc-70c7dfaf338d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 4 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d90254b4-67f2-4721-8397-d39bdaf20521",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 16.67 i.e. 10% of 500 devided by 3",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 20.02 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal (500))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(55.03);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(255.23);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ca6832a2-adbc-4c47-b56e-0d6a08cb54e0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5f70c17-258a-433c-8c5e-86b2e315c59d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 4);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 16.66 i.e.10% of 500 devided by 3",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 10.02 (portion of 50 proportionate to the invoiceLine's (100.15) contribution to the invoice subTotal (500))",
													"     * 5. 5.01 i.e. 5% of 100.15 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(51.13);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(151.28);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "33363618-695f-432d-8318-927636fa2627",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a731bac6-cc6f-4081-8c20-892a20af988b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 4 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(4);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 4);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(161.11);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(500);",
													"    pm.expect(invoice.total, \"total\").to.equal(661.11);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b56a194a-3229-4ded-9d8e-dc1c21ceec12",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add fifth prorated adjustment",
							"item": [
								{
									"name": "Add amount adjustment prorated by quantity",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8e03cd5a-84e9-416e-90be-238b9f5fb8c8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(125, \"Amount\", \"By quantity\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a31eace5-4faa-4537-9e6e-b2c925370b63",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6af1fcde-e2ec-4e9a-9bbc-07ba0e54b85f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(286.11);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(500);",
													"    pm.expect(invoice.total, \"total\").to.equal(786.11);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6dbc5e54-358f-41fa-96bf-79ee8c61e0ba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f698e05-afe9-482f-8a25-69f00e7919d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsContent\", pm.response.text());",
													"",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 16.66 i.e. 10% of 500 evided by 3",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 10.02 (portion of 50 proportionate to the invoiceLine's (100.15) contribution to the invoice subTotal (500))",
													"     * 5. 5.01 i.e. portion of 5% of 500 to the invoiceLine's (100.15) contribution to the invoice subTotal (500)",
													"     * 6. 12.5 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.63);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(100.15);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(163.78);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "71d66dab-d7d6-4f3b-b181-448fdb70b160",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second invoice line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f92ad42-796b-4d08-96f9-fd8ea6d035cd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 16.67 i.e. 10% of 500 devided by 3",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 20.02 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal (500))",
													"     * 4. 10.01 i.e. portion of 5% of 500 to the invoiceLine's (200.20) contribution to the invoice subTotal (500)",
													"     * 5. 37.5 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(92.53);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(292.73);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0ad436f5-2069-44eb-b2e4-18b2c2076629",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3920a95f-2d3c-42cd-84c9-96eeeb19b67f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 16.67 i.e. 10% of 500 devided by 3",
													"     * 2. 8.34 (25 devided by 3)",
													"     * 3. 19.96 (portion of 50 proportionate to the invoiceLine's contribution to the invoice subTotal)",
													"     * 4. 9.98 i.e. portion of 5% of 500 to the invoiceLine's (199.65) contribution to the invoice subTotal (500)",
													"     * 5. 75 (portion of 125 proportionate to the invoiceLine's quantity (30) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(129.95);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(329.60);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "471c12fc-e4fa-4da9-a28c-c26f8bd36336",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make subTotal of  first line negative",
							"item": [
								{
									"name": "Update first line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e815461-c766-4fac-8572-a21b2ae8ec4c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine1WithProratedAdjustmentsContent\"));",
													"// Change subTotal of the line so grand subTotal should be zero",
													"invoiceLine.subTotal = -399.85;",
													"",
													"pm.variables.set(\"invoiceLine1WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8945eb4b-6b03-491c-9f14-b350fb3dde09",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine1WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "450ba5d4-fe0b-45a9-b5bf-76ace352d368",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 0 i.e. 10% of 0",
													"     * 3. 8.33 (25 devided by 3)",
													"     * 4. 25 (portion of 50 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 5. 0 i.e. 5% of 0 ",
													"     * 6. 12.5 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(56.94);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(-399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(-342.91);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0b0c80af-61d5-447b-a855-f59d6c589409",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "828a64e3-0fa1-4e63-87d0-890d0c21ea25",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 0 i.e. 3.33333...% of 0",
													"     * 2. 8.33 (25 devided by 3)",
													"     * 3. 12.52 (portion of 50 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 4. 0 i.e. 5% of 0",
													"     * 5. 37.5 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(58.35);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.20);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(258.55);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6cf540c0-9e73-46ea-8636-4c90660c915e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16180ca2-175d-4244-95bd-feaa77ea72fd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine3WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 0 i.e. 3.3333...% of 0 (10% devided by 3) ",
													"     * 2. 8.34 (25 devided by 3)8",
													"     * 3. 12.48 (portion of 50 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (799.7))",
													"     * 4. 0.e. 5% of 0 (5% adjustment is added to each line)",
													"     * 5. 75 (portion of 125 proportionate to the invoiceLine's quantity (30) contribution to the total quantity (50))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(95.82);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(295.47);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dad9148c-e5e1-4921-bd7a-1b730808d05f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "409a25d9-a2a8-4ea4-a7ea-2100f46f5724",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(211.11);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(211.11);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "31a570bc-d28c-4523-8685-b2b3f4b07d9d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make adjustments value so that they are not evenly distributed.",
							"item": [
								{
									"name": "Update third line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3fa6fc0f-b38c-46bb-9f48-8c5070f34364",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine3WithProratedAdjustmentsContent\"));",
													"// Change subTotal of the line so grand subTotal should be zero",
													"invoiceLine.quantity = 11;",
													"",
													"pm.variables.set(\"invoiceLine3WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5a08165d-de8e-452d-a001-bdd913239954",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine3WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update first line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c5ad9096-0f5e-4388-8daa-f2ae36912c42",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine1WithProratedAdjustmentsContent\"));",
													"// Change subTotal of the line so grand subTotal should be zero",
													"invoiceLine.quantity = 5;",
													"invoiceLine.subTotal = 399.85;",
													"pm.variables.set(\"invoiceLine1WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d45cd81d-df1f-485c-8b62-db91307a20a7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine1WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update adjustments value so that they are not evenly distributed.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b86a510f-0b38-4ce8-be0b-dcc5df3944d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"invoice.adjustments.push(utils.buildAdjustmentObject(125, \"Amount\", \"By quantity\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(50.05, \"Amount\", \"By amount\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(26, \"Amount\", \"By line\"));",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cc140d6f-941d-48db-b9d2-012627b697cc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9569ec12-f90e-45e4-ac2a-5a91a4ded71b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(332.11);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(799.7);",
													"    pm.expect(invoice.total, \"total\").to.equal(1131.81);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "828c7106-b3d2-42e2-9cf7-2bad65556520",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7111bba9-5723-4610-8f09-3610d0959788",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 26.65 i.e. 10% of 799.7 devided by 3",
													"     * 3. 8.66 (26 devided by 3)",
													"     * 4. 25,02 (portion of 50,05 proportionate to the invoiceLine's 399.85 contribution to the invoice subTotal by absolute value (799.7))",
													"     * 5. 19.99 portion of 5% of 799.7 proportionate to the invoiceLine's 399.85 contribution to the invoice subTotal by absolute value (799.7)",
													"     * 6. 20,16 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (31))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === 8.66)[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.66);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === 25.02)[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(25.02);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === 20.16)[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(20.16);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(111.59);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(511.44);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e055dbd-bbd1-4264-83b8-400b127995ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify second line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7f96ff9-48bb-4d75-8d73-53af0a52cf7b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 26,66 i.e. 10% of 799.7 devided by 3",
													"     * 2. 8.66 (26 devided by 3) + 0.01 extra penny",
													"     * 3. 12.53 (portion of 50.05 proportionate to the invoiceLine's (200.20) contribution to the invoice subTotal by absolute value (799.7))",
													"     * 4. 10.01 i.e. 5% of 200.20 (5% adjustment is added to each line)",
													"     * 5. 60,48 (portion of 125 proportionate to the invoiceLine's quantity (15) contribution to the total quantity (31))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === 8.67)[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.67);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === 26.66)[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(26.66);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === 60.48)[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(60.48);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(118.35);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200.2);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(318.55);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f8c6c942-e4e1-4fcd-bc8a-54319948c64d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2aefeb92-1c1b-4794-9919-7045ebd36b75",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 26.66 i.e.10% of 799.7 devided by 3",
													"     * 2. 8.66 (26 devided by 3) + 0.01 extra penny",
													"     * 3. 12.49 (portion of 50.05 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (799.7)) + extra penny",
													"     * 4. 9.98 i.e. 5% of 199.65 (5% adjustment is added to each line)",
													"     * 5. 44,35 (portion of 125 proportionate to the invoiceLine's quantity (11) contribution to the total quantity (31)) + 1 extra penny",
													"     */",
													"     ",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === 8.67)[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(8.67);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === 12.50)[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(12.50);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === 44.36)[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(44.36);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(102.17);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(301.82);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "43e2b44c-7ffd-4e00-92fb-b3d65dfcdf7a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete second line",
							"item": [
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f5ff5595-cbe6-49f8-97c0-9d623039f8f5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7198b716-3ec8-4011-9a7d-12bcddf9a351",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine2WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine2WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99e152ba-b05f-441d-9e2d-89a61652644e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine1WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11.11 (non prorated adjustment)",
													"     * 2. 29.97 i.e. 5% (10% devided by 2) of 599.5",
													"     * 3. 13 (26 devided by 2)",
													"     * 4. 33.38 (portion of 50.05 proportionate to the invoiceLine's abs(-399.85) contribution to the invoice subTotal by absolute value (599.5))",
													"     * 5. 20 i.e. portion of 5% of 399.85 roportionate to the invoiceLine's 399.85 contribution to the invoice subTotal by absolute value (599.5))",
													"     * 6. 39.06 (portion of 125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (16))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(146.52);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(399.85);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(546.37);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5053bb56-90e8-4739-a57b-6cd165e0db96",
												"exec": [
													"// Wait for 1 second before sending request",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify former \"third\" line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea5280f7-787c-4556-87d7-cce4e5572efe",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"invoiceLine3WithProratedAdjustmentsContent\", pm.response.text());",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 29.98 i.e. 5% of 199.65 (10% devided by 2) ",
													"     * 2. 13 (26 devided by 2)",
													"     * 3. 16.67 (portion of 50.05 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (599.5))",
													"     * 4. 9.98 i.e.portion of 5% of 599.5 proportionate to the invoiceLine's contribution (199.65) to the invoice subTotal by absolute value (599.5))",
													"     * 5. 85.94 (portion of 125 proportionate to the invoiceLine's quantity (11) contribution to the total quantity (16))",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(155.57);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(199.65);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(355.22);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "01d07071-4a5d-4fbe-866b-a1d062dd5914",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f32bf6aa-c6ba-4bbc-a0fb-c2d5d0a54bd9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(302.09);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(599.5);",
													"    pm.expect(invoice.total, \"total\").to.equal(901.59);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "938106b0-3c67-45af-8715-9f9cfcf78050",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Make adjustments value negative and that they are not evenly distributed.",
							"item": [
								{
									"name": "Update first line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f4478d77-98e8-4e82-9ece-d353620cc597",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine1WithProratedAdjustmentsContent\"));",
													"",
													"invoiceLine.quantity = 5;",
													"invoiceLine.subTotal = 200;",
													"invoiceLine.adjustments.shift();",
													"invoiceLine.adjustments.push(utils.buildAdjustmentObject(11));",
													"",
													"pm.variables.set(\"invoiceLine1WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0539bf96-6298-44dd-bf36-998f0c6296ee",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine1WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update third line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9dd71cac-05fb-4fd4-8cc3-8922683b1c60",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"invoiceLine3WithProratedAdjustmentsContent\"));",
													"",
													"invoiceLine.quantity = 5;",
													"invoiceLine.subTotal = 200;",
													"",
													"pm.variables.set(\"invoiceLine3WithProratedAdjustmentsContent\", JSON.stringify(invoiceLine));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6e4422b2-c708-40d4-a3f8-2fa4120debbf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice line is updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine3WithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update adjustments value so that they are not evenly distributed. Set currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "238a6a0a-342a-4b70-8a40-62bbc3d41096",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-125, \"Amount\", \"By quantity\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-51, \"Amount\", \"By amount\"));",
													"invoice.adjustments.push(utils.buildAdjustmentObject(-25, \"Amount\", \"By line\"));",
													"invoice.currency = \"JPY\";",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "982c5fd2-bd6b-4efc-9a13-8bb083d05a80",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with three lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8be7620-4ad4-4b6e-a1c6-a462e84994ad",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 5);",
													"",
													"    // validate calculated totals - just sum of props of 3 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-130);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(400);",
													"    pm.expect(invoice.total, \"total\").to.equal(270);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "569f8d30-6dec-41bb-9620-b9f7af9cff63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 6 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68be0f15-4189-4d95-8b5e-b5fd73871629",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 5 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(6);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11 not prorated adjustment",
													"     * 2. 20 i.e.5% (10% devided by 2) of 400",
													"     * 3. -12 (-25 devided by 2)",
													"     * 4. -25 (portion of -51 proportionate to the invoiceLine's abs(200) contribution to the invoice subTotal by absolute value (400))",
													"     * 5. 10 i.e. 5% of abs(200) (5% adjustment is added to each line)",
													"     * 6. -62 (portion of -125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (10))",
													"     */",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === -12)[0];",
													"    pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(-12);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === -25)[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(-25);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === -62)[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(-62);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-58);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(142);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "070d4505-b396-44a2-abfa-e26d939737a4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify third line has 5 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1a27022-ad44-4384-a935-c2cddfde6574",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(5);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 5);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 20 i.e. 5.% of 200 (10% devided by 2) ",
													"     * 2. -12 (-25 devided by 3) - 1 extra yena",
													"     * 3. -25 (portion of -51 proportionate to the invoiceLine's contribution (200) to the invoice subTotal by absolute value (400)) - extra yena",
													"     * 4. 10 i.e. 5% of 200 (5% adjustment is added to each line)",
													"     * 5. -62 (portion of -125 proportionate to the invoiceLine's quantity (5) contribution to the total quantity (10)) - 1 extra yena",
													"     */",
													"     ",
													"    let adjustmentByLine = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === -13)[0];",
													"        pm.expect(adjustmentByLine.value, \"adjustment by line value\").to.equal(-13);",
													"    let adjustmentByAmount = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === -26)[0];",
													"    pm.expect(adjustmentByAmount.value, \"adjustment by amount value\").to.equal(-26);",
													"    let adjustmentByQuantity = invoiceLine.adjustments.filter(adjustment => adjustment.type === \"Amount\" && adjustment.value === -63)[0];",
													"    pm.expect(adjustmentByQuantity.value, \"adjustment by quantity value\").to.equal(-63);",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(-72);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(128);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7d75eec0-593a-4040-bce8-269f264eb124",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4602911-baa5-4e78-aea2-9a3255b758f7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1dc1b145-3cdf-4aff-9ecc-aa044ac5538f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove prorated adjustments with amount value",
							"item": [
								{
									"name": "Update invoice leaving only percentage prorated adjustments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7ac718dc-2485-4e4e-a53e-5452fb491d83",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\"));",
													"invoice.adjustments = invoice.adjustments.filter(adjustment => adjustment.type === \"Percentage\");",
													"",
													"pm.variables.set(\"invoiceWithProratedAdjustmentsContent\", JSON.stringify(invoice));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "60fa0e3f-585f-4175-884e-405b0d8da360",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceWithProratedAdjustmentsContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice with two lines and verify totals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bb6d47d-c11d-4609-99ef-0016518f39ad",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    pm.environment.set(\"invoiceWithProratedAdjustmentsContent\", pm.response.text());",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice has 2 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceProratedAdjustments(invoice, 2);",
													"",
													"    // validate calculated totals - just sum of props of 2 lines",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(71);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(400);",
													"    pm.expect(invoice.total, \"total\").to.equal(471);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "346560b0-9b5e-40e3-b46e-6e21f5d1581b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{invoiceWithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify first line has 3 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b934eb87-bda1-4fe3-9b0c-f41c6164e848",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has one non prorated and 2 prorated adjustments. Make sure all of them are correctly added",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(3);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 11 (non prorated adjustment)",
													"     * 2. 20 i.e. 5% (10% devided by 2) of abs(200)",
													"     * 3. 10 i.e. 5% of abs(200) (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(41);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(241);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a8c7a0e3-28d0-44f6-a9e8-6a1586f4027b",
												"exec": [
													"// Wait for 1 second before sending request",
													"setTimeout(function(){}, 1000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine1WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine1WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify former \"third\" line has 2 adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f510bfc3-9791-4c52-bb54-1892e303f089",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Verify totals\", function() {",
													"    // The invoice line has only prorated adjustments",
													"    pm.expect(invoiceLine.adjustments, \"adjustments size\").to.have.lengthOf(2);",
													"    utils.validateInvoiceLineProratedAdjustments(invoiceLine, 2);",
													"",
													"    /*",
													"     * Total adjustment amount is sum of following applied adjustments:",
													"     * 1. 20 i.e. 5% of 400 (10% devided by 2) ",
													"     * 2. 10 i.e. 5% of 200 (5% adjustment is added to each line)",
													"     */",
													"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(30);",
													"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(200);",
													"    pm.expect(invoiceLine.total, \"total\").to.equal(230);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9748ae15-9b8e-4bbe-9390-4ab6bac5bad0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLine3WithProratedAdjustmentsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLine3WithProratedAdjustmentsId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete  invoice with prorated adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f177dec4-f57c-486e-845b-c7a0e7996559",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"invoiceWithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceWithProratedAdjustmentsContent\");",
											"    pm.environment.unset(\"invoiceLine1WithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceLine1WithProratedAdjustmentsContent\");",
											"    pm.environment.unset(\"invoiceLine2WithProratedAdjustmentsId\");",
											"    pm.environment.unset(\"invoiceLine3WithProratedAdjustmentsId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2eb52186-cb2f-42f3-a04c-c16e9cab5ba0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithProratedAdjustmentsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithProratedAdjustmentsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba738530-eaf8-4521-ad2e-0efc54b7cc49",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Successfully get Voucher\", function () {",
											"    pm.response.to.have.status(200);",
											"    voucher = pm.response.json();",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    utils.validateVoucher(voucher);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eda56916-7161-40c6-a80f-b67763b28416",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/vouchers/vouchers.json\", function (err, res) {",
											"    let voucher = res.json().vouchers[0];",
											"    voucher.invoiceId = pm.environment.get(\"minInvoiceId\");",
											"    delete voucher.id;",
											"    delete voucher.metadata;",
											"    voucher.voucherNumber = \"APITESTS\";",
											"    ",
											"  utils.sendPostRequest(\"/voucher-storage/vouchers\", voucher, function(err,response){",
											"      pm.test(\"voucher is created in storage\", function(){",
											"          pm.expect(err).to.equal(null);",
											"          pm.environment.set(\"voucherId\", response.json().id);",
											"      });",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Get vouchers and filter by query param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20b4b29c-31aa-4a51-80bc-cbd585010f5b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let vouchers = [];",
											"",
											"pm.test(\"Successfully get Vouchers\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    vouchers = pm.response.json().vouchers;",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    vouchers.forEach(voucher => utils.validateVoucher(voucher));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d40dce0-befe-42c8-9851-5932837d2a49",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers?query=voucherNumber=APITESTS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers"
									],
									"query": [
										{
											"key": "query",
											"value": "voucherNumber=APITESTS"
										}
									]
								},
								"description": "The test gets list of voucher"
							},
							"response": []
						},
						{
							"name": "Edit voucher editable fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68b4be78-2e4c-4ce4-ad4d-81cf5593889d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => utils.validateVoucher(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a372465-4970-4665-a964-d2617461491e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify editable fields",
											"    voucher.voucherNumber = \"APITESTS123\";",
											"    voucher.disbursementNumber = \"EFT123456\";",
											"    voucher.disbursementDate = \"2020-05-05T00:00:00.000+0000\";",
											"    voucher.disbursementAmount = 4.0;",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "92255e4f-3683-4d71-aad8-2e1212a75084",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d6e236a-d02a-4785-be98-47e44692b6ac",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch Vouchers",
					"item": [
						{
							"name": "Get batch voucher by id JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9aee46f1-bfa2-4def-8fcd-30168eec71a8",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "44ab35d1-53ae-4cab-94dc-ed842a0d7554",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVouchers/35657479-83b9-4760-9c39-b58dcd02ee14.json\", function (err, res) {\r",
											"    let batchVoucher = res.json();\r",
											"    delete batchVoucher.id;\r",
											"    \r",
											"  utils.sendPostRequest(\"/batch-voucher-storage/batch-vouchers\", batchVoucher, function(err,response){\r",
											"      pm.test(\"batchVoucher is created in storage\", function(){\r",
											"          pm.expect(err).to.equal(null);\r",
											"          pm.expect(response).to.have.property('code', 201);\r",
											"          pm.environment.set(\"validBatchVoucherId\", response.json().id);\r",
											"      });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Get batch voucher by id XML",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "89f42aab-f775-4954-b248-5ff071fff763",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(200);",
											"    let jsonData = xml2Json(pm.response.body);",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/xml\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61e5eb33-57f6-4478-8923-0ca6a8c6bb2c",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVouchers/35657479-83b9-4760-9c39-b58dcd02ee14.json\", function (err, res) {\r",
											"    let batchVoucher = res.json();\r",
											"    delete batchVoucher.id;\r",
											"    \r",
											"  utils.sendPostRequest(\"/batch-voucher-storage/batch-vouchers\", batchVoucher, function(err,response){\r",
											"      pm.test(\"batchVoucher is created in storage\", function(){\r",
											"          pm.expect(err).to.equal(null);\r",
											"          pm.expect(response).to.have.property('code', 201);\r",
											"          pm.environment.set(\"validBatchVoucherId\", response.json().id);\r",
											"      });\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e39392c2-9d5f-42af-8209-a8ee8bd4cc1f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16b87e2d-1fe0-4ec6-9ea7-81c20f3d34a3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Get voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4eae64ec-c259-4c4f-a490-a6a85077ed1b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/voucherLines/voucher_lines.json\", function (err, res) {",
													"    let voucherLine = res.json().voucherLines[0];",
													"    voucherLine.voucherId = pm.environment.get(\"voucherId\");",
													"    delete voucherLine.id;",
													"    ",
													"  utils.sendPostRequest(\"/voucher-storage/voucher-lines\", voucherLine, function(err,response){",
													"      pm.test(\"voucherLine is created in storage\", function(){",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"voucherLineId\", response.json().id);",
													"      });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4462c3de-7cb4-4437-b4aa-50d24906d229",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Successfully get Voucher line\", function () {",
													"    pm.response.to.have.status(200);",
													"    voucher = pm.response.json();",
													"});",
													"",
													"pm.test(\"Voucher line content is valid\", function() {",
													"    utils.validateVoucherLine(voucher);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get voucher lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f8e4a9a2-64d3-4b45-b75b-e914c78a5415",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2e9225b1-df38-4c6a-8e5b-006cd38b02ca",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let voucherLines = {};",
													"",
													"pm.test(\"Successfully get Voucher lines\", function () {",
													"    pm.response.to.have.status(200);",
													"    voucherLines = pm.response.json();",
													"    pm.expect(voucherLines.voucherLines.length).to.be.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines"
											]
										},
										"description": "GET /voucher/voucher-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get voucher lines by query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3feb17da-d36b-4c0c-aed9-1ef28e4fdbc1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "21ff0b38-bd94-409e-9f31-30ab9523052d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let voucherLines = {};",
													"",
													"pm.test(\"Successfully get Voucher lines\", function() {",
													"    pm.response.to.have.status(200);",
													"    voucherLines = pm.response.json();",
													"    pm.expect(voucherLines.voucherLines.length).to.be.above(0);",
													"});",
													"",
													"pm.test(\"Voucher line response is valid\", function() {",
													"    voucherLines.voucherLines.forEach(vLine => {",
													"        pm.expect(vLine.amount).to.be.above(30);",
													"        utils.validateVoucherLine(vLine);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=amount>/number 30",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines"
											],
											"query": [
												{
													"key": "query",
													"value": "amount>/number 30"
												}
											]
										},
										"description": "GET /voucher/voucher-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aec1a41e-5616-4a4f-ac25-bf623e2a1800",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Voucher line and update voucherLineAmount only (MODINVOICE-40)",
													"utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"    let voucherLine  = res.json();",
													"    let updatedVoucherLineAmount = 10.00;",
													"    voucherLine.amount = updatedVoucherLineAmount;",
													"    pm.variables.set(\"updatedVoucherLineAmount\", updatedVoucherLineAmount);",
													"    pm.variables.set(\"updatedVoucherLine\", JSON.stringify(voucherLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "18d753ed-2ccf-449d-b20f-280b6429b79f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeeded",
													"    utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"        pm.test(\"Verify voucher line updated with new VoucherLine Amount\", () => pm.expect(res.json().amount).to.equal(pm.variables.get(\"updatedVoucherLineAmount\")));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedVoucherLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with voucher lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a36cd91-0467-41e0-9056-118e8f881212",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ace14272-e4e9-4ce7-b212-34f306913629",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(set) current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b1ccad97-adb4-43b6-9966-ac9ebc368cc4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71f82170-ac2f-4438-903f-f04b2dddb0fd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully re(set) voucher start value\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c68bf2d9-36a9-4e4c-99b4-9a29570c1e66",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6335548-c22b-4f1e-b870-1fe931875698",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully got voucher start value\", function () {",
											"    pm.response.to.have.status(200);",
											"    utils.validateSequenceNumber(pm.response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with voucher number configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "127d7f5c-d143-4481-a8de-26f412a7f743",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4bad5647-c6e3-4777-b0aa-6a6d1071b575",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Workflows with configs",
							"item": [
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice with 4 lines, 2 of lines have negative total",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1c11d8ef-6914-4d9d-8068-eab30685b8ad",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"workflow-invoiceWith4LinesId\", invoice.id);",
															"    pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"  //  utils.validateInvoice(invoice);",
															"    createLines(invoice.id);",
															"  ",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(0);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															"",
															"",
															"function createLines(invoiceId) {",
															"    console.log(\"Start lines creation\")",
															"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
															"   console.log(\"Mock invoiceLine : \" + invoiceLine);",
															"    invoiceLine.fundDistributions[0].expenseClassId = pm.environment.get(\"expenseClassPrnId\");",
															"",
															"    // Now creating 4 invoice lines",
															"    for (let i = 1; i < 5; i++) {",
															"        console.log(\"i : \" + i)",
															"        if (i % 2 === 0) {",
															"            invoiceLine.poLineId = pm.globals.get(\"poLine1Id\");",
															"        } else {",
															"            invoiceLine.poLineId = pm.globals.get(\"poLine2Id\");",
															"            invoiceLine.subTotal = -invoiceLine.subTotal;",
															"        }",
															"  ",
															"        invoiceLine.releaseEncumbrance = i === 4;",
															"        console.log(\"invoiceLine : \" + invoiceLine)",
															"        utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
															"            pm.test(\"Invoice line #\" + i + \" is created in storage\", () => {",
															"              pm.expect(err).to.equal(null);",
															"              pm.expect(response).to.have.property('code', 201);",
															"            });",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e87a25af-71ad-4dde-9ed6-219c3be55e68",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
															"",
															"invoice.note += \" - with 4 lines for transition through workflow\";",
															"invoice.status = \"Open\";",
															"invoice.currency=\"EUR\";",
															"",
															"delete invoice.adjustments;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f6303380-9808-4988-aab0-cce7ee454a7b",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d99df50b-c113-4b35-ba16-f7167308aaa0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"setTimeout(function(){}, 1100);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"            //check acqUnitIds list of invoice and created voucher are equal",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get voucher by invoiceId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "499008a6-80e3-4124-afdb-222c4a386e3e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "574ef0f1-037b-4397-b9b4-6179d88a55ac",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucher = {};",
															"",
															"pm.test(\"Successfully get voucher\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucher = pm.response.json().vouchers[0];",
															"    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"    pm.environment.set(\"workflow-voucherWith4LineId\", voucher.id );",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers?query=invoiceId={{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"vouchers"
													],
													"query": [
														{
															"key": "query",
															"value": "invoiceId={{workflow-invoiceWith4LinesId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check voucher lines created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9a41b255-dfe1-417d-b1fc-076a6b9a105c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1aa6ea30-115d-4724-9704-7f0aaa47ee8a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucherLines = {};",
															"",
															"pm.test(\"Successfully get voucher lines\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucherLines = pm.response.json().voucherLines;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of voucher lines\", function() {",
															"",
															"    pm.expect(voucherLines).to.have.length(1);",
															"});",
															"",
															"pm.test(\"Check all lines have amount type distributions\", function() {",
															"    voucherLines[0].fundDistributions.forEach(distr => pm.expect(distr.distributionType).is.to.equal(\"amount\"));",
															"});",
															"",
															"pm.environment.unset(\"workflow-voucherWith4LineId\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=voucherId=={{workflow-voucherWith4LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"voucher-lines"
													],
													"query": [
														{
															"key": "query",
															"value": "voucherId=={{workflow-voucherWith4LineId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Paid",
									"item": [
										{
											"name": "Pay invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "af1b1d7d-2028-4826-b732-497859a6504c",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Paid\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "56cc47c4-9927-41a0-a8f3-27812bf8d4b5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"setTimeout(function(){}, 1100);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Paid\");",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"            // Validate order lines",
															"            utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
															"                pm.test(\"Associated order lines payment status updated\", function () {",
															"                    res.json().compositePoLines.forEach(poLine => {",
															"                        let expectedStatus = (poLine.id === globals.poLine1Id) ? \"Fully Paid\" : \"Partially Paid\";",
															"                        pm.expect(poLine.paymentStatus).to.equal(expectedStatus);",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check number of payments created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ff0b382a-e142-4e89-a65a-d68ec7fdc04a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dec2de58-0aca-4787-96be-8fa6d16ae7f3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of payments\", function() {",
															"",
															"    pm.expect(transactions).to.have.length(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check number of credits created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e580b9de-d1fd-4e5e-b614-2779247e11c5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6d233ab0-5372-4eae-9bf4-e2a03e1299fb",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of credits\", function() {",
															"    pm.expect(transactions).to.have.length(2);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Credit",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{workflow-invoiceWith4LinesId}} and transactionType==Credit"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Workflows with empty configs",
							"item": [
								{
									"name": "Delete invoice configs",
									"item": [
										{
											"name": "Get invoice configs and delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7b044899-e86b-4bff-9d37-9d71a014315c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let currentConfigs;",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"",
															"    currentConfigs = pm.response.json().configs;",
															"    console.log(\"Current configs: \", currentConfigs);",
															"});",
															"",
															"let configsToProcess = globals.testData.invoicesConfigs.configNames;",
															"for (var i = 0; i < configsToProcess.length; i++) {",
															"    let configName = configsToProcess[i];",
															"     if (currentConfigs.length > 0) {",
															"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
															"        utils.deleteConfig(configId);",
															"    } else {",
															"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "497aa422-01a1-40d5-80a8-531d508414c3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICE"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59179f93-04ae-4b82-add4-7733d5cdd412",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineId\", invoice.id);",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"    utils.validateInvoice(invoice);",
															"",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(10);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(10);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b274b4bb-3af2-4241-8845-29cafe533c85",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
															"",
															"invoice.note += \" - with 1 line for transition through workflow\";",
															"invoice.status = \"Open\";",
															"",
															"invoice.adjustments[0].fundDistributions = [{",
															"    \"fundId\": pm.environment.get(\"fund2Id\"),",
															"    \"distributionType\": \"percentage\",",
															"    \"value\": 50",
															"},",
															"{",
															"    \"fundId\": pm.environment.get(\"fundId\"),",
															"    \"distributionType\": \"amount\",",
															"    \"value\": 5",
															"}]",
															"delete invoice.voucherNumber;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create order-summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d2b9456c-4fae-4ea3-9c84-38366ecad0c3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Order transaction summaries line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "91179751-9d3e-4b81-a1ad-2e24eb56e08f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\": \"{{completeOrderId}}\",\n\t\"numTransactions\": 2\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create 1st encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84e92a60-ab23-4b9e-afac-900dadb5c339",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Encumbrance is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    transaction = pm.response.json();",
															"    pm.environment.set(\"encumbranceId1\", transaction.id);",
															"    pm.environment.set(\"encumbrance1\", JSON.stringify(transaction));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "df92e34b-41b4-41f7-a756-14503e380eae",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 1500,\n  \"currency\": \"USD\",\n  \"description\": \"PO_Line: History of Incas\",\n  \"encumbrance\": {\n    \"amountAwaitingPayment\": 0,\n    \"initialAmountEncumbered\": 1500,\n    \"status\": \"Unreleased\",\n    \"orderType\":  \"Ongoing\",\n    \"subscription\": false,\n    \"reEncumber\": true,\n    \"sourcePurchaseOrderId\": \"{{completeOrderId}}\",\n    \"sourcePoLineId\": \"{{poLine1Id}}\"\n  },\n  \"sourceInvoiceId\": \"{{emptyConfigWorkflow-invoiceWith1LineId}}\",\n  \"fiscalYearId\": \"{{fiscYearId}}\",\n  \"fromFundId\": \"{{fundId}}\",\n  \"source\": \"PoLine\",\n  \"transactionType\": \"Encumbrance\" \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create 2nd encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "814fcab5-fb91-4fa9-9f44-152e4ac240c1",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Encumbrance is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    transaction = pm.response.json();",
															"    pm.environment.set(\"encumbranceId2\", transaction.id);",
															"    pm.environment.set(\"encumbrance2\", JSON.stringify(transaction));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "005b2c43-9a3a-4a1c-aadf-cdd246844f37",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"amount\": 1000,\n  \"currency\": \"USD\",\n  \"description\": \"PO_Line: History of Incas\",\n  \"encumbrance\": {\n    \"amountAwaitingPayment\": 0,\n    \"initialAmountEncumbered\": 1000,\n    \"status\": \"Unreleased\",\n    \"orderType\":  \"Ongoing\",\n    \"subscription\": false,\n    \"reEncumber\": true,\n    \"sourcePurchaseOrderId\": \"{{completeOrderId}}\",\n    \"sourcePoLineId\": \"{{poLine2Id}}\"\n  },\n  \"sourceInvoiceId\": \"{{emptyConfigWorkflow-invoiceWith1LineId}}\",\n  \"fiscalYearId\": \"{{fiscYearId}}\",\n  \"fromFundId\": \"{{fund2Id}}\",\n  \"source\": \"PoLine\",\n  \"transactionType\": \"Encumbrance\" \n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice line without poLineId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "79eb29aa-d295-4370-a0cb-52df7ded8959",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Invoice line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "54de05f6-1bfd-46de-84be-45dffa18f6a2",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"",
															"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"));",
															"    invoiceLine.subTotal = 101;",
															"    invoiceLine.fundDistributions[0].value = 50;",
															"    invoiceLine.fundDistributions[0].encumbrance = pm.environment.get(\"encumbranceId1\");",
															"    delete invoiceLine.fundDistributions[0].code;",
															"    let amoutDistribution = {\"fundId\": pm.environment.get(\"fund2Id\"), \"distributionType\": \"amount\", \"value\": 55.6, \"encumbrance\" : pm.environment.get(\"encumbranceId2\")};",
															"    invoiceLine.fundDistributions.push(amoutDistribution);",
															"    delete invoiceLine.poLineId;",
															"",
															"pm.variables.set(\"emptyConfigWorkflow-invoiceLineContent\", JSON.stringify(invoiceLine));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceLineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoice-lines"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 1 line",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6aabab8a-6782-4774-beb9-32ee2b3c8274",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a24b76d7-15e0-4dcc-8ff8-e1e5796b4e88",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"            ",
															"            // Remember updated invoice",
															"            pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get voucher by invoiceId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cb716008-2bd3-4f28-9e15-7cb816eddce3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6923434b-9f1a-48b1-b2f6-53cbf25cb0d7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucher = {};",
															"",
															"pm.test(\"Successfully get voucher\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucher = pm.response.json().vouchers[0];",
															"    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"    //check acqUnitIds list of invoice and created voucher are equal",
															"    pm.environment.set(\"emptyConfigWorkflow-voucherWith1LineId\", voucher.id );",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers?query=invoiceId={{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"vouchers"
													],
													"query": [
														{
															"key": "query",
															"value": "invoiceId={{emptyConfigWorkflow-invoiceWith1LineId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Get voucher lines by query",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "54f6f5c5-60e9-4333-81c6-7cc4049ffa4a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cc60ec5b-035e-44de-b1d2-28cbbd487a17",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let voucherLines = {};",
															"",
															"pm.test(\"Successfully get Voucher lines\", function() {",
															"    pm.response.to.have.status(200);",
															"    voucherLines = pm.response.json();",
															"    pm.expect(voucherLines.voucherLines.length).to.equal(2);",
															"});",
															"",
															"pm.test(\"Check all lines have amount type distributions\", function() {",
															"   voucherLines.voucherLines.forEach(line => line.fundDistributions.forEach(distr => { ",
															"      pm.expect(distr.distributionType).is.to.equal(\"amount\");",
															"      pm.expect(distr).to.have.property(\"code\");",
															"   }));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines?query=voucherId=={{emptyConfigWorkflow-voucherWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"voucher",
														"voucher-lines"
													],
													"query": [
														{
															"key": "query",
															"value": "voucherId=={{emptyConfigWorkflow-voucherWith1LineId}}"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check pending payments has been created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16d780fc-7581-48db-818b-6002fd86fad6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "838fe418-0427-46c1-802e-f3e2154888c3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transaction = {};",
															"",
															"pm.test(\"Successfully get encumbrance\", function() {",
															"    pm.response.to.have.status(200);",
															"    transaction = pm.response.json();",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var transactions = pm.response.json().transactions;",
															"    pm.expect(transactions.length).to.eql(4);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Pending payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Pending payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										},
										{
											"name": "Check invoice transaction summary created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1d0cf558-197a-443c-b71d-22850121a65d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a5c01716-cb38-4d83-973d-4543eedb390f",
														"exec": [
															"pm.test(\"Successfully get encumbrance\", function() {",
															"    pm.response.to.have.status(200);",
															"    transaction = pm.response.json();",
															"});",
															"",
															"pm.test(\"Your test name\", function () {",
															"    var numPendingPayments = pm.response.json().numPendingPayments;",
															"    pm.expect(-4).to.eql(numPendingPayments);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/invoice-transaction-summaries/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"invoice-transaction-summaries",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Paid",
									"item": [
										{
											"name": "Pay invoice with line w/o poLineId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dae3bbb2-6282-4578-907b-c525155f546f",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineContent\"));",
															"invoice.status = \"Paid\";",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "02c4dfee-ec75-441f-8ccc-6d2d5d0c41cb",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Paid\");",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"            // Validate voucher",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"Still only one voucher but already Paid\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    pm.expect(res.json().vouchers[0].status).to.eql(\"Paid\");",
															"                });",
															"            });",
															"",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check number of payments created",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9bad1d39-8033-4e74-b53b-10f9f839512d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "07aafc05-663c-4042-ae32-809ee75dc84d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let transactions = {};",
															"",
															"pm.test(\"Successfully get transactions\", function() {",
															"    pm.response.to.have.status(200);",
															"    transactions = pm.response.json().transactions;",
															"});",
															"",
															"pm.test(\"Retrieved expected number of payments\", function() {",
															"",
															"    pm.expect(transactions).to.have.length(4);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Payment",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "sourceInvoiceId=={{emptyConfigWorkflow-invoiceWith1LineId}} and transactionType==Payment"
														}
													]
												},
												"description": "GET /voucher/voucher-lines requests that return 200"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Restore invoice configs",
									"item": [
										{
											"name": "Check invoice configs and restore",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "496144c3-dcef-4dd5-95b5-e7165c36f3a5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let testConfigs = globals.testData.invoicesConfigs;",
															"",
															"let configs = [];",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"    configs = pm.response.json().configs;",
															"});",
															"",
															"let configNamesToProcess = testConfigs.configNames;",
															"console.log(\"Config codes to process: \" + configNamesToProcess);",
															"",
															"for (var i = 0; i < configNamesToProcess.length; i++) {",
															"    let configName = configNamesToProcess[i];",
															"    let value = pm.variables.get(configName);",
															"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e2f4b6e-e36d-4d1e-a57c-4b20e18769e9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICE"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "This directory contains various tests related to transition of the invoices/vouchers through the workflow",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch groups",
					"item": [
						{
							"name": "Get batch-groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99f78e26-6dbb-4f1e-855d-96b208ce2db7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroups = [];",
											"",
											"pm.test(\"Successfully get batch-groups\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    batchGroups = pm.response.json().batchGroups;",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    batchGroups.forEach(batchGroup => utils.validateBatchGroup(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "512bd64e-1aac-4a80-bbf9-bd6b2e636c2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8beb1753-a504-4978-9672-bab59ae993bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchGroup = {};",
											"",
											"pm.test(\"Batch-group is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    pm.expect(batchGroup.name).to.exist;",
											"    pm.environment.set(\"originBatchGroupId\", batchGroup.id);",
											"    ",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c3b2ccc7-1631-4e9b-8684-c7130533cd09",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.id",
											"    delete batchGroup.metadata;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-group by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4df5360e-9bec-481a-b371-7f935315856c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Successfully get Batch-group\", function () {",
											"    pm.response.to.have.status(200);",
											"    batchGroup = pm.response.json();",
											"});",
											"",
											"pm.test(\"Batch-group content is valid\", function() {",
											"    utils.validateBatchGroup(batchGroup);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8c5442f-921c-4f49-a316-e06be81a66ec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b432a09-cbac-4ca0-9ecb-f98b6be05d01",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-groups/\" + pm.environment.get(\"originBatchGroupId\"), (err, res) => utils.validateBatchGroup(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b51f0ccc-1fb4-4ca8-8abc-8c2398960344",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    batchGroup.name = \"New Name\";",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0da1acd6-507c-4ed5-9234-3d7348b31ab0",
										"exec": [
											"pm.test(\"Batch-group is deleted\", function() {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "75050524-964c-474b-b0d7-d911557512ce",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{originBatchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{originBatchGroupId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher exports",
					"item": [
						{
							"name": "Get batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59257fec-72c5-4071-a1c5-5d4cbfe1b749",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchVoucherExports = [];",
											"",
											"pm.test(\"Successfully get batch-voucher-exports\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.exist;",
											"    batchVoucherExports = pm.response.json().batchVoucherExports;",
											"});",
											"",
											"pm.test(\"Batch-voucher-export content is valid\", function() {",
											"    batchVoucherExports.forEach(batchVoucherExports => utils.validateBatchVoucherExport(batchVoucherExports));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f6b1c85-ceaa-4f18-bd57-204279032b78",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6d285cd-60b0-4b01-b558-dce8b2fc16aa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let batchVoucherExport = {};",
											"",
											"pm.test(\"Batch-voucher-export is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    batchVoucherExport = pm.response.json();",
											"    pm.environment.set(\"batchVoucherExportId\", batchVoucherExport.id);",
											"});",
											"",
											"setTimeout(function(){}, 3000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b98b134-fd46-4676-9a5c-a71cc9084555",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n \t  \"status\" : \"Pending\",\n      \"message\": \"Batch voucher export message\",\n      \"batchGroupId\": \"{{batchGroupId}}\",\n      \"start\": \"2020-03-16T00:00:00.000+0000\",\n      \"end\": \"2020-08-22T00:00:00.000+0000\",\n      \"metadata\": {\n        \"createdDate\" : \"2020-04-13T00:00:35.222+0000\",\n        \"createdByUserId\" : \"6618f188-4ec9-52e2-88ec-9632793c357e\",\n        \"updatedDate\" : \"2020-04-28T00:01:16.111+0000\",\n        \"updatedByUserId\" : \"6618f188-4ec9-52e2-88ec-9632793c357e\"\n      }\n    }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "825e99a8-16ea-4cf5-a561-b1c17e7b3403",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully get Batch-voucher-exports\", function () {",
											"    pm.response.to.have.status(200);",
											"    batchVoucherExport = pm.response.json();",
											"    pm.expect(batchVoucherExport.batchVoucherId).not.eql(null);",
											"    pm.environment.set(\"batchVoucherId\", batchVoucherExport.batchVoucherId);",
											"});",
											"",
											"pm.test(\"Batch-voucher-export content is valid\", function() {",
											"     utils.validateBatchVoucherExport(batchVoucherExport);",
											"});",
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26dd2abc-d8a3-43ec-9881-e53745418e73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{batchVoucherExportId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{batchVoucherExportId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed7cfdab-0eb2-480a-a852-0b285d9ae9a0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-voucher/batch-voucher-exports/\" + pm.environment.get(\"batchVoucherExportId\"), (err, res) => utils.validateBatchVoucherExport(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40f0944d-c06b-4e68-ac0a-8532898df0b8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/batch-voucher/batch-voucher-exports/\" + pm.environment.get(\"batchVoucherExportId\"), function (err, res) {",
											"    let batchVoucherExport = res.json();",
											"    batchVoucherExport.message = \"Updated message\";",
											"    ",
											"    pm.environment.set(\"batchVoucherExportContent\", JSON.stringify(batchVoucherExport));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchVoucherExportContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{batchVoucherExportId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{batchVoucherExportId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Credentials",
					"item": [
						{
							"name": "Create credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b72de5dc-d244-435c-8d7c-905aaf55bd84",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let credentials = {};",
											"",
											"pm.test(\"Credentials is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    credentials = pm.response.json();",
											"});",
											"",
											"pm.test(\"Credentials content is valid\", function() {",
											"    // check required fields",
											"    pm.expect(credentials.exportConfigId).to.exist;",
											"    pm.expect(credentials.username).to.exist;",
											"    ",
											"    pm.environment.set(\"credentialsId\", credentials.id);",
											"    ",
											"    utils.validateCredentials(credentials);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d409c33-3713-4ee2-8424-540350a4e2ec",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// create mock export configuration",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVoucherExportConfigs/configs.json\", function (err, res) {",
											"    let exportConfig = res.json().exportConfigs[0];",
											"    exportConfig.batchGroupId = \"2a2cb998-1437-41d1-88ad-01930aaeadd5\";",
											"    delete exportConfig.metadata;",
											"    ",
											"  utils.sendPostRequest(\"/batch-voucher/export-configurations\", exportConfig, function(err,response){",
											"      pm.test(\"Export configuration is created in storage\", function(){",
											"          pm.expect(err).to.equal(null);",
											"          pm.environment.set(\"exportConfigurationId\", response.json().id);",
											"      });",
											"    });",
											"});",
											"",
											"// prepare credentials body",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/credentials/574f0791-beca-4470-8037-050660cfb73a.json\", function (err, res) {",
											"    let credentials = res.json();",
											"    credentials.exportConfigId = pm.environment.get(\"exportConfigurationId\");",
											"    delete credentials.metadata;",
											"    ",
											"    pm.environment.set(\"credentialsBody\", JSON.stringify(credentials));",
											"  ",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{credentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "921f17b8-3f48-41a1-aee1-fd62df997271",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let credentials = {};",
											"",
											"pm.test(\"Successfully get credentials\", function () {",
											"    pm.response.to.have.status(200);",
											"    credentials = pm.response.json();",
											"});",
											"",
											"pm.test(\"Credentials content is valid\", function() {",
											"    utils.validateCredentials(credentials);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e484b9fd-0e92-4bae-af19-844dd23aae29",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a99ce2b-abd7-4b09-a30b-f08e1f8e4700",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => utils.validateCredentials(res.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8f05a44-d837-49de-a49f-3fe2607fdbf2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => {",
											"    let credentials = res.json();",
											"    credentials.username = \"newName\";",
											"    credentials.password = \"newPassword\";",
											"    delete credentials.metadata;",
											"    pm.environment.set(\"modifiedCredentialsBody\", JSON.stringify(credentials));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedCredentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "af135068-87bb-4100-8172-c0d1b41971da",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eb15b5d9-4188-4754-b96d-1082b72cae35",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create invoices for negative tests",
					"item": [
						{
							"name": "Reviewed",
							"item": [
								{
									"name": "Create reviewed invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00002add-fc0c-48c1-b1ea-9f96df81658f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeReviewedToApprovedInvoiceId\", invoice.id);",
													"    pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));",
													"",
													"    createLine(invoice.id);",
													"",
													"    // Verify that voucher has not been created",
													"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
													"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
													"    });",
													"});",
													"",
													"function createLine(invoiceId) {",
													"",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
													"",
													"    // Now creating invoice line",
													"    utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
													"        pm.test(\"Invoice line is created in storage\", () => {",
													"          pm.expect(err).to.equal(null);",
													"          pm.expect(response).to.have.property('code', 201);",
													"        });",
													"    });",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66511ad3-f2cf-436e-9788-0499c3c0cb40",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Approved\";",
													"invoice.status = \"Reviewed\";",
													"delete invoice.adjustments;",
													"delete invoice.voucherNumber;",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"",
													"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Paid",
							"item": [
								{
									"name": "Create paid invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fd5a96e-6edc-406f-87dd-d3447d11d5e2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"    pm.environment.set(\"negativePaidStatusInvoiceId\", invoice.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19aa6076-1961-4471-b28b-5efc1498f811",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Approved\";",
													"invoice.status = \"Paid\";",
													"delete invoice.adjustments;",
													"delete invoice.voucherNumber;",
													"delete invoice.approvalDate;",
													"delete invoice.approvedBy;",
													"",
													"pm.environment.set(\"negativePaidStatusInvoiceContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativePaidStatusInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Approved 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97e6f6a8-3696-484a-bbf3-ca3d29910a70",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Required properties are missing\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"",
													"    pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"    pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"    pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4662c3ab-643a-44b8-a3d3-38f748cb134b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Approved\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Reviewed 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d892dba9-9dc5-4384-bf67-f6c464912853",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6fe35d1a-6605-4dd6-8912-fff1892c2a33",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Reviewed\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Cancelled 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7334ac6-4007-4d01-b864-e4038a380890",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "726d9c63-1aa2-425f-ab3d-3c94fdaa44af",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Cancelled\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update paid invoice to Open 422",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e8aa6d9-dd18-4c89-b209-8834bfcf1c0e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(\"Unprocessable Entity\");",
													"    var errors = pm.response.json().errors;",
													"    pm.test(\"Test once an invoice is Paid it should no longer transition to other statuses\", function () {",
													"        pm.expect(errors).to.have.lengthOf(1);",
													"        pm.expect(errors[0].code).to.equal(\"invalidInvoiceStatusTransitionOnPaidStatus\");",
													"        pm.expect(errors[0].parameters[0].key).to.equal(\"invoiceId\");",
													"        pm.expect(errors[0].parameters[0].value).to.equal(pm.environment.get(\"negativePaidStatusInvoiceId\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1794530c-dc49-4701-a14f-10113bc634be",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativePaidStatusInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.status = \"Open\";",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativePaidStatusInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativePaidStatusInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ae5110a-3795-4345-a24a-77974a2f3445",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "519fcf51-094c-4937-bb4d-4eaa3fd0ceaa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Approved",
							"item": [
								{
									"name": "Create approved invoice with non-existing fund",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61766071-86e3-486c-98a5-91c7a4494eb5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeInvoiceWithUnexistingFund\", invoice.id);",
													"    pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeInvoiceWithUnexistingFund\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    invoiceLine.fundDistributions[0].fundId = require('uuid').v4();",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4193ff11-b63f-4c5d-b70e-1894396f6f6b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceWithUnexistingFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create approved invoice with big invoiceLine.total",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40a6ed73-ce6c-4330-ade0-990c7035c01a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"negativeInvoiceOwerexpended\", invoice.id);",
													"    pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));",
													"    utils.validateInvoice(invoice);",
													"    addInvoiceLine();",
													"});",
													"",
													"function addInvoiceLine() {",
													"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"negativeInvoiceOwerexpended\"));",
													"    invoiceLine.poLineId = require('uuid').v4();",
													"    invoiceLine.subTotal = 2000000000;",
													"    ",
													"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
													"        pm.test(\"Invoice line is created in storage\", function(){",
													"          pm.expect(response).to.have.status(201);",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"negativeOwerexpendedInvoiceLineId\", response.json().id);",
													"        });",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7fac3689-4723-4bcc-9725-90bfb8ebcef1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
													"",
													"invoice.note += \" - transition to Paid\";",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceOwerexpendedContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch Vouchers",
					"item": [
						{
							"name": "Test GET batch voucher by id without Accept header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e6f5efb-1eb6-465c-88a4-5ddae8d6d4f0",
										"exec": [
											"pm.test(\"Error get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.jsonBody();",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b9c0644e-6618-46f1-90f0-5540a150ea9b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/{{validBatchVoucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"{{validBatchVoucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Test GET Non-Existing batch voucher by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1689b133-bba6-4411-8b3d-580bd1be8820",
										"exec": [
											"pm.test(\"Successfully get Batch Voucher\", function () {",
											"    console.log(\"Status : \" + pm.response.status)",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.jsonBody();",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8bd33f7e-d6a4-419f-b2b5-ae28afc61ef5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-vouchers/1cc2d3ec-b239-4f5e-b34e-fc63dea23d98",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-vouchers",
										"1cc2d3ec-b239-4f5e-b34e-fc63dea23d98"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1c052b49-fb9e-439b-b9c1-25fa9c26e08c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "713d28b1-ff76-4381-a01e-db4500110ad7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Documents",
					"item": [
						{
							"name": "Update document - PUT metod not implemented",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71782403-c81d-44aa-8906-866ddde014bf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Method not implemented\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "910cf50b-bb9b-475a-8f29-06762f6e6084",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{documentWithURL}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}/documents/{{documentWithUrlId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeReviewedToApprovedInvoiceId}}",
										"documents",
										"{{documentWithUrlId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Get invoice by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05091f42-b76b-4429-8e25-6ecc618416c1",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af6d20c7-80a4-47b4-9b87-fd4af51d56e4",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "247aab61-5c44-4a40-8f9f-06455ee0d5a9",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12674127-d644-4ab4-932f-8dd7cf9a05f5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c32c8d3d-27e2-47f5-9780-8614e57dc500",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1dc4eeae-0597-4d01-aabd-fd1b528a37de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf0adaff-c6b5-4841-b44b-55f661fa060c",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a2f21eb-c63d-4b72-8657-844fb8c7913a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c256aa5c-62f7-4bf7-81a3-ce996a2e3988",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13374749-cafb-484f-b965-034cbcdb61be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc550f65-c730-4372-8991-29d2c624d7e0",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9d2d00dc-c75f-4aa6-b2a0-d80a452833be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create empty invoice with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d7e371ae-4c62-4723-b5bc-f7f636c14761",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "618b94ec-fca1-49f5-a994-14875af978f9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"        pm.expect(jsonData.errors).to.have.lengthOf.at.least(7);",
											"",
											"        let requiredProps = utils.getInvoiceSchema().required;",
											"        let missingRequiredPropsErrors = jsonData.errors.filter(error => requiredProps.includes(error.parameters[0].key));",
											"",
											"        missingRequiredPropsErrors.forEach(error => requiredObj(error));",
											"",
											"        // Number of filtered errors should be equal to number of required properties",
											"        pm.expect(missingRequiredPropsErrors).to.have.lengthOf(requiredProps.length - 1);",
											"    });",
											"});",
											"",
											"function requiredObj(error) {",
											"    pm.expect(error.message).to.equal(\"must not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Update invoice by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "399170ad-ab80-498c-ac6e-e448db70f735",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6d740b99-52b7-4a0e-84f5-bc942f53f99a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b8c2cd8-679f-4d4c-bfbc-6793b16dc306",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "50a2e8a9-5d2f-44bf-ab20-0ad329e1f716",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9dfacf63-91c8-4b12-aa55-622dedc52dce",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e93b3a5a-842e-4ff9-a749-7cd8345964cb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "495a8a84-89df-4f80-8ec1-e75e37814299",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de341f29-1086-47b9-99a3-883094abc770",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with empty accountingCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4848ace5-d310-4e40-8600-98e81654175f",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"    pm.expect(pm.response.json().errors[0].code, \"Error code does not match to expected\").to.equal(\"accountingCodeNotPresent\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "42b97e4c-8893-449b-af43-235ba5106ea2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let negativeInvoice = JSON.parse(pm.environment.get(\"negativeReviewedToApprovedInvoiceContent\"));",
											"negativeInvoice.exportToAccounting = true;",
											"negativeInvoice.accountingCode = null;",
											"negativeInvoice.status = \"Approved\";",
											"",
											"pm.variables.set(\"invoiceWithEmptyAccountingCode\", JSON.stringify(negativeInvoice));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceWithEmptyAccountingCode}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeReviewedToApprovedInvoiceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcdd31f6-96a7-4e59-b802-079171c6fd3c",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a281fc1c-1694-4cb0-bbb6-eab036b1f829",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67500711-37f3-4d64-afe4-4972f178fb2a",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4e28c4e3-2159-4a95-ad51-0e5ef6c37587",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "633052ec-8cea-498b-8c00-ae73f8c5e401",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c441a57-592d-4ad9-be67-0112e0c8248f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ccebfcb-edaf-4a96-b0ff-6b9fb0a23e36",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb62fd2e-a2b0-429c-8b4f-8a66a71472e5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Create empty invoice-lines with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2b05a28-09f7-4aeb-bb08-c93f568afe57",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "40a23d41-557e-44f7-8a04-1db1cc726477",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"",
											"        requiredObj(errors, \"description\");",
											"        requiredObj(errors, \"invoiceId\");",
											"        requiredObj(errors, \"invoiceLineStatus\");",
											"        requiredObj(errors, \"subTotal\");",
											"        requiredObj(errors, \"quantity\");",
											"",
											"        // releaseEncumbrance is also required but has default value",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"must not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Create invoice line - without required fields- 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "416e6a85-0b5d-4d21-a50b-2bc09822e92e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"delete line.invoiceId;",
											"delete line.invoiceLineStatus;",
											"delete line.subTotal;",
											"delete line.quantity;",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "121d59c0-678b-4d46-a944-59ec800cc75c",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    ",
											"});",
											"pm.test(\"4 validation errors\", function () {",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10446039-7af5-48f0-a6f8-d93c59bfbaa4",
										"exec": [
											"pm.test(\"Status code is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eef87ca0-dea6-45e2-85b3-56215bb659a8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3194703-1b15-4913-b15a-ff02a475a63c",
										"exec": [
											"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e94e67c9-9eb9-4a66-8f40-c0603e458de3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"invoiceLine.invalidProperty = \"invalid\";",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice line by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9604fc9-2751-4d18-a95a-dbc2be26558e",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f670e8f-b2f0-4760-8e20-7cc15e14cc76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Invoice Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8348c929-77a7-4b67-b27d-f79363834e5f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ef20363-175a-48a3-8424-dbedb1b0c2be",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get invoice lines by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a14a6119-1fe1-4b8b-bc78-178469163626",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice-line by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef8cedab-49cf-4ea2-af64-8da0fb37f046",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bfcb4e54-2570-4e19-9e4a-0e0951c0fc19",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice line with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "709ea4ef-6cd2-4c2c-93a8-3142d3b5bd89",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b206329-1465-4eb5-865f-a183084d74cf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete already deleted invoice line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cd180c5-c8f3-4fce-9e23-79fbc39b3a57",
										"exec": [
											"pm.test(\"Invoice line is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dd2de2d9-4a3d-474d-8265-f810ec413c6f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice-line with invalid adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4f0371b-cad0-4351-963e-5c54acc29db9",
										"exec": [
											"pm.test(\"Invoice Line creation fails\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ac1c7b28-9a45-47b1-b23f-1923365918fc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let adjustmentsArray = [];",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"delete invoiceLine.adjustments;",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
											"",
											"let adjustment1 = utils.buildAdjustmentObject();",
											"adjustmentsArray.push(adjustment1);",
											"",
											"let adjustment2 = utils.buildAdjustmentObject();",
											"adjustment2.relationToTotal = \"Not Included in\";",
											"adjustmentsArray.push(adjustment2);",
											"",
											"invoiceLine.adjustments = adjustmentsArray;",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "80fcb417-ea59-4c1b-a3d9-47f4691d8f3a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bfd50463-8d62-4794-a2e9-097a9e153098",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db93edfd-5276-471f-9427-524782436b14",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update voucher protected fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64ad8b52-a912-4b96-bdc8-abd68c71b5a4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"    pm.expect(pm.response.json().errors[0].protectedAndModifiedFields).to.have.members([\"systemCurrency\", \"exchangeRate\", \"voucherDate\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5938be18-1c06-427c-9d30-682290efa039",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify protected fields",
											"    voucher.systemCurrency = \"EUR\";",
											"    voucher.exchangeRate = 1.123;",
											"    voucher.voucherDate = \"2020-05-06T00:00:00.000+0000\";",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update voucher bad id format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe9b801e-70be-411c-8574-bbcd87eabbab",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8676fc4d-7048-4538-9c9f-42b672d0cb9e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/voucher/vouchers/\" + pm.environment.get(\"voucherId\"), (err, res) => {",
											"    let voucher = res.json();",
											"    ",
											"    // modify protected fields",
											"    voucher.systemCurrency = \"EUR\";",
											"    voucher.exchangeRate = 1.123;",
											"    voucher.voucherDate = \"2020-05-06T00:00:00.000+0000\";",
											"    pm.environment.set(\"modifiedVoucherBody\", JSON.stringify(voucher));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedVoucherBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"bad-id-format"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Get voucher line by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "25641128-ffa3-471a-8d4d-662100835ca0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0dbaec80-97a5-40d9-ac7e-40e8858bf08f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a181f83-39db-40a0-8c57-e3e0e3a18e11",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildVoucherLineWithMinContent();",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a50ee8b1-a9d3-4be4-80a7-091df267d8da",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher line by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae0afe0c-0f4f-422e-8f61-88dd6963c901",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(setting) with negative start value - illegal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c26f1eef-0bd6-4b0a-9aee-a59e80b849b1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0c56d682-cebc-4fb1-a94c-5a0432b340ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Re(setting) with negative voucher start value not allowed\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/-150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"-150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get start value with wrong lang param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec5cdba2-4b51-460a-acb0-fb5b3aad3428",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6d3a005-17e9-4f9e-b806-3724cb302317",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8dd86c24-6915-4266-a503-14c564dabe97",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ddbca913-0066-4d27-90ba-1f49c7ba325e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Transition to Approved",
							"item": [
								{
									"name": "Prepare invalid vousherNumberPrefix config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c4f2b5f-a62b-4bae-972b-e6895bf03afe",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function() {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"voucherNumber\";",
													"let value = \"{\\\"voucherNumberPrefix\\\": \\\"invalidPrefix86\\\"}\";",
													"",
													"utils.updateOrCreateInvoicesConfig(configs, configName, value);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b6454924-5386-4d32-b308-d0d8164b1c2e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICE and configName==voucherNumber",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==INVOICE and configName==voucherNumber"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with status Approved",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "73fbce2a-4371-4cdd-8a00-b7c5b3c189dc",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeReviewedToApprovedInvoiceContent\"));",
													"invoice.status = \"Approved\";",
													"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79a30f9d-acab-49d6-a3f0-8936dc9858b3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(\"Internal Server Error\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeReviewedToApprovedInvoiceId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function () {",
													"            pm.expect(invoice.status).to.equal(\"Reviewed\");",
													"        });",
													"        pm.test(\"Voucher number not exist\", function () {",
													"             pm.expect(invoice.voucherNumber).to.not.exist;",
													"        });",
													"        ",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"reviewedToApprovedInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeReviewedToApprovedInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Paid",
							"item": [
								{
									"name": "Pay invoice with non-existing fund",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3a8f764a-efc0-4f57-aabc-0b23dd403183",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeInvoiceWithUnexistingFundContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeInvoiceWithUnexistingFundContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aeeb7707-13a3-4d67-b2da-382a0e2cf69b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: fund not found\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"fundsNotFound\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"value\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"key\", \"funds\");",
													"",
													"});",
													"",
													"pm.environment.unset(\"negativeInvoiceWithUnexistingFund\");",
													"pm.environment.unset(\"negativeInvoiceWithUnexistingFundContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceWithUnexistingFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeInvoiceWithUnexistingFund}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeInvoiceWithUnexistingFund}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Pay invoice with owerexpended line.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0cb08118-2703-4a5d-977f-e0c8cd698123",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeInvoiceOwerexpendedContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeInvoiceOwerexpendedContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f3644943-7901-4e49-b828-b2291ef960a0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: fund not found\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"transactionCreationFailure\");",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"value\", pm.environment.get(\"negativeOwerexpendedInvoiceLineId\"));",
													"    pm.expect(pm.response.json().errors[0].parameters[0]).to.have.property(\"key\", \"invoiceLineId\");",
													"    pm.expect(pm.response.json().errors[0].parameters[1]).to.have.property(\"value\", pm.environment.get(\"fundId\"));",
													"    pm.expect(pm.response.json().errors[0].parameters[1]).to.have.property(\"key\", \"fundId\");",
													"",
													"});",
													"",
													"pm.environment.unset(\"negativeOwerexpendedInvoiceLineId\");",
													"pm.environment.unset(\"negativeInvoiceOwerexpended\");",
													"pm.environment.unset(\"negativeInvoiceOwerexpendedContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceOwerexpendedContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeInvoiceOwerexpended}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeInvoiceOwerexpended}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Approved with invalid FundDistributions",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "776a9fc9-9890-4f0b-89d7-22155250c630",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosId\", invoice.id);",
													"    // pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));",
													"",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"",
													"    utils.validateInvoice(invoice);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4c61570e-ede2-47af-af01-d6b059a787b4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Budget expense class Inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e601bda9-aa37-4df8-8212-8b43045f6eb1",
												"exec": [
													"pm.test(\"Budget expense class is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"    pm.environment.set(\"budgetExpenseClassInactiveId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "64f9af62-26d1-4c60-b9d5-686bcdbf6078",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"budgetId\": \"{{budgetId}}\",\n  \"expenseClassId\": \"{{expenseClassElecId}}\",\n  \"status\": \"Inactive\"\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/budget-expense-classes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"budget-expense-classes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions with inactive expenseClass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5505e531-4ca6-48eb-874a-dc09a8473b43",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].expenseClassId = pm.environment.get(\"expenseClassElecId\");",
													"pm.environment.set(\"lineWithExpenseClassInactive\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e1584cb1-46f8-41e6-b05b-3997bc93381b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"lineWithExpenseClassInactiveId\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithExpenseClassInactive}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros with inactive expenseClass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "17e42729-6d0c-4506-8419-c27c307f445e",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithExpenseClassInactive\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6e87246a-0c23-46a1-8692-7f6cc2127122",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Error code is 'Expense class is Inactive'\", function() {",
													"        pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"inactiveExpenseClass\");",
													"        });",
													"        pm.test(\"Invoice status not changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"lineWithExpenseClassInactiveId\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    ",
													"    let becId = pm.environment.get(\"budgetExpenseClassInactiveId\")",
													"    utils.sendDeleteRequest(\"/finance-storage/budget-expense-classes/\" + becId, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    ",
													"    pm.environment.unset(\"lineWithExpenseClassInactiveId\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithExpenseClassInactive}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions percentage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "731f3d14-3c00-436a-ae82-c3a6c24b05f7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].value=50;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "642eaa23-2082-45f8-bed3-cb038f11ac68",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros percantage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "642cd982-16eb-467c-9029-2a23dc745a5d",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b02a6186-fa79-4411-87a6-9d5e4661076b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update line  FundDistros amount !=invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb4e2d11-bf40-47d0-b307-a3fcc48b23b8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].distributionType = \"amount\";",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4786b6b5-5104-4e5d-94b7-29a03e581f0b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros amount != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "59012b84-2206-4e07-99ec-e6810658cbc2",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ce9b023c-0c44-4b2c-bdf1-4b31f1deb9ae",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update line  FundDistros mixed distr type != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fdfd029d-1328-42de-a15b-65319015a679",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].distributionType = \"amount\";",
													"invoiceLine.fundDistributions[0].value = 50;",
													"let percentageDistr = {\"fundId\":  invoiceLine.fundDistributions[0].fundId, \"distributionType\": \"percentage\", \"value\": 50};",
													"invoiceLine.fundDistributions.push(percentageDistr);",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "22561334-63a1-4a01-a91b-219044da7c17",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros mixed type != invoiceLine.total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4ba1b36d-4731-4eb0-8f18-bc52fe2ce7aa",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "48699fee-2d04-4eab-9439-11e84dc71378",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line without FundDistributions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b56e027b-ff18-4264-8fab-ce99006e1168",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"delete invoiceLine.fundDistributions;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04af9be3-1f15-47aa-9cc7-427908318364",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit ot approved invoice without FundDistros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d51b90d-f84b-4ca6-b9f2-8b5d46805bb9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2aa708d9-40e9-4a56-959c-d89785797809",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"InvoiceWithEmptyFundDistrosContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions percentage = 100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "de7e05b7-7c38-4f63-9fa0-75b3cee677a8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].value=100;",
													"pm.environment.set(\"lineWithFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6f8b149f-d1e2-4922-9730-58067a6bc3fb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice line is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros percantage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d96f66af-568a-443e-9d44-7f4bb50e7216",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Percentage\");",
													"adjustment.fundDistributions = [];",
													"let fundDistribution = {",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"percentage\",",
													"        \"value\": 99.99",
													"    };",
													"adjustment.fundDistributions.push(fundDistribution);",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9b929663-8a87-4897-b1b6-1a264e87e5d6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros amount != adjustment total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "435f409d-e1b1-4b63-8eed-deb8618e5a4d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"let fundDistribution = {",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"amount\",",
													"        \"value\": 99.99",
													"    };",
													"adjustment.fundDistributions.push(fundDistribution);",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b492b627-6aee-41cd-bc19-426fe8e18be8",
												"exec": [
													"",
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment FundDistros mixed != adjustment total",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7acf4e4d-92ea-457b-83d6-3843f47ab5c1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"",
													"adjustment.fundDistributions.push({",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"amount\",",
													"        \"value\": 99.99",
													"    });",
													"    adjustment.fundDistributions.push({",
													"        \"fundId\": pm.environment.get(\"fundId\"),",
													"        \"distributionType\": \"percentage\",",
													"        \"value\": 99.99",
													"    });",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0649118e-a693-405f-b5b1-0c9a227554b3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. Adjustment without fundDistr",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b0265053-1a1b-4318-b90b-8319db63b1cb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"invoice.adjustments = [];",
													"let adjustment = utils.buildAdjustmentObject(100, \"Amount\");",
													"adjustment.fundDistributions = [];",
													"",
													"invoice.adjustments.push(adjustment);",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6379037a-6f88-490e-93cb-256e164cdf95",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c276646-a229-4c82-8829-fca6feb6f15c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d2abb53f-3438-438f-8731-ad4e3c89e931",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice with incompatible fields",
							"item": [
								{
									"name": "Create Open invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89dfa42f-9e04-4e6f-b0f8-4d67dc9afabd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(pm.response.json()));",
													"    pm.environment.set(\"incompatibleFieldsInvoiceId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "11b9a113-f0de-437b-aa0c-fc338bfbfce4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "369a00b4-cfd6-4883-878f-d9c36367a107",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not updated\", function() {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.environment.unset(\"incompatibleFieldsInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b93ec745-504c-42d0-885d-1775ff208387",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let incompatibleFieldsInvoice = JSON.parse(pm.environment.get(\"incompatibleFieldsInvoiceContent\"));",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{incompatibleFieldsInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{incompatibleFieldsInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "334a3079-79d1-4f61-9505-7ec0e26a418d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "09d37e30-3128-451b-a3c9-2d44f82ebcb7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch groups",
					"item": [
						{
							"name": "Create batch-group missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b583417-9b8f-444d-b51f-faf74e819f6a",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"    batchGroup = pm.response.json();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3294ec62-adf3-41b1-a8ea-2154e68972b5",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.metadata;",
											"    delete batchGroup.name;",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-groupby id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5d707a6-a00e-474a-ad84-474745bcd1b8",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0d60397-9cb7-41c5-a567-6f07dbd90ab7",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-group by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cda0ce7-4cd4-446b-b34c-715fa42dc6de",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a37a5eb5-3af6-46e3-b17c-ba8a1433b86a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f3e8aee-9891-4e89-8e15-85d22e61df23",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "10fdd8da-8347-40ac-a9a6-32e5be6a87e6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef17ee66-6f9e-4779-83b7-dfce6cff100f",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d499ec4f-fc59-469a-8c77-bb484b991b78",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f064556d-9d3e-4c54-9456-722f192912c2",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0305c6c-763a-45d0-92b6-e41af02b1684",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-groups?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39658747-ea2e-4dec-804b-b91c4fd5b189",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "97dba112-0b06-4d69-8c44-2a8683181fa1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b4bff61-8a17-4936-b8aa-d512aafcd538",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92f56987-e63a-41f5-8ac6-3797319341ba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4ea1866-640a-47e3-87e3-6ecfecfed236",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53a37965-4c22-49d6-a1e5-fcb1f499dbaa",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    batchGroup.name = \"New Name\";",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-group missing requred fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ea1126b-fa57-451e-b27e-fea00ee0402c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eddf0a73-5038-4503-8feb-8eb3b5e9d701",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchGroups/batch_group_collection.json\", function (err, res) {",
											"    let batchGroup = res.json().batchGroups[0];",
											"    delete batchGroup.name;",
											"    delete batchGroup.metadata;",
											"    ",
											"    pm.environment.set(\"batchGroupContent\", JSON.stringify(batchGroup));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchGroupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{batchGroupId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{batchGroupId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch group by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d95129f1-abb1-4a74-9d41-0a260883e7f0",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d96d8570-274c-4ba6-a234-c385a34f5365",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent batch-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4a35a14-1ef6-4915-894d-6655835f23cc",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b83babb2-1619-413a-b05c-5852f8c0faef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2b34251-3ed0-4f24-8443-0823e056a142",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36b465f2-db44-4c26-94bb-f125034ebae5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d54ff4b-137e-4e60-83bb-ce7d7af21cfe",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7cae2e3a-05d6-4e5a-a178-faf83ee6fa74",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-group with UUID in use",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3c53c57-887b-4f15-bb16-f05c08978c37",
										"exec": [
											"pm.test(\"Batch-group is in use\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "851adefe-b4d8-4b10-9ed7-a8aa442ede8e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-groups/{{batchGroupSystemRecordId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-groups",
										"{{batchGroupSystemRecordId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher exports",
					"item": [
						{
							"name": "Create batch-voucher-export missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f98add00-23cd-4947-913a-bb2c696adb20",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"    batchGroup = pm.response.json();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "64cd573b-3775-4117-8ee1-103b2ebfcea6",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/batchVoucherExports/batch_voucher_exports_collection.json\", function (err, res) {",
											"    let batchVoucherExport = res.json().batchVoucherExports[0];",
											"    delete batchVoucherExport.batchGroupId;",
											"    pm.environment.set(\"batchVoucherExportContent\", JSON.stringify(batchVoucherExport));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{batchVoucherExportContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53bd9fdd-8179-4fcf-89e0-c6bd17cb4237",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ba0bdcf-fd88-49e2-9016-4f1895f141bb",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get batch-voucher-export by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d86d7b7f-fb19-4a2b-95ea-5aac04955963",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "171cc8b1-c201-472e-9044-89eb926d417c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9b206ce-f259-46a0-9e5a-21b487d9fff5",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c07b583b-40d0-4f36-a863-0474ceefdbe3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "310e01c6-8967-48a7-950c-2f79e881ffe1",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e79112-ae54-4722-a43d-fae380482b75",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "604e9c6f-3007-41ed-bfb8-148ecc11ddf7",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "487ee798-98d4-4ac3-80d7-4b1434f921bd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /batch-voucher-export?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37250b83-4b17-4e5b-9360-a91ddca47d5f",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f52bd489-cca8-4e3f-a64a-d99bd1adf64a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update batch-voucher-export by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0424c47b-b90c-4155-b3c7-f26badddda04",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76c5f0d9-11cd-4094-826b-e9968657819f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff886b16-fafa-4105-b7be-8673826273d4",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "97228243-05e8-40ed-b7ed-a22730b0c1ec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent batch-voucher-export",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb46bb7f-08bb-4ca0-a744-d9acfdb3d9b7",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ed725e0-d540-47c2-9826-a80e85f39eef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19b1a67a-8df6-410e-980b-91356ac46e15",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60121854-8cf4-436a-845a-421af3a4181d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete batch-voucher-export with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8791b2d9-3ad8-4a16-be60-e579197ef2c5",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "66197773-7f34-426e-a955-290cefcd7c2c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/batch-voucher-exports/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"batch-voucher-exports",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Batch voucher export configs",
					"item": [
						{
							"name": "Get export config by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bf667e8c-5067-40fd-99e3-0e5b41495d8f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "64115027-b9d4-480b-a128-96a09c3bd344",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a591ea7c-f91f-4f94-86f6-0409fb705b54",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create export config w/ missing required fields - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "531b6d5e-5ed5-4eaf-a11a-47e05e8e6e5f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3438de80-68b6-476b-a40d-601633766038",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"        pm.expect(jsonData.errors).to.have.lengthOf.at.least(1);",
											"",
											"        let requiredProps = utils.getExportConfigSchema().required;",
											"        let missingRequiredPropsErrors = jsonData.errors.filter(error => requiredProps.includes(error.parameters[0].key));",
											"",
											"        missingRequiredPropsErrors.forEach(error => requiredObj(error));",
											"",
											"        // Number of filtered errors should be equal to number of required properties",
											"        pm.expect(missingRequiredPropsErrors).to.have.lengthOf(requiredProps.length);",
											"    });",
											"});",
											"",
											"function requiredObj(error) {",
											"    pm.expect(error.message).to.equal(\"must not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ }"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update export config - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a7044c34-ea16-4539-a995-878f612dba82",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e3ce633-96ff-485f-a308-f83e780baa1b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"batchGroupId\": \"075f9308-40a1-41ba-9238-b8a27adc8d39\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/075f9308-40a1-41ba-9238-b8a27adc8d39",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"075f9308-40a1-41ba-9238-b8a27adc8d39"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b342cc39-2b89-4463-9f68-d3ab0b5a894a",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n\t\"batchGroupId\": \"075f9308-40a1-41ba-9238-b8a27adc8d39\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete export config - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6cff6c59-bd32-49eb-8139-70ba5441d316",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2b24e04d-528a-4b13-9ba7-a9f81905d0b8",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete export config by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f49f0f8-eecc-49f7-b376-dbe6382a7e10",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Credentials",
					"item": [
						{
							"name": "Create credentials missing required fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a44374ba-e3a0-4db1-b6d8-9b6fb983a7fc",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29ed746b-04e4-4aa7-9149-4bec74120f6a",
										"exec": [
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/credentials/574f0791-beca-4470-8037-050660cfb73a.json\", function (err, res) {",
											"    let credentials = res.json();",
											"    delete credentials.exportConfigId;",
											"    delete credentials.username;",
											"    delete credentials.metadata;",
											"    ",
											"    pm.environment.set(\"credentialsBody\", JSON.stringify(credentials));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{credentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d32b7d2-d9c9-4aa0-9ba2-128c570ada04",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "097918c1-8552-4670-b5c8-d3de9099b97b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{UUIDDoesNotExists}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{UUIDDoesNotExists}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get credentials - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd2114d4-e5af-4ca3-beb0-a2ba77210e3b",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5aa1a67-583f-47a5-b8d8-3596403ceb38",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/foo/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"foo",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update credentials - empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db45f7d9-ee1c-4cff-bfb8-eaf3aad8112a",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19ce982e-5a2c-4590-ad72-d8922e2a4fb6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update credentials missing requred fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acd94dc5-a563-400c-b105-0317a02d90ae",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da8e2ac6-cc32-4752-a7df-1112d7befaf0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/batch-voucher/export-configurations/\" + pm.environment.get(\"exportConfigurationId\") + \"/credentials\", (err, res) => {",
											"    let credentials = res.json();",
											"    credentials.password = \"newPassword\";",
											"    delete credentials.username;",
											"    delete credentials.metadata;",
											"    pm.environment.set(\"modifiedCredentialsBody\", JSON.stringify(credentials));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modifiedCredentialsBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/batch-voucher/export-configurations/{{exportConfigurationId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"batch-voucher",
										"export-configurations",
										"{{exportConfigurationId}}",
										"credentials"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2892d33-4c49-479a-834d-9c056f5e9148",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});",
									"",
									"function buildPmRequest1(path) {",
									"    return {",
									"        url: utils.buildOkapiUrl(path),",
									"        method: \"GET\",",
									"        header: {",
									"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
									"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
									"        }",
									"    };",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1aad140e-dff0-4d54-8835-30355770a7ef",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fbc11fc4-c6f0-4420-b340-fd857589d426",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6afd6eb2-1575-4712-a2aa-27306a4a941e",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0586d609-cce9-4ac9-8e4b-63d358194bf4",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // mod-configuration",
					"    invoicesConfigs: {",
					"        configNames: [\"voucherNumber\"],",
					"        bodyTemplate: {",
					"            \"module\": \"INVOICE\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    ordersConfigs: {",
					"        configNames: [",
					"            \"poLines-limit\",",
					"            \"inventory-instanceTypeCode\"",
					"        ],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Invoices API - Admin\",",
					"                    \"lastName\": \"Invoices Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [ ]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-invoices-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-invoices-user\",",
					"                \"password\": \"mod-invoices-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"invoice.all\",",
					"                    \"orders.all\",",
					"                    \"acquisitions-units.memberships.all\",",
					"                    \"acquisitions-units.units.all\",",
					"                    \"organizations-storage.organizations.all\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test invoices tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.INVOICE_NOTE = \"Invoice for API Tests\";",
					"    utils.schemaPrefix = \"invoices_schema_\";",
					"",
					"    utils.prepareInvoice = function(invoice) {",
					"        delete invoice.id;",
					"        delete invoice.approvedBy;",
					"        delete invoice.approvalDate;",
					"        delete invoice.folioInvoiceNo;",
					"        delete invoice.subTotal;",
					"",
					"        invoice.note = utils.INVOICE_NOTE;",
					"",
					"        return invoice;",
					"    };",
					"",
					"    utils.prepareInvoiceLine = function(invoiceLine, invoiceId) {",
					"        invoiceLine.invoiceId = invoiceId;",
					"",
					"        delete invoiceLine.id;",
					"        delete invoiceLine.metadata;",
					"",
					"        invoiceLine.fundDistributions.forEach(distro => {",
					"            distro.fundId = pm.environment.get(\"fundId\");",
					"            delete distro.encumbrance;",
					"        });",
					"",
					"        return invoiceLine;",
					"    };",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    utils.getMockInvoiceLine = function() {",
					"        return JSON.parse(pm.globals.get(\"mock-invoiceLine\"));",
					"    };",
					"",
					"    utils.getMockInvoice = function(i) {",
					"        let invoices = JSON.parse(pm.globals.get(\"mock-invoices\"));",
					"        return invoices.invoices[i];",
					"    };",
					"",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function(path) {",
					"        return new Promise((resolve) => utils.sendDeleteRequest(path, (err, res) => resolve(res.code)));",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"",
					"        for (var i = 0; i < order.compositePoLines.length; i++) {",
					"            utils.preparePoLine(order.compositePoLines[i]);",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function(poLine) {",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        delete poLine.alerts;",
					"        delete poLine.reportingCodes;",
					"        delete poLine.fundDistribution;",
					"        delete poLine.details;",
					"    ",
					"        return poLine;",
					"    };",
					"",
					"",
					"    /**",
					"     * Adds Invoice line id to `completeInvoicelineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberInvoiceLineId = function(invoiceLine) {",
					"        if (invoiceLine && invoiceLine.id) {",
					"            let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"            completeInvoicelineIds.push(invoiceLine.id);",
					"            pm.environment.set(\"completeInvoicelineIds\", JSON.stringify(completeInvoicelineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completeInvoicelineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastInvoiceLineId = function(withRemoval) {",
					"        let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"        if (completeInvoicelineIds.length > 0) {",
					"            let lineId = completeInvoicelineIds.pop();",
					"            if (withRemoval) {",
					"                pm.environment.set(\"completePolineIds\", JSON.stringify(completeInvoicelineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the Invoice line is empty except line and order ids",
					"     */",
					"    utils.validateInvoiceLineWithMinimalContent = function(invoiceLine) {",
					"        let expectedLine = utils.buildInvoiceLineWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoiceLine.id, \"Invoice line: id expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description does not match to expected\").to.eql(expectedLine.description);",
					"        pm.expect(invoiceLine.invoiceId, \"Invoice line: invoiceId expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineNumber, \"Invoice line: invoiceLineNumber expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus does not match to expected\").to.eql(expectedLine.invoiceLineStatus);",
					"        pm.expect(invoiceLine.metadata, \"Invoice line: metadata expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal  does not match to expected\").to.eql(expectedLine.subTotal);",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity is expected\").to.exist;",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity does not match to expected\").to.eql(expectedLine.quantity);",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance expected\").to.exist;",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance does not match to expected\").to.eql(expectedLine.releaseEncumbrance);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoiceLine.adjustments, \"Invoice line: adjustments as empty array expected\").to.be.an('array').that.is.empty;",
					"        pm.expect(invoiceLine.adjustmentsTotal, \"Invoice line: adjustments total not expected\").to.exist;",
					"        pm.expect(invoiceLine.comment, \"Invoice line: comment is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.poLineId, \"Invoice line: PO line Id is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productId, \"Invoice line: productId not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productIdType, \"Invoice line: productIdType not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionInfo, \"Invoice line: subscriptionInfo not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionStart, \"Invoice line: subscriptionStart not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionEnd, \"Invoice line: subscriptionEnd not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.total, \"Invoice line: total expected\").to.exist;",
					"        pm.expect(invoiceLine.vendorRefNo, \"Invoice line: vendorRefNo not expected\").to.not.exist;",
					"    };",
					"",
					"",
					"    /**",
					"     * Build Invoice line with minimal required fields.",
					"     */",
					"    utils.buildInvoiceLineWithMinContent = function(invoiceId) {",
					"        return {",
					"            \"description\": \"Some description\",",
					"            \"invoiceId\": invoiceId,",
					"            \"invoiceLineStatus\": \"Open\",",
					"            \"subTotal\": 2.20,",
					"            \"quantity\": 3,",
					"            \"releaseEncumbrance\": false",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Voucher line with minimal required fields.",
					"     */",
					"    utils.buildVoucherLineWithMinContent = function() {",
					"        return {",
					"            \"amount\": 33.55,",
					"            \"externalAccountNumber\": \"54321099\",",
					"            \"fundDistributions\": [",
					"                {",
					"                    \"fundId\": pm.environment.get(\"fundId\"),",
					"                    \"distributionType\": \"percentage\",",
					"                    \"value\": 50",
					"                }",
					"            ],",
					"            \"sourceIds\": [\"0726fc17-38c3-4249-81d3-97ffddada92b\"],",
					"            \"voucherId\": \"d384a4c2-9f85-4072-a305-800b3f6f5143\"",
					"        };",
					"    };",
					"",
					"    utils.buildAdjustmentObject = function(amount, type, prorate){",
					"        return {",
					"            \"description\": \"Adjustment for API test\",",
					"            \"type\": type || \"Amount\",",
					"            \"value\": amount || 10,",
					"            \"prorate\": prorate || \"Not prorated\",",
					"            \"relationToTotal\":\"In addition to\"",
					"        };",
					"    };",
					"",
					"    /* === BEGIN - Functions specific to prorated adjustments tests === */",
					"    /**",
					"     * Validates the invoice's prorated adjustments",
					"     */",
					"    utils.validateInvoiceProratedAdjustments = function(invoice, expectedQuantity) {",
					"        let proAdjustments = invoice.adjustments.filter(adjustment => adjustment.prorate !== \"Not prorated\");",
					"        pm.expect(proAdjustments, \"Adjustments size\").to.have.lengthOf(expectedQuantity);",
					"        proAdjustments.forEach(adjustment => {",
					"            pm.expect(adjustment.id, \"Adjustment must have `id` which is going to be referenced by invoice line's adjustment\").to.exist;",
					"            pm.expect(adjustment.adjustmentId, \"`adjustmentId` is not expected\").to.not.exist;",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice line's prorated adjustments",
					"     */",
					"    utils.validateInvoiceLineProratedAdjustments = function(invoiceLine, expectedQuantity) {",
					"        let invoiceAdjustmentIds = JSON.parse(pm.environment.get(\"invoiceWithProratedAdjustmentsContent\")).adjustments.map(adj => adj.id);",
					"        let proAdjustments = invoiceLine.adjustments.filter(adjustment => adjustment.hasOwnProperty(\"adjustmentId\"));",
					"",
					"        pm.expect(proAdjustments, \"Adjustments size\").to.have.lengthOf(expectedQuantity);",
					"        proAdjustments.forEach(adjustment => {",
					"            pm.expect(adjustment.adjustmentId, \"Adjustment must have id to invoice's adjustment\").to.be.oneOf(invoiceAdjustmentIds);",
					"            pm.expect(adjustment.id, \"Adjustment id is not expected - only invoice's prorated adjustment can have it\").to.not.exist;",
					"        });",
					"    };",
					"    /* === END - Functions specific to prorated adjustments tests === */",
					"",
					"    utils.updateInvoiceStatus = function(invoice, status) {",
					"        invoice.status = status;",
					"        utils.sendPutRequest(\"/invoice/invoices/\" + invoice.id, invoice, (err,response) => {",
					"            pm.test(\"Invoice is now \" + status, () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(response).to.have.property('code', 204);",
					"            });",
					"        });",
					"    };",
					"",
					"",
					"    utils.deleteVouchersForInvoice = function(invoiceId) {",
					"        utils.getVouchersForInvoice(invoiceId, (err, res) => {",
					"            utils.deleteVouchers(res.json().vouchers);",
					"        });",
					"    };",
					"",
					"    utils.deleteVouchers = function(vouchers) {",
					"        if (vouchers.length !== 0) {",
					"            const timerId = setTimeout(() => {}, 60000);",
					"",
					"            let promises = vouchers.map(voucher => utils.deleteVoucherLines(voucher.id).then(ok => utils.deleteVoucher(voucher.id)));",
					"",
					"            Promise.all(promises)",
					"                .then(result => clearTimeout(timerId))",
					"                .catch(err => {",
					"                    console.log(\"Error happened on voucher record(s) deletion:\", err);",
					"                    clearTimeout(timerId);",
					"                });",
					"        }",
					"    };",
					"",
					"    utils.deleteVoucher = function(voucherId) {",
					"        return utils.processDeleteRequest(\"/voucher-storage/vouchers/\" + voucherId);",
					"    };",
					"",
					"    utils.deleteVoucherLines = function(voucherId) {",
					"        return new Promise((resolve) => {",
					"            utils.getVoucherLines(voucherId, (err, res) => {",
					"                let promises = [];",
					"                res.json().voucherLines.forEach(line => {",
					"                    promises.push(utils.processDeleteRequest(\"/voucher-storage/voucher-lines/\" + line.id));",
					"                });",
					"                Promise.all(promises)",
					"                    .then(ok => resolve())",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on voucher line record(s) deletion:\", err);",
					"                        resolve();",
					"                    });",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.getVouchersForInvoice = function(invoiceId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/vouchers?query=invoiceId==\" + invoiceId, handler);",
					"    };",
					"",
					"    utils.getVoucherLines = function(voucherId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/voucher-lines?query=voucherId==\" + voucherId, handler);",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function(code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function() {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function(configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function(configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function(configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function(configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"",
					"    utils.updateOrCreateInvoicesConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.invoicesConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.ordersConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function(err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.environment.unset(\"completeInvoicelineIds\");",
					"        pm.environment.unset(\"current-invoices-configs\");",
					"        pm.environment.unset(\"current-orders-configs\");",
					"        pm.environment.unset(\"documentWithURL\");",
					"        pm.environment.unset(\"documentWithUrlId\");",
					"        pm.environment.unset(\"documentWithBase64Content\");",
					"        pm.environment.unset(\"documentWithBase64Id\");",
					"        pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineContent\");",
					"        pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineId\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"folioInvoiceNo\");",
					"        pm.environment.unset(\"filterInvoiceId\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"identifierTypeId\");",
					"        pm.environment.unset(\"incompatibleFieldsInvoiceId\");",
					"        pm.environment.unset(\"InvoiceIdForDelete\");",
					"        pm.environment.unset(\"InvoiceLineIdForDelete\");",
					"        pm.environment.unset(\"InvoiceWithEmptyFundDistrosContent\");",
					"        pm.environment.unset(\"InvoiceWithEmptyFundDistrosId\");",
					"        pm.environment.unset(\"invoiceId\");",
					"        pm.environment.unset(\"isbnIdentifierTypeId\");",
					"        pm.environment.unset(\"lineWithoutFundDistros\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"minInvoiceId\");",
					"        pm.environment.unset(\"mod-invoices-configs\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"negativeAdjInLineId\");",
					"        pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalContent\");",
					"        pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalId\");",
					"        pm.environment.unset(\"negativeApprovedToPaidInvoiceLineId\");",
					"        pm.environment.unset(\"negativeInvoiceLineContent\");",
					"        pm.environment.unset(\"negativeReviewedToApprovedInvoiceContent\");",
					"        pm.environment.unset(\"negativeReviewedToApprovedInvoiceId\");",
					"        pm.environment.unset(\"negativeApprovedToPaidInvoice\");",
					"        pm.environment.unset(\"UUIDDoesNotExists\");",
					"        pm.environment.unset(\"voucherId\");",
					"        pm.environment.unset(\"voucherLineId\");",
					"        pm.environment.unset(\"workflow-invoiceWith4LinesContent\");",
					"        pm.environment.unset(\"workflow-invoiceWith4LinesId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"encumbrance1\");",
					"        pm.environment.unset(\"encumbrance2\");",
					"        pm.environment.unset(\"encumbranceId1\");",
					"        pm.environment.unset(\"encumbranceId2\");",
					"         pm.environment.unset(\"validBatchVoucherId\");",
					"        ",
					"        pm.globals.unset(\"completeOrderId\");",
					"        pm.globals.unset(\"mock-invoices\");",
					"        pm.globals.unset(\"mock-invoiceLine\");",
					"        pm.globals.unset(\"poLine1Id\");",
					"        pm.globals.unset(\"poLine2Id\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        console.log(\"Starting validating against schemas\");",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice against schema",
					"     */",
					"    utils.validateInvoice = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceSchema());",
					"    };",
					"",
					"    utils.getInvoiceSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice line against schema",
					"     */",
					"    utils.validateInvoiceLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceLineSchema());",
					"    };",
					"",
					"    utils.getInvoiceLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher against schema",
					"     */",
					"    utils.validateVoucher = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherSchema());",
					"    };",
					"",
					"    utils.getVoucherSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher line against schema",
					"     */",
					"    utils.validateVoucherLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherLineSchema());",
					"    };",
					"",
					"    utils.getVoucherLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates batch voucher export config against schema",
					"     */",
					"    utils.validateExportConfig = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getExportConfigSchema());",
					"    }",
					"",
					"    utils.getExportConfigSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"export_configuration.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch voucher export config collection against schema",
					"     */",
					"    utils.validateExportConfigCollection = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getExportConfigCollectionSchema());",
					"    }",
					"",
					"    utils.getExportConfigCollectionSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"export_configuration_collection.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    utils.getModuleId = function(moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice is empty except required fields, invoice id and folioInvoiceNo",
					"     */",
					"    utils.validateInvoiceWithMinimalContent = function(invoice) {",
					"        let expectedInvoice = utils.buildInvoiceWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoice.id, \"Invoice id expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total not expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total should be zero\").to.eql(0);",
					"        pm.expect(invoice.currency, \"Invoice currency expected\").to.exist;",
					"        pm.expect(invoice.currency, \"Invoice currency does not match to expected\").to.eql(expectedInvoice.currency);",
					"        pm.expect(invoice.invoiceDate, \"Invoice date expected\").to.exist;",
					"        pm.expect(invoice.invoiceDate, \"Invoice date does not match to expected\").to.eql(expectedInvoice.invoiceDate);",
					"       // pm.expect(invoice.lockTotal, \"Invoice lock total does not match to expected\").to.eql(false);",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method expected\").to.exist;",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method does not match to expected\").to.eql(expectedInvoice.paymentMethod);",
					"        pm.expect(invoice.status, \"Invoice status expected\").to.exist;",
					"        pm.expect(invoice.status, \"Invoice status does not match to expected\").to.eql(expectedInvoice.status);",
					"        pm.expect(invoice.folioInvoiceNo, \"Folio Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.metadata, \"Invoice metadata expected\").to.exist;",
					"        pm.expect(invoice.note, \"Invoice note\").to.equal(utils.INVOICE_NOTE);",
					"        pm.expect(invoice.source, \"Invoice source does not match to expected\").to.eql(expectedInvoice.source);",
					"        pm.expect(invoice.subTotal, \"Invoice subTotal not expected\").to.exist;",
					"        pm.expect(invoice.subTotal, \"Invoice subtotal should be zero\").to.eql(0);",
					"        pm.expect(invoice.total, \"Invoice total not expected\").to.exist;",
					"        pm.expect(invoice.total, \"Invoice total should be zero\").to.eql(0);",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice number does not match to expected\").to.eql(expectedInvoice.vendorInvoiceNo);",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id does not match to expected\").to.eql(expectedInvoice.vendorId);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoice.adjustments, \"Invoice adjustments expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.acquisitionsUnit, \"Invoice acquisitions unit not expected\").to.not.exist;",
					"        pm.expect(invoice.approvedBy, \"Invoice approved by not expected\").to.not.exist;",
					"        pm.expect(invoice.approvalDate, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.chkSubscriptionOverlap, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementNumber, \"Invoice disbursement number not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementDate, \"Invoice disbursement date not expected\").to.not.exist;",
					"        pm.expect(invoice.manualPayment, \"Invoice manual payment not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentDue, \"Invoice payment due not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentId, \"Invoice payment id not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentTerms, \"Invoice payment terms not expected\").to.not.exist;",
					"        pm.expect(invoice.poNumbers, \"Invoice PO numbers expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.voucherNumber, \"Invoice voucher number not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Build invoice with minimal required fields.",
					"     */",
					"    utils.buildInvoiceWithMinContent = function(vendorInvoiceNo) {",
					"        return {",
					"            \"currency\": \"USD\",",
					"            \"invoiceDate\": \"2018-07-20T00:00:00.000+0000\",",
					"            \"paymentMethod\": \"EFT\",",
					"            \"status\": \"Open\",",
					"            \"source\": \"API\",",
					"            \"vendorInvoiceNo\": vendorInvoiceNo || \"YK75851\",",
					"            \"vendorId\": \"168f8a63-d612-406e-813f-c7527f241ac3\",",
					"            \"note\": utils.INVOICE_NOTE",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.sendPostRequest = function (path, body, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"",
					"    /**",
					"     * Check if two arrays are equal",
					"     */",
					"    utils.arraysOfStringsAreEqual = function(array1, array2) {",
					"        return JSON.stringify(array1)==JSON.stringify(array2);",
					"    };",
					"    ",
					"    /**",
					"     * Build batch-group.",
					"     */",
					"    utils.buildBatchGroup = function() {",
					"        return {",
					"            \"id\": \"5082b4c2-1504-421e-9da0-0ee8c9e8b07d\",",
					"            \"name\": \"Marx Library\",",
					"            \"description\": \"University of South Alabama\"",
					"            ",
					"        };",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch-voucher-export against schema",
					"     */",
					"    utils.validateBatchVoucherExport = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getBatchVoucherExportSchema());",
					"    };",
					"",
					"    utils.getBatchVoucherExportSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"batch_voucher_export.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates batch-group against schema",
					"     */",
					"    utils.validateBatchGroup = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getBatchGroupSchema());",
					"    };",
					"",
					"    utils.getBatchGroupSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"batch_group.json\"));",
					"    };",
					"    ",
					"    /**",
					"     * Validates export configuration credentials against schema",
					"     */",
					"    utils.validateCredentials = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getCredentials());",
					"    };",
					"",
					"    utils.getCredentials = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"credentials.json\"));",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines for Fund Distribution.",
					"     */",
					"    utils.prepareOrderFundDistri = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLineFundDistri(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"    ",
					"        /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data for Fund Distribution.",
					"     */",
					"    utils.preparePoLineFundDistri = function(poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }        ",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }        ",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"    ",
					"        /**",
					"     * Sets new unique product ID.",
					"     */",
					"    utils.makeProductIdUnique = function(productId) {",
					"        let newProductId = pm.environment.has(\"uniqueProductId\") ? pm.environment.get(\"uniqueProductId\") : 10000000000;",
					"        pm.environment.set(\"uniqueProductId\", ++newProductId);",
					"",
					"        // Update productId with new values",
					"        productId.productId = newProductId;",
					"        productId.productIdType = pm.environment.get(\"identifierTypeId\");",
					"    };",
					"    ",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "939e8056-719e-458a-8c2a-4f7d17c92c33",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "609fe888-8e53-4f4c-ba9b-20e5ce503951",
			"key": "testTenant",
			"value": "invoice_api_tests"
		},
		{
			"id": "eb4d2692-a4a4-4f95-863f-0acefecb07b0",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-invoice/master/src/test/resources"
		},
		{
			"id": "d42a2691-0c00-4428-b266-7606816638ef",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources"
		},
		{
			"id": "0384511f-7563-4885-bbe3-b18d30619bbd",
			"key": "poLines-limit",
			"value": "10"
		},
		{
			"id": "c55ca392-c101-40dc-9242-c4676c4dc72a",
			"key": "inventory-instanceTypeCode",
			"value": "invoicingApiTestsIdentifierType"
		},
		{
			"id": "5c76e227-d892-475b-9f2a-d18cd7486b08",
			"key": "finance-ledgerCode",
			"value": "invoicingApiTests"
		},
		{
			"id": "7244317c-f287-456e-ad39-6a63cb05ec73",
			"key": "finance-fundCode",
			"value": "invoicingApiTests"
		},
		{
			"id": "e0acd5f6-1ec0-4c79-8e60-a69654dc8f68",
			"key": "voucherNumber",
			"value": "{\"voucherNumberPrefix\": \"testPrefix\"}"
		},
		{
			"id": "cc7a8cd8-1728-4de6-a060-aa9670ea2896",
			"key": "batchGroupSystemRecordId",
			"value": "2a2cb998-1437-41d1-88ad-01930aaeadd5"
		}
	],
	"protocolProfileBehavior": {}
}