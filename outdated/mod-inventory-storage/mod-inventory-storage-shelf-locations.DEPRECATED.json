{
	"info": {
		"name": "mod-inventory-storage-shelf-locations",
		"_postman_id": "761d47d0-067c-4c93-a708-7f3c62d66db4",
		"description": "Test /shelf-locations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "shelflocation.json",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aee8d125-a0a5-4311-9c92-83080ee0f0df",
						"type": "text/javascript",
						"exec": [
							"pm.test(pm.variables.get(\"schema_item\") + \" GET OK\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"pm.variables.set(\"schema_item_content\", responseBody);",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_item}}",
					"host": [
						"{{schema_loc}}"
					],
					"path": [
						"{{mod_name}}",
						"{{mod_version}}",
						"ramls",
						"{{schema_item}}"
					]
				},
				"description": "This is to get shelflocation.jsonn to be used in later tests."
			},
			"response": []
		},
		{
			"name": "shelflocations.json",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "658f9c47-675e-4718-8e4d-cf8d347eabc9",
						"type": "text/javascript",
						"exec": [
							"pm.test(pm.variables.get(\"schema_items\") + \" GET OK\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"pm.variables.set(\"schema_items_content\", responseBody);",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{schema_items}}",
					"host": [
						"{{schema_loc}}"
					],
					"path": [
						"{{mod_name}}",
						"{{mod_version}}",
						"ramls",
						"{{schema_items}}"
					]
				},
				"description": "This is to get shelflocations.jsonn to be used in later tests."
			},
			"response": []
		},
		{
			"name": "/authn/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a119251f-1451-4ffd-b4f6-1938792ee6ca",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.variables.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"authn",
						"login"
					]
				},
				"description": "Set okapi-token header to be used by following tests."
			},
			"response": []
		},
		{
			"name": "/shelf-locations 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4d76399d-ff3d-471e-994d-fa9ab1cce01d",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations POST not OK without token\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6632f8e8-df63-4585-8a03-833d623a2ca4",
						"type": "text/javascript",
						"exec": [
							"const uuid = require(\"uuid\"); ",
							"",
							"pm.variables.set(\"test_id\", uuid());",
							"pm.variables.set(\"test_val\", \"\" + Math.floor(Math.random() * 1000));"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations 422 No required name field",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de56a66a-e52d-4bac-9df2-359680b7a5a1",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations POST not OK without required name field\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9402f8bb-aad3-4771-adc5-bbb630399249",
						"type": "text/javascript",
						"exec": [
							"const uuid = require(\"uuid\"); ",
							"pm.variables.set(\"test_id\", uuid);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations 400 No payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "68166797-cd20-4ef7-94d0-000feb6cdb36",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations POST not OK without request payload\", function () {",
							"    pm.response.to.be.clientError;",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c333e1da-d30d-4cb0-a213-d0976fd13fe5",
						"type": "text/javascript",
						"exec": [
							"const uuid = require(\"uuid\"); ",
							"pm.variables.set(\"test_id\", uuid());"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations 400 Not well formed JSON payload",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "14326b26-75af-4924-8457-3442b64d9421",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations POST not OK with not well formed JSON payload\", function () {",
							"    pm.response.to.be.clientError;",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9402f8bb-aad3-4771-adc5-bbb630399249",
						"type": "text/javascript",
						"exec": [
							"const uuid = require(\"uuid\"); ",
							"pm.variables.set(\"test_id\", uuid);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\"id-val\""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations 201 With name but no id field",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "772f8b10-bb51-41f3-9c05-01c0d7880d43",
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"const test_id = jsonData.id",
							"",
							"pm.test(\"/shelf-locations POST OK\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.have.jsonBody();",
							"    pm.response.to.have.jsonBody(\"id\");",
							"    pm.response.to.have.jsonBody(\"name\", pm.variables.get(\"test_tmp_val\"));",
							"    pm.response.to.have.header(\"location\");",
							"    // TODO: https://issues.folio.org/browse/MODINVSTOR-82",
							"    // pm.response.to.have.header(\"location\", \"/shelf-locations/\" + test_id)",
							"    pm.response.to.have.header(\"location\", \"/shelflocations\" + test_id)",
							"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.variables.get(\"schema_item_content\")))).to.be.true;",
							"});",
							"",
							"//clean up",
							"const cleanupRequest = {",
							"    url: request.url + \"/\" + test_id,",
							"    method: \"DELETE\",",
							"    header: \"x-okapi-token: \" + pm.variables.get(\"xokapitoken\")",
							"}",
							"pm.sendRequest(cleanupRequest, function (err, response) {",
							"    err ? console.log(err) : true;",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "471bea56-1093-4055-863c-05ab0edb0ae6",
						"type": "text/javascript",
						"exec": [
							"pm.variables.set(\"test_tmp_val\", \"\" + Math.floor(Math.random() * 1000));"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{test_tmp_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0e862a56-2a85-4531-827f-cfe50eed5f16",
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"const test_id = pm.variables.get(\"test_id\");",
							"",
							"pm.test(\"/shelf-locations POST OK\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.have.jsonBody();",
							"    pm.response.to.have.jsonBody(\"id\", test_id);",
							"    pm.response.to.have.jsonBody(\"name\", pm.variables.get(\"test_val\"));",
							"    pm.response.to.have.header(\"location\");",
							"    // TODO: https://issues.folio.org/browse/MODINVSTOR-82",
							"    // pm.response.to.have.header(\"location\", \"/shelf-locations/\" + test_id)",
							"    pm.response.to.have.header(\"location\", \"/shelflocations\" + test_id)",
							"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.variables.get(\"schema_item_content\")))).to.be.true;",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6632f8e8-df63-4585-8a03-833d623a2ca4",
						"type": "text/javascript",
						"exec": [
							"const uuid = require(\"uuid\"); ",
							"",
							"pm.variables.set(\"test_id\", uuid());",
							"pm.variables.set(\"test_val\", \"\" + Math.floor(Math.random() * 1000));"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations 403 With tenant but no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "052e659a-7e41-4c8e-8b0b-e3c951d5b9fe",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations GET not OK without token\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": null
			},
			"response": []
		},
		{
			"name": "/shelf-locations 403 No tenant and no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4b313097-aed7-400b-93aa-ecbc00e09743",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations GET not OK without token\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1920cf39-b835-404d-964a-74bf31c29fd4",
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"/shelf-locations GET OK\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.have.jsonBody();",
							"    pm.expect(jsonData.shelflocations.length > 0).to.be.true;",
							"",
							"    tv4.addSchema(\"shelflocation.json\", JSON.parse(pm.variables.get(\"schema_item_content\")));",
							"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.variables.get(\"schema_items_content\")))).to.be.true;",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations?query=(id=\"\") 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd72ebb5-2862-46f6-bf9e-cdb01778ff2a",
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"/shelf-locations GET OK\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.have.jsonBody();",
							"    pm.expect(jsonData.shelflocations.length == 1).to.be.true;",
							"    pm.expect(jsonData.shelflocations).to.deep.include({",
							"        id: pm.variables.get(\"test_id\"), ",
							"        name: pm.variables.get(\"test_val\")",
							"    });",
							"",
							"    tv4.addSchema(\"shelflocation.json\", JSON.parse(pm.variables.get(\"schema_item_content\")));",
							"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.variables.get(\"schema_items_content\")))).to.be.true;",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations?query=(id=\"{{test_id}}\")",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					],
					"query": [
						{
							"key": "query",
							"value": "(id=\"{{test_id}}\")",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations?limit=100 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3c82b009-92c1-4906-b73d-1bc023c03212",
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"/shelf-locations GET OK\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.have.jsonBody();",
							"    pm.expect(jsonData.shelflocations).to.deep.include({",
							"        id: pm.variables.get(\"test_id\"), ",
							"        name: pm.variables.get(\"test_val\")",
							"    });",
							"",
							"    tv4.addSchema(\"shelflocation.json\", JSON.parse(pm.variables.get(\"schema_item_content\")));",
							"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.variables.get(\"schema_items_content\")))).to.be.true;",
							"",
							"    // assuming system has less than 100 locations and store total count for use in next test",
							"    pm.variables.set(\"item_count\", jsonData.shelflocations.length);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations?limit=100",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					],
					"query": [
						{
							"key": "limit",
							"value": "100",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations?limit=100&offset=1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4590a39e-b205-4ecd-a753-62ebe4d08042",
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"/shelf-locations GET OK\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.have.jsonBody();",
							"",
							"    tv4.addSchema(\"shelflocation.json\", JSON.parse(pm.variables.get(\"schema_item_content\")));",
							"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.variables.get(\"schema_items_content\")))).to.be.true;",
							"    ",
							"    pm.expect(jsonData.shelflocations.length + 1 == pm.variables.get(\"item_count\")).to.be.true;",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations?limit=100&offset=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					],
					"query": [
						{
							"key": "limit",
							"value": "100",
							"equals": true
						},
						{
							"key": "offset",
							"value": "1",
							"equals": true
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations/{id} 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e32018ed-7ac3-4fe9-a284-de78f8430bb0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations GET not OK without token\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations/{{test_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations",
						"{{test_id}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations/{id} 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2c06a644-95b4-4ada-982b-575aeccef472",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations GET not OK for non-existing id\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0df983f4-f9f0-4a9b-95ea-83eb71b5dc99",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations/{{$guid}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations",
						"{{$guid}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations/{id} 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "379a0c50-e774-4e54-a439-477415d82aea",
						"type": "text/javascript",
						"exec": [
							"const jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"/shelf-locations/{id} GET OK\", function () {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.have.jsonBody();",
							"    pm.response.to.have.jsonBody(\"id\", pm.variables.get(\"test_id\"));",
							"    pm.response.to.have.jsonBody(\"name\", pm.variables.get(\"test_val\"));",
							"",
							"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.variables.get(\"schema_item_content\")))).to.be.true;",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations/{{test_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations",
						"{{test_id}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations/{id} 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "30e4d993-a8f6-452f-90aa-0febe16ef887",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations/{id} PUT not OK without token\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "7db3646c-1115-4c83-a24a-33aef7c0f067",
						"type": "text/javascript",
						"exec": [
							"pm.variables.set(\"test_new_val\", \"\" + Math.floor(Math.random() * 1000));"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_new_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations/{{test_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations",
						"{{test_id}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations/{id} 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "19f1f38c-2b25-4e5a-98c6-0db657d5523c",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations/{id} PUT not OK for non-existing id\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0542c0cb-b2c0-4c31-9387-c01f987e72c2",
						"type": "text/javascript",
						"exec": [
							"const new_uuid = require(\"uuid\");",
							"pm.variables.set(\"test_new_id\", new_uuid());",
							"pm.variables.set(\"test_new_val\", \"\" + Math.floor(Math.random() * 1000));"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_new_id}}\",\n  \"name\": \"{{test_new_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations/{{test_new_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations",
						"{{test_new_id}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations/{id} 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "713e40b8-1ac3-45b4-a7e0-45ae2fe49c2a",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations/{id} PUT OK\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "52b7c041-ec54-42d3-90bb-d3347b42a036",
						"type": "text/javascript",
						"exec": [
							"pm.variables.set(\"test_new_val\", \"\" + Math.floor(Math.random() * 1000));"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": \"{{test_id}}\",\n  \"name\": \"{{test_new_val}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations/{{test_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations",
						"{{test_id}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations/{id} 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1d3e63a8-753f-478b-845b-0a3a70c02462",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations/{id} DELETE not OK without token\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations/{{test_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations",
						"{{test_id}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations/{id} 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6a353d33-9325-4b9f-a875-2c012b944ddd",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations/{id} DELETE not OK for non-existing id\", function () {",
							"    // TODO: https://issues.folio.org/browse/MODINVSTOR-81",
							"    // pm.response.to.have.status(404);",
							"    pm.response.to.have.status(204);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations/{{$guid}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations",
						"{{$guid}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations/{id} 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1ddcdc64-8fdd-4477-895b-cd154b9ec043",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations/{id} DELETE OK\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "38e74085-008d-495a-bf3b-1ca88cb06290",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations/{{test_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations",
						"{{test_id}}"
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "/shelf-locations 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "25b204b6-b49e-4fb4-8f62-e038aa264623",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"/shelf-locations DELETE OK\", function () {",
							"    // TODO: https://issues.folio.org/browse/MODINVSTOR-83",
							"    // pm.response.to.have.status(204);",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"// restore data",
							"let jsonData = JSON.parse(pm.variables.get(\"test_items_backup\"));",
							"for (var i = 0; i < jsonData.shelflocations.length; i++) {",
							"    let t_id = jsonData.shelflocations[i].id;",
							"    let t_name = jsonData.shelflocations[i].name;",
							"    let t_body =JSON.stringify(jsonData.shelflocations[i]);",
							"    let createRequest = {",
							"        url: request.url,",
							"        method: \"POST\",",
							"        header: [\"x-okapi-token: \" + pm.variables.get(\"xokapitoken\"), \"content-type: application/json\"],",
							"        body: {",
							"            mode: \"raw\",",
							"            raw: t_body",
							"        }",
							"    }",
							"    pm.sendRequest(createRequest, logError());",
							"}",
							"function logError(err, resp) {",
							"    err ? console.log(err) : true;",
							"}",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "52289252-f14d-440b-a36b-41b58721504d",
						"type": "text/javascript",
						"exec": [
							"const backupRequest = {",
							"    url: pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + \"/shelf-locations\",",
							"    method: \"GET\",",
							"    header: \"x-okapi-token: \" + pm.variables.get(\"xokapitoken\")",
							"}",
							"pm.sendRequest(backupRequest, function (err, resp) {",
							"    if (err) {",
							"        throw err;",
							"    } else {",
							"        pm.variables.set(\"test_items_backup\", resp.text());",
							"    }",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/shelf-locations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"shelf-locations"
					]
				},
				"description": "Alert: this test deletes all data and then re-populate it. Check log for original data in case there is a failure."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f7463ae5-2c8e-462c-b8da-319cf59e011b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3cd1b95c-ad30-49b0-9bb1-84211ed68777",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8a441329-6881-41d6-8cd3-6b8a7ec9a7e6",
			"key": "mod_name",
			"value": "mod-inventory-storage",
			"type": "text",
			"description": ""
		},
		{
			"id": "0ef1a36d-63a7-416a-aa44-23f0d8658b5c",
			"key": "mod_version",
			"value": "v8.0.0",
			"type": "text",
			"description": ""
		},
		{
			"id": "59d81e3f-55d4-4e4c-ac6f-02eb83cc7525",
			"key": "schema_item",
			"value": "shelflocation.json",
			"type": "text",
			"description": ""
		},
		{
			"id": "ed8f3aca-e5fd-455a-bcac-8f859d730e46",
			"key": "schema_items",
			"value": "shelflocations.json",
			"type": "text",
			"description": ""
		},
		{
			"id": "5f6dfe57-6d3c-403f-a0e5-2b5edcedf1be",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "text",
			"description": ""
		}
	]
}