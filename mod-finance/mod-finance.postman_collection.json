{
	"info": {
		"_postman_id": "6c317643-6ba4-4f55-9359-d4297209c193",
		"name": "mod-finance",
		"description": "Tests for mod-finance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "458e788d-f4f1-4a2e-bf7f-dce99511f09a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b46996e-04ac-475d-8d3a-fe8947e8db87",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-finance\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"",
											"",
											"//remove after implementing mod-finance CRUD API",
											"utils.getModuleId(\"mod-finance-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"//",
											"",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"eval(globals.loadUtils).sendGetRequest('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])', (err, res) => {",
											"        let userPermissions = globals.testData.users.admin.permissions;",
											"        userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"        userPermissions.permissions.push(\"finance-storage.transactions.item.delete\");",
											"        userPermissions.permissions.push(\"finance.order-transaction-summaries.item.post\");",
											"        pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"testConfigs.configNames.forEach(configName => utils.createFinanceConfig(configName));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==FINANCE",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==FINANCE"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f0c2518-826f-44fb-ab7e-11157f1e7187",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82ea9c5-8f62-4a16-bf56-907e3dcb4662",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load all schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f930ca9d-df31-4572-90c8-63f5243ae30e",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modFinanceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "789cccc8-2479-48c7-ac26-5e35328874bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moduleName = 'mod-finance';",
											"",
											"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(response.text()).to.include(moduleName);",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];",
											"        pm.variables.set('modFinanceId', moduleId);",
											"    });",
											"});",
											"",
											"",
											"function buildPmRequest1(path) {",
											"    return {",
											"        url: utils.buildOkapiUrl(path),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
											"        }",
											"    };",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modFinanceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b589a48-d3fa-4985-85c4-8b7dcda638a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b882afd4-d85f-4006-9746-08bea97bbdf5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create group - for Group Fund Fiscal Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let group = utils.buildGroupMinContent(\"GROUP_GFFY\");",
											"group.name = \"Test group for GFFY\";",
											"",
											"pm.environment.set(\"groupContent\", JSON.stringify(group));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - for CRUD test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupForCrudId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let group = utils.buildGroupMinContent(\"GROUP_GRUD\");",
											"",
											"pm.environment.set(\"groupContent\", JSON.stringify(group));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Groups is retrieved\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().groups.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateGroup(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is updated\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let groupForUpdate = JSON.parse(pm.environment.get(\"groupContent\"));",
											"",
											"groupForUpdate.name = \"newGroupName\";",
											"",
											"pm.variables.set(\"groupContent\", JSON.stringify(groupForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fiscal years",
					"item": [
						{
							"name": "Create fiscal year  - required for budgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fiscal Year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fiscalYearId\", pm.response.json().id);",
											"    // MODFIN-94 Add series field while creating/updating a FiscalYear",
											"    pm.expect(pm.response.json().series).to.exist;",
											"});",
											"",
											"pm.test(\"Fiscal Year contains Currenct\", () => {",
											"    pm.expect(pm.response.json().currency).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fyContent\", JSON.stringify(utils.buildFiscalYearMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fiscal year  - required for budgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"secondFiscalYearId\", pm.response.json().id); ",
											"    // MODFIN-94 Add series field while creating/updating a FiscalYear",
											"    pm.expect(pm.response.json().series).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fy = utils.buildFiscalYearMinContent(\"FY2020\");",
											"",
											"pm.environment.set(\"secondFyContent\", JSON.stringify(fy));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{secondFyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fiscal year list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().fiscalYears.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"FiscalYear is updated is created\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let fyForUpdate = JSON.parse(pm.variables.get(\"secondFyContent\"));",
											"",
											"fyForUpdate.name = \"newFYName\";",
											"",
											"pm.variables.set(\"secondFyContent\", JSON.stringify(fyForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{secondFyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{secondFiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{secondFiscalYearId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fiscal year by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fiscal year is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateFiscalYear(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{secondFiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{secondFiscalYearId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fiscal year for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Fiscal Year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fyForDeleteId\", pm.response.json().id); ",
											"});",
											"",
											"pm.test(\"Fiscal Year contains Currency from Config\", () => {",
											"    pm.expect(pm.response.json().currency).to.exist;",
											"     pm.expect(pm.response.json().currency).to.equal(\"SEK\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fy = utils.buildFiscalYearMinContent(\"THRD2020\");",
											"",
											"pm.variables.set(\"fyForDelete\", JSON.stringify(fy));",
											"",
											"let localeConfig = globals.testData.localeConfigs.bodyTemplate;",
											"localeConfig.value = \"{\\\"locale\\\":\\\"en-US\\\",\\\"timezone\\\":\\\"America/New_York\\\",\\\"currency\\\":\\\"SEK\\\"}\";",
											"utils.createConfig(localeConfig);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyForDelete}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Test Fiscal Year picks currency from configuration while creating"
							},
							"response": []
						},
						{
							"name": "Delete fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{fyForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{fyForDeleteId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ledgers",
					"item": [
						{
							"name": "Create first ledger - required for funds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let ledger = utils.buildLedgerMinContent();",
											"ledger.fiscalYearOneId = pm.environment.get(\"fiscalYearId\");",
											"pm.environment.set(\"ledgerContent\", JSON.stringify(ledger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second ledger - for CRUD test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"secondLedgerId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let secondLedger = utils.buildLedgerMinContent();",
											"secondLedger.code = \"SCND-TST-LDGR-CODE\";",
											"secondLedger.name = \"Second Ledger Name\";",
											"secondLedger.fiscalYearOneId = pm.environment.get(\"secondFiscalYearId\");",
											"",
											"pm.environment.set(\"ledgerContent\", JSON.stringify(secondLedger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ledger list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().ledgers.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ledger by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Ledger is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateLedger(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let ledgerForUpdate = JSON.parse(pm.environment.get(\"ledgerContent\"));",
											"",
											"ledgerForUpdate.name = \"newLedgerName\";",
											"",
											"pm.variables.set(\"ledgerContent\", JSON.stringify(ledgerForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund types",
					"item": [
						{
							"name": "Create first type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let type = {};",
											"",
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    type = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund type content is valid\", function() {",
											"    utils.validateFundType(type);",
											"    pm.environment.set(\"fundTypeId\", type.id);",
											"    pm.expect(type.name).to.eql(\"First\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"First\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund type is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateFundType(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let type = {};",
											"",
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    type = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund type content is valid\", function() {",
											"    utils.validateFundType(type);",
											"    pm.environment.set(\"fundTypeId2\", type.id); ",
											"    pm.expect(type.name).to.eql(\"Second\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{$guid}}\",\n\t\"name\": \"Second\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records by query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund type record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.fundTypes).to.have.lengthOf(1);",
											"    records.fundTypes.forEach(type => utils.validateFundType(type));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=name==Second",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "name==Second"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund type is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Updated\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund type is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let type = pm.response.json();",
											"    utils.validateFundType(type);",
											"    pm.expect(type.name).to.eql(\"Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 fund type records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.fundTypes).to.have.lengthOf(2);",
											"    collection.fundTypes.forEach(type => utils.validateFundType(type));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund type is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund type record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.fundTypes).to.have.lengthOf(1);",
											"    utils.validateFundType(collection.fundTypes[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Funds",
					"item": [
						{
							"name": "Create first fund - required for budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"fundId\", record.fund.id); ",
											"    pm.expect(record.fund.code).to.eql(\"FRST-FND\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"FRST-FND\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateCompositeFund(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"fundId2\", record.fund.id);",
											"    pm.environment.set(\"fundContent2\", record);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"SCND-FND\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records by query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.funds).to.have.lengthOf(1);",
											"    utils.validateFund(records.funds[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds?query=fundTypeId=\"\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "fundTypeId=\"\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let record = pm.environment.get(\"fundContent2\");",
											"record.fund.name = \"Updated\";",
											"pm.variables.set(\"fundContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let record = pm.response.json();",
											"    utils.validateCompositeFund(record);",
											"    pm.expect(record.fund.name).to.eql(\"Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 fund records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.funds).to.have.lengthOf(2);",
											"    collection.funds.forEach(record => utils.validateFund(record));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.funds).to.have.lengthOf(1);",
											"    utils.validateFund(collection.funds[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets",
					"item": [
						{
							"name": "Create first budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Budget content is valid\", function() {",
											"    utils.validateBudget(record);",
											"    pm.environment.set(\"budgetId\", record.id); ",
											"    pm.expect(record.name).to.eql(\"FRST-BDGT\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"FRST-BDGT\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Budget is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateBudget(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Budget content is valid\", function() {",
											"    utils.validateBudget(record);",
											"    pm.environment.set(\"budgetId2\", record.id);",
											"    pm.environment.set(\"budgetContent2\", record);",
											"    pm.expect(record.budgetStatus).to.eql(\"Planned\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let budget = utils.buildBudgetMinContent(\"SCND-BDGT\");",
											"budget.budgetStatus = \"Planned\";",
											"budget.fiscalYearId = pm.environment.get(\"secondFiscalYearId\");",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(budget));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records by complex query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One budget record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.budgets).to.have.lengthOf(1);",
											"    utils.validateBudget(records.budgets[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=budgetStatus==Planned and fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "budgetStatus==Planned and fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let record = pm.environment.get(\"budgetContent2\");",
											"record.budgetStatus = \"Frozen\";",
											"pm.variables.set(\"budgetContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Budget is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let record = pm.response.json();",
											"    utils.validateBudget(record);",
											"    pm.expect(record.budgetStatus).to.eql(\"Frozen\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records by complex query- 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 budget records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.budgets).to.have.lengthOf(2);",
											"    collection.budgets.forEach(record => utils.validateBudget(record));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records without query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One budget record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.budgets).to.have.lengthOf(1);",
											"    utils.validateBudget(collection.budgets[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group Fund Fiscal Years",
					"item": [
						{
							"name": "Create group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Group fund fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"    pm.environment.set(\"groupFundFiscalYearForCrudId\", record.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupFundFiscalYearContent\", ",
											"JSON.stringify(utils.buildGroupFundFiscalYearMinContent(pm.environment.get(\"groupId\"), pm.environment.get(\"fundId\"), pm.environment.get(\"fiscalYearId\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupFundFiscalYearContent}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify created group fund fiscal years",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fund fiscal year founded\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=id={{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "id={{groupFundFiscalYearForCrudId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group fund fiscal year type is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years/{{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years",
										"{{groupFundFiscalYearForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(0);",
											"    pm.expect(records.totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=id=={{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{groupFundFiscalYearForCrudId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assign funds to groups",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create group 1 - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group 2 - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId2\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let group = utils.buildGroupMinContent();",
													"group.code = \"tst-grp-2\";",
													"group.name = \"Test group 2\";",
													"pm.variables.set(\"groupContent\", JSON.stringify(group));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fiscal year one - test current fy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testCurrentFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').subtract(2, 'year');",
													"var end = moment().endOf('year').subtract(2, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTCURRENT\";",
													"fiscalYear.code = \"TESTCURRENT2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fiscal year one - test next fy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testNextFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').subtract(2, 'year');",
													"var end = moment().endOf('year').subtract(2, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEXT\";",
													"fiscalYear.code = \"TESTNEXT2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create current fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"currentFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year');",
													"var end = moment().endOf('year');",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTCURRENT\";",
													"fiscalYear.code = \"TESTCURRENT2019\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create next fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"nextFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').add(1, 'year');",
													"var end = moment().endOf('year').add(1, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEXT\";",
													"fiscalYear.code = \"TESTNEXT2020\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger current",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"currentFyLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testCurrentFiscalYearOneId\");",
													"ledger.name = \"Current\";",
													"ledger.code = \"TEST_CURRENT\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger next",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"nextFyLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testNextFiscalYearOneId\");",
													"ledger.name = \"Next\";",
													"ledger.code = \"TEST_NEXT\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create fund with groups - current fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_CURRENT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"currentFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund with groups - current fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.have.status(200);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.groupIds).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{currentFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{currentFyFundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query - current FY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {}; ",
											"",
											"pm.test(\"Group fund fiscal years founded\", function () {",
											"    pm.response.to.be.ok;",
											"    records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});",
											"",
											"pm.test(\"Group fund fiscal years contain expected year id\", function () {",
											"    records.groupFundFiscalYears.forEach(gffy => {",
											"        pm.expect(gffy.fiscalYearId).to.equal(pm.environment.get(\"currentFiscalYearId\"));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=fundId={{currentFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "fundId={{currentFyFundId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"nextFyFundId\", record.fund.id);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_NEXT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"nextFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.have.status(200);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.groupIds).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query - next FY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {}; ",
											"",
											"pm.test(\"Group fund fiscal years founded\", function () {",
											"    pm.response.to.be.ok;",
											"    records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});",
											"",
											"pm.test(\"Group fund fiscal years contain expected year id\", function () {",
											"    records.groupFundFiscalYears.forEach(gffy => {",
											"        pm.expect(gffy.fiscalYearId).to.equal(pm.environment.get(\"nextFiscalYearId\"));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=fundId={{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "fundId={{nextFyFundId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {};",
											"",
											"pm.test(\"Composite Fund is updated\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"utils.sendGetRequest('/finance/group-fund-fiscal-years?query=fundId=' + pm.environment.get(\"nextFyFundId\"), (err, res) => {",
											"        pm.test(\"Group fund fiscal year deleted\", function () {",
											"            pm.expect(res).to.be.ok;",
											"             records = res.json();",
											"             pm.expect(records.totalRecords).to.equal(1);",
											"             pm.expect(records.groupFundFiscalYears[0].groupId).to.equal(pm.environment.get(\"groupId2\"));",
											"        });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_UPDATE_NEXT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"nextFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId2\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Allocations",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8c99d17f-1af5-4b91-97f6-83e472944ca2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fd0615f0-1de3-42ac-bcfb-f6eb63da0056",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{transactionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Encumbrances",
							"item": [
								{
									"name": "Create order transaction summaries",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8c99d17f-1af5-4b91-97f6-83e472944ca2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fd0615f0-1de3-42ac-bcfb-f6eb63da0056",
												"exec": [
													"pm.test(\"Order transaction summary is created\", () => {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"e5ae4afd-3fa9-494e-a972-f541df9b877e\",\r\n  \"numTransactions\": 1\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"order-transaction-summaries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fiscal year  - required for budgets Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8c99d17f-1af5-4b91-97f6-83e472944ca2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"encFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ENCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fd0615f0-1de3-42ac-bcfb-f6eb63da0056",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"encFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{encFyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"encLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ENC-LDGR\", \"Test encumbrance ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"encFiscalYearId\");",
													"pm.variables.set(\"encLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{encLedgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fromFund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Encumbrance Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Encumbrance Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"fromFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ENC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"encFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ENC-FND\", pm.environment.get(\"encLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{encFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create toFund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Encumbrance Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Encumbrance Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ENC-FND2\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"encFundContent2\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ENC-FND2\", pm.environment.get(\"encLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{encFundContent2}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"encBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ENC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"encBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ENC-BDGT\", pm.environment.get(\"fromFundId\"), pm.environment.get(\"encFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{encBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{encFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{encFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{encBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create encumbrances",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction encumbrance is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"encumbranceId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
													"let transactionEncumbrance = utils.buildTransactionMinContent(25, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Encumbrance\");",
													"",
													"transactionEncumbrance.encumbrance = encumbranceMinContent;",
													"transactionEncumbrance.fromFundId = pm.environment.get(\"fromFundId\");",
													"pm.environment.set(\"encumbranceContent\", JSON.stringify(transactionEncumbrance));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{encumbranceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"encumbrances"
											]
										}
									},
									"response": []
								},
								{
									"name": "Awayting payment request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let record = {};",
													"pm.test(\"Money were moved to awaitng payment\", () => {",
													"    pm.response.to.have.status(204);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"pm.environment.set(\"awaitingPaymentContent\", JSON.stringify({",
													"    \"encumbranceId\": \"{{encumbranceId}}\",",
													"    \"amountAwaitingPayment\": \"18.44\",",
													"    \"releaseEncumbrance\": \"false\"",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{awaitingPaymentContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/awaiting-payment",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"awaiting-payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction encumbrance is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});",
													"",
													"pm.test(\"Verify money were moved to awating payment\", function() {",
													"    pm.response.to.be.ok;",
													"    let previousAmountValue = JSON.parse(pm.environment.get(\"encumbranceContent\")).encumbrance.amountAwaitingPayment || 0;",
													"    let awatingPaymentAmount = JSON.parse(pm.environment.get(\"awaitingPaymentContent\")).amountAwaitingPayment;",
													"    console.log(awatingPaymentAmount);",
													"",
													"    let newAmount = pm.response.json().encumbrance.amountAwaitingPayment;",
													"    pm.expect(newAmount).to.eql(+previousAmountValue + +awatingPaymentAmount);",
													"",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{encumbranceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{encumbranceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{encumbranceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{encumbranceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Encumbrance is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbranceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{encumbranceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{encBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fromFund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{fromFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete toFund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{encLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{encFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{encFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction encumbrances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4278051-a6b2-447b-a8a3-8e741d2193f6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "568d0bc8-3410-4314-8a8b-e10554f92219",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transfers",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8c99d17f-1af5-4b91-97f6-83e472944ca2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"TRANSFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fd0615f0-1de3-42ac-bcfb-f6eb63da0056",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"TRANS-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"transFiscalYearId\");",
													"pm.variables.set(\"transLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transLedgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"TRANS-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TRANS-FND\", pm.environment.get(\"transLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"transBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"TRANSFER-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TRANSFER-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"transFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{transFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{transBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{transBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transferId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transferContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"transFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction transfer is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{transferId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{transBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{transBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{transLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{transLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{transFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Current fiscal year",
					"item": [
						{
							"name": "Create current fiscal year for ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Current fiscal year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"currentFiscalYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moment = require('moment');",
											"",
											"let currentFiscalYear = utils.buildFiscalYearMinContent();",
											"var start = moment().startOf('year');",
											"var end = moment().endOf('year');",
											"",
											"currentFiscalYear.periodStart = start.format('YYYY-MM-DD');",
											"currentFiscalYear.periodEnd = end.format('YYYY-MM-DD');",
											"",
											"currentFiscalYear.name = \"CurrentFY\";",
											"currentFiscalYear.code = \"CF1111\";",
											"currentFiscalYear.series = \"CFYSERIES\";",
											"",
											"pm.variables.set(\"fyContent\", JSON.stringify(currentFiscalYear));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create next fiscal year for ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Next fiscal year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"nextFiscalYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moment = require('moment');",
											"",
											"let nextFiscalYear = utils.buildFiscalYearMinContent();",
											"var start = moment().startOf('year').add(1, 'year');",
											"var end = moment().endOf('year').add(1, 'year');",
											"",
											"nextFiscalYear.periodStart = start.format('YYYY-MM-DD');",
											"nextFiscalYear.periodEnd = end.format('YYYY-MM-DD');",
											"",
											"nextFiscalYear.name = \"NextFY\";",
											"nextFiscalYear.code = \"CF2222\";",
											"nextFiscalYear.series = \"CFYSERIES\";",
											"",
											"pm.variables.set(\"fyContent\", JSON.stringify(nextFiscalYear));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ledger with next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ledgerForCurrentFiscalYearId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let ledger = utils.buildLedgerMinContent(\"n-lgr\", \"Next FY ledger\");",
											"ledger.fiscalYearOneId = pm.environment.get(\"nextFiscalYearId\");",
											"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get current fiscal year by ledger id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Current fiscal year is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    let ledger = pm.response.json();",
											"    pm.expect(ledger.id).to.equal(pm.environment.get(\"currentFiscalYearId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{ledgerForCurrentFiscalYearId}}/current-fiscal-year",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{ledgerForCurrentFiscalYearId}}",
										"current-fiscal-year"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group FiscalYear Summary",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create group fund fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Group fund fiscal year is created\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"groupFundFiscalYearContent\", ",
													"JSON.stringify(utils.buildGroupFundFiscalYearMinContent(pm.environment.get(\"groupId\"), pm.environment.get(\"fundId\"), pm.environment.get(\"fiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupFundFiscalYearContent}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"group-fund-fiscal-years"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get group fiscal year summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fiscal year summary is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    let summaries = pm.response.json().groupFiscalYearSummaries;",
											"    pm.expect(summaries.length).to.equal(1);",
											"    utils.validateGroupFiscalYearSummaries(summaries[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"// let utils = eval(globals.loadUtils);",
											"",
											"// let fiscalYear = utils.buildFiscalYearMinContent(\"DD1259\");",
											"// let group = utils.buildGroupMinContent();",
											"",
											"// // Create fiscal year",
											"// pm.test(\"Fiscal year is created\", function() {",
											"//     utils.sendPostRequest('/finance/fiscal-years', fiscalYear, (err, res) => {",
											"//         pm.expect(res).to.have.status(201);",
											"//         pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//             // Create group",
											"//             pm.test(\"Group is created\", function() {",
											"//                 utils.sendPostRequest('/finance/groups', group, (err, res) => {",
											"//                 pm.expect(res).to.have.status(201);",
											"//                 pm.variables.set(\"groupId\", res.json().id);",
											"//                 pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//                 // Create fund",
											"//                 pm.test(\"Fund is created\", function() {",
											"//                     utils.sendPostRequest('/finance/funds', group, (err, res) => {",
											"//                     pm.expect(res).to.have.status(201);",
											"//                     pm.variables.set(\"fundIdId\", res.json().id);",
											"//                     });",
											"//                 });",
											"//             });",
											"//         });",
											"//     });",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fiscal-year-summaries?query=groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{fiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fiscal-year-summaries"
									],
									"query": [
										{
											"key": "query",
											"value": "groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{fiscalYearId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Fund types",
					"item": [
						{
							"name": "Create first type for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second type for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundTypeId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative2\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create type without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund type is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"name\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create type - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund type is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update type - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund type is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for types by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund types cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Funds",
					"item": [
						{
							"name": "Create first fund for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundId\", pm.response.json().fund.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fund for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let record = pm.response.json();",
											"    pm.environment.set(\"fundId2\", record.fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST2\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - non existent ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"ledgerid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST3\", uuid.v4()))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - non existent fund type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fundtypeid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"let record = utils.buildCompositeFund(utils.buildFundMinContent(\"TST3\"));",
											"record.fund.fundTypeId = uuid.v4();",
											"pm.variables.set(\"fundContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for funds by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create first group for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST1\", \"NEGATIVE_TEST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second group for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST2\", \"NEGATIVE_TEST2\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST3\", \"NEGATIVE_TEST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST1\", \"NEGATIVE_TEST3\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST3\",  \"NEGATIVE_TEST2\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupId1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST2\",  \"NEGATIVE_TEST3\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupId1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for groups by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Groups cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets",
					"item": [
						{
							"name": "Create first budget for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second budget for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let record = pm.response.json();",
											"    pm.environment.set(\"budgetId2\", record.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let scndBudget = utils.buildBudgetMinContent(\"TST2\");",
											"scndBudget.fundId = pm.environment.get(\"fundId2\");",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(scndBudget));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - non existent fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fundid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST3\", uuid.v4())));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - non existent fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fiscalyearid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"let record = utils.buildBudgetMinContent(\"TST3\");",
											"record.fiscalYearId = uuid.v4();",
											"pm.variables.set(\"budgetContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for budgets by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Budgets cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group fund fiscal year",
					"item": [
						{
							"name": "Create group fund fiscal year without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group fund fiscal year is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"groupId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"78872d8a-bf16-420b-829f-206da38f6c10\",\r\n  \"fiscalYearId\": \"684b5dc5-92f6-4db7-b996-b549d88f5e4e\",\r\n  \"fundId\": \"68872d8a-bf16-420b-829f-206da38f6c10\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group fund fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"a8bf1036-502c-42e4-8783-00a60beeae24\",\r\n  \"groupId\": \"{{groupId}}\",\r\n  \"fiscalYearId\": \"{{fiscalYearId}}\",\r\n  \"fundId\": \"{{fundId}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group fund fiscal year - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group fund fiscal year is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"a8bf1036-502c-42e4-8783-00a60beeae24\",\r\n  \"groupId\": \"{{groupId}}\",\r\n  \"fiscalYearId\": \"{{fiscalYearId}}\",\r\n  \"fundId\": \"{{fundId}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group fund fiscal year - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Group fund fiscal year is not deleted\", function () {",
											"    pm.response.to.have.status(404).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years/d65969c5-1887-4801-8024-486502bd2a1b",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years",
										"d65969c5-1887-4801-8024-486502bd2a1b"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for group fund fiscal year by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Fund types cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assign funds to groups",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create fiscal year one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testNegativeFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"const today = moment.utc();",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = today.startOf('year').subtract(1, 'years');",
													"var end = today.endOf('year').subtract(1, 'years');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEGATIVE\";",
													"fiscalYear.code = \"TESTNEGATIVE2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  after next fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"afterNextFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"const today = moment.utc();",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = today.startOf('year').add(2, 'years');",
													"var end = today.endOf('year').add(2, 'years');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEGATIVE\";",
													"fiscalYear.code = \"TESTNEGATIVE2021\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"negativeLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testNegativeFiscalYearOneId\");",
													"ledger.name = \"Negative\";",
													"ledger.code = \"TESTNEGATIVE\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create fund with groups - current fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TESTNEGATIVE\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"negativeFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund with groups - current fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is not updated\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TESTNEGATIVE\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"negativeFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId2\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Create transaction Transfer without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Transfers is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"Manual\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"currency\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"Manual\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Encumbrance without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Encumbrance is not created - missing transactionType field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"transactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"Manual\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transaction by id - wrong id, not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Encumbrance not found - wrong id\", function () {",
											"    pm.response.to.have.status(404).and.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"randomId\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{randomId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transactions",
										"{{randomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Allocations is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"Manual\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Transfers is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"Manual\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Encumbrance with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Encumbrances is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"Manual\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Current fiscal year",
					"item": [
						{
							"name": "Get current fiscal year for non-existed ledger id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Current fiscal year isn't retrieved\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{$guid}}/current-fiscal-year",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{$guid}}",
										"current-fiscal-year"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group fiscal year summary",
					"item": [
						{
							"name": "Get group fiscal year summary - fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fiscal year summary is empty\", function() {",
											"    pm.response.to.be.ok;",
											"    let summaries = pm.response.json().groupFiscalYearSummaries;",
											"    pm.expect(summaries.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"// let utils = eval(globals.loadUtils);",
											"",
											"// let fiscalYear = utils.buildFiscalYearMinContent(\"DD1259\");",
											"// let group = utils.buildGroupMinContent();",
											"",
											"// // Create fiscal year",
											"// pm.test(\"Fiscal year is created\", function() {",
											"//     utils.sendPostRequest('/finance/fiscal-years', fiscalYear, (err, res) => {",
											"//         pm.expect(res).to.have.status(201);",
											"//         pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//             // Create group",
											"//             pm.test(\"Group is created\", function() {",
											"//                 utils.sendPostRequest('/finance/groups', group, (err, res) => {",
											"//                 pm.expect(res).to.have.status(201);",
											"//                 pm.variables.set(\"groupId\", res.json().id);",
											"//                 pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//                 // Create fund",
											"//                 pm.test(\"Fund is created\", function() {",
											"//                     utils.sendPostRequest('/finance/funds', group, (err, res) => {",
											"//                     pm.expect(res).to.have.status(201);",
											"//                     pm.variables.set(\"fundIdId\", res.json().id);",
											"//                     });",
											"//                 });",
											"//             });",
											"//         });",
											"//     });",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fiscal-year-summaries?query=groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fiscal-year-summaries"
									],
									"query": [
										{
											"key": "query",
											"value": "groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{$guid}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0e4e7c3-311a-4fd3-8b45-3bab9a58256f",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a7a55baa-f34f-4e7b-bb2f-0f6a6d4ca951",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "458e788d-f4f1-4a2e-bf7f-dce99511f09a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9b46996e-04ac-475d-8d3a-fe8947e8db87",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [],",
					"        bodyTemplate: {",
					"            \"module\": \"FINANCE\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    localeConfigs: {",
					"        configNames: [],",
					"        bodyTemplate: {",
					"            \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"            \"module\": \"ORG\",",
					"            \"configName\": \"localeSettings\",",
					"            \"description\": \"locale Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"{\\\"locale\\\":\\\"en-US\\\",\\\"timezone\\\":\\\"America/New_York\\\",\\\"currency\\\":\\\"USD\\\"}\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Finance API - Admin\",",
					"                    \"lastName\": \"Finance Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [ \"finance-storage.transactions.item.delete\", \"finance.order-transaction-summaries.item.post\" ]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"regular-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Limited user\",",
					"                    \"lastName\": \"Finance Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"regular-user\",",
					"                \"password\": \"regular-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"finance.all\",",
					"                    \"finance.order-transaction-summaries.item.post\",",
					"                    \"finance-storage.transactions.item.delete\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test finance tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"finances_schema_\";",
					"",
					"    /**",
					"     * Builds Postman Request base data",
					"     */",
					"    utils.buildPmRequest = function(path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    utils.sendPostRequest = function(path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    utils.getModuleId = function(moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function(configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function(configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function(configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.createFinanceConfig = function(configName) {",
					"        let body = utils.copyJsonObj(globals.testData.configs.bodyTemplate);",
					"        body.configName = configName;",
					"        body.value = pm.variables.get(configName);",
					"        utils.createConfig(body);",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function(err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Build group record with minimal required fields.",
					"     */",
					"    utils.buildGroupMinContent = function(code, name) {",
					"        return {",
					"            \"code\": code || \"TST-GRP\",",
					"            \"status\": \"Active\",",
					"            \"name\": name || \"Test group\"",
					"        };",
					"        ",
					"    };",
					"    /**",
					"     * Build ledger record with minimal required fields.",
					"     */",
					"    utils.buildLedgerMinContent = function(code, name) {",
					"        return {",
					"            \"code\": code || \"TST-LDGR\",",
					"            \"ledgerStatus\": \"Active\",",
					"            \"name\": name || \"Test ledger\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build fiscal year record with minimal required fields.",
					"     */",
					"    utils.buildFiscalYearMinContent = function(code) {",
					"        return {",
					"            \"code\": code || \"FY2019\",",
					"            \"name\": \"Test fiscal year\",",
					"            \"periodStart\": \"2019-01-01T00:00:00Z\",",
					"            \"periodEnd\": \"2025-12-30T23:59:59Z\",",
					"        };",
					"    };",
					"    ",
					"    /**",
					"     * Build group fund fiscal year record with minimal required fields.",
					"     */",
					"    utils.buildGroupFundFiscalYearMinContent = function(groupId, fundId, fiscalYearId) {",
					"        return {",
					"            \"groupId\": groupId,",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"fundId\": fundId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Fund record with minimal required fields.",
					"     */",
					"    utils.buildFundMinContent = function(code, ledgerId) {",
					"        return {",
					"            \"code\": code || \"TST-FND\",",
					"            \"fundStatus\": \"Active\",",
					"            \"ledgerId\": ledgerId || pm.variables.get(\"ledgerId\"),",
					"            \"name\": \"Test fund\"",
					"        };",
					"    };",
					"    ",
					"    /**",
					"     * Build Composite Fund record.",
					"     */",
					"    utils.buildCompositeFund = function(fund, groupIds) {",
					"        return {",
					"            \"fund\": fund || buildFundMinContent(),",
					"            \"groupIds\": groupIds || []",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build budget record with minimal required fields.",
					"     */",
					"    utils.buildBudgetMinContent = function(name, fundId, fiscalYearId) {",
					"        return {",
					"            \"allocated\": 0,",
					"            \"name\": name || \"TST-BDGT\",",
					"            \"budgetStatus\": \"Active\",",
					"            \"fundId\": fundId || pm.variables.get(\"fundId\"),",
					"            \"fiscalYearId\": fiscalYearId || pm.variables.get(\"fiscalYearId\")",
					"        };",
					"    };",
					"    ",
					"    var uuid = require('uuid');",
					"    /**",
					"     * Build encumbrance record with minimal required fields.",
					"     */",
					"    utils.buildEncumbranceMinContent = function() {",
					"        return {",
					"            \"initialAmountEncumbered\": 1000,",
					"\t        \"status\": \"Unreleased\",",
					"\t        \"orderType\":  \"One-Time\",",
					"\t        \"subscription\": false,",
					"\t        \"reEncumber\": false,",
					"\t        \"sourcePurchaseOrderId\": \"e5ae4afd-3fa9-494e-a972-f541df9b877e\",",
					"\t        \"sourcePoLineId\": uuid.v4()",
					"        };",
					"    }; ",
					"    ",
					"    /**",
					"     * Build transaction record with minimal required fields.",
					"     */",
					"    utils.buildTransactionMinContent = function(amount, fiscalYearId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"Manual\",",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };   ",
					"",
					"    /**",
					"     * Validates the content of the fund type record",
					"     */",
					"    utils.validateFundType = function(jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fund_type.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the fund record",
					"     */",
					"    utils.validateFund = function(jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.fundStatus).to.exist;",
					"        pm.expect(jsonData.ledgerId).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fund.json\")));",
					"    };",
					"    ",
					"    /**",
					"     * Validates the content of the composite fund record",
					"     */",
					"    utils.validateCompositeFund = function(jsonData) {",
					"        pm.expect(jsonData.fund).to.exist;",
					"        utils.validateFund(jsonData.fund);",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_fund.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the budget record",
					"     */",
					"    utils.validateBudget = function(jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.allocated).to.exist;",
					"        pm.expect(jsonData.budgetStatus).to.exist;",
					"        pm.expect(jsonData.fundId).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"budget.json\")));",
					"    };",
					"    ",
					"    /**",
					"     * Validates the content of the transaction record",
					"     */",
					"    utils.validateTransaction = function(jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.amount).to.exist;",
					"        pm.expect(jsonData.currency).to.exist;",
					"        pm.expect(jsonData.source).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.transactionType).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"transaction.json\")));",
					"    };",
					"    ",
					"     /**",
					"     * Validates the content of the ledger record",
					"     */",
					"    utils.validateLedger = function(jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.ledgerStatus).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"ledger.json\")));",
					"    };",
					"    ",
					"    ",
					"    /**",
					"     * Validates the content of the group record",
					"     */",
					"    utils.validateGroup = function(jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.status).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"group.json\")));",
					"    };",
					"    ",
					"    /**",
					"    * Validates the content of the fiscal year record",
					"    */",
					"    utils.validateFiscalYear = function(jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.periodStart).to.exist;",
					"        pm.expect(jsonData.periodEnd).to.exist;",
					"        pm.expect(jsonData.series).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fiscal_year.json\")));",
					"    };",
					"    ",
					"    /**",
					"    * Validates the content of the group fiscal year summary record",
					"    */",
					"    utils.validateGroupFiscalYearSummaries = function(jsonData) {",
					"        pm.expect(jsonData.groupId).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.allocated).to.exist;",
					"        pm.expect(jsonData.available).to.exist;",
					"        pm.expect(jsonData.unavailable).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"group_fiscal_year_summary.json\")));",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"budgetId\");",
					"        pm.environment.unset(\"budgetId2\");",
					"        pm.environment.unset(\"budgetContent2\");",
					"        pm.environment.unset(\"fiscalYearId\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"fundId2\");",
					"        pm.environment.unset(\"fundContent2\");",
					"        pm.environment.unset(\"fundTypeId\");",
					"        pm.environment.unset(\"fundTypeId2\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"xokapitoken-limitedUesr\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"gffyGroupId\");",
					"        pm.environment.unset(\"gffyLedgerId\");",
					"        pm.environment.unset(\"gffyFiscalYearId\");",
					"        pm.environment.unset(\"gffyFundTypeId\");",
					"        pm.environment.unset(\"gffyFundId\");",
					"        pm.environment.unset(\"groupFundFiscalYearId\");",
					"        pm.environment.unset(\"groupId\");",
					"        pm.environment.unset(\"testCurrentFiscalYearOneId\");",
					"        pm.environment.unset(\"testNextFiscalYearOneId\");",
					"        pm.environment.unset(\"currentFiscalYearId\");",
					"        pm.environment.unset(\"nextFiscalYearId\");",
					"        pm.environment.unset(\"currentFyLedgerId\");",
					"        pm.environment.unset(\"nextFyLedgerId\");",
					"        pm.environment.unset(\"currentFyFundId\");",
					"        pm.environment.unset(\"nextFyFundId\");",
					"        pm.environment.unset(\"testNegativeFiscalYearOneId\");",
					"        pm.environment.unset(\"afterNextFiscalYearId\");",
					"        pm.environment.unset(\"negativeLedgerId\");",
					"        pm.environment.unset(\"groupForCrudId\");",
					"        pm.environment.unset(\"groupId1\");",
					"        pm.environment.unset(\"groupId2\");",
					"        pm.environment.unset(\"allocFiscalYearId\");",
					"        pm.environment.unset(\"allocLedgerId\");",
					"        pm.environment.unset(\"toFundId\");",
					"        pm.environment.unset(\"allocBudgetId\");",
					"        pm.environment.unset(\"transactionId\");",
					"        pm.environment.unset(\"encFiscalYearId\");",
					"        pm.environment.unset(\"encLedgerId\");",
					"        pm.environment.unset(\"fromFundId\");",
					"        pm.environment.unset(\"encBudgetId\");",
					"        pm.environment.unset(\"encumbranceId\");",
					"        pm.environment.unset(\"transFiscalYearId\");",
					"        pm.environment.unset(\"transLedgerId\");",
					"        pm.environment.unset(\"transBudgetId\");",
					"        pm.environment.unset(\"transferId\");",
					"        pm.environment.unset(\"currentFiscalYearId\");",
					"        pm.environment.unset(\"nextFiscalYearId\");",
					"        pm.environment.unset(\"ledgerForCurrentFiscalYearId\");",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8b8d4c71-9278-4f23-b686-1d8ffa00c08e",
			"key": "mod-financeResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-finance/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "f68a9830-3078-48ad-8ceb-7123a641fc84",
			"key": "testTenant",
			"value": "finance_api_tests",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}