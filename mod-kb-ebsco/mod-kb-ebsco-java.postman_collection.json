{
	"info": {
		"_postman_id": "bb571132-a362-45ac-8e70-96f8f87b9f93",
		"name": "mod-kb-ebsco-java",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "JSON API schema",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f061e372-511f-4136-98bc-32651b757f0e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_jsonapi_content\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://jsonapi.org/schema",
							"protocol": "http",
							"host": [
								"jsonapi",
								"org"
							],
							"path": [
								"schema"
							]
						},
						"description": "GET JSON API standard schema and store in collection environment variable - schema_jsonapi_content"
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "setup permission",
			"item": [
				{
					"name": "Get user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"userId\", jsonData.user.id);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-username",
								"{{username}}"
							]
						},
						"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
					},
					"response": []
				},
				{
					"name": "Add permission if it doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var permissionExists = jsonData!==null && jsonData.permissions.filter(permission => (permission === \"kb-ebsco.all\")).length > 0;",
									"pm.environment.set(\"permissionExists\", permissionExists);",
									"",
									"if(!permissionExists) {",
									"    jsonData.permissions.push(\"kb-ebsco.all\")",
									"    ",
									"    const permissionsPutRequest = {",
									"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
									"      method: 'PUT',",
									"      header: {",
									"        'Content-Type' : 'application/json',",
									"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
									"        'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
									"          ",
									"      },",
									"      body: {",
									"        mode: 'application/json',",
									"        raw: JSON.stringify(jsonData)",
									"      }",
									"    };",
									"    ",
									"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
									"      if (err) { console.log(err); }",
									"      pm.test('Response must be valid', function () {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res).to.have.property('code', 200);",
									"        pm.expect(res).to.have.property('status', 'OK');",
									"      });",
									"    });",
									"    ",
									"    postman.setNextRequest(\"/authn/login\");",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{userId}}"
							],
							"query": [
								{
									"key": "indexField",
									"value": "userId"
								}
							]
						},
						"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
					},
					"response": []
				}
			]
		},
		{
			"name": "setup configuration",
			"item": [
				{
					"name": "Check if  url exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"apiUrlExists\", false);",
									"",
									"if(jsonData!==null && jsonData.configs.length!==0) {",
									"    pm.environment.set(\"apiUrlExists\", true);",
									"    pm.environment.set(\"rm-api-url-value\", jsonData.configs[0].value);",
									"    pm.environment.set(\"rm-api-url-id\", jsonData.configs[0].id);",
									"    //\"rm api url exists -- do not overwrite\");",
									"    postman.setNextRequest(\"Check if customerId exists\");",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
								}
							]
						},
						"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
					},
					"response": []
				},
				{
					"name": "/configurations/entries - POST RM API URL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1999127b-87cf-45b8-a245-be854e138af4",
								"exec": [
									"",
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});",
									"",
									"//Store rm-api-url-id temporarily for clean-up purpose",
									"let body = JSON.parse(responseBody);",
									"pm.environment.set(\"rm-api-url-id\", body.id);",
									"",
									"pm.environment.set(\"rm-api-url-value\", body.value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.url\",\r\n    \"description\": \"EBSCO RM-API URL\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rmapi_url}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if customerId exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cf60b97-d5e9-4028-86ff-9b20ecc32dba",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"customerIdExists\", false);",
									"",
									"if(jsonData!==null && jsonData.configs.length!==0) {",
									"    pm.environment.set(\"customerIdExists\", true);",
									"    pm.environment.set(\"rm-api-custid-value\", jsonData.configs[0].value);",
									"    pm.environment.set(\"rm-api-customer-id\", jsonData.configs[0].id);",
									"     //\"rm api customer id exists -- do not overwrite\");",
									"    postman.setNextRequest(\"Check if apiKey exists\");",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
								}
							]
						},
						"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
					},
					"response": []
				},
				{
					"name": "/configurations/entries - POST RM API api_customer id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23f25d7b-cbf3-4053-9fc3-35f06a3fffcc",
								"exec": [
									"",
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});",
									"",
									"//Store rm-api-customer-id temporarily for clean-up purpose",
									"let body = JSON.parse(responseBody);",
									"pm.environment.set(\"rm-api-customer-id\", body.id);",
									"pm.environment.set(\"rm-api-custid-value\", body.value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.customerId\",\r\n    \"description\": \"EBSCO RM-API Customer ID\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{custid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						},
						"description": "Create customer id as part of configuration"
					},
					"response": []
				},
				{
					"name": "Check if apiKey exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30b0b57f-a25a-41b2-9390-f1e72c241b4c",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"apiKeyExists\", false);",
									"",
									"if(jsonData!==null && jsonData.configs.length!==0) {",
									"    pm.environment.set(\"apiKeyExists\", true);",
									"     //\"rm api key exists -- do not overwrite\");",
									"    pm.environment.set(\"rm-api-key-id\", jsonData.configs[0].id);",
									"    pm.environment.set(\"rm-api-key-value\", jsonData.configs[0].value);",
									"    ",
									"    postman.setNextRequest(\"First Test - Placeholder\");",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
								}
							]
						},
						"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
					},
					"response": []
				},
				{
					"name": "/configurations/entries - POST RM API apiKey",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "732d3a7c-3a6f-4f9b-b904-9cc6887ccdc3",
								"exec": [
									"",
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});",
									"",
									"//Store rm-api-key-id temporarily for clean-up purpose",
									"let body = JSON.parse(responseBody);",
									"pm.environment.set(\"rm-api-key-id\", body.id);",
									"pm.environment.set(\"rm-api-key-value\", body.value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.apiKey\",\r\n    \"description\": \"EBSCO RM-API API Key\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rmapi_api_key}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						},
						"description": "Create customer id as part of configuration"
					},
					"response": []
				},
				{
					"name": "First Test - Placeholder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4289e6d1-9e7e-43bf-b5e7-fca0899d4c09",
								"type": "text/javascript",
								"exec": [
									"//placeholder first test to jump to ",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7378bc5c-916f-41aa-b57e-b2c274efe3f3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a26b4778-0c56-409b-93fe-f848a949171b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "setup for packages test",
			"item": [
				{
					"name": "Create custom package for testing deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "807c50e4-0fd3-449b-b76f-26701581409c",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//Check if we get a collection of packages in response",
									"if(response.data) {",
									"    if(response.data.id) {",
									"        pm.environment.set(\"custom-package-id-created-in-post\", response.data.id);",
									"    }",
									"    ",
									"    //Test that type is packages",
									"    pm.test('type is packages', function(){",
									"        pm.expect(response.data.type).eq('packages');",
									"    });",
									"    ",
									"    //Test that data.attributes has expected attributes",
									"    pm.test('expected data.attributes are present', function() {",
									"        pm.expect(response.data.attributes).to.be.an('object');",
									"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
									"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
									"    });",
									"        ",
									"    //Test that contentType matches what was passed in POST request",
									"    pm.test('content type matches value passed in', function() {",
									"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
									"    });",
									"    ",
									"    //Test that customCoverage matches what was passed in POST request",
									"    pm.test('custom coverage matches value passed in', function() {",
									"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
									"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
									"    });",
									"    ",
									"    //Test that isCustom is true",
									"    pm.test('isCustom is true', function() {",
									"        pm.expect(response.data.attributes.isCustom).to.be.true;",
									"    });",
									"    ",
									"    //Test that isSelected is true",
									"    pm.test('isSelected is true', function() {",
									"        pm.expect(response.data.attributes.isSelected).to.be.true;",
									"    });",
									"    ",
									"    //Test that name matches value passed in",
									"    pm.test('name matches value passed in', function() {",
									"        pm.expect(response.data.attributes.name).to.eq('custom packages api test one');",
									"    });",
									"    ",
									"    //Test that package type is custom",
									"    pm.test('packageType is custom', function() {",
									"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
									"    });",
									"    ",
									"    //Test that allowKbToAddTitles is false",
									"    pm.test('allowKbToAddTitles is false', function() {",
									"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
									"    });",
									"} else {",
									"    console.log('Custom package not created');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test one\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"eholdings",
								"packages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create custom package for testing deletion in PUT",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4a4f293-fb41-4b09-8b13-015b296232e9",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let response = pm.response.json();",
									"",
									"//Check that status is 200",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//Check if we get a collection of packages in response",
									"if(response.data) {",
									"    if(response.data.id) {",
									"        pm.environment.set(\"custom-package-id-created-in-post-again\", response.data.id);",
									"    }",
									"    ",
									"    //Test that type is packages",
									"    pm.test('type is packages', function(){",
									"        pm.expect(response.data.type).eq('packages');",
									"    });",
									"",
									"    //Test that name matches value passed in",
									"    pm.test('name matches value passed in', function() {",
									"        pm.expect(response.data.attributes.name).to.eq('custom packages api test two');",
									"    });",
									"    ",
									"    //Test that package type is custom",
									"    pm.test('packageType is custom', function() {",
									"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
									"    });",
									"    ",
									"    //Test that allowKbToAddTitles is false",
									"    pm.test('allowKbToAddTitles is false', function() {",
									"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
									"    });",
									"} else {",
									"    console.log('Custom package not created');",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test two\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"eholdings",
								"packages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "setup for titles test",
			"item": [
				{
					"name": "GET Customer Specific Provider Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "768be071-6f5e-4c96-aba6-67836c7e8efa",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response must have a json body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"var jsonData = pm.response.json();",
									"",
									"if (jsonData.data.length > 0) {",
									"    pm.environment.set(\"custom-providerid\", jsonData.data[0].id);",
									"} else {",
									"    console.log(\"Unable to find customer specific provider id for custom title testing\");",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q={{custid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"eholdings",
								"providers"
							],
							"query": [
								{
									"key": "q",
									"value": "{{custid}}\n"
								}
							]
						},
						"description": "Retrieves unique id of the customer specific provider. All Custom Packages are created as part of a customer specific provider. "
					},
					"response": []
				},
				{
					"name": "Create Custom Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b94cf55d-e934-4cfb-aba0-764ceabcc156",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response must have a json body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"custom-packageid\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "48db7d0e-1db4-405e-adf2-aec6a7ef90e8",
								"exec": [
									"var uuid = require('uuid');",
									"pm.variables.set(\"package-uuid\", uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"data\": {\n     \"type\": \"packages\",\n     \"attributes\": {\n       \"name\": \"custom-package-{{package-uuid}}\",\n       \"contentType\": \"Unknown\"\n     }\n   }\n }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"eholdings",
								"packages"
							]
						},
						"description": "Create a uniquely named custom package. Custom titles need to be created as part of a custom package."
					},
					"response": []
				},
				{
					"name": "GET Sample Managed Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bedb142d-bc23-4284-837f-d3db06542991",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must have a json body\", function () {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"var managedPackages = jsonData.data.filter(",
									"    function(packageRecord) {",
									"        if (!packageRecord.attributes.isCustom) {",
									"           return packageRecord;",
									"        }",
									"    }",
									");",
									"",
									"pm.test('at least 1 managed package is returned from query', function() {",
									"    pm.expect(managedPackages.length).to.be.above(0);",
									"});",
									"",
									"if (managedPackages.length > 0) {",
									"    pm.environment.set(\"managed-packageid\", managedPackages[0].id);",
									"} else {",
									"    console.log(\"Unable to find managed package id for custom title testing\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=abc",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"eholdings",
								"packages"
							],
							"query": [
								{
									"key": "q",
									"value": "abc\n"
								}
							]
						},
						"description": "Locate a random managed package to test custom title create error scenario."
					},
					"response": []
				}
			]
		},
		{
			"name": "providers",
			"item": [
				{
					"name": "GET provider collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7535d89f-ea29-4c2a-b43f-9665164c2643",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"supportsCustomPackages\")",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attribute types",
													"        pm.test('expected data.attributes types are present', function() {",
													"            pm.expect(firstRecord.attributes.name).to.be.a('string');",
													"            pm.expect(firstRecord.attributes.packagesTotal).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.packagesSelected).to.be.a('number');",
													"            pm.expect(firstRecord.attributes.supportsCustomPackages).to.be.a('boolean');",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"packages\")",
													"        });",
													"        ",
													"        //Test that relationships.packages has expected attributes",
													"        pm.test('expected relationships.packages are present', function() {",
													"            pm.expect(firstRecord.relationships.packages).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages).to.include.all.keys(\"meta\")",
													"        });",
													"        ",
													"        //Test that relationships.packages.meta has expected attributes",
													"        pm.test('expected relationships.packages.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.packages.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that packages are not included in relationships",
													"        pm.test('relationships meta should not include packages', function() {",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.packages.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No providers found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"disabled": true
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "212ac14f-2d98-4285-bc28-9ba213b1409b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        })",
													"        //Test that name contains either basket or weaving in it",
													"        pm.test('name contains query string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('Basket');",
													"        })",
													"    } else {",
													"        console.log(\"No provider results returned for this search query\");",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Basket",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Basket"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb98be54-cc50-4a39-90f8-f5f8094aa6aa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that 12 records equal to or less than count are in response",
													"        pm.test('number of records less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(15);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=12",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbe1cd5e-491c-4d04-b141-57df864b14aa",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that number of records returned are less than or equal to count",
													"        pm.test('number of provider records returned are less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is providers', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&page=1&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "436225e9-d41b-4662-a6d0-83bbb173e19a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is providers",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('providers');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Journal');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "invalid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcec05af-8078-4ada-8e3b-758807147ddf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"});",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57c55629-9377-4fe0-a65d-2e3f26dbfb61",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid sort parameter');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?q=Journal&sort=invalidsort",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "q",
													"value": "Journal"
												},
												{
													"key": "sort",
													"value": "invalidsort"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b41a46be-1049-4a73-939b-6dc62086ffed",
												"exec": [
													"let response = pm.response;",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d486b5a-f089-4b32-9095-ececf2e3ae6c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq('18');",
													"});    ",
													"",
													"//Test that type is providers",
													"pm.test('type is providers', function(){",
													"    pm.expect(response.data.type).eq('providers');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"name\", \"packagesTotal\", \"packagesSelected\",\"providerToken\",\"supportsCustomPackages\", \"proxy\");",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid providerId including packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f1e04a3-e242-4dac-b1fe-af20d8fb0415",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"//Test that packages are included in relationships",
													"pm.test('relationships meta should include packages', function() {",
													"    pm.expect(response.data.relationships.packages.data).is.not.empty;",
													"});",
													"",
													"//Test that list of packages are included",
													"pm.test('include packages list', function() {",
													"    if (response.included === undefined || response.included.length === 0) {",
													"        // array empty or does not exist",
													"        console.log(\"No packages included\");",
													"    } else {",
													"        //Test that packages are included",
													"        pm.test('should include packages', function() {",
													"            pm.expect(response.included[0].type).to.eq('packages');",
													"        });",
													"    }",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": "packages"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2539e1f4-a134-4ed7-8aeb-940a6bc5c3cd",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0fe511e-eec1-4ce1-878c-e009e01fe9bf",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Provider id is invalid - and');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/and",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"and"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca4030e7-08f5-43f6-bb86-6c40dc31c5c5",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that packages are not included in relationships",
													"pm.test('relationships meta should not include packages', function() {",
													"    pm.expect(response.data.relationships.packages.meta.included).to.be.false;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT provider by providerId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "update proxy - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48b0d34f-ec96-49de-ad74-1dfa17e999f9",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"19\");",
													"});",
													"",
													"//Check that proxy value matches value passed in",
													"if (Object.keys(response.data.attributes.proxy).length !== 0) {",
													"    pm.test(\"Proxy id matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.proxy.id).eq('<n>');",
													"    });",
													"} else {",
													"    console.log(\"Proxy not updated as expected\");",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": null\n      },\n      \"proxy\": {\n        \"id\": \"<n>\"\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token - success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff4bde3f-f6e2-4946-8892-40234718d31c",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check that provider id matches value passed in",
													"pm.test(\"Provider Id matches value passed in\", function () {",
													"    pm.expect(response.data.id).eq(\"18\");",
													"});",
													"",
													"//Check that provider token value matches value passed in",
													"if (Object.keys(response.data.attributes.providerToken).length !== 0) {",
													"    //Test that providerToken has expected keys",
													"    pm.test(\"Provider Token has expected keys\", function () {",
													"        pm.expect(response.data.attributes.providerToken).to.include.all.keys(\"factName\", \"prompt\", \"helpText\", \"value\");",
													"    });",
													"    pm.test(\"Provider token value matches value passed in\", function () {",
													"        pm.expect(response.data.attributes.providerToken.value).eq('hello test token');",
													"    });",
													"} else {",
													"    console.log(\"Provider token value not updated as expected\");",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\"\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "update proxy - invalid proxy id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bec090d3-fab0-4d44-9f88-77d4cab3ca51",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Proxy ID');",
													"    });",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": null\n      },\n      \"proxy\": {\n        \"id\": \"invalid\"\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update provider token - error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e099b521-e229-4faf-8efa-882154dae668",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider does not allow token');",
													"    });",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": 123\n      },\n      \"proxy\": {\n        \"id\": \"<n>\"\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19"
											]
										}
									},
									"response": []
								},
								{
									"name": "update request - invalid json",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52dd8ee3-f407-4226-9b33-6be2857b40e5",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed.",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"data\": {\n    \"type\": \"providers\",\n    \"attributes\": {\n      \"providerToken\": {\n        \"value\": \"hello test token\"\n      },\n      \"proxy\": {\n        \"id\": \"<n>\"\n      },\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/18",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"18"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET provider by providerId including packages",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "for provider that exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "252c3079-2899-4e60-8692-2483d29ad85b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\")",
													"        });",
													"        ",
													"        //Test that providerId matches what we passed in ",
													"        pm.test('providerId matches value passed in', function() {",
													"            pm.expect(firstRecord.attributes.providerId).to.eq(19);",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\", \"provider\")",
													"        });",
													"    ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"        ",
													"        //Test that provider are not included in relationships",
													"        pm.test('relationships meta should not include provider', function() {",
													"            pm.expect(firstRecord.relationships.provider.meta.included).to.be.false;",
													"        })",
													"    } else {",
													"        console.log('No packages found for this provider');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7561c308-dd9d-4ce7-a6d4-b7ea4437d9ed",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check data array is of type providers if not null",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get first record",
													"        let firstRecord = response.data[0];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        })",
													"        //Test that name contains either basket or weaving in it",
													"        pm.test('name contains query string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('Search');",
													"        })",
													"    } else {",
													"        console.log(\"No packages returned for this provider with this search query\");",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48432b4d-f7c2-4f08-b9e9-8f1eac8b921c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that number of records returned are less than or equal to count",
													"        pm.test('number of records returned are less than or equal to count', function(){",
													"            pm.expect(len).to.be.at.most(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is providers",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "q and count and sort by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c2a12ad-af4a-4a02-ad01-a5c1572ac6f9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is providers', function() {",
													"            pm.expect(firstRecord.type).eq('packages');",
													"            pm.expect(secondRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        })",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"            pm.expect(secondRecord.attributes.name).to.include('Search');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c0b1aa3-a4a5-479c-a06e-9b41cf027bee",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] and filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42f3fba6-12ea-4671-b900-3eae020e17d9",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of providers in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('provider name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('Search');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"        ",
													"        //Test that contentType matches whats passed in query",
													"        pm.test('check contentType', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Aggregated Full Text');",
													"        });",
													"    }",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=aggregatedfulltext",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "aggregatedfulltext"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "for non-existing provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8f0d0d1-f485-47c3-b783-65d618388eec",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Provider not found');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/1/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"1",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f36aabf0-e2e9-4bbe-a28f-ccd9476ba8a0",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/abc/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"abc",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc001c28-3517-4831-8405-532b1dce3130",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    pm.test('Ensure that response contains expected error message', function(){",
													"       pm.expect(response.errors[0].title).to.eq('Search parameter cannot be empty'); ",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page offset",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4107bfa1-7d75-4212-a1c6-7f084d0d31de",
												"exec": [
													"//Ensure that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Ensure that response contains expected error message",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													"",
													"//Check that X-Okapi-Trace header is present",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&count=5&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "q and sort param invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1681ef9a-06f2-4a09-8dd1-6dca2e1a00a8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for sort');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "filter[selected] invalid value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1a0ae87-540c-47b8-a003-2975d04ce8cc",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//This should actually be a 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is given",
													"    pm.test('Ensure that expected error messages are seen', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[selected]');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87060553-7e9d-49b6-ae25-d615196b7643",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that appropriate error message is being returned",
													"    pm.test('Ensure that appropriate error message is returned', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Invalid Query Parameter for filter[type]');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?q=Search&filter[selected]=true&filter[type]=unsupported",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "Search"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "filter[type]",
													"value": "unsupported"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count out of range",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "461f1d29-f4ec-417d-ad4e-e02eb5ccfe2b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('\\n \\'count\\' parameter is incorrect. parameter value {120} is not valid: must be less than or equal to 100');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/providers/19/packages?count=120",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"providers",
												"19",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "120"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24b15e82-d116-4bf0-8a08-a8be15ed97ce",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77861d0b-465c-4a78-b026-a9fa13fe4ed0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "packages",
			"item": [
				{
					"name": "GET package collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "without query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe95e230-757f-44ab-b631-b1b7c3511575",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 25 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(25);",
													"        });",
													"    ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that id is a string",
													"        pm.test('id is a string', function(){",
													"            pm.expect(firstRecord.id).to.be.a('string');",
													"        });",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"    ",
													"        //Test that data.attributes has expected attributes",
													"        pm.test('expected data.attributes are present', function() {",
													"            pm.expect(firstRecord.attributes).to.be.an('object');",
													"            pm.expect(firstRecord.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
													"            \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\");",
													"        });",
													"        ",
													"        //Test that relationships has expected attributes",
													"        pm.test('expected relationships are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships).to.include.all.keys(\"resources\")",
													"        });",
													"        ",
													"        //Test that relationships.resources has expected attributes",
													"        pm.test('expected relationships.resources are present', function() {",
													"            pm.expect(firstRecord.relationships.resources).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources).to.include.all.keys(\"meta\");",
													"        });",
													"        ",
													"        //Test that relationships.resources.meta has expected attributes",
													"        pm.test('expected relationships.resources.meta are present', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta).to.be.an('object');",
													"            pm.expect(firstRecord.relationships.resources.meta).to.include.all.keys(\"included\");",
													"        });",
													"        ",
													"        //Test that resources are not included in relationships",
													"        pm.test('relationships meta should not include resources', function() {",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.a('boolean');",
													"            pm.expect(firstRecord.relationships.resources.meta.included).to.be.false;",
													"        });",
													"    } else {",
													"        console.log('No packages found for this tenant');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "835a3c5b-e240-4b7d-97c6-09cf500b7cd4",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"        });",
													"    ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"",
													"        //Test that query string is present in package name",
													"        pm.test('query string is present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    } else {",
													"        console.log('No packages found for this query search');",
													"      }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid q and count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39f4da6d-1f14-415d-a14c-6b37a10a8c7b",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(5);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that query string is present in package name",
													"        pm.test('query string present in package name', function() {",
													"            pm.expect(firstRecord.attributes.name).to.have.string('ABC-CLIO');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7532dfe5-001f-4bea-a58a-0b7cb05419b8",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let totalResults;",
													"if(response.meta) {",
													"    totalResults = response.meta.totalResults;",
													"}",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        pm.test('count matches number of records in response', function(){",
													"            pm.expect(len).eq(7);",
													"        });",
													"        ",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Ensure that total results is greater than count",
													"        pm.test('totalResults greater than count', function() {",
													"            pm.expect(len) < totalResults;",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=7",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "7"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset one",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d67c6e12-513c-4d82-b907-88668b9a06cb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eec1c38d-cda0-4a94-adf7-9286f4778d46",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        pm.variables.set(\"packagename-pageone\", response.data[0].attributes.name);",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid page offset two",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae051a46-6975-4ff3-8c26-43eacc903f9c",
												"exec": [
													"pm.test(\"GET schema_parameters OK\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"GET schema_parameters has JSON body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    ",
													"    if(len > 0) {",
													"        let firstRecordPageTwo = response.data[0].attributes.name;",
													"        ",
													"        //Check that page 1 and page 2 do not have same records",
													"        pm.test('page 1 and page 2 should not have same records', function() {",
													"            pm.expect(pm.variables.get(\"packagename-pageone\")).to.not.eql('firstRecordPageTwo');",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&count=5&page=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "count",
													"value": "5"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "with valid sort - by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a003047-de40-45c8-bc3b-5d2079b6a2ed",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"   let len = response.data.length;",
													"    if(len > 1){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        let secondRecord = response.data[1];",
													"        //Test that type is packages",
													"        pm.test('type is packages', function() {",
													"            pm.expect(firstRecord.type).to.be.a('string');",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that first and second records are sorted",
													"        pm.test('first and second records are sorted', function(){",
													"            pm.expect(firstRecord.attributes.name < secondRecord.attributes.name).to.be.true;",
													"        });",
													"        ",
													"        //Test that Journal is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        }); ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8840c58b-b441-44dc-bf30-c78a2e0e337f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).eq(5);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that isSelected is true",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.isSelected).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=true&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "true"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec9e51f0-e022-4ba7-8726-fda81bea0ff7",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Test that count is equal to number of records returned in response",
													"        pm.test('count equals number of records in response', function() {",
													"            pm.expect(len).eq(5);",
													"        });",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name).to.include('American');",
													"        });",
													"        ",
													"        //Test that contentType matches passed value",
													"        pm.test('check isSelected', function() {",
													"            pm.expect(firstRecord.attributes.contentType).to.eq('Abstract and Index');",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=abstractandindex&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "abstractandindex"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "valid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "569906b9-8e70-4313-b3f8-7d6cbf10f6d3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    let len = response.data.length;",
													"    if(len > 0){",
													"        //Get the first record",
													"        let firstRecord = response.data[0];",
													"        ",
													"        //Test that type is packages",
													"        pm.test('type is packages', function(){",
													"            pm.expect(firstRecord.type).eq('packages');",
													"        });",
													"        ",
													"        //Test that Search is in name",
													"        pm.test('package name contains search string', function() {",
													"            pm.expect(firstRecord.attributes.name.toLowerCase()).to.include('package');",
													"            pm.globals.set(\"custom-package-name-that-exists\", firstRecord.attributes.name);",
													"        });",
													"        ",
													"        //Test that isCustom is true",
													"        pm.test('check isCustom', function() {",
													"            pm.expect(firstRecord.attributes.isCustom).to.be.true;",
													"        });",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=true",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "true"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with empty search string q",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69dd3f20-06a4-45ae-b55a-c143cc5adb9f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.errors) {",
													"    //Ensure that errors array is not empty",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Ensure that we get the expected error message",
													"    pm.test('Ensure that errors title is as expected', function() {",
													"        pm.expect(response.errors[0].title).eq('Search parameter cannot be empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9fe2d43-efed-4c6a-90d4-2d2cefad5455",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=ABC-CLIO&page=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "ABC-CLIO"
												},
												{
													"key": "page",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid sort filter param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42e1cd49-f2de-4358-8901-e7159cf96f7e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for sort');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&sort=invalid",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "sort",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[selected] param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f83915f8-c8f0-46e3-a75f-a06898a06383",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[selected]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[selected]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[selected]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[type]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "483a058a-632c-447d-8eec-d885ac1bbb42",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[type]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=American&filter[type]=invalid&count=5",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "American"
												},
												{
													"key": "filter[type]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4ebc75e-336c-4beb-b4df-ea40f74b8d80",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?filter[custom]=invalid&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "filter[custom]",
													"value": "invalid"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid filter[custom]=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9dedb2e-a77c-4205-9f60-f26c69ad9d12",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"// Per https://issues.folio.org/browse/UIEH-483 -- only true is allowed",
													"//Ensure that errors array is not empty",
													"pm.test('Ensure that errors array is not empty', function() {",
													"    pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"//Ensure that we get the expected error message",
													"pm.test('Ensure that errors title is as expected', function() {",
													"    pm.expect(response.errors[0].title).eq('Invalid Query Parameter for filter[custom]');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?q=package&filter[custom]=false&count=2",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "q",
													"value": "package"
												},
												{
													"key": "filter[custom]",
													"value": "false"
												},
												{
													"key": "count",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid count",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c10ca890-de00-47ce-abf8-b6c2f8dddca5",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('Ensure that error message is returned', function() {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"abc\"');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages?count=abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											],
											"query": [
												{
													"key": "count",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST to package collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Create custom package valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "807c50e4-0fd3-449b-b76f-26701581409c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.data) {",
													"    if(response.data.id) {",
													"        pm.environment.set(\"custom-package-id-created-in-post-valid\", response.data.id);",
													"    }",
													"    ",
													"    //Test that type is packages",
													"    pm.test('type is packages', function(){",
													"        pm.expect(response.data.type).eq('packages');",
													"    });",
													"    ",
													"    //Test that data.attributes has expected attributes",
													"    pm.test('expected data.attributes are present', function() {",
													"        pm.expect(response.data.attributes).to.be.an('object');",
													"        pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\", \"isSelected\", \"name\", \"packageId\", ",
													"        \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
													"    });",
													"        ",
													"    //Test that contentType matches what was passed in POST request",
													"    pm.test('content type matches value passed in', function() {",
													"        pm.expect(response.data.attributes.contentType).to.eq('E-Journal');",
													"    });",
													"    ",
													"    //Test that customCoverage matches what was passed in POST request",
													"    pm.test('custom coverage matches value passed in', function() {",
													"        pm.expect(response.data.attributes.customCoverage.beginCoverage).to.eq('2003-01-01');",
													"        pm.expect(response.data.attributes.customCoverage.endCoverage).to.eq('2003-12-01');",
													"    });",
													"    ",
													"    //Test that isCustom is true",
													"    pm.test('isCustom is true', function() {",
													"        pm.expect(response.data.attributes.isCustom).to.be.true;",
													"    });",
													"    ",
													"    //Test that isSelected is true",
													"    pm.test('isSelected is true', function() {",
													"        pm.expect(response.data.attributes.isSelected).to.be.true;",
													"    });",
													"    ",
													"    //Test that name matches value passed in",
													"    pm.test('name matches value passed in', function() {",
													"        pm.expect(response.data.attributes.name).to.eq('custom packages api test valid');",
													"    });",
													"    ",
													"    //Test that package type is custom",
													"    pm.test('packageType is custom', function() {",
													"        pm.expect(response.data.attributes.packageType).to.eq('Custom');",
													"    });",
													"    ",
													"    //Test that allowKbToAddTitles is false",
													"    pm.test('allowKbToAddTitles is false', function() {",
													"        pm.expect(response.data.attributes.allowKbToAddTitles).to.be.false;",
													"    });",
													"} else {",
													"    console.log('Custom package not created');",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test valid\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with package name that already exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50e4af93-4308-4650-b077-2ea16c8d2a27",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Custom Package with the provided name already exists');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid contentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a79977ad-8b87-4104-b668-40e38a6afe02",
												"exec": [
													"//Check that status is 400",
													"// This test should be re-visited after https://issues.folio.org/browse/UIEH-488 is fixed.",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.contains('Json content error');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"custom packages api test\",\n\t\t\t\"contentType\": 123,\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "bad data for customCoverage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3b36baa-ce08-4c77-b71a-65d41a4b8bd0",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.contains('Json content error');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"123\",\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": 2003-01-01,\n\t\t\t\t\"endCoverage\": 2003-12-01\n\t\t\t}\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "package without name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca5f984d-f290-418b-b995-16e6b818abf3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"   pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].message).to.eq('may not be null');",
													"        pm.expect(response.errors[0].type).to.eq('1');",
													"        pm.expect(response.errors[0].code).to.eq('-1');",
													"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.name');",
													"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"contentType\": \"E-Journal\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "package without content type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd23092d-ad62-4671-9ecc-84adb25a0378",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].message).to.eq('may not be null');",
													"        pm.expect(response.errors[0].type).to.eq('1');",
													"        pm.expect(response.errors[0].code).to.eq('-1');",
													"        pm.expect(response.errors[0].parameters[0].key).to.eq('data.attributes.contentType');",
													"        pm.expect(response.errors[0].parameters[0].value).to.eq('null');",
													"    }); ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"data\": {\n\t\t\"type\": \"packages\",\n\t\t\"attributes\": {\n\t\t\t\"name\": \"xxx\",\n\t\t\t\"customCoverage\": {\n\t\t\t\t\"beginCoverage\": \"2003-01-01\",\n\t\t\t\t\"endCoverage\": \"2003-12-01\"\n\t\t\t}\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET package by packageId",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "with valid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78da614c-e37e-4f16-a7cf-936e68e22bc5",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.data.id).eq(pm.variables.get('packageId'));",
													"});    ",
													"",
													"//Test that type is packages",
													"pm.test('type is packages', function(){",
													"    pm.expect(response.data.type).eq('packages');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"contentType\", \"customCoverage\", \"isCustom\",\"isSelected\",\"name\", \"packageId\", ",
													"    \"packageType\", \"providerId\", \"providerName\", \"selectedCount\", \"titleCount\", \"visibilityData\", \"allowKbToAddTitles\");",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "with non-existing packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcf9e78a-2432-4263-a74d-171c5680cb62",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 404",
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package not found');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/583-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"583-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with invalid packageId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94ac8c29-1a6b-46cf-a9f2-3c7f9acf4285",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "with include empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80f21569-5141-4ab4-a86f-27ddb77e9f2e",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that resources are not included in relationships",
													"pm.test('relationships meta should not include resources', function() {",
													"    pm.expect(response.data.relationships.resources.meta.included).to.be.false;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{packageId}}?include=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"{{packageId}}"
											],
											"query": [
												{
													"key": "include",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId without providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cd4ab39-0383-435d-9d53-ab821668fbd3",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package and provider id are required');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid packageId with providerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b904a74-9813-4239-ab20-9b4787115b4f",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is *not* empty",
													"if(response.errors) {",
													"    pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Package or provider id are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/abc-abc",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"packages",
												"abc-abc"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "GET title collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles query only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cd772e4-2fa5-4203-b679-c4c5850e11f4",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"        ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"            ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"        ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"        ",
													"    // Test that first title contains search term",
													"    pm.test('title name in first result includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with name sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65537d6c-bd16-479c-9583-541d97345213",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"    ",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Save first id to compare with a relevance sort result -- the 2 should be different",
													"    pm.environment.set(\"name-sort-id1\", firstRecord.id);",
													"} else {",
													"    console.log(\"Sample Title Query with name sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles query with relevance sort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc608305-4ffe-41ce-ae41-b38a457e0a56",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    ",
													"    // Test that first sorted by relevance title id does not equal name sort title id",
													"    pm.test('first title name does not equal first title in relevance sort', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"} else {",
													"     console.log(\"Sample Title Query with relevance sort returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american&sort=relevance",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "relevance"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d262807-1459-4158-bd98-a931e05a0da8",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[publisher]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb54ac1e-9ac2-4de5-8fa5-da08e95852ca",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"data array contains the default (25) entries\", function () {",
													"    pm.expect(jsonData.data.length).to.eql(25);",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publisherName.toLowerCase()).to.include('academic');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[publisher] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[publisher]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[publisher]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[subject]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44353c09-88c9-4d8e-b02d-dfb09ab51b8e",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingSubjects = firstAttributes.subjects.filter(",
													"        function(subject) {",
													"            if (subject.subject.toLowerCase().includes('history')) {",
													"               return subject.subject;",
													"            }",
													"        }",
													"    );",
													"    ",
													"    pm.test('at least 1 subject includes query term', function() {",
													"        pm.expect(matchingSubjects.length).to.be.above(0);",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[subject] returned 0 results\");",
													"}",
													"",
													"    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[subject]=history",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[subject]",
													"value": "history"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6adfa27-8b3f-4ad6-9342-23df192d48b6",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    var matchingIdentifiers = firstAttributes.identifiers.filter(",
													"        function(identifier) {",
													"            if (identifier.id.toLowerCase().includes('99')&&(['issn', 'isbn'].includes(identifier.type.toLowerCase()))) {",
													"               return identifier.id;",
													"            }",
													"        }",
													"    );",
													"    ",
													"    pm.test('at least 1 issn or isbn identifier includes query term', function() {",
													"        pm.expect(matchingIdentifiers.length).to.be.above(0);",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Title Query with filter[isxn] returned 0 results\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter for no results",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e9c401d-53f8-4575-bb11-f6171ad18064",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[type]&filter[name]",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e9c401d-53f8-4575-bb11-f6171ad18064",
												"exec": [
													"",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    ",
													"    // Test that first title publisher name contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('academic');",
													"    });",
													"    ",
													"    ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.publicationType.toLowerCase()).to.include('database');",
													"    });",
													"} else {",
													"    console.log(\"Sample Title Query with filter[type]&filter[name] returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[type]=database&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[type]",
													"value": "database"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88bea403-5810-4a2d-82ea-7568274e8ca7",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"if (jsonData.data.length > 0) {",
													"",
													"    pm.test(\"data array contains the default (25) entries\", function () {",
													"        pm.expect(jsonData.data.length).to.eql(25);",
													"    });",
													"    ",
													"    //Get the first record",
													"    let firstRecord = jsonData.data[0];",
													"        ",
													"    //Test that object has the expected keys",
													"    pm.test('expected keys are present in a record', function() {",
													"        pm.expect(firstRecord).to.be.an('object');",
													"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"    });",
													"    ",
													"    // Test that attributes have the expected keys",
													"    let firstAttributes = firstRecord.attributes;",
													"    pm.test('expected attributes are present in a record', function() {",
													"        pm.expect(firstAttributes).to.be.an('object');",
													"        pm.expect(firstAttributes).to.include.all.keys(\"name\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\");",
													"    });",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.name.toLowerCase()).to.include('american');",
													"    });",
													"    // Test that first title on page 2 does not have same id as first title on page 1 ",
													"    pm.test('title name in a record includes query term', function() {",
													"        pm.expect(firstAttributes.id).to.not.eql(pm.environment.get(\"name-sort-id1\"));",
													"    });",
													"",
													"} else {",
													"    console.log(\"Sample Titles Query with paging returned 0 results\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles no parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6f562a8-86ca-4c03-9f90-b6b1680bd5d9",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73102646-9cb4-4aed-abf5-fe5ba7c474f7",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entry\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Value of required parameter filter[name], filter[isxn], filter[subject] or filter[publisher] is missing.\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[name]=",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[name]",
													"value": ""
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles empty query with sort only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "213a9dd2-d3b4-4df9-bf3f-396242a81c0f",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"All of filter[name], filter[isxn], filter[subject] and filter[publisher] cannot be missing.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles filter[isxn] &filter[name] conflicting filter parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23a2d1bc-3fc3-44b7-b16c-39978805fe68",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Conflicting filter parameters\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?filter[isxn]=99&filter[name]=american",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "filter[isxn]",
													"value": "99"
												},
												{
													"key": "filter[name]",
													"value": "american"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid too large",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "128df029-200f-4b3e-af8c-70653e68064d",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"2147483648\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=2147483648&filter[name]=american&sort=name",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "2147483648"
												},
												{
													"key": "filter[name]",
													"value": "american"
												},
												{
													"key": "sort",
													"value": "name"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88f604bb-acb4-48b0-9007-82c9415753c5",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"// Issue with error response terminology https://issues.folio.org/browse/UIEH-464",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"\\n 'page' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 1\");",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=-1&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles paging invalid non numeric",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05b44e5f-0b04-4e3f-9250-b8dfb2fd3b50",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have body with error message\", function () {",
													"    pm.expect(pm.response.text()).to.be.eq('For input string: \"a\"');",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles?page=a&filter[name]=academic",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											],
											"query": [
												{
													"key": "page",
													"value": "a"
												},
												{
													"key": "filter[name]",
													"value": "academic"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET title by  titleid",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles GET specific title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3270e35d-fe35-48ac-bcec-8cf721433ed4",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\");",
													"});",
													"",
													"pm.test('title with requested id is returned', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "183890ea-c4e7-432e-9b1b-8fee2bc8dd8f",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.data.length).to.be.above(0);",
													"});",
													"",
													"if (relationships.resources.data.length > 0) {",
													"    pm.test(\"data array contains the default entries\", function () {",
													"        pm.expect(relationships.resources.data[0].type).to.eql(\"resources\");",
													"    });",
													"} else {",
													"      console.log(\"Sample Titles GET byId including resources returned 0 relationships\");",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=resources",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "resources"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles GET specific title and include resources bad value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "276577e6-cded-4a32-9797-6086ba1fa369",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\")",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"isPeerReviewed\", \"contributors\");",
													"});",
													"",
													"pm.test('title id is as requested', function() {",
													"    pm.expect(firstRecord.id).to.eql(pm.environment.get(\"name-sort-id1\"));",
													"});",
													"",
													"let relationships = firstRecord.relationships;",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(relationships).to.be.an('object');",
													"    pm.expect(relationships).to.include.all.keys(\"resources\");",
													"});",
													"",
													"",
													"pm.test(\"data array contains the default entries\", function () {",
													"    pm.expect(relationships.resources.meta.included).to.be.equal(false);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/{{name-sort-id1}}?include=badValue",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"{{name-sort-id1}}"
											],
											"query": [
												{
													"key": "include",
													"value": "badValue"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles GET non existing title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d50afa21-71aa-4a20-9954-920d1c5f1bb1",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array contains 1 entries\", function () {",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Title not found\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POST title",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/titles POST valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1013b68d-56e8-4139-8343-66034e0e2a4d",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Get the first record",
													"let firstRecord = jsonData.data;",
													"    ",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in a record', function() {",
													"    pm.expect(firstRecord).to.be.an('object');",
													"    pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\",\"relationships\");",
													"});",
													"",
													"// Test that attributes have the expected keys",
													"let firstAttributes = firstRecord.attributes;",
													"pm.test('expected attributes are present in a record', function() {",
													"    pm.expect(firstAttributes).to.be.an('object');",
													"    pm.expect(firstAttributes).to.include.all.keys(\"name\", \"publisherName\", \"isTitleCustom\",\"subjects\", \"identifiers\", \"publicationType\", \"edition\", \"description\", \"isPeerReviewed\", \"contributors\");",
													"});",
													"",
													"pm.test(\"data type is as expected\", function () {",
													"    pm.expect(firstRecord.type).eq(\"titles\");",
													"});",
													"",
													"pm.test(\"title name is as expected\", function () {",
													"    pm.expect(firstAttributes.name).eq(\"custom title-\" + pm.variables.get(\"custom-title-uuid\"));",
													"});",
													"",
													"pm.test(\"publisher name is as expected\", function () {",
													"    pm.expect(firstAttributes.publisherName).eq(\"test publisher\");",
													"});",
													"",
													"pm.test(\"isTitleCustom is true\", function () {",
													"    pm.expect(firstAttributes.isTitleCustom).eq(true);",
													"});",
													"",
													"pm.test(\"subjects are as expected\", function () {",
													"   pm.expect(firstAttributes.subjects).to.be.an('array').that.is.empty;",
													"});",
													"",
													"pm.test(\"identifiers are as expected\", function () {",
													"   pm.expect(firstAttributes.identifiers).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.identifiers.length).to.eql(1);",
													"   pm.expect(firstAttributes.identifiers[0].id).to.eql(\"11-2222-3333\");",
													"   pm.expect(firstAttributes.identifiers[0].type).to.eql(\"ISSN\");",
													"   pm.expect(firstAttributes.identifiers[0].subtype).to.eql(\"Online\");",
													"});",
													"",
													"pm.test(\"publicationType is as expected\", function () {",
													"   pm.expect(firstAttributes.publicationType).to.eql(\"Database\");",
													"});",
													"",
													"pm.test(\"edition is as expected\", function () {",
													"   pm.expect(firstAttributes.edition).to.eql(\"test edition\");",
													"});",
													"",
													"pm.test(\"description is as expected\", function () {",
													"   pm.expect(firstAttributes.description).to.eql(\"test description\");",
													"});",
													"",
													"pm.test(\"isPeerReviewed is as expected\", function () {",
													"   pm.expect(firstAttributes.isPeerReviewed).to.eql(true);",
													"});",
													"",
													"pm.test(\"contributors are as expected\", function () {",
													"   pm.expect(firstAttributes.contributors).to.be.an('array').that.is.not.empty;",
													"   pm.expect(firstAttributes.contributors.length).to.eql(2);",
													"   pm.expect(firstAttributes.contributors[0].type.toLowerCase()).to.eql(\"author\");",
													"   pm.expect(firstAttributes.contributors[0].contributor).to.eql(\"smith, john\");",
													"   pm.expect(firstAttributes.contributors[1].type.toLowerCase()).to.eql(\"illustrator\");",
													"   pm.expect(firstAttributes.contributors[1].contributor).to.eql(\"smith, ralph\");",
													"});",
													"",
													"// Store custom title id for future reference in other tests/cleanup",
													"pm.environment.set(\"custom-titleid\", jsonData.data.id);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97833a0d-7005-4cd7-bed1-a0c344bd4178",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"test edition\",\n      \"publisherName\": \"test publisher\",\n      \"publicationType\": \"Database\",\n      \"isPeerReviewed\": true,\n      \"contributors\": [\n        {\n        \"type\":\"author\",\n        \"contributor\":\"smith, john\"\n        },\n        {\n        \"type\":\"illustrator\",\n        \"contributor\":\"smith, ralph\"\n        }\n      ],\n      \"identifiers\": [\n        {\n        \"id\":\"11-2222-3333\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }      \n      ],\n      \"description\": \"test description\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/titles POST provider not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d35a77c-a1d8-4da9-8456-59a4d0c9924a",
												"exec": [
													"pm.test(\"Status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.notFound;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Provider not found\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"1-1\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST duplicate title",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb331868-000c-41dd-b46b-344f966fe15a",
												"exec": [
													"",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.badRequest;",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Custom Title with the provided name already exists\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing title name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "477b1940-5ac4-4b24-abe7-eeb5d36016ca",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2b36c6f-bc7d-47ae-9344-92c064c66d6d",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Title Name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Title Name is too long (maximum is 400 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "738d90ee-4d4c-4d99-8175-bf1d34ff9d3b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-title-name\", toRepeat.repeat(401));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"{{long-title-name}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18562801-31c0-43d5-8b4d-ac212ec7b23f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST non existing publication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "667a70dd-fa5a-4b12-bc74-5921146cbb19",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1f794335-7350-4a92-b7b5-96c48b771674",
												"exec": [
													"var uuid = require('uuid');",
													"pm.variables.set(\"custom-title-pubtype-uuid\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"custom title-{{custom-title-pubtype-uuid}}\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"badpubtype\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0bb3470-357f-4091-bd65-4ae98776525f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.expect(pm.response.reason()).to.equal(\"Unprocessable Entity\")",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Missing resource\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  }\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing package id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a72da0dc-901f-4dee-88ca-082e91694c6f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST cannot add custom title to managed resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2cc4ffd-4a61-46e1-a804-7411520c5c45",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Cannot create custom title because Customer is not the Provider\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{managed-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long publisher name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34cb3c66-bfc6-421e-8980-7b26df489dae",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Publisher name\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Publisher name is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "804f6479-87c9-4974-bc53-03f4ed31fcda",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-publisher-name\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"{{long-publisher-name}}\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid isPeerReviewed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0efc105-bc87-4095-96e4-3338f8e9b9bd",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cfef79da-57f6-44a2-b37b-02c9f8a49c05",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": \"badvalue\",\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid edition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fe9ada8-6ba4-4ef5-8ad2-d4e90736f5c0",
												"exec": [
													"",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Edition\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Edition is too long (maximum is 250 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c81dba8-4d5a-4494-871d-80120865624b",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-edition\", toRepeat.repeat(251));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"{{long-edition}}\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c7eeba6-0fe4-44d4-b59e-c755027f1f7f",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Description\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"Description is too long (maximum is 1500 characters)\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "42d7a5ff-16e6-4425-89a9-7f1603c75b4a",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-description\", toRepeat.repeat(1501));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n        \n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"{{long-description}}\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid contributor type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f4015b7-36d0-411d-8e41-0fc55458d3c0",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Parameter contributorsList.contributorType must be one of (author, editor, illustrator).\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "45601148-2418-415b-8242-01f88ba4e2ee",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n       {\n        \"type\":\"invalid type\",\n        \"contributor\":\"smith, john\"\n        }\n      ],\n      \"identifiers\": [\n        \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST long identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1aad4c8b-fb38-49f7-9615-cb8842b799d9",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function() {",
													"    tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function() {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function() {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function() {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function() {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"    pm.expect(jsonData.errors[0].detail).to.equal(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "083165f5-6ca5-41aa-af1b-f6523f42799d",
												"exec": [
													"let toRepeat = \"0\";",
													"pm.variables.set(\"long-identifier\", toRepeat.repeat(21));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\":\"{{long-identifier}}\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST missing identifier id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92bf09e7-da92-43bc-a263-481569e96bbb",
												"exec": [
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/vnd.api+json\");",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(jsonData, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//verify headers",
													"pm.test(\"'Content-Type'header is present and has 'application/vnd.api+json' value\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
													"});",
													"",
													"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
													"    pm.response.to.have.header(\"Transfer-Encoding\");",
													"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													"",
													"pm.test(\"Errors array is as expected\", function () {",
													"    pm.expect(jsonData.errors).to.be.an('array').that.is.not.empty;",
													"    pm.expect(jsonData.errors.length).to.eql(1);",
													"    pm.expect(jsonData.errors[0].title).to.equal(\"Invalid Identifier id\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c3f551f-df24-43a9-92dc-4f7e0386f4ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"type\":\"ISSN\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44ca0f42-3739-4491-89d5-889b73115164",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c3f551f-df24-43a9-92dc-4f7e0386f4ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"invalidtype\",\n        \"subtype\":\"Online\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								},
								{
									"name": "/titles POST invalid identifier subtype",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7d72877-8b9a-4b28-af26-50f3ebb07fbb",
												"exec": [
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c3f551f-df24-43a9-92dc-4f7e0386f4ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.api+json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n  \"data\": {\n    \"type\": \"titles\",\n    \"attributes\": {\n      \"name\": \"Test Title\",\n      \"edition\": \"\",\n      \"publisherName\": \"\",\n      \"publicationType\": \"Unspecified\",\n      \"isPeerReviewed\": false,\n      \"contributors\": [\n      ],\n      \"identifiers\": [\n      {\n        \"id\": \"11-22-33\",\n        \"type\":\"ISSN\",\n        \"subtype\":\"invalidsubtype\"\n        }              \n      ],\n      \"description\": \"\"\n    }\n  },\n  \"included\": [\n    {\n      \"type\": \"resource\",\n      \"attributes\": {\n        \"packageId\": \"{{custom-packageid}}\"\n      }\n    }\n  ]\n}\n        "
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "configuration",
			"item": [
				{
					"name": "GET Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "Delete Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1999127b-87cf-45b8-a245-be854e138af4",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-url-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1999127b-87cf-45b8-a245-be854e138af4",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-key-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1999127b-87cf-45b8-a245-be854e138af4",
														"exec": [
															"pm.test(\"Status is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries",
														"{{rm-api-customer-id}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Run tests",
									"item": [
										{
											"name": "GET Configuration - when configuration is not configured",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
														"exec": [
															"//Check that status is 200",
															"pm.test(\"Status is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response must have a json body\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.response.to.be.withBody;",
															"    pm.response.to.be.json; ",
															"});",
															"",
															"let response = pm.response.json();",
															"",
															"pm.test(\"Validate schema\", function () {",
															"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
															"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
															"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
															"});",
															"",
															"//Test that object has the expected keys",
															"pm.test('expected keys are present in response object', function() {",
															"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
															"});",
															"",
															"//Test that id is configuration",
															"pm.test('id is configuration', function(){",
															"    pm.expect(response.data.id).eq('configuration');",
															"});    ",
															"",
															"//Test that type is configurations",
															"pm.test('type is configurations', function(){",
															"    pm.expect(response.data.type).eq('configurations');",
															"});",
															"    ",
															"//Test that default value for rmapiBaseUrl is returned",
															"pm.test('rmapiBaseUrl is returned with default value', function(){",
															"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(\"https://sandbox.ebsco.io\");",
															"});",
															"",
															"//Test apiKey is missing when it is not configured",
															"let apiKey = \"****************************************\";",
															"pm.test('apiKey is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"apiKey\");",
															"});",
															"",
															"//Test that customerId is missing when it is not configured",
															"let custid = pm.environment.get(\"rm-api-custid-value\");",
															"pm.test('customer id is missing', function(){",
															"    pm.expect(response.data.attributes).to.not.include.key(\"custid\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"eholdings",
														"configuration"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Reset Configuration",
									"item": [
										{
											"name": "/configurations/entries - POST RM API URL",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23f25d7b-cbf3-4053-9fc3-35f06a3fffcc",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-url-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-url-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.url\",\r\n    \"description\": \"EBSCO RM-API URL\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rm-api-url-value}}\"\r\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API apiKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "732d3a7c-3a6f-4f9b-b904-9cc6887ccdc3",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-key-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-key-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.apiKey\",\r\n    \"description\": \"EBSCO RM-API API Key\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rm-api-key-value}}\"\r\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										},
										{
											"name": "/configurations/entries - POST RM API api_customer id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "23f25d7b-cbf3-4053-9fc3-35f06a3fffcc",
														"exec": [
															"",
															"pm.test(\"Success test on json response\", function() {",
															"    pm.response.to.be.json;",
															"});",
															"",
															"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type header has expected value\", function () {",
															"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
															"});",
															"",
															"//Store rm-api-customer-id temporarily for clean-up purpose",
															"let body = JSON.parse(responseBody);",
															"pm.environment.set(\"rm-api-customer-id\", body.id);",
															"",
															"const invalidateCacheRequest = {",
															"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
															"  method: 'DELETE',",
															"  header: {",
															"      'Content-Type' : 'application/json',",
															"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
															"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
															"  }",
															"};",
															"",
															"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
															"    if (err) { console.log(err); }",
															"    pm.test('Response must be valid', function () {",
															"        pm.expect(err).to.equal(null);",
															"        pm.expect(res).to.have.property('code', 204);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.customerId\",\r\n    \"description\": \"EBSCO RM-API Customer ID\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rm-api-custid-value}}\"\r\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													]
												},
												"description": "Create customer id as part of configuration"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PUT Configuration",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "PUT Configuration - when configuration is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is configuration",
													"pm.test('id is configuration', function(){",
													"    pm.expect(response.data.id).eq('configuration');",
													"});    ",
													"",
													"//Test that type is configurations",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('configurations');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.all.keys(\"customerId\", \"apiKey\", \"rmapiBaseUrl\");",
													"});",
													"//Test that customerId is as expected",
													"let custid = pm.environment.get(\"rm-api-custid-value\");",
													"pm.test('customer id is as configured', function(){",
													"    pm.expect(response.data.attributes.customerId).eq(custid);",
													"});",
													"",
													"//Test that apiKey is hidden as 40 (*) as expected",
													"let apiKey = \"****************************************\";",
													"pm.test('apiKey is as configured', function(){",
													"    pm.expect(response.data.attributes.apiKey).eq(apiKey);",
													"});",
													"",
													"//Test that rmapiBaseUrl is as expected",
													"let rmapiBaseUrl = pm.environment.get(\"rm-api-url-value\");",
													"pm.test('rmapiBaseUrl is as configured', function(){",
													"    pm.expect(response.data.attributes.rmapiBaseUrl).eq(rmapiBaseUrl);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.api+json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get RM API Url id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-url-id\", jsonData.configs[0].id);",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API customerId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cf60b97-d5e9-4028-86ff-9b20ecc32dba",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-customer-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								},
								{
									"name": "Get RM API apiKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30b0b57f-a25a-41b2-9390-f1e72c241b4c",
												"exec": [
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must be valid and have a body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.environment.set(\"rm-api-key-id\", jsonData.configs[0].id);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
												}
											]
										},
										"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT Configuration - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"not a customer id\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when api key is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('KB API Credentials are invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"not an apikey\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is invalid');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"not a url\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when url is empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when all fields are empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Url is empty');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"\",\n            \"apiKey\": \"\",\n            \"rmapiBaseUrl\": \"\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when fields are missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 422",
													"pm.test(\"Status is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"// The schema does not validate for PUT request",
													"// Check after https://issues.folio.org/browse/UIEH-575 is addressed",
													"pm.test.skip(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Ensure that errors array is not empty",
													"if(response.errors) {",
													"        pm.test('Ensure that errors array is not empty', function() {",
													"        pm.expect(response.errors).to.be.an('array').that.is.not.empty;",
													"    });",
													"",
													"    //Test that we get expected error message",
													"    pm.test.skip('Ensure that we get expected error message', function() {",
													"        pm.expect(response.errors[0].title).to.eq('Configuration is invalid');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\"\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT Configuration - when json is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47d2cb7d-710c-44f8-9770-0921df8bb19d",
												"exec": [
													"//Check that status is 400",
													"pm.test(\"Status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//We can check for appropriate error message after https://issues.folio.org/browse/UIEH-482 is fixed."
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.api+json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"data\": {\n        \"id\": \"configuration\",\n        \"type\": \"configurations\",\n        \"attributes\": {\n            \"customerId\": \"{{rm-api-custid-value}}\",\n            \"apiKey\": \"{{rm-api-key-value}}\",\n            \"rmapiBaseUrl\": \"{{rm-api-url-value}}\"\n        },\n    }\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/configuration",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"configuration"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "status",
			"item": [
				{
					"name": "GET status",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "GET Status - when status is valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c49524b-47f1-4914-8143-aa62dff4ed81",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is true', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(true);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "PUT invalid RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.url\",\r\n    \"description\": \"EBSCO RM-API URL\",\r\n    \"enabled\": true,\r\n    \"value\": \"not a url\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when api url is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c49524b-47f1-4914-8143-aa62dff4ed81",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API URL",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.url\",\r\n    \"description\": \"EBSCO RM-API URL\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rm-api-url-value}}\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-url-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.customerId\",\r\n    \"description\": \"EBSCO RM-API Customer ID\",\r\n    \"enabled\": true,\r\n    \"value\": \"invalid id\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when customer id is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c49524b-47f1-4914-8143-aa62dff4ed81",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API customer Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.customerId\",\r\n    \"description\": \"EBSCO RM-API Customer ID\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rm-api-custid-value}}\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-customer-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT invalid RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.apiKey\",\r\n    \"description\": \"EBSCO RM-API API Key\",\r\n    \"enabled\": true,\r\n    \"value\": \"invalid api key\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Status - when apiKey is invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c49524b-47f1-4914-8143-aa62dff4ed81",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response must have a json body\", function () {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json; ",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Validate response against json api schema",
													"pm.test(\"Validate schema\", function () {",
													"     tv4.addSchema(\"JSONAPI.json\", JSON.parse(pm.variables.get(\"schema_jsonapi_content\")));",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_jsonapi_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
													"});",
													"",
													"//Test that id is status",
													"pm.test('id is status', function(){",
													"    pm.expect(response.data.id).eq('status');",
													"});    ",
													"",
													"//Test that type is statuses",
													"pm.test('type is configurations', function(){",
													"    pm.expect(response.data.type).eq('statuses');",
													"});",
													"    ",
													"//Test that data.attributes has expected attributes",
													"pm.test('expected data.attributes are present', function() {",
													"    pm.expect(response.data.attributes).to.be.an('object');",
													"    pm.expect(response.data.attributes).to.include.key(\"isConfigurationValid\");",
													"});",
													"",
													"//Test that data.attributes.isConfigurationValid is true",
													"pm.test('isConfigurationValid is false', function(){",
													"    pm.expect(response.data.attributes.isConfigurationValid).eq(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-tenant",
												"type": "text",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/status",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"eholdings",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Reset RM API apiKey",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1999127b-87cf-45b8-a245-be854e138af4",
												"exec": [
													"pm.test(\"Status is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"const invalidateCacheRequest = {",
													"  url:  pm.variables.get(\"protocol\") + \"://\" + pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/eholdings/cache',",
													"  method: 'DELETE',",
													"  header: {",
													"      'Content-Type' : 'application/json',",
													"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
													"      'X-Okapi-Token' : pm.variables.get(\"xokapitoken\")",
													"  }",
													"};",
													"",
													"pm.sendRequest(invalidateCacheRequest, function (err, res) {",
													"    if (err) { console.log(err); }",
													"    pm.test('Response must be valid', function () {",
													"        pm.expect(err).to.equal(null);",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.apiKey\",\r\n    \"description\": \"EBSCO RM-API API Key\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rm-api-key-value}}\"\r\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries",
												"{{rm-api-key-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "proxy",
			"item": [
				{
					"name": "GET proxy-types",
					"item": [
						{
							"name": "Get proxies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07dd7f7f-eede-404c-a0d5-4a9ca000802b",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Check that content-type is application/vnd.api+json",
											"pm.test(\"'Content-Type' is application/vnd.api+json\", function() { ",
											"      pm.response.to.have.header(\"Content-Type\");",
											"      pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"//Check data array is of type providers if not null",
											"if(response.data) {",
											"    let len = response.data.length;",
											"    if(len > 0){",
											"        //Get first record",
											"        let firstRecord = response.data[0];",
											"        //Test that type is proxyType",
											"        pm.expect(firstRecord.type).eq('proxyTypes');",
											"",
											"        //Test that object has the expected keys",
											"        pm.expect(firstRecord).to.include.all.keys(\"id\", \"type\", \"attributes\");",
											"         ",
											"         //Test that data.attributes has expected attributes",
											"        pm.test('expected data.attributes are present', function() {",
											"        pm.expect(firstRecord.attributes).to.be.an('object');",
											"        pm.expect(firstRecord.attributes).to.include.all.keys(\"id\", \"name\", \"urlMask\");",
											"        });",
											"    } else {",
											"        console.log(\"No Proxy types exist\");",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/proxy-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"proxy-types"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6466aa35-b5d3-4f29-ab0a-7d7f13e0c1c4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd884adc-9e64-4147-89ee-5ee0b9cfbfb9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET root-proxy",
					"item": [
						{
							"name": "GET root proxy when root proxy is valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43029251-835b-48f4-b8bd-63fbd225b4e6",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"//Check that status is 200",
											"pm.test(\"Status is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must have a json body\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json; ",
											"});",
											"",
											"let response = pm.response.json();",
											"",
											"",
											"//Test that object has the expected keys",
											"pm.test('expected keys are present in response object', function() {",
											"    pm.expect(response.data).to.include.all.keys(\"id\", \"type\", \"attributes\");",
											"});",
											"",
											"//Test that id is root-proxy",
											"pm.test('id is root-proxy', function(){",
											"    pm.expect(response.data.id).eq('root-proxy');",
											"});    ",
											"",
											"//Test that type is rootProxies",
											"pm.test('type is rootProxies', function(){",
											"    pm.expect(response.data.type).eq('rootProxies');",
											"});",
											"    ",
											"//Test that data.attributes has expected attributes",
											"pm.test('expected data.attributes are present', function() {",
											"    pm.expect(response.data.attributes).to.be.an('object');",
											"    pm.expect(response.data.attributes).to.include.key(\"id\");",
											"    pm.expect(response.data.attributes).to.include.key(\"proxyTypeId\");",
											"});",
											"",
											"//Test that data.attributes.id is root-proxy",
											"pm.test('expected data.attributes.id is root-proxy', function(){",
											"    pm.expect(response.data.attributes.id).eq('root-proxy');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/root-proxy",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"eholdings",
										"root-proxy"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2eb20431-8c76-4337-9d9d-b920f488aea8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5e9fabf1-5cd7-4dca-a76c-0f70664c2e57",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "tear-down titles test",
			"item": [
				{
					"name": "Delete Custom Package",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "967dd204-5352-4475-940d-0d16f2b81eee",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "67c6fa5e-953a-4222-bc89-1e86fb2900f4",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-packageid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"eholdings",
								"packages",
								"{{custom-packageid}}"
							]
						},
						"description": "Delete custom package which was set up for testing. This will also delete any custom titles that have been created as part of the custom package"
					},
					"response": []
				}
			],
			"description": "Deletes newly created custom package which is used for custom titles testing. Deleting a custom package deletes all custom titles that are contained within the package ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e2aff0ec-6089-4e7d-b3bf-7803ac05390d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "80be542a-4821-49a5-b810-4b30cfd2d93a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "tear-down configuration",
			"item": [
				{
					"name": "Check if configuration RM API url exists and should delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebc0ca22-5260-42d7-b578-c8ff1a2fe889",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"let apiUrlExists = pm.environment.get(\"apiUrlExists\");",
									"if((jsonData !==null && jsonData.configs.length >0) && apiUrlExists) {",
									"    //Api url previously existed -- DO NOT DELETE (end execution)",
									"    postman.setNextRequest(\"Check if configuration RM API customerid exists and should delete\");",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e850480-32fc-4384-92fb-1faf179e993b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/configurations/entries - Clean-up RM API api_credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45e87c73-961f-4262-973c-e6b5d8acac73",
								"type": "text/javascript",
								"exec": [
									"//Clean-up RM API Key configuration created during POST",
									"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{rm-api-url-id}"
							]
						},
						"description": "Clean-up RM-API Key configuration"
					},
					"response": []
				},
				{
					"name": "Check if configuration RM API customerid exists and should delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7886c216-80c5-4093-8f4e-96d01b2cc90e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"let customerIdExists = pm.environment.get(\"customerIdExists\");",
									"if((jsonData !==null && jsonData.configs.length >0) && customerIdExists) {",
									"    //customer id previously existed -- DO NOT DELETE (end execution)",
									"    postman.setNextRequest(\"Reset Variables\");",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e850480-32fc-4384-92fb-1faf179e993b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/configurations/entries - Clean-up RM API customer id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45e87c73-961f-4262-973c-e6b5d8acac73",
								"type": "text/javascript",
								"exec": [
									"//Clean-up RM API Key configuration created during POST",
									"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{rm-api-customer-id}}"
							]
						},
						"description": "Clean-up RM-API Key configuration"
					},
					"response": []
				},
				{
					"name": "Check if configuration RM API apiKey exists and should delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f89139b1-5bc1-47f2-82e4-7dcaf0513b1f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"let apiKeyExists = pm.environment.get(\"apiKeyExists\");",
									"if((jsonData !==null && jsonData.configs.length >0) && apiKeyExists) {",
									"    //Api key previously existed -- DO NOT DELETE (end execution)",
									"    postman.setNextRequest(\"Reset Variables\");",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e850480-32fc-4384-92fb-1faf179e993b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/configurations/entries - Clean-up RM API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45e87c73-961f-4262-973c-e6b5d8acac73",
								"type": "text/javascript",
								"exec": [
									"//Clean-up RM API Key configuration created during POST",
									"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{rm-api-key-id}}"
							]
						},
						"description": "Clean-up RM-API Key configuration"
					},
					"response": []
				},
				{
					"name": "Reset Variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93ea1def-f5f2-4d98-9571-99589b488730",
								"exec": [
									"//placeholder Reset Variables",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e4453a6-7061-4d96-90e2-f2eac533c754",
								"exec": [
									"// Reset all environment level variables that may have been setup in the tests",
									"pm.environment.unset(\"schema_jsonapi_content\");",
									"pm.environment.unset(\"apiUrlExists\");",
									"pm.environment.unset(\"rm-api-url-id\");",
									"pm.environment.unset(\"customerIdExists\");",
									"pm.environment.unset(\"rm-api-customer-id\");",
									"pm.environment.unset(\"apiKeyExists\");",
									"pm.environment.unset(\"rm-api-key-id\");",
									"pm.environment.unset(\"custom-providerid\");",
									"pm.environment.unset(\"custom-packageid\");",
									"pm.environment.unset(\"name-sort-id1\");",
									"pm.environment.unset(\"managed-packageid\");",
									"pm.environment.unset(\"custom-package-id-created-in-post\");",
									"pm.environment.unset(\"custom-package-id-created-in-post-again\");",
									"pm.environment.unset(\"custom-titlename-for-resource-duplicate\");",
									"pm.environment.unset(\"custom-packageid-for-resource\");",
									"pm.environment.unset(\"managed-titleid\");",
									"pm.environment.unset(\"managed-titlename\");",
									"pm.environment.unset(\"managed-title-package-resourceid\");",
									"pm.environment.unset(\"managed-resourceid\");",
									"pm.environment.unset(\"custom-resourceid\");",
									"",
									"pm.globals.unset(\"custom-package-name-that-exists\");",
									"",
									"pm.variables.unset(\"package-uuid\");",
									"pm.variables.unset(\"custom-title-uuid\");",
									"pm.variables.unset(\"custom-title-for-resource-uuid\");",
									"pm.variables.unset(\"custom-title-for-resource-uuid2\");",
									"pm.variables.unset(\"custom-package-for-resource-uuid\");",
									"pm.variables.unset(\"custom-title-pubtype-uuid\");",
									"pm.variables.unset(\"long-title-name\");",
									"pm.variables.unset(\"custom-title-pubtype-uuid\");",
									"pm.variables.unset(\"long-publisher-name\");",
									"pm.variables.unset(\"long-edition\");",
									"pm.variables.unset(\"long-description\");",
									"pm.variables.unset(\"long-identifier\");",
									"pm.variables.unset(\"packagename-pageone\");",
									"",
									"pm.variables.unset(\"rm-api-custid-value\");",
									"pm.variables.unset(\"rm-api-url-value\");",
									"pm.variables.unset(\"rm-api-key-value\");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==KB_EBSCO and configName==api_credentials and code==kb.ebsco.credentials)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==KB_EBSCO and configName==api_credentials and code==kb.ebsco.credentials)"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1027eea9-68c4-48eb-8193-b4c405e8f182",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "352349d2-1dae-47f1-b9bd-bccbc161503d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "tear-down permission",
			"item": [
				{
					"name": "Delete permission if it was added",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f89139b1-5bc1-47f2-82e4-7dcaf0513b1f",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"if(!pm.variables.get(\"permissionExists\")) {",
									"    jsonData.permissions = jsonData.permissions.filter(permission => (permission !== \"kb-ebsco.all\"));",
									"",
									"    const permissionsPutRequest = {",
									"      url:  pm.variables.get(\"protocol\") + \"://\" +  pm.variables.get(\"url\") + \":\" + pm.variables.get(\"okapiport\") + '/perms/users/' + jsonData.id,",
									"      method: 'PUT',",
									"      header: {",
									"        'Content-Type' : 'application/json',",
									"        'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\"),",
									"        'X-Okapi-Token' : pm.variables.get(\"X-Okapi-Token\")",
									"          ",
									"      },",
									"      body: {",
									"        mode: 'application/json',",
									"        raw: JSON.stringify(jsonData)",
									"      }",
									"    };",
									"    ",
									"    pm.sendRequest(permissionsPutRequest, function (err, res) {",
									"      if (err) { console.log(err); }",
									"      pm.test('Response must be valid', function () {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res).to.have.property('code', 200);",
									"        pm.expect(res).to.have.property('status', 'OK');",
									"      });",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e850480-32fc-4384-92fb-1faf179e993b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{userId}}?indexField=userId",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{userId}}"
							],
							"query": [
								{
									"key": "indexField",
									"value": "userId"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tear-down packages",
			"item": [
				{
					"name": "Delete custom package created in post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "967dd204-5352-4475-940d-0d16f2b81eee",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "67c6fa5e-953a-4222-bc89-1e86fb2900f4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/eholdings/packages/{{custom-package-id-created-in-post-valid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"eholdings",
								"packages",
								"{{custom-package-id-created-in-post-valid}}"
							]
						},
						"description": "Delete custom package created in post."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b47a327f-3526-4755-976f-483cadd0aeed",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "69ec6322-e5c9-41a7-9a75-b38840d01fac",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "21b4e28c-2132-4a4a-96fa-0fe8a64acc4c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6ef3c15a-a770-4829-a38a-ec45d1e6b7fc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "5fa84084-eed6-46d0-aaa7-93654a22f87b",
			"key": "custid",
			"value": "apidvgvmt",
			"type": "string"
		},
		{
			"id": "35cf7fc4-6082-4cdb-b3eb-0a5bc3ebaae4",
			"key": "packageId",
			"value": "583-4345",
			"type": "string"
		},
		{
			"id": "4424a73a-083c-40b1-8e10-85a598e3fbfd",
			"key": "rmapi_api_key",
			"value": "",
			"type": "string"
		},
		{
			"id": "88088415-18a0-46eb-83de-5877f347b576",
			"key": "rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		},
		{
			"id": "0726962b-937b-4f18-bc81-d7bbd52126ee",
			"key": "default_rmapi_url",
			"value": "https://sandbox.ebsco.io",
			"type": "string"
		}
	]
}