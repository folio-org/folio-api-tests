{
	"info": {
		"_postman_id": "477a601c-dee6-4ca8-9703-e5cfb0717e76",
		"name": "edge-rtac",
		"description": "Tests for edge-rtac",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Setup",
			"item": [
				{
					"name": "/authn/login (OKAPI)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd1890b6-57e9-4b7b-bb50-dc5bb7de6e94",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = postman.getResponseHeader(\"x-okapi-token\");",
									"pm.globals.set(\"xokapitoken\", token);",
									"",
									"let baseURI = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\");",
									"let endpointBooks = baseURI + \"/instance-types?query=(name=Books)\";",
									"let endpointLocations = baseURI + \"/locations\";",
									"let endpointBook = baseURI + \"/material-types?query=(name=book)\";",
									"let endpointGroups = baseURI + \"/groups\";",
									"let endpointCanCirculate = baseURI + \"/loan-types?query=(name=can circulate)\";",
									"",
									"let testData = {",
									"    user: {",
									"    \tusername: \"rwegener\",",
									"    \tid: \"bde27422-efe1-4327-b5af-acbad05cd24f\",",
									"    \tpersonal: {",
									"    \t\tfirstName: \"Rudolph\",",
									"    \t\tlastName: \"Wegener\"",
									"    \t}",
									"    },",
									"\tcase1: {",
									"\t\tdescription: \"single holding, single item\",",
									"\t\tinstance: {",
									"\t\t    id: \"7dc01071-30ff-496d-9f56-bb875e7965d6\",",
									"\t\t\ttitle: \"The Man in the High Castle\",",
									"\t\t\tsource: \"Local\"",
									"\t\t},",
									"\t\tholdings: {",
									"\t\t\tA: {",
									"\t\t\t\tid: \"8163b604-2086-4922-bb2c-94b7779d6806\",",
									"\t\t\t\tcallNumber: \"DK4315.Z9 D44 2012\"",
									"\t\t\t}",
									"\t\t},",
									"\t\titems: {",
									"\t\t\tA1: {",
									"\t\t\t    id: \"fb4a7fcb-7bb5-4090-96dd-010d07301757\",",
									"\t\t\t\tbarcode: \"978-7657572482\",",
									"\t\t\t\tstatus: {",
									"\t\t\t\t\tname: \"Available\"",
									"\t\t\t\t}",
									"\t\t\t}",
									"\t\t}",
									"\t},",
									"\tcase2: {",
									"\t\tdescription: \"multiple holdings, single item each\",",
									"\t\tinstance: {",
									"\t\t    id: \"409c9447-6446-47f7-b8f8-d3fcacbb883f\",",
									"\t\t\ttitle: \"Highrise\",",
									"\t\t\tsource: \"Local\"",
									"\t\t},",
									"\t\tholdings: {",
									"\t\t\tA: {",
									"\t\t\t\tid: \"382c5793-672d-4371-a112-3f4a9213e61f\",",
									"\t\t\t\tcallNumber: \"JH8675.Z1 D12 2001\"",
									"\t\t\t},",
									"\t\t\tB: {",
									"\t\t\t\tid: \"787275e6-e6e7-43e6-8a2f-f4d291383bc6\",",
									"\t\t\t\tcallNumber: \"JH8675.Z2 D12 2001\"",
									"\t\t\t}",
									"\t\t},",
									"\t\titems: {",
									"\t\t\tA1: {",
									"\t\t\t    id: \"23acfe79-5104-4e6e-808e-1c630186b360\",",
									"\t\t\t\tbarcode: \"978-1237572482\",",
									"\t\t\t\tstatus: {",
									"\t\t\t\t\tname: \"Available\"",
									"\t\t\t\t}",
									"\t\t\t},",
									"\t\t\tB1: {",
									"\t\t\t    id: \"f232c4f7-0627-4524-b312-c2a79adb0509\",",
									"\t\t\t\tbarcode: \"978-8736724821\",",
									"\t\t\t\tstatus: {",
									"\t\t\t\t\tname: \"Available\"",
									"\t\t\t\t}",
									"\t\t\t}\t\t\t",
									"\t\t},",
									"\t\tloans: {",
									"\t\t    A1: {",
									"\t\t        id: \"a613926e-a862-4860-bc06-9805ccb4213a\",",
									"                action: \"checkedout\",",
									"                status: {",
									"                    \"name\": \"Open\"",
									"                }",
									"\t\t    }",
									"\t\t}",
									"\t},",
									"\tcase3: {",
									"\t\tdescription: \"no holding, no item\",",
									"\t\tinstance: {",
									"\t\t    id: \"7c457e53-5d69-47f5-b946-a7dbc7c4d08c\",",
									"\t\t\ttitle: \"The Forever War\",",
									"\t\t\tsource: \"Local\"",
									"    \t},",
									"\t\tholdings: {},",
									"\t\titems: {}",
									"\t},",
									"\tcase4: {",
									"\t\tdescription: \"single holding, multiple items\",",
									"\t\tinstance: {",
									"\t\t    id: \"53763b23-aafa-461e-ba48-83f9ab24322b\",",
									"\t\t\ttitle: \"Breakfast of Champions\",",
									"\t\t\tsource: \"Local\"",
									"\t\t},",
									"\t\tholdings: {",
									"\t\t\tA: {",
									"\t\t\t\tid: \"f51869d4-b0d8-414c-a7ee-ee0dc30759fa\",",
									"\t\t\t\tcallNumber: \"UP5432.Z5 F11 1984\"",
									"\t\t\t}",
									"\t\t},",
									"\t\titems: {",
									"\t\t\tA1: {",
									"\t\t\t    id: \"1e92f48d-358f-4442-9779-157d10298486\",",
									"\t\t\t\tbarcode: \"978-9876543210\",",
									"\t\t\t\tstatus: {",
									"\t\t\t\t\tname: \"Available\"",
									"\t\t\t\t}",
									"\t\t\t},",
									"\t\t\tA2: {",
									"\t\t\t    id: \"4ddfc8a8-84f1-4220-a682-b9e5b5bafd2a\",",
									"\t\t\t\tbarcode: \"978-0123456789\",",
									"\t\t\t\tstatus: {",
									"\t\t\t\t\tname: \"Available\"",
									"\t\t\t\t}",
									"\t\t\t}",
									"\t\t}",
									"\t}",
									"};",
									"",
									"//get instance type",
									"pm.sendRequest({",
									"    url: endpointBooks,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\": tenant,",
									"         \"x-okapi-token\": token",
									"    }},",
									"    function (err, res) {",
									"        if (res.json().instanceTypes.length > 0) {",
									"            testData.case1.instance.instanceTypeId = res.json().instanceTypes[0].id;",
									"            testData.case2.instance.instanceTypeId = res.json().instanceTypes[0].id;",
									"            testData.case3.instance.instanceTypeId = res.json().instanceTypes[0].id;",
									"            testData.case4.instance.instanceTypeId = res.json().instanceTypes[0].id;",
									"            ",
									"            pm.globals.set(\"case1_instance\", JSON.stringify(testData.case1.instance, null, 2));",
									"            pm.globals.set(\"case2_instance\", JSON.stringify(testData.case2.instance, null, 2));",
									"            pm.globals.set(\"case3_instance\", JSON.stringify(testData.case3.instance, null, 2));",
									"            pm.globals.set(\"case4_instance\", JSON.stringify(testData.case4.instance, null, 2));",
									"        }",
									"\t\tpm.globals.set(\"testData\", testData);",
									"",
									"\t\t//get locationId",
									"\t\tpm.sendRequest({",
									"\t\t\turl: endpointLocations,",
									"\t\t\tmethod: \"GET\",",
									"\t\t\theader: {",
									"\t\t\t\t\"x-okapi-tenant\": tenant,",
									"\t\t\t\t\"x-okapi-token\": token",
									"\t\t\t}},",
									"\t\t\tfunction (err, res) {",
									"\t\t\t\tif (res.json().locations.length > 0) {",
									"\t\t\t\t\ttestData.case1.holdings.A.permanentLocationId = res.json().locations[0].id;",
									"\t\t\t\t\ttestData.case2.holdings.A.permanentLocationId = res.json().locations[0].id;",
									"\t\t\t\t\ttestData.case2.holdings.B.permanentLocationId = res.json().locations[0].id;",
									"\t\t\t\t\ttestData.case4.holdings.A.permanentLocationId = res.json().locations[0].id;",
									"\t\t\t\t\t",
									"\t\t\t\t\tpm.globals.set(\"location\", res.json().locations[0].name);",
									"\t\t\t\t\tpm.globals.set(\"case1_holdingA\", JSON.stringify(testData.case1.holdings.A, null, 2));",
									"\t\t\t\t\tpm.globals.set(\"case2_holdingA\", JSON.stringify(testData.case2.holdings.A, null, 2));",
									"\t\t\t\t\tpm.globals.set(\"case2_holdingB\", JSON.stringify(testData.case2.holdings.B, null, 2));",
									"\t\t\t\t\tpm.globals.set(\"case4_holdingA\", JSON.stringify(testData.case4.holdings.A, null, 2));",
									"\t\t\t\t}",
									"\t\t\t\tpm.globals.set(\"testData\", testData);",
									"\t",
									"\t\t\t\t//get material type",
									"\t\t\t\tpm.sendRequest({",
									"\t\t\t\t\turl: endpointBook,",
									"\t\t\t\t\tmethod: \"GET\",",
									"\t\t\t\t\theader: {",
									"\t\t\t\t\t\t \"x-okapi-tenant\": tenant,",
									"\t\t\t\t\t\t \"x-okapi-token\": token",
									"\t\t\t\t\t}},",
									"\t\t\t\t\tfunction (err, res) {",
									"\t\t\t\t\t\tif (res.json().mtypes.length > 0) {",
									"\t\t\t\t\t\t\ttestData.case1.items.A1.materialTypeId = res.json().mtypes[0].id;",
									"\t\t\t\t\t\t\ttestData.case2.items.A1.materialTypeId = res.json().mtypes[0].id;",
									"\t\t\t\t\t\t\ttestData.case2.items.B1.materialTypeId = res.json().mtypes[0].id;",
									"\t\t\t\t\t\t\ttestData.case4.items.A1.materialTypeId = res.json().mtypes[0].id;",
									"\t\t\t\t\t\t\ttestData.case4.items.A2.materialTypeId = res.json().mtypes[0].id;",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t\tpm.globals.set(\"testData\", testData);",
									"\t\t\t\t\t\t",
									"\t\t\t\t\t\t//get patron group",
									"        \t\t\t\tpm.sendRequest({",
									"        \t\t\t\t\turl: endpointGroups,",
									"        \t\t\t\t\tmethod: \"GET\",",
									"        \t\t\t\t\theader: {",
									"        \t\t\t\t\t\t \"x-okapi-tenant\": tenant,",
									"        \t\t\t\t\t\t \"x-okapi-token\": token",
									"        \t\t\t\t\t}},",
									"        \t\t\t\t\tfunction (err, res) {",
									"        \t\t\t\t\t\tif (res.json().usergroups.length > 0) {",
									"        \t\t\t\t\t\t\ttestData.user.patronGroup = res.json().usergroups[0].id;",
									"        \t\t\t\t\t\t}",
									"        \t\t\t\t\t\tpm.globals.set(\"testData\", testData);",
									"        \t\t\t\t\t\t",
									"        \t\t\t\t\t\t//get loan type",
									"        \t\t\t\t\t\tpm.sendRequest({",
									"        \t\t\t\t\t\t\turl: endpointCanCirculate,",
									"        \t\t\t\t\t\t\tmethod: \"GET\",",
									"        \t\t\t\t\t\t\theader: {",
									"        \t\t\t\t\t\t\t\t\"x-okapi-tenant\": tenant,",
									"        \t\t\t\t\t\t\t\t\"x-okapi-token\": token",
									"        \t\t\t\t\t\t\t}},",
									"        \t\t\t\t\t\t\tfunction (err, res) {",
									"        \t\t\t\t\t\t\t\tif (res.json().loantypes.length > 0) {",
									"        \t\t\t\t\t\t\t\t\ttestData.case1.items.A1.permanentLoanTypeId = res.json().loantypes[0].id;",
									"        \t\t\t\t\t\t\t\t\ttestData.case2.items.A1.permanentLoanTypeId = res.json().loantypes[0].id;",
									"        \t\t\t\t\t\t\t\t\ttestData.case2.items.B1.permanentLoanTypeId = res.json().loantypes[0].id;",
									"        \t\t\t\t\t\t\t\t\ttestData.case4.items.A1.permanentLoanTypeId = res.json().loantypes[0].id;",
									"        \t\t\t\t\t\t\t\t\ttestData.case4.items.A2.permanentLoanTypeId = res.json().loantypes[0].id;",
									"        \t\t\t\t\t\t\t\t}",
									"        \t\t\t\t\t\t\t\tpm.globals.set(\"testData\", testData);",
									"        ",
									"                                        pm.globals.set(\"user\", JSON.stringify(testData.user, null, 2));",
									"        \t\t\t\t\t\t\t\tpm.globals.set(\"case1_itemA1\", JSON.stringify(testData.case1.items.A1, null, 2));",
									"        \t\t\t\t\t\t\t\tpm.globals.set(\"case2_itemA1\", JSON.stringify(testData.case2.items.A1, null, 2));",
									"        \t\t\t\t\t\t\t\tpm.globals.set(\"case2_itemB1\", JSON.stringify(testData.case2.items.B1, null, 2));",
									"        \t\t\t\t\t\t\t\tpm.globals.set(\"case4_itemA1\", JSON.stringify(testData.case4.items.A1, null, 2));",
									"        \t\t\t\t\t\t\t\tpm.globals.set(\"case4_itemA2\", JSON.stringify(testData.case4.items.A2, null, 2));",
									"        \t\t\t\t\t\t\t}",
									"        \t\t\t\t\t\t);",
									"        \t\t\t\t\t}",
									"    \t\t\t\t\t);",
									"\t\t\t\t\t}",
									"\t\t\t\t);",
									"\t\t\t}",
									"\t\t);",
									"    }",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d75a59b9-367d-4055-86c6-0b6c1cf9b86c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "071bf2ba-a859-40be-bfef-ad8759a0ee27",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.user = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/users\", testData.user.id, function(err, res) {",
									"        testData.user = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "86ff0ed4-225c-4f9d-aa80-5193a7d3f709",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{user}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances (The Man in the High Castle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1bbdfa7d-58ce-4503-b098-ba3a9cdafc29",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case1.instance = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/instance-storage/instances/\", testData.case1.instance.id, function(err, res) {",
									"        testData.case1.instance = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}",
									"  ",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0b57483b-5d2b-4bbf-8c8c-2744c65b86c1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case1_instance}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances (Highrise)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc4c2f4a-d380-4d2f-b97e-ff981bd0aad9",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case2.instance = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/instance-storage/instances/\", testData.case2.instance.id, function(err, res) {",
									"        testData.case2.instance = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8611172a-a90c-4b11-a41f-dc93509020ed",
								"exec": [
									"console.log(pm.globals.get(\"testData\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case2_instance}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances (The Forever War)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2318e31b-bb9c-4d3e-b3b4-a7c30db4b469",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case3.instance = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/instance-storage/instances/\", testData.case3.instance.id, function(err, res) {",
									"        testData.case3.instance = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a26f6a1d-a043-4f79-ab4a-62bd69b68c6f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case3_instance}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances (Breakfast of Champions)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c46c81c-c4e5-4218-968d-5b0f6073e40f",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case4.instance = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/instance-storage/instances/\", testData.case4.instance.id, function(err, res) {",
									"        testData.case4.instance = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a26f6a1d-a043-4f79-ab4a-62bd69b68c6f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case4_instance}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings (The Man in the High Castle - A)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b2191db-c6e6-4e16-a8c1-8993ca8d81a8",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case1.holdings.A = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/holdings-storage/holdings/\", testData.case1.holdings.A.id, function(err, res) {",
									"        testData.case1.holdings.A = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f6e1b87f-3cc5-40f1-90d8-8c64088e95d7",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"testData.case1.holdings.A.instanceId = testData.case1.instance.id;",
									"",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"case1_holdingA\", JSON.stringify(testData.case1.holdings.A, null, 2));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case1_holdingA}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings (Highrise - A)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d89cbfa-5c9a-4371-a7ad-1cd2f7419542",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case2.holdings.A = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/holdings-storage/holdings/\", testData.case2.holdings.A.id, function(err, res) {",
									"        testData.case2.holdings.A = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "955b4294-48fe-4f77-a596-7d136531ae5f",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"testData.case2.holdings.A.instanceId = testData.case2.instance.id;",
									"",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"case2_holdingA\", JSON.stringify(testData.case2.holdings.A, 2, null));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case2_holdingA}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings (Highrise - B)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9369c038-23dc-45e0-8491-c3ff8863119d",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case2.holdings.B = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/holdings-storage/holdings/\", testData.case2.holdings.B.id, function(err, res) {",
									"        testData.case2.holdings.B = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "680be087-3fa4-4acf-88a4-8bd8a4145b90",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"testData.case2.holdings.B.instanceId = testData.case2.instance.id;",
									"",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"case2_holdingB\", JSON.stringify(testData.case2.holdings.B, 2, null));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case2_holdingB}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings (Breakfast of Champions - A)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "045e15f3-fd5b-4443-b3a6-0c563c0d6b3a",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case4.holdings.A = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/holdings-storage/holdings/\", testData.case4.holdings.A.id, function(err, res) {",
									"        testData.case4.holdings.A = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "76017692-c0b8-41a1-a9c2-2813e68cd112",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"testData.case4.holdings.A.instanceId = testData.case4.instance.id;",
									"",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"case4_holdingA\", JSON.stringify(testData.case4.holdings.A, 2, null));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case4_holdingA}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items (The Man in the High Castle - A1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb1d887b-3bad-4274-a4df-37aa2b9d1ce1",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case1.items.A1 = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    ",
									"    let tenant = pm.environment.get(\"xokapitenant\");",
									"    let token = postman.getResponseHeader(\"x-okapi-token\");",
									"    ",
									"    let baseURI = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\");    ",
									"    pm.sendRequest({",
									"        url: baseURI + \"/item-storage/items/\" + testData.case1.items.A1.id,",
									"        method: \"GET\",",
									"        header: {",
									"             \"x-okapi-tenant\": tenant,",
									"             \"x-okapi-token\": token",
									"        }},",
									"        function (err, res) {",
									"            testData.case1.items.A1 = res.json();",
									"            console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 4));",
									"            pm.globals.set(\"testData\", testData);",
									"        }",
									"    );",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5144daf9-b98f-456a-91bd-6add711c0661",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"testData.case1.items.A1.holdingsRecordId = testData.case1.holdings.A.id;",
									"",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"case1_itemA1\", JSON.stringify(testData.case1.items.A1, 2, null));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case1_itemA1}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items (Highrise - A1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6845947-a482-423a-a33d-bce67617ef0d",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case2.items.A1 = pm.response.json();",
									"    testData.case2.loans.A1.itemId = pm.response.json().id;",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/item-storage/items/\", testData.case2.items.A1.id, function(err, res) {",
									"        testData.case2.items.A1 = res.json();",
									"        testData.case2.loans.A1.itemId = res.json().id;",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "884f0d44-9301-4e9c-b533-ac76c8b55342",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"testData.case2.items.A1.holdingsRecordId = testData.case2.holdings.A.id;",
									"",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"case2_itemA1\", JSON.stringify(testData.case2.items.A1, 2, null));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case2_itemA1}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items (Highrise - B1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f682972c-4934-473e-8040-9f3ca8a4c16f",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case2.items.B1 = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/item-storage/items/\", testData.case2.items.B1.id, function(err, res) {",
									"        testData.case2.items.B1 = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ebe58057-1a85-4658-bd08-91ddb9664bda",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"testData.case2.items.B1.holdingsRecordId = testData.case2.holdings.B.id;",
									"",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"case2_itemB1\", JSON.stringify(testData.case2.items.B1, 2, null));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case2_itemB1}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items (Breakfast of Champions - A1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4132b17-6cc4-4889-bdab-32956d169dbb",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case4.items.A1 = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/item-storage/items/\", testData.case4.items.A1.id, function(err, res) {",
									"        testData.case4.items.A1 = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1091ce9c-b7b4-4c32-8409-61d20c400454",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"testData.case4.items.A1.holdingsRecordId = testData.case4.holdings.A.id;",
									"",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"case4_itemA1\", JSON.stringify(testData.case4.items.A1, 2, null));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case4_itemA1}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/inventory/items (Breakfast of Champions - A2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67666cd3-c0e3-41f7-aaca-e94e781ac757",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case4.items.A2 = pm.response.json();",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/item-storage/items/\", testData.case4.items.A2.id, function(err, res) {",
									"        testData.case4.items.A2 = res.json();",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e9b00d4-d2f1-45e2-bddb-283ab7ed52cf",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"testData.case4.items.A2.holdingsRecordId = testData.case4.holdings.A.id;",
									"",
									"pm.globals.set(\"testData\", testData);",
									"pm.globals.set(\"case4_itemA2\", JSON.stringify(testData.case4.items.A2, 2, null));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case4_itemA2}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/circulation/loans (Highrise - A1)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7786b765-ab8b-40f0-a76a-feec76e6f0a7",
								"exec": [
									"let now = new Date();",
									"let today = now.toISOString().split('T')[0];",
									"let plus30 = new Date();",
									"plus30.setDate(plus30.getDate() + 30);",
									"let due = plus30.toISOString();",
									"",
									"let testData = pm.globals.get(\"testData\");",
									"let loanA1 = testData.case2.loans.A1;",
									"loanA1.loanDate = today;",
									"loanA1.dueDate = due;",
									"loanA1.userId = testData.user.id;",
									"loanA1.itemId = testData.case2.items.A1.id;",
									"pm.globals.set(\"case2_loanA1\", JSON.stringify(loanA1, 2, null));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e79bbc58-be4f-4d0e-b118-6a0a873cd1c2",
								"exec": [
									"let testData = pm.globals.get(\"testData\");",
									"",
									"if (pm.response.code == 201) {",
									"    testData.case2.loans.A1 = pm.response.json();",
									"    testData.case2.items.A1.status.name = \"Checked out\";",
									"    pm.globals.set(\"testData\", testData);",
									"    console.log(pm.globals.get(\"testData\"));",
									"} else {",
									"    let utils = eval(globals.loadUtils);",
									"    utils.getRecord(\"/circulation/loans/\", testData.case2.loans.A1.id, function(err, res) {",
									"        testData.case2.loans.A1 = res.json();",
									"        testData.case2.items.A1.status.name = \"Checked out\";",
									"        console.log(\"got existing record: \" + JSON.stringify(res.json(), null, 2));",
									"        pm.globals.set(\"testData\", testData);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{case2_loanA1}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "/rtac/ - single holding, single item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1634761c-79e2-422c-92e4-cfc724d19164",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case1.instance.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aeb13f1e-548e-4ebb-9a00-b155e8440633",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let testData = pm.globals.get(\"testData\");",
									"console.log(testData);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Required holdings data returned\", function () {",
									"    pm.expect(jsonData.holdings.holding.callNumber).to.equal(testData.case1.holdings.A.callNumber);",
									"    pm.expect(jsonData.holdings.holding.status).to.equal(testData.case1.items.A1.status.name);",
									"    pm.expect(jsonData.holdings.holding.id).to.equal(testData.case1.items.A1.id);",
									"    pm.expect(jsonData.holdings.holding.location).to.equal(pm.globals.get(\"location\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{edge.host}}:{{edge.port}}/prod/rtac/folioRTAC?apiKey={{edge.apikey}}&mms_id={{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"prod",
								"rtac",
								"folioRTAC"
							],
							"query": [
								{
									"key": "apiKey",
									"value": "{{edge.apikey}}"
								},
								{
									"key": "mms_id",
									"value": "{{instanceId}}"
								}
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - multiple holdings, one item each",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87b0793e-d0e6-4a49-ad20-ecd5c4ce08ad",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case2.instance.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b6a8ddbb-37c0-4272-bfdc-eb40e5f6de15",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let testData = pm.globals.get(\"testData\");",
									"console.log(testData);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Holdings exist\", function () {",
									"    pm.expect(jsonData.holdings.holding).to.have.lengthOf(2);",
									"});",
									"",
									"pm.test(\"Required holdings data returned\", function () {",
									"    for(let i=0; i<2; i++) {",
									"        if(jsonData.holdings.holding[i].id == testData.case2.items.A1.id) {",
									"            pm.expect(jsonData.holdings.holding[i].callNumber).to.equal(testData.case2.holdings.A.callNumber);",
									"            pm.expect(jsonData.holdings.holding[i].status).to.equal(testData.case2.items.A1.status.name);",
									"            pm.expect(jsonData.holdings.holding[i].location).to.equal(pm.globals.get(\"location\"));",
									"        } else if (jsonData.holdings.holding[i].id == testData.case2.items.B1.id) {",
									"            pm.expect(jsonData.holdings.holding[i].callNumber).to.equal(testData.case2.holdings.B.callNumber);",
									"            pm.expect(jsonData.holdings.holding[i].status).to.equal(testData.case2.items.B1.status.name);",
									"            pm.expect(jsonData.holdings.holding[i].location).to.equal(pm.globals.get(\"location\"));",
									"        } else {",
									"            fail(\"unexpected id: \" + jsonData.holdings.holding[i].id);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{edge.host}}:{{edge.port}}/prod/rtac/folioRTAC?apiKey={{edge.apikey}}&mms_id={{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"prod",
								"rtac",
								"folioRTAC"
							],
							"query": [
								{
									"key": "apiKey",
									"value": "{{edge.apikey}}"
								},
								{
									"key": "mms_id",
									"value": "{{instanceId}}"
								}
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - no holdings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3df16ba0-a2fe-4d6c-bd29-e4a5ba31ae77",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case3.instance.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "319a5841-67f2-4b97-a190-ec950bcb8fc5",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let testData = pm.globals.get(\"testData\");",
									"console.log(testData);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty Holdings Element\", function () {",
									"    pm.expect(jsonData.holdings).to.equal(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{edge.host}}:{{edge.port}}/prod/rtac/folioRTAC?apiKey={{edge.apikey}}&mms_id={{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"prod",
								"rtac",
								"folioRTAC"
							],
							"query": [
								{
									"key": "apiKey",
									"value": "{{edge.apikey}}"
								},
								{
									"key": "mms_id",
									"value": "{{instanceId}}"
								}
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - multiple holdings, one item each Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea96a893-3beb-409f-927d-4d9b47f6859d",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case4.instance.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "13e8e08b-ac9f-4599-8e83-4818514d0751",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"let testData = pm.globals.get(\"testData\");",
									"console.log(testData);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Holdings exist\", function () {",
									"    pm.expect(jsonData.holdings.holding).to.have.lengthOf(2);",
									"});",
									"",
									"pm.test(\"Required holdings data returned\", function () {",
									"    for(let i=0; i<2; i++) {",
									"        if(jsonData.holdings.holding[i].id == testData.case4.items.A1.id) {",
									"            pm.expect(jsonData.holdings.holding[i].callNumber).to.equal(testData.case4.holdings.A.callNumber);",
									"            pm.expect(jsonData.holdings.holding[i].status).to.equal(testData.case4.items.A1.status.name);",
									"            pm.expect(jsonData.holdings.holding[i].location).to.equal(pm.globals.get(\"location\"));",
									"        } else if (jsonData.holdings.holding[i].id == testData.case4.items.A2.id) {",
									"            pm.expect(jsonData.holdings.holding[i].callNumber).to.equal(testData.case4.holdings.A.callNumber);",
									"            pm.expect(jsonData.holdings.holding[i].status).to.equal(testData.case4.items.A2.status.name);",
									"            pm.expect(jsonData.holdings.holding[i].location).to.equal(pm.globals.get(\"location\"));",
									"        } else {",
									"            fail(\"unexpected id: \" + jsonData.holdings.holding[i].id);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{edge.host}}:{{edge.port}}/prod/rtac/folioRTAC?apiKey={{edge.apikey}}&mms_id={{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"prod",
								"rtac",
								"folioRTAC"
							],
							"query": [
								{
									"key": "apiKey",
									"value": "{{edge.apikey}}"
								},
								{
									"key": "mms_id",
									"value": "{{instanceId}}"
								}
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "/rtac/ - unknown ApiKey",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a36a823-55fd-4295-85e7-ed8bf1dd2b9e",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case1.instance.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea8613f5-6f68-4132-9ea8-8e46b1aa71ac",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty Holdings Element\", function () {",
									"    pm.expect(jsonData.holdings).to.equal(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{edge.host}}:{{edge.port}}/prod/rtac/folioRTAC?apiKey=eyJzIjoiWHMwMWVrbWR5MCIsInQiOiJmb28iLCJ1IjoiYmFyYmF6In0=&mms_id={{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"prod",
								"rtac",
								"folioRTAC"
							],
							"query": [
								{
									"key": "apiKey",
									"value": "eyJzIjoiWHMwMWVrbWR5MCIsInQiOiJmb28iLCJ1IjoiYmFyYmF6In0="
								},
								{
									"key": "mms_id",
									"value": "{{instanceId}}"
								}
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - malformed ApiKey",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a36a823-55fd-4295-85e7-ed8bf1dd2b9e",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case1.instance.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea8613f5-6f68-4132-9ea8-8e46b1aa71ac",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty Holdings Element\", function () {",
									"    pm.expect(jsonData.holdings).to.equal(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{edge.host}}:{{edge.port}}/prod/rtac/folioRTAC?apiKey={{malformedApiKey}}&mms_id={{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"prod",
								"rtac",
								"folioRTAC"
							],
							"query": [
								{
									"key": "apiKey",
									"value": "{{malformedApiKey}}"
								},
								{
									"key": "mms_id",
									"value": "{{instanceId}}"
								}
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				},
				{
					"name": "/rtac/ - unknown instance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b594b2b4-6722-4064-ba72-8b0f68189e1c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea8613f5-6f68-4132-9ea8-8e46b1aa71ac",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Empty Holdings Element\", function () {",
									"    pm.expect(jsonData.holdings).to.equal(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{edge.host}}:{{edge.port}}/prod/rtac/folioRTAC?apiKey={{edge.apikey}}&mms_id={{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"prod",
								"rtac",
								"folioRTAC"
							],
							"query": [
								{
									"key": "apiKey",
									"value": "{{edge.apikey}}"
								},
								{
									"key": "mms_id",
									"value": "{{$guid}}"
								}
							]
						},
						"description": "GET /rtac/ requests that return 200"
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "/circulation/loans (Highrise - A1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "04de0cbe-7d34-498d-bf21-b2760cc876d8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE /circulation/loans/<loanId> returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2e195370-0c78-4fba-900b-fe01700f9c8d",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"loanId\", pm.globals.get(\"testData\").case2.loans.A1.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/circulation/loans/{{loanId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"circulation",
								"loans",
								"{{loanId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item-storage/items (Breakfast of Champions - A2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0bdd76a-d689-44dc-8af6-18f345211878",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"itemId\", pm.globals.get(\"testData\").case4.items.A2.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{itemId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item-storage/items (Breakfast of Champions - A1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4ec572f0-f9fa-4828-8a53-b3f9139756d3",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"itemId\", pm.globals.get(\"testData\").case4.items.A1.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{itemId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item-storage/items (Highrise - B1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8ed00f05-29b1-428e-95a1-4c0a7df195d0",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"itemId\", pm.globals.get(\"testData\").case2.items.B1.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{itemId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item-storage/items (Highrise - A1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17d970f7-2a79-44ec-989e-5931fc6cb6fe",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"itemId\", pm.globals.get(\"testData\").case2.items.A1.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{itemId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item-storage/items (The Man in the High Castle - A1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "50b3b7ec-78e9-4736-9b06-6aa82678119b",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"itemId\", pm.globals.get(\"testData\").case1.items.A1.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{itemId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings (Highrise - B)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d6837b7-bf0a-49f9-9aab-c5ddfefc4c3f",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"holdingId\", pm.globals.get(\"testData\").case2.holdings.B.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{holdingId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings",
								"{{holdingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings (Breakfast of Champions - A)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "951d835e-6126-4c2b-9018-c4a54af9149e",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"holdingId\", pm.globals.get(\"testData\").case4.holdings.A.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{holdingId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings",
								"{{holdingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings (Highrise - A)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b5a0fee0-9b16-4f1e-b7fd-266919acad2b",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"holdingId\", pm.globals.get(\"testData\").case2.holdings.A.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{holdingId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings",
								"{{holdingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings (The Man in the High Castle - A)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a76214c5-80fc-4633-bef2-808006cd2b0e",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"holdingId\", pm.globals.get(\"testData\").case1.holdings.A.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{holdingId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings",
								"{{holdingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances (The Man in the High Castle)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "44ad415b-274b-491d-b052-c739f955ebb3",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case1.instance.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances (Breakfast of Champions)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf4ac296-1449-4f7b-b24c-4e0dfa18dbff",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case4.instance.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances (The Forever War)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "67756840-e574-4306-b5c1-621f3430d218",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case3.instance.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances (Highrise)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231f4d10-b48d-4fca-8022-a898424a3646",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c1b827dc-e1f5-4bc0-b23c-a5b1d4a7afa9",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"instanceId\", pm.globals.get(\"testData\").case2.instance.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{instanceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a817d5db-abfb-454c-972f-cbdb12256d7d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"DELETE /user/<userId> returns 204 status\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "35e18d59-c76d-46cc-a876-70c6c7db45e4",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"userId\", pm.globals.get(\"testData\").user.id);"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{userId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29271af0-d608-4fd0-a6d0-7f47697b19ba",
				"type": "text/javascript",
				"exec": [
					"// Global testing object - used in further tests",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.getRecord = function getRecord(basePath, id, res) {",
					"        let tenant = pm.environment.get(\"xokapitenant\");",
					"        let token = postman.getResponseHeader(\"x-okapi-token\");",
					"        ",
					"        let baseURI = pm.environment.get(\"protocol\") + \"://\" ",
					"            + pm.environment.get(\"url\") + \":\" ",
					"            + pm.environment.get(\"okapiport\");    ",
					"        pm.sendRequest({",
					"            url: baseURI + basePath + id,",
					"            method: \"GET\",",
					"            header: {",
					"                 \"x-okapi-tenant\": tenant,",
					"                 \"x-okapi-token\": token",
					"            }},",
					"            res",
					"        );",
					"    };",
					"    ",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65f7e387-a850-4a74-a499-63606dd653fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "35deb40c-bcfc-432f-96b3-37b686cf6e89",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org/edge-rtac/master/ramls/holdings.xsd",
			"type": "string"
		}
	]
}