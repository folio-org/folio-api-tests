{
	"info": {
		"_postman_id": "76f80957-718e-46e3-b8e0-dc3405aa006a",
		"name": "mod-codex-mux",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "setup configuration",
			"item": [
				{
					"name": "Check if  url exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6a548cd-23a5-4b8c-9bf9-622e404e5f04",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"apiUrlExists\", false);",
									"",
									"if(jsonData!==null && jsonData.configs.length!==0) {",
									"    pm.environment.set(\"apiUrlExists\", true);",
									"    pm.environment.set(\"rm-api-url-value\", jsonData.configs[0].value);",
									"    pm.environment.set(\"rm-api-url-id\", jsonData.configs[0].id);",
									"    //\"rm api url exists -- do not overwrite\");",
									"    postman.setNextRequest(\"Check if customerId exists\");",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
								}
							]
						},
						"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
					},
					"response": []
				},
				{
					"name": "/configurations/entries - POST RM API URL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1999127b-87cf-45b8-a245-be854e138af4",
								"exec": [
									"",
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status is 201 - configuration entry successfully created for rm api url\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});",
									"",
									"//Store rm-api-url-id temporarily for clean-up purpose",
									"let body = JSON.parse(responseBody);",
									"pm.environment.set(\"rm-api-url-id\", body.id);",
									"",
									"pm.environment.set(\"rm-api-url-value\", body.value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.url\",\r\n    \"description\": \"EBSCO RM-API URL\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rmapi_url}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if customerId exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cf60b97-d5e9-4028-86ff-9b20ecc32dba",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.environment.set(\"customerIdExists\", false);",
									"",
									"if(jsonData!==null && jsonData.configs.length!==0) {",
									"    pm.environment.set(\"customerIdExists\", true);",
									"    pm.environment.set(\"rm-api-custid-value\", jsonData.configs[0].value);",
									"    pm.environment.set(\"rm-api-customer-id\", jsonData.configs[0].id);",
									"     //\"rm api customer id exists -- do not overwrite\");",
									"    postman.setNextRequest(\"Check if apiKey exists\");",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
								}
							]
						},
						"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
					},
					"response": []
				},
				{
					"name": "/configurations/entries - POST RM API api_customer id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23f25d7b-cbf3-4053-9fc3-35f06a3fffcc",
								"exec": [
									"",
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});",
									"",
									"//Store rm-api-customer-id temporarily for clean-up purpose",
									"let body = JSON.parse(responseBody);",
									"pm.environment.set(\"rm-api-customer-id\", body.id);",
									"pm.environment.set(\"rm-api-custid-value\", body.value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.customerId\",\r\n    \"description\": \"EBSCO RM-API Customer ID\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{custid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						},
						"description": "Create customer id as part of configuration"
					},
					"response": []
				},
				{
					"name": "Check if apiKey exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30b0b57f-a25a-41b2-9390-f1e72c241b4c",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.environment.set(\"apiKeyExists\", false);",
									"if(jsonData!==null && jsonData.configs.length!==0) {",
									"    pm.environment.set(\"apiKeyExists\", true);",
									"    //\"Api key exists -- do not POST\");",
									"    postman.setNextRequest(\"setup environment variables\");",
									"}",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d665ae85-57e5-40c5-a197-48a2b098fc0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
								}
							]
						},
						"description": "Check if rm api url has already been configured for test user.  If so, do not want to overwrite existing configuration settings"
					},
					"response": []
				},
				{
					"name": "/configurations/entries - POST RM API apiKey",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c5c18b8-178f-4395-9e60-5313f2d03260",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "732d3a7c-3a6f-4f9b-b904-9cc6887ccdc3",
								"exec": [
									"",
									"pm.test(\"Success test on json response\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status is 201 - configuration entry successfully created for rm api customer id\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"});",
									"",
									"//Store rm-api-key-id temporarily for clean-up purpose",
									"let body = JSON.parse(responseBody);",
									"pm.environment.set(\"rm-api-key-id\", body.id);",
									"pm.environment.set(\"rm-api-key-value\", body.value);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"module\": \"EKB\",\r\n    \"configName\": \"api_access\",\r\n    \"code\": \"kb.ebsco.apiKey\",\r\n    \"description\": \"EBSCO RM-API API Key\",\r\n    \"enabled\": true,\r\n    \"value\": \"{{rmapi_api_key}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							]
						},
						"description": "Create customer id as part of configuration"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7378bc5c-916f-41aa-b57e-b2c274efe3f3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a26b4778-0c56-409b-93fe-f848a949171b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "schemas",
			"item": [
				{
					"name": "setup environment variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41dde41e-77c3-4f8a-a8e9-5125e58d8897",
								"exec": [
									"const moduleName = 'mod-codex-mux';",
									"pm.test(\"GET json schemas response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET json schemas has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.test(\"GET contains codex-mux module\", function () {",
									"    pm.expect(pm.response.text()).to.include(moduleName);",
									"    ",
									"});",
									"",
									"let json = JSON.parse(responseBody);",
									"",
									"json.forEach((element) => {",
									"\tvar moduleId = element.id;",
									"\tif(moduleId.includes(moduleName)){",
									"\t\tpm.environment.set('codex-mux-module-id', moduleId);",
									"\t}",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0491a6ea-3e21-49c2-83a2-92e27e602ae9",
								"exec": [
									"            //Using the mod codex ekb id captured above, use that to retrieve list of mod codex ekb instances",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/codex-instances?query=(publisher=BMJ)\",",
									"                method: 'GET',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"                    'Content-Type': 'application/json'",
									"                },",
									"            }, function(err, res) {",
									"                 if (err !== null) {",
									"                    console.log(\"codex instance error: \" + err);",
									"                } else {",
									"                    //Grab fields from random instance and save them in environment variables for testing purpose",
									"                    var jsonData = res.json();",
									"                    var randomIndex = Math.floor(Math.random()*jsonData.instances.length);",
									"                    var storeInstance= jsonData.instances[randomIndex];",
									"                    pm.environment.set(\"muxInstanceTitle\", storeInstance.title);",
									"                    pm.environment.set(\"muxInstanceType\", storeInstance.type);",
									"                    pm.environment.set(\"muxInstancePublisher\", storeInstance.publisher);",
									"                    pm.environment.set(\"muxInstanceSource\", storeInstance.source);",
									"                    pm.environment.set(\"muxInstanceFormat\", storeInstance.format);",
									"                    pm.environment.set(\"id\", jsonData.instances[randomIndex].id);",
									"                }",
									"            });",
									"            ",
									"            //Using the mod codex ekb id captured above, use that to retrieve list of mod codex ekb packages",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/codex-packages?query=(name=academic)\",",
									"                method: 'GET',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': pm.environment.get(\"xokapitoken\"),",
									"                    'Content-Type': 'application/json'",
									"                },",
									"            }, function(err, res) {",
									"                 if (err !== null) {",
									"                    console.log(\"codex packages error: \" + err);",
									"                } else {",
									"                    //Grab fields from random package and save them in environment variables for testing purpose",
									"                    var jsonData = res.json();",
									"                    var randomIndex = Math.floor(Math.random()*jsonData.packages.length);",
									"                    var packageObject = jsonData.packages[randomIndex];",
									"                    ",
									"                    pm.environment.set(\"PackageName\", packageObject.name);",
									"                    pm.environment.set(\"PackageType\", packageObject.type);",
									"                    pm.environment.set(\"PackageProviderId\", packageObject.providerId)",
									"                    pm.environment.set(\"PackageProvider\", packageObject.provider);",
									"                    pm.environment.set(\"PackageItemCount\", packageObject.itemCount);",
									"                    pm.environment.set(\"PackageSource\", packageObject.source);",
									"                    pm.environment.set(\"PackageIsSelected\", packageObject.isSelected);",
									"                    pm.environment.set(\"packagesId\", packageObject.id);",
									"                }",
									"            });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{xokapitenant}}/interfaces/codex",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{xokapitenant}}",
								"interfaces",
								"codex"
							]
						}
					},
					"response": []
				},
				{
					"name": "get schemas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f930ca9d-df31-4572-90c8-63f5243ae30e",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"function checkVariableExist(name){ return pm.environment.has(\"schema_\"+ name);}",
									"",
									"function setEnvironmentVariable(name, data){ pm.environment.set(\"schema_\"+ name, data) }",
									"",
									"function extractName(url){ return url.substring(url.lastIndexOf(\"/\") + 1, url.lastIndexOf(\".\")); }",
									"",
									"function replaceResponseRefWithName(text){ return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"schema_\"); }",
									"",
									"function getURL(path) {return pm.variables.get(\"protocol\") + \"://\" + ",
									"        pm.variables.get(\"url\") + \":\" + ",
									"        pm.variables.get(\"okapiport\") + ",
									"        \"/_/jsonSchemas?path=\" + path;",
									"}",
									"        ",
									"function getRequest(url){",
									"  const echoGetRequest = {",
									"    url: url,",
									"    method: 'GET',",
									"    header: {",
									"      'X-Okapi-Module-Id' : pm.variables.get(\"codex-mux-module-id\"),",
									"      'X-Okapi-Tenant' : pm.variables.get(\"xokapitenant\")",
									"    }",
									"  }",
									"    return echoGetRequest;",
									"}        ",
									"",
									"function fetchSchema(echoGetRequest, delay){",
									"",
									"return new Promise((resolve, reject) => {",
									"     setTimeout(function(){",
									"       pm.sendRequest(echoGetRequest, (err, response) => {",
									"       if (!err) {",
									"        resolve(response.text());",
									"       }else{",
									"        reject(err, echoGetRequest);",
									"       }",
									"      });",
									"     }, delay);",
									"  });",
									"}",
									"",
									"function traverse(data){",
									"",
									"     Object.entries(data).forEach(([key, value]) => {",
									"         var url = getURL(value);",
									"         var request = getRequest(url);",
									"         var promises = [];",
									"         promises.push(fetchSchema(request, 200 * key));",
									"         Promise.all(promises).then(function(response) {",
									"          response = replaceResponseRefWithName(response.toString());",
									"              var name = extractName(value);",
									"              if(!checkVariableExist(name)){",
									"                setEnvironmentVariable(name, response);",
									"              }",
									"          }).then(() => setTimeout(() => {}, 10000))",
									"        .catch((err, req) => {",
									"            console.log(err);",
									"            console.log(req);",
									"          });",
									"    });",
									"}",
									"traverse(JSON.parse(responseBody));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Module-Id",
								"value": "{{codex-mux-module-id}}",
								"type": "text"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"jsonSchemas"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "codex instances",
			"item": [
				{
					"name": "GET codex instances collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/codex-instances",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c9605b2d-e93b-4fd8-a9d5-f438f093970a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_instanceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.instances) {",
													"    let len = response.instances.length;",
													"    let firstRecord = response.instances[0];",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 10 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(10);",
													"        });",
													"         //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"title\", \"contributor\",\"publisher\",\"date\",\"identifier\",\"source\",\"language\");",
													"        });",
													"    } else {",
													"        console.log('No instances found');",
													"      }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											]
										},
										"description": "Test malformed query parameter returns 400"
									},
									"response": []
								},
								{
									"name": "/codex-instances?query=(publisher=BMJ) - Get list of instances",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0106b17-8a52-4c11-841a-ac4c1c701414",
												"exec": [
													"pm.test(\"Success test on json response when title exists\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response status is 200 when title exists\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Create, add and validate schema when title exists\", function() {",
													"       //Create and add schemas for validation",
													"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_instanceCollection\")))).to.be.true;",
													"    //make sure no schema is missing",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let response = pm.response.json();",
													"let firstRecord = response.instances[0];",
													"    // Test that first title contains search term",
													"    pm.test('title name in a record includes query term', function() {",
													"    pm.expect(firstRecord.publisher).to.include('BMJ');",
													"});",
													"",
													"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/codex-instances\");",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?query=(publisher=BMJ)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "query",
													"value": "(publisher=BMJ)"
												}
											]
										},
										"description": "Test Ekb codex-instances listing"
									},
									"response": []
								},
								{
									"name": "/codex-instances?query=(publisher=abc)&limit=defaultLimit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7b0315dd-7dbf-44d3-aabb-c7ef694dc037",
												"exec": [
													"pm.test(\"Valid query parameter test - default limit\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Validate default limit",
													"let obj = pm.response.json();",
													"let defaultLength = 10;",
													"pm.test(\"Verify default limit for codex instances\", function () {",
													"    pm.expect(obj.instances.length).to.equal(defaultLength);",
													"});",
													"",
													"let firstRecord = obj.instances[0];",
													"    // Test that first title contains search term",
													"    pm.test('publisher in a record includes query term', function() {",
													"    pm.expect(firstRecord.publisher.toLowerCase()).to.include('abc');",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?query=(publisher=abc)&limit=10",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "query",
													"value": "(publisher=abc)"
												},
												{
													"key": "limit",
													"value": "10"
												}
											]
										},
										"description": "Test codex-instances listing - default positive limit"
									},
									"response": []
								},
								{
									"name": "/codex-instances?query=(publisher=abc)&lang=en",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "08f23c5c-a3a4-4299-9fc6-0cad4cd5d95e",
												"exec": [
													"let response = pm.response.json();",
													"",
													"pm.test(\"Positive test for language parameter - English language\", function() {",
													"pm.response.to.have.status(200);",
													"});",
													"",
													"let firstRecord = response.instances[0];",
													"    // Test that first title contains search term",
													"pm.test('title name in a record includes query term', function() {",
													"pm.expect(firstRecord.publisher.toLowerCase()).to.include('abc');",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_instanceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?query=(publisher=abc)&lang=en",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "query",
													"value": "(publisher=abc)"
												},
												{
													"key": "lang",
													"value": "en"
												}
											]
										},
										"description": "Test codex-instances listing - valid english language"
									},
									"response": []
								},
								{
									"name": "/codex-instances?query=(id=%id)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1a966824-e750-4153-aa60-26d99cbf0a04",
												"exec": [
													"pm.test(\"Verify codex ekb search by passing id as a query parameter\", function() {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Verify only 1 codex instance is returned",
													"let obj = pm.response.json();",
													"let recordLength = 1;",
													"pm.test(\"Verify default length codex instances\", function () {",
													"    pm.expect(obj.resultInfo.totalRecords).to.equal(recordLength);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(obj, JSON.parse(pm.environment.get(\"schema_instanceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Verify instances key is present\", function () {",
													"    pm.expect(obj.instances.length).to.not.equal(0);",
													"});",
													"",
													"let instance = obj.instances[0];",
													"",
													"pm.test(\"Validate publisher of response body fields\", function() {",
													"   pm.expect(instance.publisher).to.equal(pm.environment.get(\"muxInstancePublisher\"));",
													"});",
													"",
													"pm.test(\"Validate title of response body fields\", function() {",
													"   pm.expect(instance.title).to.equal(pm.environment.get(\"muxInstanceTitle\"));",
													"}); ",
													"",
													"pm.test(\"Validate type of response body fields\", function() {",
													"   pm.expect(instance.type).to.equal(pm.environment.get(\"muxInstanceType\"));",
													"}); ",
													"",
													"pm.test(\"Validate source of response body fields\", function() {",
													"   pm.expect(instance.source).to.equal(pm.environment.get(\"muxInstanceSource\"));",
													"});",
													"",
													"pm.test(\"Validate format of response body fields\", function() {",
													"   pm.expect(instance.format).to.equal(pm.environment.get(\"muxInstanceFormat\"));",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?query=(id={{id}})",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "query",
													"value": "(id={{id}})"
												}
											]
										},
										"description": "Return single codex ekb instance by passing id as query parameter"
									},
									"response": []
								},
								{
									"name": "/codex-instances?query=(id=returns empty list)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "24a825cb-e978-457e-b522-08975c1f3c95",
												"exec": [
													"let obj = pm.response.json();",
													"let emptyInstanceList = 0;",
													"pm.test(\"Verify query search results in 0 total records when title with given search params does not exist\", function () {",
													"    pm.expect(obj.resultInfo.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"Verify query search results in empty instances list when title with given search params does not exist\", function () {",
													"    pm.expect(obj.instances.length).to.equal(emptyInstanceList);",
													"});",
													"",
													"pm.test(\"Success test on json response when title with given search params does not exist\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(obj, JSON.parse(pm.environment.get(\"schema_instanceCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Response status is 200 when title with given search params does not exist\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?query=(id=123)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "query",
													"value": "(id=123)"
												}
											]
										},
										"description": "Test codex-instances listing when title does not exist and search query returns empty list"
									},
									"response": []
								},
								{
									"name": "/codex-instances?query=(title=boolean operations)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eff3593d-7906-4d98-8368-4a9bc24de85c",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"response.instances.forEach(function(element) {",
													"    if(element.title.includes('American')){",
													"        pm.test('title name in a record includes query term', function() {",
													"        pm.expect(element.title).to.include('American');",
													"            });",
													"    } else {",
													"        pm.test('publisher name in a record includes query term', function() {",
													"        pm.expect(element.publisher).to.include('University');",
													"        });",
													"}",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?query=(title=American or publisher=University)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "query",
													"value": "(title=American or publisher=University)"
												}
											]
										},
										"description": "Test codex ekb returns 400 on bad query parameter syntax"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/codex-instances?limit=-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fa34df14-3204-4c30-8543-652fae051a27",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - negative limit\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('\\n \\'limit\\' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?query=(publisher=abc)&limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "query",
													"value": "(publisher=abc)"
												},
												{
													"key": "limit",
													"value": "-1"
												}
											]
										},
										"description": "Test codex-instances listing - negative limit"
									},
									"response": []
								},
								{
									"name": "/codex-instances?limit=2147483648",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a6406117-33f5-4603-9946-8dfd54d6ff1a",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - more than max limit\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('For input string: \\\"2147483648\\\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?limit=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "limit",
													"value": "2147483648"
												}
											]
										},
										"description": "Test codex-instances listing - more than max limit"
									},
									"response": []
								},
								{
									"name": "/codex-instances?offset=2147483648",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "855b3b2d-a932-4f3c-b64c-2d4a22b6b062",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - more than max offset\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('For input string: \\\"2147483648\\\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?offset=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "offset",
													"value": "2147483648"
												}
											]
										},
										"description": "Test codex-instances listing - more than max offset"
									},
									"response": []
								},
								{
									"name": "/codex-instances?offset=-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6b66d1f6-22c7-43e7-8116-54e718068007",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - less than min offset\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('\\n \\'offset\\' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?offset=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "offset",
													"value": "-1"
												}
											]
										},
										"description": "Test codex-instances listing - less than min offset"
									},
									"response": []
								},
								{
									"name": "/codex-instances?lang=123",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d2cf59e7-9d19-4966-a23c-dcf730682999",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - less than min offset\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('\\n \\'lang\\' parameter is incorrect. parameter value {123} is not valid: must match \"[a-zA-Z]{2}\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances?lang=123",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances"
											],
											"query": [
												{
													"key": "lang",
													"value": "123"
												}
											]
										},
										"description": "Test codex-instances listing - invalid language"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET codex instances by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/codex-instances/{id}",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9da262db-effd-4d6d-97dd-d31629f4a7b0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7ac8a19e-c625-4b8a-aff8-482a83203d6e",
												"exec": [
													"pm.test(\"Success test on json response\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Response schema verification\", function() {",
													"    //Codex ekb instance schema validation",
													" pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_instance\")))).to.be.true;",
													" //make sure no schema is missing",
													" pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Validate if title and type fields exists\", function() {",
													"   pm.response.to.have.jsonBody(\"title\", pm.environment.get(\"muxInstanceTitle\"));",
													"   pm.response.to.have.jsonBody(\"type\", pm.environment.get(\"muxInstanceType\"));",
													"});",
													"",
													"var obj = pm.response.json();",
													"pm.test(\"Validate publisher of response body fields\", function() {",
													"   pm.expect(obj.publisher).to.equal(pm.environment.get(\"muxInstancePublisher\"));",
													"});",
													"",
													"pm.test(\"Validate title of response body fields\", function() {",
													"   pm.expect(obj.title).to.equal(pm.environment.get(\"muxInstanceTitle\"));",
													"}); ",
													"",
													"pm.test(\"Validate type of response body fields\", function() {",
													"   pm.expect(obj.type).to.equal(pm.environment.get(\"muxInstanceType\"));",
													"}); ",
													"",
													"pm.test(\"Validate source of response body fields\", function() {",
													"   pm.expect(obj.source).to.equal(pm.environment.get(\"muxInstanceSource\"));",
													"});",
													"",
													"pm.test(\"Validate format of response body fields\", function() {",
													"   pm.expect(obj.format).to.equal(pm.environment.get(\"muxInstanceFormat\"));",
													"});",
													"",
													"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/codex-instances/\"+ pm.environment.get(\"id\") + \" : 200\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances/{{id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances",
												"{{id}}"
											]
										},
										"description": "Return an existing mod codex ekb instance"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/codex-instances/1 - 404 title not found Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6b61f15-c66a-442a-9314-5bc57cc38592",
												"exec": [
													"pm.test(\"Response status is 404 when title not found\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/codex-instances\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-instances/1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-instances",
												"1"
											]
										},
										"description": "Test codex-instances listing"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "406e788b-e9ce-42e9-9d68-20d62ec86faa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1eb92ffd-9876-4867-8619-260ea1911810",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_instanceCollection.json\", JSON.parse(pm.environment.get(\"schema_instanceCollection\")));",
							"tv4.addSchema(\"schema_instance.json\", JSON.parse(pm.environment.get(\"schema_instance\")));",
							"tv4.addSchema(\"schema_resultInfo.schema\", JSON.parse(pm.environment.get(\"schema_resultInfo\")));",
							"tv4.addSchema(\"schema_instance.json\", JSON.parse(pm.environment.get(\"schema_instance\")));",
							"tv4.addSchema(\"schema_sourceCollection.json\", JSON.parse(pm.environment.get(\"schema_sourceCollection\")));",
							"tv4.addSchema(\"schema_source.json\", JSON.parse(pm.environment.get(\"schema_source\")));"
						]
					}
				}
			]
		},
		{
			"name": "codex packages",
			"item": [
				{
					"name": "GET codex packages collection",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/codex-packages",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c9605b2d-e93b-4fd8-a9d5-f438f093970a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.packages) {",
													"    let len = response.packages.length;",
													"    let firstRecord = response.packages[0];",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 10 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(10);",
													"        });",
													"         //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"name\",\"type\",\"providerId\",\"provider\", \"itemCount\", \"coverage\", \"isSelected\", \"source\");",
													"        });",
													"    } else {",
													"        console.log('No packages found');",
													"      }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											]
										},
										"description": "Test malformed query parameter returns 400"
									},
									"response": []
								},
								{
									"name": "/codex-packages?query=(name=Academic) - Get list of packages",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c9605b2d-e93b-4fd8-a9d5-f438f093970a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"//Check if we get a collection of packages in response",
													"if(response.packages) {",
													"    let len = response.packages.length;",
													"    let firstRecord = response.packages[0];",
													"    if(len > 0){",
													"        //Test that if no count is provided, default should be 10 records",
													"        pm.test('no count provided', function(){",
													"            pm.expect(len).eq(10);",
													"        });",
													"         //Test that object has the expected keys",
													"        pm.test('expected keys are present in a record', function() {",
													"            pm.expect(firstRecord).to.be.an('object');",
													"            pm.expect(firstRecord).to.include.all.keys(\"id\", \"name\",\"type\",\"providerId\",\"provider\", \"itemCount\", \"coverage\", \"isSelected\", \"source\");",
													"        });",
													"    } else {",
													"        console.log('No packages found');",
													"      }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?query=(name=Academic)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "query",
													"value": "(name=Academic)"
												}
											]
										},
										"description": "Test malformed query parameter returns 400"
									},
									"response": []
								},
								{
									"name": "/codex-packages?query=(name=Academic)&limit=14",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c9605b2d-e93b-4fd8-a9d5-f438f093970a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Verify limit for codex packages\", function () {",
													"    pm.expect(response.packages.length).to.equal(14);",
													"});",
													"",
													"let firstRecord = response.packages[0];",
													"    pm.test('name in a record includes query term', function() {",
													"    pm.expect(firstRecord.name.toLowerCase()).to.include('academic');",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?query=(name=Academic)&limit=14",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "query",
													"value": "(name=Academic)"
												},
												{
													"key": "limit",
													"value": "14"
												}
											]
										},
										"description": "Test malformed query parameter returns 400"
									},
									"response": []
								},
								{
									"name": "/codex-packages?query=(id=%id)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c9605b2d-e93b-4fd8-a9d5-f438f093970a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"let packageObject = response.packages[0]",
													"                    ",
													"pm.test(\"Validate name\", function() {",
													"    pm.expect(packageObject.name).to.equal(pm.environment.get(\"PackageName\"));",
													"});",
													"",
													"pm.test(\"Validate type\", function() {",
													"    pm.expect(packageObject.type).to.equal(pm.environment.get(\"PackageType\"));",
													"});",
													"",
													"pm.test(\"Validate providerId\", function() {",
													"    pm.expect(packageObject.providerId).to.equal(pm.environment.get(\"PackageProviderId\"));",
													"});",
													"",
													"pm.test(\"Validate provider\", function() {",
													"    pm.expect(packageObject.provider).to.equal(pm.environment.get(\"PackageProvider\"));",
													"});",
													"",
													"pm.test(\"Validate itemCount\", function() {",
													"    pm.expect(packageObject.itemCount).to.equal(pm.environment.get(\"PackageItemCount\"));",
													"});",
													"",
													"pm.test(\"Validate isSelected\", function() {",
													"    pm.expect(packageObject.isSelected).to.equal(pm.environment.get(\"PackageIsSelected\"));",
													"});",
													"",
													"pm.test(\"Validate id\", function() {",
													"    pm.expect(packageObject.id).to.equal(pm.environment.get(\"packagesId\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?query=(id={{packagesId}})",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "query",
													"value": "(id={{packagesId}})"
												}
											]
										},
										"description": "Test malformed query parameter returns 400"
									},
									"response": []
								},
								{
									"name": "/codex-packages?query=(id=returns empty list)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c9605b2d-e93b-4fd8-a9d5-f438f093970a",
												"exec": [
													"let obj = pm.response.json();",
													"let emptyInstanceList = 0;",
													"pm.test(\"Verify query search results in 0 total records when package with given search params does not exist\", function () {",
													"    pm.expect(obj.resultInfo.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"Verify query search results in empty packages list when package with given search params does not exist\", function () {",
													"    pm.expect(obj.packages.length).to.equal(emptyInstanceList);",
													"});",
													"",
													"pm.test(\"Success test on json response when title with given search params does not exist\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(obj, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"pm.test(\"Response status is 200 when title with given search params does not exist\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?query=(id=123-123)",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "query",
													"value": "(id=123-123)"
												}
											]
										},
										"description": "Test malformed query parameter returns 400"
									},
									"response": []
								},
								{
									"name": "/codex-packages?query=(name=boolean operations)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c9605b2d-e93b-4fd8-a9d5-f438f093970a",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_packageCollection\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"",
													"if(response.packages) {",
													"    response.packages.forEach(function(element) {",
													"        pm.expect(element.name.toLowerCase()).to.include(\"academic\");",
													"        pm.expect(element.type).to.equal(\"ejournal\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?query=(name=Academic) and type=ejournal",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "query",
													"value": "(name=Academic) and type=ejournal"
												}
											]
										},
										"description": "Test malformed query parameter returns 400"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/codex-packages?limit=-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fa34df14-3204-4c30-8543-652fae051a27",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - negative limit\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('\\n \\'limit\\' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?limit=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "limit",
													"value": "-1"
												}
											]
										},
										"description": "Test codex-instances listing - negative limit"
									},
									"response": []
								},
								{
									"name": "/codex-packages?limit=2147483648",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a6406117-33f5-4603-9946-8dfd54d6ff1a",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - more than max limit\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('For input string: \\\"2147483648\\\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?limit=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "limit",
													"value": "2147483648"
												}
											]
										},
										"description": "Test codex-instances listing - more than max limit"
									},
									"response": []
								},
								{
									"name": "/codex-packages?offset=2147483648",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "855b3b2d-a932-4f3c-b64c-2d4a22b6b062",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - more than max offset\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('For input string: \\\"2147483648\\\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?offset=2147483648",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "offset",
													"value": "2147483648"
												}
											]
										},
										"description": "Test codex-instances listing - more than max offset"
									},
									"response": []
								},
								{
									"name": "/codex-packages?offset=-1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6b66d1f6-22c7-43e7-8116-54e718068007",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - less than min offset\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('\\n \\'offset\\' parameter is incorrect. parameter value {-1} is not valid: must be greater than or equal to 0');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?offset=-1",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "offset",
													"value": "-1"
												}
											]
										},
										"description": "Test codex-instances listing - less than min offset"
									},
									"response": []
								},
								{
									"name": "/codex-packages?lang=123",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d2cf59e7-9d19-4966-a23c-dcf730682999",
												"exec": [
													"pm.test(\"400 malformed request body or query parameter test - less than min offset\", function() {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response having negative limit parameter error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.have.body('\\n \\'lang\\' parameter is incorrect. parameter value {123} is not valid: must match \"[a-zA-Z]{2}\"');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages?lang=123",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages"
											],
											"query": [
												{
													"key": "lang",
													"value": "123"
												}
											]
										},
										"description": "Test codex-instances listing - invalid language"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GET codex package by id",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "/codex-packages/id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0106b17-8a52-4c11-841a-ac4c1c701414",
												"exec": [
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.json;",
													"});",
													"",
													"let response = pm.response.json();",
													"",
													"//Check that status is 200",
													"pm.test(\"Status is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate schema\", function () {",
													"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_package\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
													"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
													"});",
													"console.log(response);",
													"//Test that object has the expected keys",
													"pm.test('expected keys are present in response object', function() {",
													"    pm.expect(response).to.include.all.keys(\"id\", \"name\", \"type\",\"providerId\",\"provider\",\"itemCount\",\"coverage\",\"isSelected\",\"source\");",
													"});",
													"",
													"pm.test(\"Validate provider of response body fields\", function() {",
													"   pm.expect(response.provider).to.equal(pm.environment.get(\"PackageProvider\"));",
													"});",
													"",
													"pm.test(\"Validate title of response body fields\", function() {",
													"   pm.expect(response.name).to.equal(pm.environment.get(\"PackageName\"));",
													"}); ",
													"",
													"pm.test(\"Validate type of response body fields\", function() {",
													"   pm.expect(response.type).to.equal(pm.environment.get(\"PackageType\"));",
													"}); ",
													"",
													"pm.test(\"Validate source of response body fields\", function() {",
													"   pm.expect(response.source).to.equal(pm.environment.get(\"PackageSource\"));",
													"});",
													"",
													"pm.test(\"Validate format of response body fields\", function() {",
													"   pm.expect(response.isSelected).to.equal(pm.environment.get(\"PackageIsSelected\"));",
													"});",
													"",
													"//Test that id matches what was provided in query",
													"pm.test('id matches as provided in query', function(){",
													"    pm.expect(response.id).eq(pm.variables.get('packagesId'));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages/{{packagesId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages",
												"{{packagesId}}"
											]
										},
										"description": "Test Ekb codex-instances listing"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "/codex-packages/wrongId - 404 not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a5342e1b-56a4-4f64-bccc-c3260a895243",
												"exec": [
													"pm.environment.set(\"wrongId\", \"0000\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fac4fcc9-1bf8-45c3-939d-f0728fb24e30",
												"exec": [
													"pm.test(\"Response status is 404 when title not found\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
													"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/codex-packages\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages/{{wrongId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages",
												"{{wrongId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "/codex-packages/",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a5342e1b-56a4-4f64-bccc-c3260a895243",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fac4fcc9-1bf8-45c3-939d-f0728fb24e30",
												"exec": [
													"pm.test(\"Response status is 404 when title not found\", function () {",
													"    pm.response.to.have.status(404);",
													"    pm.response.to.have.body();",
													"});",
													"",
													"pm.test(\"Response having error message\", function () {",
													"    pm.response.to.be.withBody;",
													"    pm.expect(pm.response.text()).to.include(\"No suitable module found for path /codex-packages/\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages/",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"codex-packages",
												""
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "25ca6787-00f3-45be-9782-5f484ce81bf5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "39db352f-c649-40cd-b22f-f9ab726646aa",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_packageCollection.json\", JSON.parse(pm.environment.get(\"schema_packageCollection\")));",
							"tv4.addSchema(\"schema_package.json\", JSON.parse(pm.environment.get(\"schema_package\")));",
							"tv4.addSchema(\"schema_resultInfo.schema\", JSON.parse(pm.environment.get(\"schema_resultInfo\")));",
							"tv4.addSchema(\"schema_package.json\", JSON.parse(pm.environment.get(\"schema_package\")));",
							"tv4.addSchema(\"schema_sourceCollection.json\", JSON.parse(pm.environment.get(\"schema_sourceCollection\")));",
							"tv4.addSchema(\"schema_source.json\", JSON.parse(pm.environment.get(\"schema_source\")));",
							"tv4.addSchema(\"schema_selectionStatus.json\", JSON.parse(pm.environment.get(\"schema_selectionStatus\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.environment.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_packageType.json\", JSON.parse(pm.environment.get(\"schema_packageType\")));",
							"tv4.addSchema(\"schema_packageType.json\", JSON.parse(pm.environment.get(\"schema_packageType\")));",
							"tv4.addSchema(\"schema_coverage.json\", JSON.parse(pm.environment.get(\"schema_coverage\")));",
							"tv4.addSchema(\"schema_selectionStatus.json\", JSON.parse(pm.environment.get(\"schema_selectionStatus\")));",
							"tv4.addSchema(\"schema_resultInfo.schema\", JSON.parse(pm.environment.get(\"schema_resultInfo\")));",
							"tv4.addSchema(\"schema_package.json\", JSON.parse(pm.environment.get(\"schema_package\")));",
							"tv4.addSchema(\"schema_packageCollection.json\", JSON.parse(pm.environment.get(\"schema_packageCollection\")));"
						]
					}
				}
			]
		},
		{
			"name": "codex packages resources",
			"item": []
		},
		{
			"name": "codex packages sources",
			"item": [
				{
					"name": "/codex-packages-sources",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f0106b17-8a52-4c11-841a-ac4c1c701414",
								"exec": [
									"pm.test(\"Success test on json response when source modules that implement codex-packages exist\", function() {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response status is 200 when  when source modules that implement codex-packages exist\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Create, add and validate schema when source modules that implement codex-packages exists\", function() {",
									"       //Create and add schemas for validation",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_sourceCollection\")))).to.be.true;",
									"    //make sure no schema is missing",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/codex-packages-sources\");",
									"});",
									"if(pm.response.json().sources.length > 0){",
									"    var obj = pm.response.json().sources[0];",
									"    pm.test(\"Response contains expected module\", function () {",
									"        pm.expect(obj.name).includes(\"mod-codex-ekb\");",
									"    });",
									"    ",
									"    pm.test(\"Content-Type header has expected value\", function () {",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.contain(\"application/json\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/codex-packages-sources",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"codex-packages-sources"
							]
						},
						"description": "Test /codex-packages-sources"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7168841f-def6-4543-b513-883bcab61a56",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "de35be5f-2c55-4146-bb41-2aa93bf07e46",
						"type": "text/javascript",
						"exec": [
							"tv4.addSchema(\"schema_sourceCollection.json\", JSON.parse(pm.environment.get(\"schema_sourceCollection\")));",
							"tv4.addSchema(\"schema_source.json\", JSON.parse(pm.environment.get(\"schema_source\")));"
						]
					}
				}
			]
		},
		{
			"name": "tear-down configuration",
			"item": [
				{
					"name": "Check if apiUrl exists to delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79e2224b-0330-4da2-8119-a4aa8063098f",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"let apiUrlExists = pm.environment.get(\"apiUrlExists\");",
									"if((jsonData !==null && jsonData.configs.length >0) && apiUrlExists) {",
									"    //Api url previously existed -- DO NOT DELETE (end execution)",
									"    postman.setNextRequest(\"Check if customerId exists to delete\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.url)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.url)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/configurations/entries - Clean-up RM-API URL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d171baf7-b7ee-46d9-ac32-eb0a8fa3d38b",
								"exec": [
									"//Clean-up RM API URL configuration created during POST",
									"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-url-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{rm-api-url-id}}"
							]
						},
						"description": "Clean-up RM-API URL configuration"
					},
					"response": []
				},
				{
					"name": "Check if customerId exists to delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dbe6aec-56e0-42d8-a316-db054e72f2cf",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"let jsonData = pm.response.json();",
									"let customerIdExists = pm.environment.get(\"customerIdExists\");",
									"if((jsonData !==null && jsonData.configs.length >0) && customerIdExists) {",
									"    //customer id do not existed -- DO NOT DELETE (end execution)",
									"    postman.setNextRequest(\"Check if apiKey exists to delete\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.customerId)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.customerId)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/configurations/entries - Clean-up RM-API CustomerId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5272edee-cb6c-40c9-8fc3-ff08585cd210",
								"exec": [
									"//Clean-up RM API customer configuration created during POST",
									"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-customer-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{rm-api-customer-id}}"
							]
						},
						"description": "Clean-up RM-API CustomerId configuration"
					},
					"response": []
				},
				{
					"name": "Check if apiKey exists to delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87ce7882-a1cf-4799-87dc-71de37093375",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"let flagApiUrl = pm.environment.get(\"apiKeyExists\");",
									"if((jsonData !==null && jsonData.configs.length >0) && flagApiUrl) {",
									"    //Api URL do not exists -- do not DELETE\");",
									"    postman.setNextRequest(null);",
									"}",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=(module==EKB and configName==api_access and code==kb.ebsco.apiKey)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries"
							],
							"query": [
								{
									"key": "query",
									"value": "(module==EKB and configName==api_access and code==kb.ebsco.apiKey)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/configurations/entries - Clean-up RM-API Key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9417a7-609d-42de-bb41-87a93d38ba65",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e32fd54e-e57e-45d9-8a69-76fd0c81f95a",
								"exec": [
									"//Clean-up RM API Key configuration created during POST",
									"pm.test(\"Verify RM API URL deletion with status 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-permissions' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-permissions\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries/{{rm-api-key-id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"configurations",
								"entries",
								"{{rm-api-key-id}}"
							]
						},
						"description": "Clean-up RM-API Key configuration"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1027eea9-68c4-48eb-8193-b4c405e8f182",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "352349d2-1dae-47f1-b9bd-bccbc161503d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}