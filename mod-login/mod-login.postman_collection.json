{
	"info": {
		"_postman_id": "faf4c05c-18f5-48f9-bef5-6c655dd0770a",
		"name": "mod-login",
		"description": "Tests for mod-login",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authn",
			"item": [
				{
					"name": "login",
					"item": [
						{
							"name": "/authn/login - 201",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "410bf3b9-be3b-4bc6-851c-3a55f3c627f3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"loginCredentials.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"pm.test(\"validate data\", function() {",
											"   pm.expect(pm.response.json().username === pm.environment.get(\"username\")).to.be.true;",
											"   pm.expect(pm.response.json().password === pm.environment.get(\"password\")).to.be.true;",
											"});",
											"",
											"pm.test(\"token header\", function() {",
											"   pm.expect(pm.response.headers.has(\"X-Okapi-Token\")).to.be.true; ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test"
							},
							"response": []
						},
						{
							"name": "/authn/login - 400 (missing username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90fd5a17-23bd-4eb9-9283-1aa7c87aa420",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - missing username\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test missing the username"
							},
							"response": []
						},
						{
							"name": "/authn/login - 422 (empty username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5c54a5d-8722-473d-a3a0-f89f3b218c02",
										"exec": [
											"// https://issues.folio.org/browse/MODLOGIN-107",
											"pm.test(\"422 test - empty username\", function() {",
											"    pm.response.to.have.status(422);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test with an empty username."
							},
							"response": []
						},
						{
							"name": "/authn/login - 422 (empty userId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a625837-f97c-4be5-bb29-a44a1035bbe0",
										"exec": [
											"// https://issues.folio.org/browse/MODLOGIN-107",
											"pm.test(\"422 test (empty userId\", function() {",
											"    pm.response.to.have.status(422);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"userId\": \"\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test with an empty userId."
							},
							"response": []
						},
						{
							"name": "/authn/login - 422 (unknown username)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f39474de-0d54-4575-ab17-dfa8aba74e5b",
										"exec": [
											"// https://issues.folio.org/browse/MODLOGIN-107",
											"pm.test(\"422 test - unknown username\", function() {",
											"    pm.response.to.have.status(422);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"xyzzy\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test with an unknown username."
							},
							"response": []
						},
						{
							"name": "/authn/login - 422 (unknown userId)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efce7751-255f-46df-a3b6-a134c53a8fd7",
										"exec": [
											"// https://issues.folio.org/browse/MODLOGIN-107",
											"pm.test(\"422 test (unknown userId\", function() {",
											"    pm.response.to.have.status(422);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"userId\": \"xyzzy\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test with an unknown userId."
							},
							"response": []
						},
						{
							"name": "/authn/login - 400 (missing password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4abb90f-840b-4aab-be51-55461507d289",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - missing password\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test missing the password"
							},
							"response": []
						},
						{
							"name": "/authn/login - 422 (empty password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6852cfac-457a-4ec3-87b4-13b11a9eead2",
										"exec": [
											"// https://issues.folio.org/browse/MODLOGIN-107",
											"pm.test(\"422 test - empty password\", function() {",
											"    pm.response.to.have.status(422);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test with an empty password"
							},
							"response": []
						},
						{
							"name": "/authn/login - 422 (bad password)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6852cfac-457a-4ec3-87b4-13b11a9eead2",
										"exec": [
											"// https://issues.folio.org/browse/MODLOGIN-107",
											"pm.test(\"422 test - empty password\", function() {",
											"    pm.response.to.have.status(422);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"xyzzy\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test with an bad password"
							},
							"response": []
						},
						{
							"name": "/authn/login - 400 (empty JSON)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68011fd0-507a-4950-b76f-9626583e720a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - empty body\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test with an empty JSON body"
							},
							"response": []
						},
						{
							"name": "/authn/login - 400 (invalid JSON)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94908bcf-48a0-462c-99db-77271d6a080a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - invalid JSON\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\"\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test with invalid JSON"
							},
							"response": []
						},
						{
							"name": "/authn/login - 400 (no content-type header)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94908bcf-48a0-462c-99db-77271d6a080a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - invalid JSON\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\"\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test without the content-type header"
							},
							"response": []
						},
						{
							"name": "/authn/login - 400 (no tenant header)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f89eb7a6-cb3f-400a-9795-b8b38ed9e40d",
										"exec": [
											"// by default it uses supertenant if no tenant header is provided",
											"// so the response code varies depends on auth is enabled for supertenant",
											"pm.test(\"4xx test - no tenant header\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([404, 422]);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Login test without the tenant header. It is returning a 403, which kind of makes sense, but 403 is not a documented return status for this API in the API docs."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "credentials",
					"item": [
						{
							"name": "/authn/credentials - 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "daba9c28-606a-4952-b399-88207fe12dde",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a135d19c-4431-427e-bca9-6312281666fb",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    tv4.addSchema(\"credentials.json\", pm.variables.get(\"credentials.schema\"));",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"credentialsList.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Test listing credentials"
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3dcc00f1-081d-4205-bd4e-7b4173767f7b",
										"type": "text/javascript",
										"exec": [
											"// Since we log in before each test, to create a 401, simply remove the auth token",
											"pm.environment.unset('xokapitoken-authn-credentials');"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f3bf31cf-c9d7-4bdc-a82b-5f9417a46c3c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"401 test\", function() {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Check for auth token not set"
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e5e2257-1788-43d1-8908-b0d79ca6bc0e",
										"type": "text/javascript",
										"exec": [
											"// Here we need to cause a 403 to see if the backend will 1) be able to handle this and",
											"// 2) see if it is checking for the proper permission. To do this we need to execute",
											"// several additional API calls.",
											"// 1. We create a user",
											"// 2. If the user is created successfully, we add credentials to the user",
											"// 3. If that succeeds, we add empty permissions to the user (otherwise, API calls for",
											"//    the user would return 500).",
											"// 4. If that succeeds, we log in the user and save the userr's auth token, which is",
											"//    used as the X-Okapi-Token header for this test.",
											"var uuid = require('uuid');",
											"",
											"pm.environment.set('test_user_id', uuid.v4());",
											"",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user creation error: \" + err);",
											"    } else {",
											"        if (res.code === 201) {",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
											"                method: 'POST',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential creation error: \" + err);",
											"                } else {",
											"                    if (res.code === 201) {",
											"                        pm.environment.set('test_user_credId', res.json().id);",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
											"                            method: 'POST',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            },",
											"                            body: {",
											"                                mode: 'raw',",
											"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"permissions creation error: \" + err);",
											"                            } else {",
											"                                if (res.code === 201) {",
											"                                    pm.environment.set('test_user_permsId', res.json().id);",
											"                                    pm.sendRequest({",
											"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
											"                                        method: 'POST',",
											"                                        header: {",
											"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                            'Content-Type': 'application/json'",
											"                                        },",
											"                                        body: {",
											"                                            mode: 'raw',",
											"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
											"                                        }",
											"                                    }, function(err, res) {",
											"                                        if (err !== null) {",
											"                                            console.log(\"Test user login error: \" + err);",
											"                                        } else {",
											"                                            if (res.code === 201) {",
											"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
											"                                            } else {",
											"                                                console.log(\"Test user login failed: \" + res.reason());",
											"                                            }",
											"                                        }",
											"                                    });",
											"                                } else {",
											"                                    console.log(\"permissions creation failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Auth creation failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User creation failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1e730b47-e4ff-495c-9ccd-a23b738a872c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"403 test\", function() {",
											"    pm.response.to.have.status(403);",
											"    pm.response.to.have.body();",
											"});",
											"",
											"// Now we need to remove the test user and related data from the database by calling",
											"// the DELETE APIs for what we issued in the pre-request script.",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.environment.unset('test_user_token');",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
											"    method: 'DELETE',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user deletion error: \" + err);",
											"    } else {",
											"        if (res.code === 204) {",
											"            pm.environment.unset('test_user_id');",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
											"                method: 'DELETE',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential deletion error: \" + err);",
											"                } else {",
											"                    if (res.code === 204) {",
											"                        pm.environment.unset('test_user_credId');",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
											"                            method: 'DELETE',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"Permissions deletion error: \" + err);",
											"                            } else {",
											"                                if (res.code === 204) {",
											"                                    pm.environment.unset('test_user_permsId');",
											"                                } else {",
											"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Credential deletion failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User deletion failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{test_user_token}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "List credentials with a user that does not have access"
							},
							"response": []
						},
						{
							"name": "/authn/credentials?length= - 400 (empty length)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5ab7801e-1f4f-405d-a103-aba02c47fbce",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - empty length\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?length=",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "length",
											"value": ""
										}
									]
								},
								"description": "400 test for empty length"
							},
							"response": []
						},
						{
							"name": "/authn/credentials?start= - 400 (empty start)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a099415b-afc9-4843-9fa9-03b6045dc91b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - empty start\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?start=",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "start",
											"value": ""
										}
									]
								},
								"description": "400 test for empty start"
							},
							"response": []
						},
						{
							"name": "/authn/credentials?length=-1 - 400 (negative length: currently a 500)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac061d8d-ec2b-42da-b01a-8cdfb6426f02",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - negative length\", function() {",
											"    pm.response.to.have.status(500);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?length=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "length",
											"value": "-1"
										}
									]
								},
								"description": "400 test for negative length. See [MODLOGIN-23](https://issues.folio.org/browse/MODLOGIN-23)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials?start=-1 - 400 (negative start: currently a 500)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3062aca1-143c-43b3-90aa-0ef3a8983cdb",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - negative start\", function() {",
											"    pm.response.to.have.status(500);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?start=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "start",
											"value": "-1"
										}
									]
								},
								"description": "400 test for negative start. See [MODLOGIN-23](https://issues.folio.org/browse/MODLOGIN-23)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials?length=0 - 400 (length=0: currently a 200)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ad203a1a-6429-4805-bb2c-7c0ead4a32f9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - length=0\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?length=0",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "length",
											"value": "0"
										}
									]
								},
								"description": "400 test for length=0. See [MODLOGIN-23](https://issues.folio.org/browse/MODLOGIN-23)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials?start=0 - 400 (start=0: currently a 500)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6b6f88aa-56df-45cd-ac2c-70314dde22ec",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - start=0\", function() {",
											"    pm.response.to.have.status(500);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?start=0",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "start",
											"value": "0"
										}
									]
								},
								"description": "400 test for start=0. See [MODLOGIN-23](https://issues.folio.org/browse/MODLOGIN-23)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials?length=1001 - 400 (limit exceeds max length: currently a 200)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1a792dc4-e101-469d-8ada-305f74bd2cbe",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - length exceeds max\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?length=1001",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "length",
											"value": "1001"
										}
									]
								},
								"description": "400 test for length greater than the max. See [MODLOGIN-23](https://issues.folio.org/browse/MODLOGIN-23)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials?start=1001 - 400 (start exceeds max start:currently a 200)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cd1c1220-2a70-4a5e-bfaa-48fa26505552",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - start exceeds max\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?start=1001",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "start",
											"value": "1001"
										}
									]
								},
								"description": "400 test for start greater than the max. See [MODLOGIN-23](https://issues.folio.org/browse/MODLOGIN-23)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials?length=-2147483649 - 400 (length exceeds min int)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73d70859-3316-4912-b77b-efcb504c2b85",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - length less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?length=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "length",
											"value": "-2147483649"
										}
									]
								},
								"description": "400 test for length less than Integer.MIN_VALUE (-2147483648)"
							},
							"response": []
						},
						{
							"name": "/authn/credentials?start=-2147483649 - 400 (start exceeds min offset)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "352f8510-ccc1-44fe-b84a-94e600d62b29",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - start less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?start=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "start",
											"value": "-2147483649"
										}
									]
								},
								"description": "400 test for start less than Integer.MIN_VALUE (-2147483648)"
							},
							"response": []
						},
						{
							"name": "/authn/credentials?length=2147483648 - 400 (length exceeds max int)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dd765a9b-f3a3-4e94-8290-ad3f284927a8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - length greater than Integer.MAX_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?length=2147483648",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "length",
											"value": "2147483648"
										}
									]
								},
								"description": "400 test for length greater than Integer.MAX_VALUE (2147483647)"
							},
							"response": []
						},
						{
							"name": "/authn/credentials?start=2147483648 - 400 (start exceeds max int)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10ae736d-07c0-4896-b686-af22d81e9f9b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - offset greater than Integer.MAX_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?start=2147483648",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "start",
											"value": "2147483648"
										}
									]
								},
								"description": "400 test for start greater than Integer.MAX_VALUE (2147483647)"
							},
							"response": []
						},
						{
							"name": "/authn/credentials?query=foo* - 400 (bad CQL: currently a 500)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e7f73823-f907-4d61-9a9f-304cfd8c63f4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - bad CQL\", function() {",
											"    pm.response.to.have.status(500); // Should be 400!",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?query=foo*",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "query",
											"value": "foo*"
										}
									]
								},
								"description": "400 test for some weird query. See [MODLOGIN-23](https://issues.folio.org/browse/MODLOGIN-23)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials?sortBy= - 400 (empty sortBy: currently a 200)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "486e3c09-4c3e-483f-b367-9a02a2ebea72",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - empty sortBy\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?sortBy=",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "sortBy",
											"value": ""
										}
									]
								},
								"description": "400 test for no sortBy. The sortBy query argumnt is ignored by this API. See [MODLOGIN-23](https://issues.folio.org/browse/MODLOGIN-23). When not ignored, we need more API tests for sortBy."
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7c8acbaa-49b8-48eb-b6b8-7553be2db8ee",
										"type": "text/javascript",
										"exec": [
											"// Create a user so that we can add credentials to the user via the API test.",
											"var uuid = require('uuid');",
											"",
											"pm.environment.set('test_user_id', uuid.v4());",
											"",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id')})",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user creation error: \" + err);",
											"    } else {",
											"        if (res.code !== 201) {",
											"            console.log(\"User creation failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "929f9318-5667-4043-91f6-2389e5ed2c66",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"credentials.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    pm.response.to.have.jsonBody(\"id\");",
											"    pm.response.to.have.jsonBody(\"userId\", pm.environment.get(\"test_user_id\"));",
											"    pm.response.to.have.jsonBody(\"hash\");",
											"    pm.response.to.have.jsonBody(\"salt\");",
											"    //pm.response.to.have.jsonBody(\"metadata\"); // metadata not set?",
											"});",
											"",
											"pm.environment.set('authnCredentialsUUID', pm.response.json().id);",
											"pm.environment.set(\"authnCredentialsJSON\", pm.response.json());",
											"",
											"// Remove the user that was created via the pre-request script",
											"pm.environment.unset('test_user_token');",
											"",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
											"    method: 'DELETE',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user deletion error: \" + err);",
											"    } else {",
											"        if (res.code === 204) {",
											"            pm.environment.unset('test_user_id');",
											"        } else {",
											"            console.log(\"User deletion failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"test_user\",\n\t\"password\": \"12345\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Create new credentials for a user."
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b657609d-d577-478e-a42c-ec673858d8ed",
										"type": "text/javascript",
										"exec": [
											"// Since we log in before each test, to create a 401, simply remove the auth token",
											"pm.environment.unset('xokapitoken-authn-credentials');"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "efb9d1a5-d09f-4a98-9f16-55cf8556a01b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"401 test\", function() {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Create new credentials with an invalid token"
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6b1f3f42-61af-47f1-be79-e02ace06bb5b",
										"type": "text/javascript",
										"exec": [
											"// Here we need to cause a 403 to see if the backend will 1) be able to handle this and",
											"// 2) see if it is checking for the proper permission. To do this we need to execute",
											"// several additional API calls.",
											"// 1. We create a user",
											"// 2. If the user is created successfully, we add credentials to the user",
											"// 3. If that succeeds, we add empty permissions to the user (otherwise, API calls for",
											"//    the user would return 500).",
											"// 4. If that succeeds, we log in the user and save the userr's auth token, which is",
											"//    used as the X-Okapi-Token header for this test.",
											"var uuid = require('uuid');",
											"",
											"pm.environment.set('test_user_id', uuid.v4());",
											"",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user creation error: \" + err);",
											"    } else {",
											"        if (res.code === 201) {",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
											"                method: 'POST',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential creation error: \" + err);",
											"                } else {",
											"                    if (res.code === 201) {",
											"                        pm.environment.set('test_user_credId', res.json().id);",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
											"                            method: 'POST',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            },",
											"                            body: {",
											"                                mode: 'raw',",
											"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"permissions creation error: \" + err);",
											"                            } else {",
											"                                if (res.code === 201) {",
											"                                    pm.environment.set('test_user_permsId', res.json().id);",
											"                                    pm.sendRequest({",
											"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
											"                                        method: 'POST',",
											"                                        header: {",
											"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                            'Content-Type': 'application/json'",
											"                                        },",
											"                                        body: {",
											"                                            mode: 'raw',",
											"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
											"                                        }",
											"                                    }, function(err, res) {",
											"                                        if (err !== null) {",
											"                                            console.log(\"Test user login error: \" + err);",
											"                                        } else {",
											"                                            if (res.code === 201) {",
											"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
											"                                            } else {",
											"                                                console.log(\"Test user login failed: \" + res.reason());",
											"                                            }",
											"                                        }",
											"                                    });",
											"                                } else {",
											"                                    console.log(\"permissions creation failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Auth creation failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User creation failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b1e55b67-3e8d-4840-a98f-697bd8b6945b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"403 test\", function() {",
											"    pm.response.to.have.status(403);",
											"    pm.response.to.have.body();",
											"});",
											"",
											"// Now we need to remove the test user and related data from the database by calling",
											"// the DELETE APIs for what we issued in the pre-request script.",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.environment.unset('test_user_token');",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
											"    method: 'DELETE',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user deletion error: \" + err);",
											"    } else {",
											"        if (res.code === 204) {",
											"            pm.environment.unset('test_user_id');",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
											"                method: 'DELETE',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential deletion error: \" + err);",
											"                } else {",
											"                    if (res.code === 204) {",
											"                        pm.environment.unset('test_user_credId');",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
											"                            method: 'DELETE',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"Permissions deletion error: \" + err);",
											"                            } else {",
											"                                if (res.code === 204) {",
											"                                    pm.environment.unset('test_user_permsId');",
											"                                } else {",
											"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Credential deletion failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User deletion failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{test_user_token}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{authnCredentialsUUID}}\",\n\t\"name\": \"Test credentials: {{authnCredentialsUUID}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Create new credentials with a user that does not have access"
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 422 (user already has credentials)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a1b3f727-1f7e-427d-b053-6fa876285c31",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cd837216-96e8-4909-9a01-ef2ff63f9700",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"422 test - user already has credentials\", function() {",
											"    pm.response.to.have.status(422);",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
											"    tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"{{username}}\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Create new credentials for a user that already has credentials"
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 422 (no password: currently a 500)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "91d960c6-9560-4c64-b644-8018961afefa",
										"type": "text/javascript",
										"exec": [
											"// Create a user so that we can try to add credentials to the user with the test.",
											"var uuid = require('uuid');",
											"",
											"pm.environment.set('test_user_id', uuid.v4());",
											"",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id')})",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user creation error: \" + err);",
											"    } else {",
											"        if (res.code !== 201) {",
											"            console.log(\"User creation failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0674c385-db37-409e-ab80-660be9c16c0d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"422 test - no password in JSON\", function() {",
											"    pm.response.to.have.status(500);",
											"    // pm.response.to.be.json;",
											"});",
											"",
											"// uncomment below when the JIRA ticket is fixed (see test description)",
											"// pm.test(\"validate schema\", function() {",
											"//     tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
											"//     tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
											"",
											"//     pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.be.true;",
											"//     pm.expect(tv4.missing).to.be.empty;",
											"// });",
											"",
											"// Remove the user we created in the pre-request script",
											"pm.environment.unset('test_user_token');",
											"",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
											"    method: 'DELETE',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user deletion error: \" + err);",
											"    } else {",
											"        if (res.code === 204) {",
											"            pm.environment.unset('test_user_id');",
											"        } else {",
											"            console.log(\"User deletion failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"test_user\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Create new credentials for a user without setting the password. See [MODLOGIN-24](https://issues.folio.org/browse/MODLOGIN-24)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 422 (unknown userId: currently a 201)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d612dfe2-633d-4d98-abd3-f0afa382d3d7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c330903-7ae3-4f1f-bdd3-e0387a9215a5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"422 test - unknown userId in JSON\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.json;",
											"});",
											"",
											"// uncomment below when the JIRA ticket is fixed (see test description)",
											"// pm.test(\"validate schema\", function() {",
											"//     tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
											"//     tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
											"",
											"//     pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.be.true;",
											"//     pm.expect(tv4.missing).to.be.empty;",
											"// });",
											"",
											"",
											"// REMOVE BELOW when the JIRA in the test description is fixed!",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.response.json().id,",
											"    method: 'DELETE',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user deletion error: \" + err);",
											"    } else {",
											"        if (res.code !== 204) {",
											"            console.log(\"User deletion failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"userId\": \"unknown_user\",\n\t\"password\": \"12345\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Create new credentials for a user with an unknown userId. See [MODLOGIN-25](https://issues.folio.org/browse/MODLOGIN-25)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 400 (unknown username: I think this should be 422)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d612dfe2-633d-4d98-abd3-f0afa382d3d7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0d11299-2056-4f02-a7da-b66d68ab4ba7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - unknown userId in JSON\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body;",
											"});",
											"",
											"// uncomment below if this becomes a 422",
											"// pm.test(\"validate schema\", function() {",
											"//     tv4.addSchema(\"error.schema\", pm.variables.get(\"error.schema\"));",
											"//     tv4.addSchema(\"parameters.schema\", pm.variables.get(\"parameters.schema\"));",
											"",
											"//     pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"errors.schema\"))).to.be.true;",
											"//     pm.expect(tv4.missing).to.be.empty;",
											"// });",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"unknown_user\",\n\t\"password\": \"12345\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Create new credentials for a user with an unknown username. This currently returns 400, but by returning a 422, multiple fields could be validated and mutiple errors could be returned. There should be consistency between 422 vs 400 errors."
							},
							"response": []
						},
						{
							"name": "/authn/credentials - 400 (bad JSON)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69886924-2ba1-40d2-99a9-25878557c868",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "accb4c86-5b9e-4d08-9be2-4f6c50cb02c8",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - bad JSON\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								},
								"description": "Create new credentials with a bad JSON body"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bced40d4-00e4-41c1-bfdc-64866e6cff2e",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"credentials.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"authnCredentialsUUID\"));",
											"   pm.response.to.have.jsonBody(\"userId\");",
											"   pm.response.to.have.jsonBody(\"salt\");",
											"   pm.response.to.have.jsonBody(\"hash\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Return existing credentials"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c8c73859-2af4-409e-a2b0-d540347cca5f",
										"type": "text/javascript",
										"exec": [
											"// Since we log in before each test, to create a 401, simply remove the auth token",
											"pm.environment.unset('xokapitoken-authn-credentials');"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab1ef2af-e00d-4b8c-aadb-97c77f4406c7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"401 test\", function() {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.body();",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Return an existing credentials using an invalid token"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "243a29da-5c5c-44db-9960-2492b2995e42",
										"type": "text/javascript",
										"exec": [
											"// Here we need to cause a 403 to see if the backend will 1) be able to handle this and",
											"// 2) see if it is checking for the proper permission. To do this we need to execute",
											"// several additional API calls.",
											"// 1. We create a user",
											"// 2. If the user is created successfully, we add credentials to the user",
											"// 3. If that succeeds, we add empty permissions to the user (otherwise, API calls for",
											"//    the user would return 500).",
											"// 4. If that succeeds, we log in the user and save the userr's auth token, which is",
											"//    used as the X-Okapi-Token header for this test.",
											"var uuid = require('uuid');",
											"",
											"pm.environment.set('test_user_id', uuid.v4());",
											"",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user creation error: \" + err);",
											"    } else {",
											"        if (res.code === 201) {",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
											"                method: 'POST',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential creation error: \" + err);",
											"                } else {",
											"                    if (res.code === 201) {",
											"                        pm.environment.set('test_user_credId', res.json().id);",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
											"                            method: 'POST',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            },",
											"                            body: {",
											"                                mode: 'raw',",
											"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"permissions creation error: \" + err);",
											"                            } else {",
											"                                if (res.code === 201) {",
											"                                    pm.environment.set('test_user_permsId', res.json().id);",
											"                                    pm.sendRequest({",
											"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
											"                                        method: 'POST',",
											"                                        header: {",
											"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                            'Content-Type': 'application/json'",
											"                                        },",
											"                                        body: {",
											"                                            mode: 'raw',",
											"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
											"                                        }",
											"                                    }, function(err, res) {",
											"                                        if (err !== null) {",
											"                                            console.log(\"Test user login error: \" + err);",
											"                                        } else {",
											"                                            if (res.code === 201) {",
											"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
											"                                            } else {",
											"                                                console.log(\"Test user login failed: \" + res.reason());",
											"                                            }",
											"                                        }",
											"                                    });",
											"                                } else {",
											"                                    console.log(\"permissions creation failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Auth creation failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User creation failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5a43dd66-9bc0-4cf1-857c-9732be2b5301",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"403 test\", function() {",
											"    pm.response.to.have.status(403);",
											"    pm.response.to.have.body();",
											"});",
											"",
											"// Now we need to remove the test user and related data from the database by calling",
											"// the DELETE APIs for what we issued in the pre-request script.",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.environment.unset('test_user_token');",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
											"    method: 'DELETE',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user deletion error: \" + err);",
											"    } else {",
											"        if (res.code === 204) {",
											"            pm.environment.unset('test_user_id');",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
											"                method: 'DELETE',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential deletion error: \" + err);",
											"                } else {",
											"                    if (res.code === 204) {",
											"                        pm.environment.unset('test_user_credId');",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
											"                            method: 'DELETE',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"Permissions deletion error: \" + err);",
											"                            } else {",
											"                                if (res.code === 204) {",
											"                                    pm.environment.unset('test_user_permsId');",
											"                                } else {",
											"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Credential deletion failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User deletion failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{test_user_token}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Return an existing credentials using a user that does not have access"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/12345 - 400 (invalid ID: currently 404)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9d1eacfb-14e4-4fcf-9e4a-9448448716c3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d73eae7b-75aa-4fe0-bbe6-2ad2212dc3d6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(404); // Should be 400!",
											"    pm.response.to.have.body();",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/12345",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"12345"
									]
								},
								"description": "Return an existing credentials using an invalid UUID on the URL. I posit that the response status code should be consistent with PUT and DELETE, returning 400. Currently, this returns 404. See [MODINVSTOR-78](https://issues.folio.org/browse/MODINVSTOR-78)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials?length=1000 - 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "216f6b09-d548-44d4-aaf1-54feb9bfffd5",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    tv4.addSchema(\"credentials.json\", pm.variables.get(\"credentials.schema\"));",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"credentialsList.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"pm.test(\"Test list for added credentials\", function() {",
											"   pm.expect(pm.response.json().credentials).to.be.an('array').to.include.deep.members([pm.environment.get(\"authnCredentialsJSON\")]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?length=1000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "length",
											"value": "1000"
										}
									]
								},
								"description": "Test listing credentials to ensure added item is in the list. Need a higher length than 10 in case there are more than 10 credentials already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
							},
							"response": []
						},
						{
							"name": "/authn/credentials?query=(id=={id}) - 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "85b7ae5c-5d77-4b46-b2ec-6e79269106bd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    tv4.addSchema(\"credentials.json\", pm.variables.get(\"credentials.schema\"));",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"credentialsList.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"pm.test(\"Test list for added credentials\", function() {",
											"   pm.expect(pm.response.json().credentials).to.be.an('array').to.include.deep.members([pm.environment.get(\"authnCredentialsJSON\")]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?query=(id=={{authnCredentialsUUID}})",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "query",
											"value": "(id=={{authnCredentialsUUID}})"
										}
									]
								},
								"description": "Test listing credentials to ensure added item is in the list by querying the id directly."
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "97ec4b7a-314b-420e-a683-d07e4c76ddf9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"loginCredentials.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"pm.test(\"validate updated password\", function() {",
											"   pm.expect(pm.response.json().username).to.equal(\"test_user\");",
											"   pm.expect(pm.response.json().password).to.equal(\"67890\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"test_user\",\n\t\"password\": \"67890\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Update existing credentials. PUT is seriously broken! See [MODLOGIN-26](https://issues.folio.org/browse/MODLOGIN-26)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4a8d55a-35f2-4783-bb64-ee1144397e9f",
										"type": "text/javascript",
										"exec": [
											"// Since we log in before each test, to create a 401, simply remove the auth token",
											"pm.environment.unset('xokapitoken-authn-credentials');"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e0f7cfc5-11a3-4d93-93a4-283ef8b0c552",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"401 test\", function() {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.body();",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"test_user\",\n\t\"password\": \"12345\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Update existing credentials using an invalid token"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c8ad6769-25f4-4f33-ba05-09ed205c916a",
										"type": "text/javascript",
										"exec": [
											"// Here we need to cause a 403 to see if the backend will 1) be able to handle this and",
											"// 2) see if it is checking for the proper permission. To do this we need to execute",
											"// several additional API calls.",
											"// 1. We create a user",
											"// 2. If the user is created successfully, we add credentials to the user",
											"// 3. If that succeeds, we add empty permissions to the user (otherwise, API calls for",
											"//    the user would return 500).",
											"// 4. If that succeeds, we log in the user and save the userr's auth token, which is",
											"//    used as the X-Okapi-Token header for this test.",
											"var uuid = require('uuid');",
											"",
											"pm.environment.set('test_user_id', uuid.v4());",
											"",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user creation error: \" + err);",
											"    } else {",
											"        if (res.code === 201) {",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
											"                method: 'POST',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential creation error: \" + err);",
											"                } else {",
											"                    if (res.code === 201) {",
											"                        pm.environment.set('test_user_credId', res.json().id);",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
											"                            method: 'POST',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            },",
											"                            body: {",
											"                                mode: 'raw',",
											"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"permissions creation error: \" + err);",
											"                            } else {",
											"                                if (res.code === 201) {",
											"                                    pm.environment.set('test_user_permsId', res.json().id);",
											"                                    pm.sendRequest({",
											"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
											"                                        method: 'POST',",
											"                                        header: {",
											"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                            'Content-Type': 'application/json'",
											"                                        },",
											"                                        body: {",
											"                                            mode: 'raw',",
											"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
											"                                        }",
											"                                    }, function(err, res) {",
											"                                        if (err !== null) {",
											"                                            console.log(\"Test user login error: \" + err);",
											"                                        } else {",
											"                                            if (res.code === 201) {",
											"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
											"                                            } else {",
											"                                                console.log(\"Test user login failed: \" + res.reason());",
											"                                            }",
											"                                        }",
											"                                    });",
											"                                } else {",
											"                                    console.log(\"permissions creation failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Auth creation failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User creation failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a59a5036-727a-47db-900f-c856105458d3",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"403 test\", function() {",
											"    pm.response.to.have.status(403);",
											"    pm.response.to.have.body();",
											"});",
											"",
											"// Now we need to remove the test user and related data from the database by calling",
											"// the DELETE APIs for what we issued in the pre-request script.",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.environment.unset('test_user_token');",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
											"    method: 'DELETE',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user deletion error: \" + err);",
											"    } else {",
											"        if (res.code === 204) {",
											"            pm.environment.unset('test_user_id');",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
											"                method: 'DELETE',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential deletion error: \" + err);",
											"                } else {",
											"                    if (res.code === 204) {",
											"                        pm.environment.unset('test_user_credId');",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
											"                            method: 'DELETE',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"Permissions deletion error: \" + err);",
											"                            } else {",
											"                                if (res.code === 204) {",
											"                                    pm.environment.unset('test_user_permsId');",
											"                                } else {",
											"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Credential deletion failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User deletion failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{test_user_token}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"test_user\",\n\t\"password\": \"12345\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Update existing credentials using a user that does not have access"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/12345 - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ead01916-7047-4da1-b3a7-71828cf7f0ac",
										"exec": [
											"pm.test(\"404 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"test_user\",\n\t\"password\": \"12345\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/12345",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"12345"
									]
								},
								"description": "Update an existing credentials with an invalid UUID. See [MODLOGIN-27](https://issues.folio.org/browse/MODLOGIN-27)."
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6377485-3ac4-4789-84a8-c1120df8ad31",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"credentials.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"authnCredentialsJSON\").id);",
											"   pm.response.to.have.jsonBody(\"userId\", pm.environment.get(\"authnCredentialsJSON\").userId);",
											"   pm.expect(pm.response.json().salt).to.not.be.eql(pm.environment.get(\"authnCredentialsJSON\").salt);",
											"   pm.expect(pm.response.json().hash).to.not.be.eql(pm.environment.get(\"authnCredentialsJSON\").hash);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Return an existing credentials"
							},
							"response": []
						},
						{
							"name": "/authn/credentials?length=1000 - 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cfbac02f-dba9-4762-a969-d27e5b2c14f7",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    tv4.addSchema(\"credentials.json\", pm.variables.get(\"credentials.schema\"));",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"credentialsList.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"pm.test(\"Test list for deleted credentials\", function() {",
											"    pm.expect(pm.response.json().credentials).to.be.an('array');",
											"",
											"    let found = false;",
											"    for (let i in pm.response.json().credentials) {",
											"        if (pm.response.json().credentials[i].id === pm.environment.get(\"authnCredentialsJSON\").id) {",
											"            pm.expect(pm.response.json().credentials[i].userId).to.be.eql(pm.environment.get(\"authnCredentialsJSON\").userId);",
											"            pm.expect(pm.response.json().credentials[i].salt).to.not.be.eql(pm.environment.get(\"authnCredentialsJSON\").salt);",
											"            pm.expect(pm.response.json().credentials[i].hash).to.not.be.eql(pm.environment.get(\"authnCredentialsJSON\").hash);",
											"",
											"            found = true;",
											"            break;",
											"        }",
											"    }",
											"",
											"    pm.expect(found).to.be.true;",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?length=1000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "length",
											"value": "1000"
										}
									]
								},
								"description": "Test listing credentials to ensure modified item is in the list. Need a higher length than 10 in case there are more than 10 credentials already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 204",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9de69792-028e-4c29-a837-e32af804f7de",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.not.have.body();",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Delete existing credentials"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26fd8016-f2ff-439b-b0cc-9ee9952bacc1",
										"type": "text/javascript",
										"exec": [
											"// Since we log in before each test, to create a 401, simply remove the auth token",
											"pm.environment.unset('xokapitoken-authn-credentials');"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0f21f94f-1c42-4aa5-b6b5-f77c2108a02a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"401 test\", function() {",
											"    pm.response.to.have.status(401);",
											"    pm.response.to.have.body();",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Delete existing credentials using an invalid token"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d74c8611-cdf9-4d8f-9f68-e744ce924730",
										"type": "text/javascript",
										"exec": [
											"// Here we need to cause a 403 to see if the backend will 1) be able to handle this and",
											"// 2) see if it is checking for the proper permission. To do this we need to execute",
											"// several additional API calls.",
											"// 1. We create a user",
											"// 2. If the user is created successfully, we add credentials to the user",
											"// 3. If that succeeds, we add empty permissions to the user (otherwise, API calls for",
											"//    the user would return 500).",
											"// 4. If that succeeds, we log in the user and save the userr's auth token, which is",
											"//    used as the X-Okapi-Token header for this test.",
											"var uuid = require('uuid');",
											"",
											"pm.environment.set('test_user_id', uuid.v4());",
											"",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
											"    method: 'POST',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active: true})",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user creation error: \" + err);",
											"    } else {",
											"        if (res.code === 201) {",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
											"                method: 'POST',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential creation error: \" + err);",
											"                } else {",
											"                    if (res.code === 201) {",
											"                        pm.environment.set('test_user_credId', res.json().id);",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
											"                            method: 'POST',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            },",
											"                            body: {",
											"                                mode: 'raw',",
											"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"permissions creation error: \" + err);",
											"                            } else {",
											"                                if (res.code === 201) {",
											"                                    pm.environment.set('test_user_permsId', res.json().id);",
											"                                    pm.sendRequest({",
											"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
											"                                        method: 'POST',",
											"                                        header: {",
											"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                            'Content-Type': 'application/json'",
											"                                        },",
											"                                        body: {",
											"                                            mode: 'raw',",
											"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
											"                                        }",
											"                                    }, function(err, res) {",
											"                                        if (err !== null) {",
											"                                            console.log(\"Test user login error: \" + err);",
											"                                        } else {",
											"                                            if (res.code === 201) {",
											"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
											"                                            } else {",
											"                                                console.log(\"Test user login failed: \" + res.reason());",
											"                                            }",
											"                                        }",
											"                                    });",
											"                                } else {",
											"                                    console.log(\"permissions creation failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Auth creation failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User creation failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "704e1e52-14b6-40a1-ab4b-e8535ac02e8c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"403 test\", function() {",
											"    pm.response.to.have.status(403);",
											"    pm.response.to.have.body();",
											"});",
											"",
											"// Now we need to remove the test user and related data from the database by calling",
											"// the DELETE APIs for what we issued in the pre-request script.",
											"let token = pm.environment.get(\"xokapitoken-authn-credentials\");",
											"",
											"pm.environment.unset('test_user_token');",
											"",
											"pm.sendRequest({",
											"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
											"    method: 'DELETE',",
											"    header: {",
											"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"        'X-Okapi-Token': token,",
											"        'Content-Type': 'application/json'",
											"    }",
											"}, function(err, res) {",
											"    if (err !== null) {",
											"        console.log(\"user deletion error: \" + err);",
											"    } else {",
											"        if (res.code === 204) {",
											"            pm.environment.unset('test_user_id');",
											"            pm.sendRequest({",
											"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
											"                method: 'DELETE',",
											"                header: {",
											"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                    'X-Okapi-Token': token,",
											"                    'Content-Type': 'application/json'",
											"                }",
											"            }, function(err, res) {",
											"                if (err !== null) {",
											"                    console.log(\"Credential deletion error: \" + err);",
											"                } else {",
											"                    if (res.code === 204) {",
											"                        pm.environment.unset('test_user_credId');",
											"                        pm.sendRequest({",
											"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
											"                            method: 'DELETE',",
											"                            header: {",
											"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
											"                                'X-Okapi-Token': token,",
											"                                'Content-Type': 'application/json'",
											"                            }",
											"                        }, function(err, res) {",
											"                            if (err !== null) {",
											"                                console.log(\"Permissions deletion error: \" + err);",
											"                            } else {",
											"                                if (res.code === 204) {",
											"                                    pm.environment.unset('test_user_permsId');",
											"                                } else {",
											"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
											"                                }",
											"                            }",
											"                        });",
											"                    } else {",
											"                        console.log(\"Credential deletion failed: \" + res.reason());",
											"                    }",
											"                }",
											"            });",
											"        } else {",
											"            console.log(\"User deletion failed: \" + res.reason());",
											"        }",
											"    }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{test_user_token}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Delete existing credentials using a user that does not have access"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c172ea20-479d-4aea-b1ee-5ac8e6b02c90",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"404 test\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Delete credentials using an already deleted credentials ID"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/12345 - 400 (invalid ID: currently 404 or 500)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86e5ce56-002d-487f-9490-5a3c9e6ed812",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,500]);",
											"    pm.response.to.have.body();",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/12345",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"12345"
									]
								},
								"description": "Delete credentials using an invalid UUID. See [MODLOGIN-27](https://issues.folio.org/browse/MODLOGIN-27)"
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2e7305f2-4a6f-41fc-9b79-f06be199e868",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"404 test\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Return deleted credentials"
							},
							"response": []
						},
						{
							"name": "/authn/credentials?length=1000 - 200",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0defc9c7-344a-470f-be89-e78e6e36bf26",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"validate schema\", function() {",
											"    tv4.addSchema(\"credentials.json\", pm.variables.get(\"credentials.schema\"));",
											"",
											"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"credentialsList.schema\"))).to.be.true;",
											"    pm.expect(tv4.missing).to.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Test list for deleted credentials\", function() {",
											"    pm.expect(pm.response.json().credentials).to.be.an('array');",
											"",
											"    let found = false;",
											"    for (let i in pm.response.json().credentials) {",
											"        if (pm.response.json().credentials[i].id === pm.environment.get(\"authnCredentialsUUID\")) {",
											"            found = true;",
											"            break;",
											"        }",
											"    }",
											"",
											"    pm.expect(found).to.be.false;",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials?length=1000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									],
									"query": [
										{
											"key": "length",
											"value": "1000"
										}
									]
								},
								"description": "Test listing credentials to ensure deleted item is not in the list. Need a higher limit than 10 in case there are more than 10 credentials already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
							},
							"response": []
						},
						{
							"name": "/authn/credentials/{id} - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e46b7f39-f6bf-4e8c-b3fc-500c28eb8b0b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"404 test\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-authn-credentials}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"username\": \"test_user\",\n\t\"password\": \"867-5309\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{authnCredentialsUUID}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{authnCredentialsUUID}}"
									]
								},
								"description": "Update a deleted credential"
							},
							"response": []
						}
					],
					"description": "Tests for the /authn/credentials endpoint.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3093a1a6-dca1-4207-8798-0cd465bf758b",
								"type": "text/javascript",
								"exec": [
									"// Clear out the previously set token as it may be expired or invalid",
									"// by the time this test runs again, since it is stored in an",
									"// environment variable.",
									"if (pm.variables.has(\"auth_complete\") === false) {",
									"    pm.environment.unset(\"xokapitoken-authn-credentials\");",
									"}",
									"",
									"// Acquire a valid auth token",
									"if (pm.environment.has(\"xokapitoken-authn-credentials\") === false) {",
									"    pm.sendRequest({",
									"        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"        method: 'POST',",
									"        header: {",
									"            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"            'Content-Type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
									"        }",
									"    }, function(err, res) {",
									"        if (err !== null) {",
									"            console.log(\"Login error: \" + err);",
									"        } else {",
									"            if (res.code === 201) {",
									"                pm.environment.set(\"xokapitoken-authn-credentials\", res.headers.get(\"X-Okapi-Token\"));",
									"                pm.variables.set(\"auth_complete\", \"true\");",
									"            } else {",
									"                console.log(\"Login failed: \" + res.reason());",
									"            }",
									"        }",
									"    });",
									"}"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b05034ac-88cd-4f34-b464-b41439b16d1e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fca30909-e0e1-41ed-b515-ec8220c2dabe",
				"type": "text/javascript",
				"exec": [
					"eval(pm.variables.get(\"retrieveSchemaFunction\"));",
					"",
					"// Here we get the schemas via GitHub and store them in collectino variables that can be",
					"// used in the test scripts.",
					"//",
					"// All mod-login scripts are stored in the ramls (raml-util) common repo.",
					"if (pm.variables.has(\"credentials.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"mod-login/credentials.json\", function(err, res) {",
					"        pm.variables.set(\"credentials.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"credentialsList.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"mod-login/credentialsListObject.json\", function(err, res) {",
					"        pm.variables.set(\"credentialsList.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"loginCredentials.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"mod-login/loginCredentials.json\", function(err, res) {",
					"        pm.variables.set(\"loginCredentials.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"error.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"error.schema\", function(err, res) {",
					"        pm.variables.set(\"error.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"parameters.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"parameters.schema\", function(err, res) {",
					"        pm.variables.set(\"parameters.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"errors.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"errors.schema\", function(err, res) {",
					"        pm.variables.set(\"errors.schema\", res);",
					"    });",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8b3e72ff-9550-41f7-935e-de6c849e2a21",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "da0c59f7-a611-41f2-977b-1b410a8ebebf",
			"key": "mod-login_version",
			"value": "master",
			"type": "string"
		},
		{
			"id": "33cc0337-a7dc-43db-9236-4e4c91b26ab1",
			"key": "raml-utils_version",
			"value": "37a7aa3776f17dfcc636b3ef6bbc9fbaf49cfdca",
			"type": "string"
		},
		{
			"id": "20e7f417-2910-4365-903b-f06d45ea1d73",
			"key": "retrieveSchemaFunction",
			"value": "var retrieveSchema = function(schemaName, cb) {\n    pm.sendRequest({\n        url: \"https://raw.githubusercontent.com/folio-org/mod-login/\" + pm.variables.get(\"mod-login_version\") + \"/ramls/\" + schemaName,\n        method: 'GET',\n    }, function(err, res) {\n        if (err !== null) {\n            console.log(\"Schema retrieval error: \" + err);\n            cb(\"failed\", null);\n        } else {\n            if (res.code === 200) {\n                cb(null, res.json());\n            } else {\n                console.log(\"Schema retrieval falied: \" + res.reason());\n            cb(\"failed\", null);\n            }\n        }\n    });\n};\n\nvar retrieveRAMLUtilsSchema = function(schemaName, cb) {\n    pm.sendRequest({\n        url: \"https://raw.githubusercontent.com/folio-org/raml/\" + pm.variables.get(\"raml-utils_version\") + \"/schemas/\" + schemaName,\n        method: 'GET',\n    }, function(err, res) {\n        if (err !== null) {\n            console.log(\"Schema retrieval error: \" + err);\n            cb(\"failed\", null);\n        } else {\n            if (res.code === 200) {\n                cb(null, res.json());\n            } else {\n                console.log(\"Schema retrieval falied: \" + res.reason());\n            cb(\"failed\", null);\n            }\n        }\n    });\n};",
			"type": "string"
		}
	]
}