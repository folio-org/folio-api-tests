{
	"info": {
		"name": "okapi-discovery",
		"_postman_id": "3543bffe-892c-49e2-91f7-2cdfed3a29da",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "health",
			"description": "All tests for testing the health path within Okapi discovery service",
			"item": [
				{
					"name": "GET Discovery health",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a117c2a-cbea-43cd-ad61-0668af2b7aad",
								"type": "text/javascript",
								"exec": [
									"let json = JSON.parse(responseBody);",
									"",
									"//Validate schema",
									"pm.test('Validate schema', function() {",
									"    tv4.addSchema(\"HealthDescriptor.json\", JSON.parse(pm.variables.get(\"healthDescriptor.schema\")));",
									"    pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"healthStatusList.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"//Check trace header has expected value",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/discovery/health : 200\");",
									"});",
									"",
									"//Check that response has key fields",
									"pm.test(\"response body contains keys representing each module health\", function () {",
									"    if(json.length > 0) {",
									"        pm.expect(pm.environment.get('sampleModuleHealth')).to.have.all.keys('instId', 'srvcId', 'healthMessage', 'healthStatus');",
									"    }",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c48a10c0-cf79-4442-bb4c-00526e46a6f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/health",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"health"
							]
						},
						"description": ""
					},
					"response": [
						{
							"id": "bd2a8f8d-8b31-4af9-98eb-da09cadc4903",
							"name": "GET Discovery health",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/health",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"discovery",
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Length",
									"value": "3131",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "X-Okapi-Trace",
									"value": "GET okapi-2.8.1 /_/discovery/health : 200 82124us",
									"name": "X-Okapi-Trace",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "[ {\n  \"instId\" : \"d8039a72-5cb0-43b5-9bd1-0723c1a1d3cf\",\n  \"srvcId\" : \"mod-authtoken-1.2.0-SNAPSHOT.15\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"41807d7f-bcb2-434b-9edc-66801c2923cf\",\n  \"srvcId\" : \"mod-circulation-7.0.1-SNAPSHOT.86\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"66ed0a6d-02e3-459a-b7c3-8f8b20484cb2\",\n  \"srvcId\" : \"mod-circulation-storage-4.1.0-SNAPSHOT.58\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"eeae9ddf-6d67-4248-9ebb-90ffb8c46984\",\n  \"srvcId\" : \"mod-codex-ekb-0.0.4-SNAPSHOT.56\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"faba2f81-d90d-408d-b82f-7beb4424e981\",\n  \"srvcId\" : \"mod-codex-inventory-1.0.2-SNAPSHOT.24\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"1fe4f821-bcb1-4abc-a46a-426c16aec562\",\n  \"srvcId\" : \"mod-codex-mock-2.0.1-SNAPSHOT.27\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"68f42e6c-076a-4c08-9d30-b271ea3ced57\",\n  \"srvcId\" : \"mod-codex-mux-2.1.3-SNAPSHOT.42\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"21ce2794-dcb6-4cfd-af16-98261b37bac5\",\n  \"srvcId\" : \"mod-configuration-4.0.1-SNAPSHOT.25\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"dbd9947d-0818-4052-a187-ed53bf8dce3e\",\n  \"srvcId\" : \"mod-graphql-0.1.100019\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"fec6561a-b027-4ac7-ace3-dc12b97288e5\",\n  \"srvcId\" : \"mod-inventory-7.0.1-SNAPSHOT.71\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"b04f4c3d-b989-4d95-8593-b5529c9e8c48\",\n  \"srvcId\" : \"mod-inventory-storage-7.2.0-SNAPSHOT.71\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"2360527b-2a03-4ebd-8919-681889f797e5\",\n  \"srvcId\" : \"mod-kb-ebsco-0.1.1-SNAPSHOT.12\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"45bcb3a5-1c0b-4a6c-bb01-704f1b3a44c1\",\n  \"srvcId\" : \"mod-login-4.0.1-SNAPSHOT.9\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"25a09e79-e79f-414e-9f3e-c38f13e20bb4\",\n  \"srvcId\" : \"mod-login-saml-1.0.2-SNAPSHOT.14\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"01364955-ae3d-4f4b-b6ad-c4050f7a6d23\",\n  \"srvcId\" : \"mod-notes-2.0.2-SNAPSHOT.46\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"60dbe7bb-0d4b-4b78-bce9-87747509ba19\",\n  \"srvcId\" : \"mod-notify-1.1.6-SNAPSHOT.37\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"00b6bd57-a6d5-491a-b173-cbd5957f7cbc\",\n  \"srvcId\" : \"mod-permissions-5.0.1-SNAPSHOT.10\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"0226aa03-1f86-4659-9736-c4c7bf7481db\",\n  \"srvcId\" : \"mod-user-import-2.0.1-SNAPSHOT.19\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"6e859536-fe1c-4040-8dc8-96b7ade76f5e\",\n  \"srvcId\" : \"mod-users-14.4.1-SNAPSHOT.13\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n}, {\n  \"instId\" : \"6803e430-5697-4c64-8db8-986d4956f5f5\",\n  \"srvcId\" : \"mod-users-bl-2.2.1-SNAPSHOT.9\",\n  \"healthMessage\" : \"OK\",\n  \"healthStatus\" : true\n} ]"
						}
					]
				},
				{
					"name": "GET Discovery health Service Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "290721d2-ce2d-4b63-a6e6-36afc2ae877b",
								"type": "text/javascript",
								"exec": [
									"let json = JSON.parse(responseBody);",
									"",
									"//Validate schema",
									"pm.test('Validate schema', function() {",
									"    tv4.addSchema(\"HealthDescriptor.json\", JSON.parse(pm.variables.get(\"healthDescriptor.schema\")));",
									"    pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"healthStatusList.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"//Check trace header has expected value",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    let expectedOkapiTrace = \"/_/discovery/health/\".concat(pm.environment.get(\"sampleModuleHealthServiceId\"), \" : 200\");",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).contain(expectedOkapiTrace);",
									"});",
									"",
									"//Test that length of array should be 1 since this is health of a specific service id",
									"pm.test(\"expect array length to have one entry\", function () {",
									"    pm.expect(json.length).to.equal(1);",
									"});",
									"",
									"moduleHealthGivenServiceId = json[0];",
									"//Check that response has required key fields",
									"pm.test(\"response body contains keys representing each module health\", function () {",
									"    pm.expect(moduleHealthGivenServiceId).to.have.all.keys('instId', 'srvcId', 'healthMessage', 'healthStatus');",
									"});",
									"",
									"//Check that the serviceId passed in path matches the one in response",
									"pm.test(\"check that service id passed in path matches the one in response\", function() {",
									"    pm.expect(moduleHealthGivenServiceId.srvcId).equal(pm.environment.get(\"sampleModuleHealthServiceId\"));",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa35db8c-5003-4e57-aa29-587525f21d5d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/health/{{sampleModuleHealthServiceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"health",
								"{{sampleModuleHealthServiceId}}"
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "GET Discovery health Service Id Instance Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99d3869d-2d8b-4c76-af57-1a6947df92bc",
								"type": "text/javascript",
								"exec": [
									"let json = JSON.parse(responseBody);",
									"",
									"pm.test('Validate schema', function() {",
									"  pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"healthDescriptor.schema\")))).to.be.true;",
									"});",
									"",
									"//Check trace header has expected value",
									"pm.test(\"X-Okapi-Trace header has expected value\", function() {",
									"    let expectedOkapiTrace = \"/_/discovery/health/\".concat(pm.environment.get(\"sampleModuleHealthServiceId\"), '/', pm.environment.get(\"sampleModuleHealthInstanceId\"), \" : 200\");",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(expectedOkapiTrace);",
									"});",
									"",
									"//Check that the response is of type object",
									"pm.test(\"response is of type object\", function() {",
									"    pm.expect(json).to.be.an('object');",
									"});",
									"",
									"//Check that response object has length of 1",
									"pm.test(\"response is of length 1\", function() {",
									"    pm.expect(json).to.not.be.empty;",
									"});",
									"",
									"//Check that response has key fields",
									"pm.test(\"response body contains keys representing each module health\", function() {",
									"    pm.expect(json).to.have.all.keys('instId', 'srvcId', 'healthMessage', 'healthStatus');",
									"});",
									"",
									"//Check that the instanceId passed in path matches the one in response",
									"pm.test(\"check that instance id passed in path matches the one in response\", function() {",
									"    pm.expect(json.instId).equal(pm.environment.get(\"sampleModuleHealthInstanceId\"));",
									"});",
									"",
									"//Check that the serviceId passed in path matches the one in response",
									"pm.test(\"check that service id passed in path matches the one in response\", function() {",
									"    pm.expect(json.srvcId).equal(pm.environment.get(\"sampleModuleHealthServiceId\"));",
									"})"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "38aa348a-f06c-4906-a014-abf0574f31e7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/health/{{sampleModuleHealthServiceId}}/{{sampleModuleHealthInstanceId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"health",
								"{{sampleModuleHealthServiceId}}",
								"{{sampleModuleHealthInstanceId}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5d463879-3484-4745-8b69-8f33bd185a6c",
						"type": "text/javascript",
						"exec": [
							"const discoveryHealthRequest = {",
							"    url: pm.environment.get('protocol') + '://' + pm.environment.get('url') + ':' + pm.environment.get('okapiport') + '/_/discovery/health',",
							"    method: 'GET'",
							"};",
							"",
							"pm.sendRequest(discoveryHealthRequest, function(err, res) {",
							"    if(res.json().length > 0) {",
							"        let data1 = res.json()[0];",
							"        pm.environment.set(\"sampleModuleHealth\", data1);",
							"        pm.environment.set(\"sampleModuleHealthServiceId\", data1.srvcId);",
							"        pm.environment.set(\"sampleModuleHealthInstanceId\", data1.instId);",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3c135bd4-b3d6-4e4f-bdec-7f0e5846a3fc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "modules",
			"description": "All tests for the modules path within Okapi discovery service\n",
			"item": [
				{
					"name": "_/discovery/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6a0b5e6-0b18-47cb-81ef-6ca9f6f355e0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"title\": \"DeploymentDescriptorList\",",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"    \"$ref\": \"DeploymentDescriptor.json\"",
									"  }",
									"};",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(data1, schema)).to.be.true;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						},
						"description": null
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e64949f4-4ad0-480e-ad01-f1a50b0793f6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ab0a263a-750d-4804-9d9e-0d0dd0a780b4",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test(\"Response must be valid and have a body\", function () {",
					"     pm.response.to.be.ok; ",
					"     pm.response.to.be.withBody;",
					"     pm.response.to.be.json; ",
					"});",
					"",
					"//Check x-okapi-trace header to be present",
					"pm.test(\"trace header is present\", function () {",
					"    pm.response.to.have.header(\"X-Okapi-Trace\");",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "3fa057dd-3c85-40ea-9440-5498dab48277",
			"key": "healthStatusList.schema",
			"value": "{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"title\": \"HealthStatusList\",\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"HealthDescriptor.json\"\n    }\n}",
			"type": "text",
			"description": ""
		},
		{
			"id": "0f6cc0f4-98fc-4f36-8dd0-67a5eee8996f",
			"key": "healthDescriptor.schema",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"title\": \"HealthDescriptor\",\n  \"type\": \"object\",\n  \"additionalProperties\" : false,\n  \"properties\": {\n    \"srvcId\": {\"type\": \"string\"},\n    \"instId\": {\"type\": \"string\"},\n    \"healthMessage\": { \"type\" : \"string\"},\n    \"healthStatus\": { \"type\" : \"boolean\"}\n  },\n  \"required\": [\"srvcId\", \"instId\", \"healthMessage\", \"healthStatus\"]\n}",
			"type": "text",
			"description": ""
		}
	]
}