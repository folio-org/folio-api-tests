{
	"info": {
		"_postman_id": "df82ef13-5b58-480f-9c80-2a5ca324938f",
		"name": "edge-oai-pmh",
		"description": "edge-oai-pmh api tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Setup",
			"item": [
				{
					"name": "Login and update existing user",
					"item": [
						{
							"name": "Login by existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2793ed6b-8140-4170-bf25-15f58fa36c99",
										"exec": [
											"pm.test(\"Successfully logged in (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"if (pm.response.code == 201) {",
											"    let tenant = pm.environment.get(\"xokapitenant\");",
											"    let token = postman.getResponseHeader(\"x-okapi-token\");",
											"    if (token) {",
											"        console.log(\"X-Okapi-Token : \" + token);",
											"        pm.environment.set(\"xokapitoken\", token);",
											"    } else {",
											"        postman.setNextRequest(null);",
											"    }",
											"} else {",
											"    postman.setNextRequest(null);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2290ea20-79a4-49cd-a707-ea109ae7bcc0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check missing permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2793ed6b-8140-4170-bf25-15f58fa36c99",
										"exec": [
											"pm.test(\"Has user all required permissions assigned?\", function () {",
											"    pm.response.to.be.ok;",
											"    const desiredPermissions = [(pm.variables.get(\"storageType\") === \"SRS\") ? \"source-storage.all\" : \"inventory-storage.all\", \"configuration.all\"];",
											"    let userPermissions = pm.response.json().permissionNames;",
											"    let permsToAdd = desiredPermissions.filter(perm => !userPermissions.includes(perm));",
											"",
											"    if (permsToAdd.length > 0) {",
											"        console.log(\"Permissions to add: \" + permsToAdd);",
											"        pm.environment.set(\"existingUserPermissionsToAdd\", JSON.stringify(permsToAdd));",
											"    } else {",
											"        postman.setNextRequest(\"Check configs and update\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2290ea20-79a4-49cd-a707-ea109ae7bcc0",
										"exec": [
											"let existingUserId = \"none\";",
											"pm.sendRequest({",
											"    url: pm.variables.get(\"protocol\") + \"://\" ",
											"        + pm.variables.get(\"url\") + \":\" ",
											"        + pm.variables.get(\"okapiport\") + \"/users?query=username=\" + pm.variables.get(\"username\"),",
											"    method: \"GET\",",
											"    header: {",
											"        \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
											"        \"Content-type\": \"application/json\"",
											"    }",
											"}, function (err, response) {",
											"    if (response.code == 200 && response.json().totalRecords == 1) {",
											"        existingUserId = response.json().users[0].id;",
											"    }",
											"    pm.variables.set(\"existingUserId\", existingUserId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{existingUserId}}/permissions?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{existingUserId}}",
										"permissions"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add required permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\"));",
											"let permissions = JSON.parse(pm.environment.get(\"existingUserPermissionsToAdd\"));",
											"pm.test(\"Added required permission=\" + permissions[currentIteration - 1], function () {",
											"    pm.response.to.be.ok;",
											"",
											"    // If there are more permissions to add, send the request again",
											"    if (permissions.length > currentIteration) {",
											"        pm.variables.set(\"currentIteration\", ++currentIteration);",
											"        postman.setNextRequest(\"Add required permissions\");",
											"    } else {",
											"        pm.variables.unset(\"currentIteration\");",
											"        postman.setNextRequest();",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\")) || 1;",
											"if (currentIteration == 1) {",
											"    pm.variables.set(\"currentIteration\", currentIteration);",
											"}",
											"let permissions = JSON.parse(pm.environment.get(\"existingUserPermissionsToAdd\"));",
											"pm.variables.set(\"existingUserPermissionToAdd\", permissions[currentIteration - 1]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissionName\": \"{{existingUserPermissionToAdd}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{existingUserId}}/permissions?indexField=userId",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{existingUserId}}",
										"permissions"
									],
									"query": [
										{
											"key": "indexField",
											"value": "userId"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Re-login to refresh token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2793ed6b-8140-4170-bf25-15f58fa36c99",
										"exec": [
											"pm.test(\"Successfully logged in (201)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let tenant = pm.environment.get(\"xokapitenant\");",
											"let token = postman.getResponseHeader(\"x-okapi-token\");",
											"if (token) {",
											"    console.log(\"X-Okapi-Token : \" + token);",
											"    pm.globals.set(\"xokapitoken\", token);",
											"} else {",
											"    postman.setNextRequest(null);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2290ea20-79a4-49cd-a707-ea109ae7bcc0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Add configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let oaiPmhConfigs = [];",
											"pm.test(\"Storing current configs for oai-pmh\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    oaiPmhConfigs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + oaiPmhConfigs);",
											"    pm.environment.set(\"oaiPmhConfigs\", JSON.stringify(oaiPmhConfigs));",
											"});",
											"",
											"let configsToProcess = pm.globals.get(\"testData\").configs.codes;",
											"let bodyTemplate = pm.globals.get(\"testData\").configs.bodyTemplate;",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configCode = configsToProcess[i];",
											"    bodyTemplate.code = configCode;",
											"    bodyTemplate.value = pm.variables.get(configCode);",
											"",
											"    let existingConfig = getConfigByCode(oaiPmhConfigs, configCode);",
											"    if (existingConfig) {",
											"        updateConfig(bodyTemplate, existingConfig.id);",
											"    } else {",
											"        createConfig(bodyTemplate);",
											"    }",
											"}",
											"",
											"function getConfigByCode(configs, code) {",
											"    let config = configs.filter(value => value.code === code);",
											"    return config.length > 0 ? config[0] : null;",
											"}",
											"",
											"function createConfig(body) {",
											"    pm.sendRequest({",
											"        url: pm.variables.get(\"protocol\") + \"://\" ",
											"            + pm.variables.get(\"url\") + \":\" ",
											"            + pm.variables.get(\"okapiport\") + \"/configurations/entries\",",
											"        method: \"POST\",",
											"        header: {",
											"            \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
											"            \"Content-type\": \"application/json\",",
											"            \"Accept-Encoding\": \"identity\"",
											"        },",
											"        body: JSON.stringify(body)",
											"    }, function (err, response) {",
											"        pm.test(\"Config created\", function () {",
											"            pm.expect(response.code).to.eql(201);",
											"        });",
											"    });",
											"}",
											"",
											"function updateConfig(body, id) {",
											"    pm.sendRequest({",
											"        url: pm.variables.get(\"protocol\") + \"://\" ",
											"            + pm.variables.get(\"url\") + \":\" ",
											"            + pm.variables.get(\"okapiport\") + \"/configurations/entries/\" + id,",
											"        method: \"PUT\",",
											"        header: {",
											"            \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
											"            \"Content-type\": \"application/json\",",
											"            \"Accept-Encoding\": \"identity\"",
											"        },",
											"        body: JSON.stringify(body)",
											"    }, function (err, response) {",
											"        pm.test(\"Config updated\", function () {",
											"            pm.expect(response.code).to.eql(204);",
											"        });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==OAI-PMH",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==OAI-PMH"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f0c2518-826f-44fb-ab7e-11157f1e7187",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82ea9c5-8f62-4a16-bf56-907e3dcb4662",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create institutional user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"pm.test(\"User created - Expected Created (201)\", testFunction());",
											"",
											"function userCreated() {",
											"    pm.response.to.have.status(201);",
											"}",
											"function userExists() {",
											"    pm.expect(pm.response.json().errors[0].message).to.include(\"User with this id already exists\");",
											"}",
											"",
											"function testFunction() {",
											"    if (pm.response.code == 422) {",
											"        return userExists();",
											"    }",
											"    return userCreated();",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											"pm.variables.set(\"user\", JSON.stringify(pm.globals.get(\"testData\").user, null, 2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{user}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bade5849-49cb-4004-b5bd-42a49b4d45a6",
										"exec": [
											"pm.test(\"Credentials created - Expected Created (201)\", testFunction());",
											"",
											"function credentialsCreated() {",
											"    pm.response.to.have.status(201);",
											"}",
											"function credentialsExist() {",
											"    pm.expect(pm.response.json().errors[0].message).to.include(\"exists credentials for user\");",
											"}",
											"",
											"function testFunction() {",
											"    if (pm.response.code == 422) {",
											"        return credentialsExist();",
											"    }",
											"    return credentialsCreated();",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8465c7b4-1294-4c0e-8a71-729440339f84",
										"exec": [
											"pm.variables.set(\"credentials\", JSON.stringify(pm.globals.get(\"testData\").credentials, null, 2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{credentials}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(\"Permissions created - Expected Created (201)\", testFunction());",
											"",
											"function permissionsCreated() {",
											"    if (pm.response.code != 201) {",
											"        postman.setNextRequest(null);",
											"    }",
											"    pm.response.to.have.status(201);",
											"}",
											"function permissionsExist() {",
											"    pm.expect(pm.response.json().errors[0].message).to.include(\"must not match values for any existing records\");",
											"}",
											"",
											"function testFunction() {",
											"    // 'storageType' is edge-oai-pmh collection variable",
											"    if (pm.variables.get(\"storageType\") === \"SRS\") {",
											"        postman.setNextRequest(\"Create snapshot\");",
											"    } else {",
											"        postman.setNextRequest(\"Create instance\");",
											"    }",
											"",
											"    if (pm.response.code == 422) {",
											"        return permissionsExist();",
											"    }",
											"    return permissionsCreated();",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"pm.variables.set(\"permissions\", JSON.stringify(pm.globals.get(\"testData\").permissions, null, 2));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{permissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Inventory",
					"item": [
						{
							"name": "Create instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "976c44b6-9efa-4f76-8818-aa488c6ceb15",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\"));",
											"",
											"pm.test(\"Instance #\" + currentIteration + \" created - Expected Created (201)\", function () {",
											"    if (currentIteration == 1) {",
											"        storeFromDate();",
											"    }",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    let instanceId = pm.response.json().id;",
											"    let metadata = pm.response.json().metadata;",
											"    pm.expect(instanceId, \"The instance id is missing but required for API test\").to.not.be.empty;",
											"    pm.expect(metadata, \"The metadata is empty but required for API test\").to.not.be.empty;",
											"",
											"    // Remember created record id",
											"    let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [];",
											"    records.push(instanceId);",
											"    pm.environment.set(\"createdRecords\", JSON.stringify(records));",
											"});",
											"",
											"function storeFromDate() {",
											"    // Set the fromDate param value as current time",
											"    let moment = require('moment');",
											"    let metadata = pm.response.json() ? pm.response.json().metadata : null;",
											"    // Get time from metadata to work with server time",
											"    let currentDateTime = metadata ? moment(metadata.createdDate) : moment();",
											"    pm.environment.set(\"fromDate\", currentDateTime.utc().subtract(1, 'seconds').format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));",
											"    console.log(\"From date: \" + pm.environment.get(\"fromDate\"));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cacc131d-5556-41ea-aaf8-92e6907f7a80",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\")) || 1;",
											"if (currentIteration == 1) {",
											"    pm.variables.set(\"currentIteration\", currentIteration);",
											"}",
											"",
											"let uuid = require('uuid');",
											"let instance1 = pm.globals.get(\"testData\").instance1;",
											"instance1.id = uuid.v4();",
											"pm.variables.set(\"instanceId\", instance1.id);",
											"pm.variables.set(\"instance1\", JSON.stringify(instance1));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{instance1}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-storage",
										"instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create marc-json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "976c44b6-9efa-4f76-8818-aa488c6ceb15",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\"));",
											"",
											"pm.test(\"Marc-Record #\" + currentIteration + \" created\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Check if all desired records created or request should be repeated",
											"let recordsToCreate = pm.variables.get(\"recordsToCreate\");",
											"if (recordsToCreate >= ++currentIteration) {",
											"    postman.setNextRequest(\"Create instance\");",
											"    pm.variables.set(\"currentIteration\", currentIteration);",
											"} else {",
											"    pm.variables.unset(\"currentIteration\");",
											"    pm.variables.unset(\"parsedRecordContent\");",
											"    postman.setNextRequest();",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cacc131d-5556-41ea-aaf8-92e6907f7a80",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\")) || 1;",
											"let parsedRecords = pm.globals.get(\"testData\").srsData.parsedRecords;",
											"let parsedRecordsCount = parsedRecords.length;",
											"let index = currentIteration - 1;",
											"while (index >= parsedRecordsCount) {",
											"    index -= parsedRecordsCount;",
											"}",
											"",
											"pm.variables.set(\"parsedRecordContent\",  JSON.stringify(parsedRecords[index]));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{parsedRecordContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}/source-record/marc-json",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-storage",
										"instances",
										"{{instanceId}}",
										"source-record",
										"marc-json"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check created instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "976c44b6-9efa-4f76-8818-aa488c6ceb15",
										"exec": [
											"pm.test(\"Instances result status\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.expect(pm.response.json().totalRecords, \"Number of records created less than expected\").to.be.at.least(parseInt(pm.variables.get(\"recordsToCreate\")));",
											"});",
											"postman.setNextRequest(\"Check edge health\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cacc131d-5556-41ea-aaf8-92e6907f7a80",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances?query=sourceRecordFormat=MARC-JSON and metadata.createdDate>{{fromDate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-storage",
										"instances"
									],
									"query": [
										{
											"key": "query",
											"value": "sourceRecordFormat=MARC-JSON and metadata.createdDate>{{fromDate}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SRS",
					"item": [
						{
							"name": "Create snapshot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f7bced58-ce19-4644-b63a-5c8ea3316a5f",
										"exec": [
											"var uuid = require('uuid');",
											"pm.globals.set('srsSnapshotId', uuid.v4());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef732e35-2c07-4863-9e4c-0046ed1bd21c",
										"exec": [
											"pm.test(\"Snapshot creation status\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.have.jsonBody(\"jobExecutionId\", pm.variables.get('srsSnapshotId'));",
											"",
											"    // Set the fromDate param value as current time",
											"    storeFromDate();",
											"});",
											"",
											"function storeFromDate() {",
											"    // Set the fromDate param value as current time",
											"    let moment = require('moment');",
											"    let metadata = pm.response.json().metadata;",
											"    // Get time from metadata to work with server time",
											"    let currentDateTime = metadata ? moment(metadata.createdDate) : moment();",
											"    pm.environment.set(\"fromDate\", currentDateTime.utc().subtract(1, 'seconds').format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));",
											"    console.log(\"From date: \" + pm.environment.get(\"fromDate\"));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"jobExecutionId\": \"{{srsSnapshotId}}\",\r\n  \"status\": \"PARSING_IN_PROGRESS\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/snapshots",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"snapshots"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "976c44b6-9efa-4f76-8818-aa488c6ceb15",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\"));",
											"",
											"pm.test(\"Record created #\" + currentIteration, function () {",
											"    pm.response.to.have.status(201);",
											"    let recordId = pm.response.json().id;",
											"    pm.expect(recordId, \"The record id is missing but required for API test\").to.not.be.empty;",
											"",
											"    // Remember created record id",
											"    let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [];",
											"    records.push(recordId);",
											"    pm.environment.set(\"createdRecords\", JSON.stringify(records));",
											"",
											"    let metadata = pm.response.json().metadata;",
											"    pm.expect(metadata, \"The metadata is empty but required for API test\").to.not.be.empty;",
											"});",
											"",
											"// Check if all desired records created or request should be repeated",
											"let recordsToCreate = pm.variables.get(\"recordsToCreate\");",
											"if (recordsToCreate >= ++currentIteration) {",
											"    postman.setNextRequest(\"Create record\");",
											"    pm.variables.set(\"currentIteration\", currentIteration);",
											"} else {",
											"    pm.variables.unset(\"currentIteration\");",
											"    pm.variables.unset(\"parsedRecordContent\");",
											"    console.log(\"Created records: \" + pm.environment.get(\"createdRecords\"));",
											"    postman.setNextRequest();",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cacc131d-5556-41ea-aaf8-92e6907f7a80",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\")) || 1;",
											"if (currentIteration == 1) {",
											"    pm.variables.set(\"currentIteration\", currentIteration)",
											"}",
											"",
											"let parsedRecords = pm.globals.get(\"testData\").srsData.parsedRecords;",
											"let parsedRecordsCount = parsedRecords.length;",
											"let index = currentIteration - 1;",
											"while (index >= parsedRecordsCount) {",
											"    index -= parsedRecordsCount;",
											"}",
											"",
											"pm.variables.set(\"parsedRecordContent\",  JSON.stringify(parsedRecords[index]));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"snapshotId\": \"{{srsSnapshotId}}\",\r\n  \"matchedId\": \"{{$guid}}\",\r\n  \"recordType\": \"MARC\",\r\n  \"rawRecord\": {\r\n    \"content\": \"marc data goes here\"\r\n  },\r\n  \"parsedRecord\": {\r\n    \"content\": {{parsedRecordContent}}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/records",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"records"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check created records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d339cbd4-3b65-4fc6-b18e-166cfd412abc",
										"exec": [
											"pm.test(\"Records result status\", function () {",
											"    pm.response.to.be.ok;",
											"    pm.expect(pm.response.json().totalRecords, \"Number of records created less than expected\").to.be.at.least(parseInt(pm.variables.get(\"recordsToCreate\")));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/sourceRecords?query=recordType=MARC and metadata.createdDate>{{fromDate}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"sourceRecords"
									],
									"query": [
										{
											"key": "query",
											"value": "recordType=MARC and metadata.createdDate>{{fromDate}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Check module is running",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2f73256-596e-4829-a6c0-845cc8ae1c3b",
								"exec": [
									"pm.test(\"Egde-oai-pmh is up and running\", function () {",
									"    pm.response.to.be.unauthorized;",
									"    pm.response.to.have.body(new RegExp('.*API Key.*'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=Identify",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "Identify"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Positive scenarios",
			"item": [
				{
					"name": "Identify",
					"item": [
						{
							"name": "/oai/ - Identify",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"if (pm.response.code == 500) {",
											"    postman.setNextRequest(\"Delete user's credentials\");",
											"}",
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Identify successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"Identify is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('Identify');",
											"});",
											"",
											"let identify = jsonData.Identify;",
											"",
											"pm.test(\"Contains repository name\", function() {",
											"    pm.expect(identify).to.have.property('repositoryName');",
											"});",
											"",
											"pm.test(\"Contains base URL\", function() {",
											"    pm.expect(identify).to.have.property('baseURL');",
											"});",
											"",
											"pm.test(\"Contains protocol version\", function() {",
											"    pm.expect(identify).to.have.property('protocolVersion');",
											"});",
											"",
											"pm.test(\"Contains admin's emails\", function() {",
											"    pm.expect(identify).to.have.property('adminEmail');",
											"});",
											"",
											"pm.test(\"Contains earliest datestamp\", function() {",
											"    pm.expect(identify).to.have.property('earliestDatestamp');",
											"});",
											"",
											"pm.test(\"Contains deleted record\", function() {",
											"    pm.expect(identify).to.have.property('deletedRecord');",
											"});",
											"",
											"pm.test(\"Contains granularity\", function() {",
											"    pm.expect(identify).to.have.property('granularity');",
											"});",
											"",
											"pm.test(\"Contains compression\", function() {",
											"    pm.expect(identify).to.have.property('compression');",
											"});",
											"",
											"pm.test(\"Contains description\", function() {",
											"    pm.expect(identify).to.have.property('description');",
											"    pm.expect(identify.description).to.have.property('oai-identifier:oai-identifier');",
											"});",
											"",
											"if (identify.description['oai-identifier:oai-identifier']) {",
											"    pm.globals.set(\"identifierPrefix\", identify.description['oai-identifier:oai-identifier']['oai-identifier:sampleIdentifier'].split(\"/\")[0]);",
											"} else {",
											"    let urlapi = require('url');",
											"    let baseURL = urlapi.parse(identify.baseURL);",
											"    pm.globals.set(\"identifierPrefix\", baseURL.pathname.substring(1) + \":\" + baseURL.hostname + \":\" + pm.environment.get(\"xokapitenant\"));",
											"}",
											"console.log(pm.globals.get(\"identifierPrefix\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=Identify&apikey={{institutional.user.edge.apikey}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "Identify"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - Identify",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Identify successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"Identify is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('Identify');",
											"});",
											"",
											"let identify = jsonData.Identify;",
											"",
											"pm.test(\"Contains repository name\", function() {",
											"    pm.expect(identify).to.have.property('repositoryName');",
											"});",
											"",
											"pm.test(\"Contains base URL\", function() {",
											"    pm.expect(identify).to.have.property('baseURL');",
											"});",
											"",
											"pm.test(\"Contains protocol version\", function() {",
											"    pm.expect(identify).to.have.property('protocolVersion');",
											"});",
											"",
											"pm.test(\"Contains admin's emails\", function() {",
											"    pm.expect(identify).to.have.property('adminEmail');",
											"});",
											"",
											"pm.test(\"Contains earliest datestamp\", function() {",
											"    pm.expect(identify).to.have.property('earliestDatestamp');",
											"});",
											"",
											"pm.test(\"Contains deleted record\", function() {",
											"    pm.expect(identify).to.have.property('deletedRecord');",
											"});",
											"",
											"pm.test(\"Contains granularity\", function() {",
											"    pm.expect(identify).to.have.property('granularity');",
											"});",
											"",
											"pm.test(\"Contains compression\", function() {",
											"    pm.expect(identify).to.have.property('compression');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=Identify",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "Identify"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22c3bfd2-9f52-43e1-b817-943eed5deb3c",
								"type": "text/javascript",
								"exec": [
									"let utils = eval(globals.loadUtils);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8449ade2-9446-45b1-8549-ec8a1242fbbc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MetadataFormats",
					"item": [
						{
							"name": "/oai/ - ListMetadataFormats without Identifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"ListMetadataFormats is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListMetadataFormats');",
											"});",
											"",
											"pm.test(\"ListMetadataFormats support two formats\", function() {",
											"    let length = jsonData.ListMetadataFormats.metadataFormat.length;",
											"    pm.expect(length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{institutional.user.edge.apikey}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListMetadataFormats with Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"",
											"pm.test(\"ListMetadataFormats is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListMetadataFormats');",
											"});",
											"",
											"pm.test(\"ListMetadataFormats support two formats\", function() {",
											"    let length = jsonData.ListMetadataFormats.metadataFormat.length;",
											"    pm.expect(length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [];",
											"let identifier = records.length > 0 ? records[0] : pm.globals.get(\"testData\").instance1.id;",
											"pm.variables.set(\"identifier\", identifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{institutional.user.edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListMetadataFormats",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"ListMetadataFormats is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListMetadataFormats');",
											"});",
											"",
											"pm.test(\"ListMetadataFormats support two formats\", function() {",
											"    let length = jsonData.ListMetadataFormats.metadataFormat.length;",
											"    pm.expect(length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=ListMetadataFormats",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListMetadataFormats with Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListMetadataFormats successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"",
											"pm.test(\"ListMetadataFormats is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListMetadataFormats');",
											"});",
											"",
											"pm.test(\"ListMetadataFormats support two formats\", function() {",
											"    let length = jsonData.ListMetadataFormats.metadataFormat.length;",
											"    pm.expect(length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [];",
											"let identifier = records.length > 0 ? records[0] : pm.globals.get(\"testData\").instance1.id;",
											"pm.variables.set(\"identifier\", identifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=ListMetadataFormats&identifier={{identifierPrefix}}/{{identifier}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "beab1fcc-f6a9-4310-b904-1c14ce99b95c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "527b9579-4fda-40a6-862a-1d7dfc19899c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListSets",
					"item": [
						{
							"name": "/oai/ - ListSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListSets successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"ListSets contains request\", function() {",
											"    pm.expect(jsonData).to.have.property('request');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"ListSets is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListSets');",
											"});",
											"",
											"pm.test(\"ListSets supports only set all\", function() {",
											"    pm.expect(jsonData.ListSets.set.setSpec).to.eql('all');",
											"    pm.expect(jsonData.ListSets.set.setName).to.eql('All records');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListSets&apikey={{institutional.user.edge.apikey}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListSets"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListSets",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListSets successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"ListSets contains request\", function() {",
											"    pm.expect(jsonData).to.have.property('request');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(1);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"ListSets is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListSets');",
											"});",
											"",
											"pm.test(\"ListSets supports only set all\", function() {",
											"    pm.expect(jsonData.ListSets.set.setSpec).to.eql('all');",
											"    pm.expect(jsonData.ListSets.set.setName).to.eql('All records');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=ListSets",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListSets"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetRecord",
					"item": [
						{
							"name": "/oai/ - Existing_Identifier_oai_dc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"GetRecord successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"GetRecord is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('GetRecord');",
											"});",
											"",
											"pm.test(\"GetRecord has header\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('header');",
											"});",
											"",
											"pm.test(\"GetRecord has metadata\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('metadata');",
											"});",
											"",
											"pm.test(\"GetRecord metadata is valid\", function() {",
											"    pm.expect(jsonData.GetRecord.record.metadata).to.have.property('oai_dc:dc');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [];",
											"let identifier = records.length > 0 ? records[0] : pm.globals.get(\"testData\").instance1.id;",
											"pm.variables.set(\"identifier\", identifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{institutional.user.edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix={{dc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - Existing_Identifier_oai_dc",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"GetRecord successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"GetRecord is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('GetRecord');",
											"});",
											"",
											"pm.test(\"GetRecord has header\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('header');",
											"});",
											"",
											"pm.test(\"GetRecord has metadata\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('metadata');",
											"});",
											"",
											"pm.test(\"GetRecord metadata is valid\", function() {",
											"    pm.expect(jsonData.GetRecord.record.metadata).to.have.property('oai_dc:dc');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [];",
											"let identifier = records.length > 0 ? records[0] : pm.globals.get(\"testData\").instance1.id;",
											"pm.variables.set(\"identifier\", identifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=GetRecord&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix={{dc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - Existing_Identifier_marc_xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"GetRecord successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"GetRecord is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('GetRecord');",
											"});",
											"",
											"pm.test(\"GetRecord has header\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('header');",
											"});",
											"",
											"pm.test(\"GetRecord has metadata\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('metadata');",
											"});",
											"",
											"pm.test(\"GetRecord metadata is valid\", function() {",
											"    pm.expect(jsonData.GetRecord.record.metadata).to.have.property('marc:record');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [];",
											"let identifier = records.length > 0 ? records[0] : pm.globals.get(\"testData\").instance1.id;",
											"pm.variables.set(\"identifier\", identifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{institutional.user.edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix={{marc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - Existing_Identifier_marc_xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f17e5f-76a3-4e79-83a9-e28dcbce0292",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"GetRecord successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"GetRecord is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('GetRecord');",
											"});",
											"",
											"pm.test(\"GetRecord has header\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('header');",
											"});",
											"",
											"pm.test(\"GetRecord has metadata\", function() {",
											"    pm.expect(jsonData.GetRecord.record).to.have.property('metadata');",
											"});",
											"",
											"pm.test(\"GetRecord metadata is valid\", function() {",
											"    pm.expect(jsonData.GetRecord.record.metadata).to.have.property('marc:record');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41e05ac3-988a-4e22-b15f-a1693e9205a3",
										"exec": [
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [];",
											"let identifier = records.length > 0 ? records[0] : pm.globals.get(\"testData\").instance1.id;",
											"pm.variables.set(\"identifier\", identifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=GetRecord&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix={{marc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListIdentifiers",
					"item": [
						{
							"name": "/oai/ - ListIdentifiers resumption token flow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"// Limit by from param because in case there are a lot of records exist, the test will run quite long time\r",
											"pm.variables.set(\"from\", pm.environment.get(\"fromDate\") ? pm.environment.get(\"fromDate\") : moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(4);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"});",
											"",
											"pm.test(\"ListIdentifiers is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListIdentifiers');",
											"});",
											"",
											"",
											"pm.test(\"ListIdentifiers resumption token flow\", function() {",
											"    if (jsonData.ListIdentifiers.resumptionToken) {",
											"        utils.sendRequestWithResumptionToken(jsonData, \"ListIdentifiers\");",
											"        ",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"value": "identity",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{marc}}&from={{from}}&set=all",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "set",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListIdentifiers resumption token flow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"// Limit by from param because in case there are a lot of records exist, the test will run quite long time\r",
											"pm.variables.set(\"from\", pm.environment.get(\"fromDate\") ? pm.environment.get(\"fromDate\") : moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(4);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"});",
											"",
											"pm.test(\"ListIdentifiers is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListIdentifiers');",
											"});",
											"",
											"",
											"pm.test(\"ListIdentifiers resumption token flow\", function() {",
											"    if (jsonData.ListIdentifiers.resumptionToken) {",
											"        utils.sendRequestWithResumptionToken(jsonData, \"ListIdentifiers\");",
											"        ",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=ListIdentifiers&metadataPrefix={{marc}}&from={{from}}&set=all",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "set",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListIdentifiers date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.variables.set(\"from\", pm.environment.get(\"fromDate\") ? pm.environment.get(\"fromDate\") : moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.variables.set(\"until\", moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(5);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"ListIdentifiers is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListIdentifiers');",
											"});",
											"",
											"let expectedRecordsCount = parseInt(pm.variables.get(\"recordsToCreate\"));",
											"pm.test(\"Number of headers at least \" + expectedRecordsCount, function() {",
											"    let numberOfRecords = 0;",
											"    let resumptionToken = jsonData.ListIdentifiers.resumptionToken;",
											"    if (resumptionToken) {",
											"        numberOfRecords = resumptionToken.$.completeListSize;",
											"    } else {",
											"        numberOfRecords = jsonData.ListIdentifiers.header.length",
											"    }",
											"    console.log(numberOfRecords);",
											"    pm.expect(Number(numberOfRecords)).to.be.at.least(expectedRecordsCount);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"value": "identity",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=ListIdentifiers&metadataPrefix={{dc}}&set=all&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.variables.set(\"from\", pm.environment.get(\"fromDate\") ? pm.environment.get(\"fromDate\") : moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.variables.set(\"until\", moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(5);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"ListIdentifiers is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListIdentifiers');",
											"});",
											"",
											"let expectedRecordsCount = parseInt(pm.variables.get(\"recordsToCreate\"));",
											"pm.test(\"Number of headers at least \" + expectedRecordsCount, function() {",
											"    let numberOfRecords = 0;",
											"    let resumptionToken = jsonData.ListIdentifiers.resumptionToken;",
											"    if (resumptionToken) {",
											"        numberOfRecords = resumptionToken.$.completeListSize;",
											"    } else {",
											"        numberOfRecords = jsonData.ListIdentifiers.header.length",
											"    }",
											"    console.log(numberOfRecords);",
											"    pm.expect(Number(numberOfRecords)).to.be.at.least(expectedRecordsCount);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?apikey={{institutional.user.edge.apikey}}&verb=ListIdentifiers&metadataPrefix={{dc}}&set=all&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListRecords",
					"item": [
						{
							"name": "/oai/ - ListRecords resumption token flow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"// Limit by from param because in case there are a lot of records exist, the test will run quite long time\r",
											"pm.variables.set(\"from\", pm.environment.get(\"fromDate\") ? pm.environment.get(\"fromDate\") : moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(4);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"});",
											"",
											"pm.test(\"ListRecords is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListRecords');",
											"});",
											"",
											"pm.test(\"ListRecords resumption token flow\", function() {",
											"    if (jsonData.ListRecords.resumptionToken) {",
											"        utils.sendRequestWithResumptionToken(jsonData, \"ListRecords\");",
											"        ",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"value": "identity",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{dc}}&from={{from}}&set=all",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "set",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListRecords resumption token flow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"// Limit by from param because in case there are a lot of records exist, the test will run quite long time\r",
											"pm.variables.set(\"from\", pm.environment.get(\"fromDate\") ? pm.environment.get(\"fromDate\") : moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(4);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"});",
											"",
											"pm.test(\"ListRecords is returned\", function() {",
											"    pm.expect(jsonData).to.have.property(\"ListRecords\");",
											"});",
											"",
											"pm.test(\"ListRecords resumption token flow\", function() {",
											"    if (jsonData.ListRecords.resumptionToken) {",
											"        utils.sendRequestWithResumptionToken(jsonData, \"ListRecords\");",
											"        ",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=ListRecords&metadataPrefix={{dc}}&from={{from}}&set=all",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "set",
											"value": "all"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords  date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.variables.set(\"from\", pm.environment.get(\"fromDate\") ? pm.environment.get(\"fromDate\") : moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.globals.set(\"until\", moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(5);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"ListRecords is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListRecords');",
											"});",
											"",
											"let expectedRecordsCount = parseInt(pm.variables.get(\"recordsToCreate\"));",
											"pm.test(\"Number of record at least \" + expectedRecordsCount, function() {",
											"    let numberOfRecords = 0;",
											"    let resumptionToken = jsonData.ListRecords.resumptionToken;",
											"    if (resumptionToken) {",
											"        numberOfRecords = resumptionToken.$.completeListSize;",
											"    } else {",
											"        numberOfRecords = jsonData.ListRecords.record.length",
											"    }",
											"    console.log(numberOfRecords);",
											"    pm.expect(Number(numberOfRecords)).to.be.at.least(expectedRecordsCount);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"value": "identity",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{dc}}&set=all&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/apiKeyPath - ListRecords  date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.variables.set(\"from\", pm.environment.get(\"fromDate\") ? pm.environment.get(\"fromDate\") : moment().utc().zone(\"-00:05\").format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.globals.set(\"until\", moment().utc().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords successfully completed (200)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(5);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.set).to.eql(utils.findObjectByKey(pm.request.url.query, \"set\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"ListRecords is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('ListRecords');",
											"});",
											"",
											"let expectedRecordsCount = parseInt(pm.variables.get(\"recordsToCreate\"));",
											"pm.test(\"Number of record at least \" + expectedRecordsCount, function() {",
											"    let numberOfRecords = 0;",
											"    let resumptionToken = jsonData.ListRecords.resumptionToken;",
											"    if (resumptionToken) {",
											"        numberOfRecords = resumptionToken.$.completeListSize;",
											"    } else {",
											"        numberOfRecords = jsonData.ListRecords.record.length",
											"    }",
											"    console.log(numberOfRecords);",
											"    pm.expect(Number(numberOfRecords)).to.be.at.least(expectedRecordsCount);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{institutional.user.edge.apikey}}?verb=ListRecords&metadataPrefix={{dc}}&set=all&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai",
										"{{institutional.user.edge.apikey}}"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										},
										{
											"key": "set",
											"value": "all"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Negative scenarios",
			"item": [
				{
					"name": "Identify",
					"item": [
						{
							"name": "/oai/ - Identify_badArgument",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Identify completed with (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=Identify&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{dc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "Identify"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22c3bfd2-9f52-43e1-b817-943eed5deb3c",
								"type": "text/javascript",
								"exec": [
									"let utils = eval(globals.loadUtils);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8449ade2-9446-45b1-8549-ec8a1242fbbc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MetadataFormats",
					"item": [
						{
							"name": "/oai/ - Invalid_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Expected Unprocessable Entity (422)\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{institutional.user.edge.apikey}}&identifier=invalid-identifier",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "invalid-identifier"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - Not_Existing_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Expected Not Found (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"idDoesNotExist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd390222-84f7-4ca5-add1-e0c51e94a698",
										"exec": [
											"let testData = pm.globals.get(\"testData\");",
											"pm.variables.set(\"identifier\", testData.instance1.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListMetadataFormats&apikey={{institutional.user.edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}A",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListMetadataFormats"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}A"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "beab1fcc-f6a9-4310-b904-1c14ce99b95c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "527b9579-4fda-40a6-862a-1d7dfc19899c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListSets",
					"item": [
						{
							"name": "/oai/ - ListSets_badArgument",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"console.log(jsonData);",
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"ListSets completed with (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListSets&apikey={{institutional.user.edge.apikey}}&metadataPrefix=oai_dc",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListSets"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "oai_dc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListSets_badResumptionToken",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"console.log(jsonData);",
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"ListSets completed with (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.resumptionToken).to.eql(utils.findObjectByKey(pm.request.url.query, \"resumptionToken\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badResumptionToken\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListSets&apikey={{institutional.user.edge.apikey}}&resumptionToken=any_resumption_token",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListSets"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "resumptionToken",
											"value": "any_resumption_token"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GetRecord",
					"item": [
						{
							"name": "/oai/ - Invalid_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Identifier has invalid structure (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{institutional.user.edge.apikey}}&identifier=invalid-identifier&metadataPrefix={{marc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "invalid-identifier"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - Not_Existing_Identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"No matching identifier in repository (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"idDoesNotExist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{institutional.user.edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}B&metadataPrefix={{dc}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}B"
										},
										{
											"key": "metadataPrefix",
											"value": "{{dc}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - missing metadataPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Missing required parameter (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"});",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{institutional.user.edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - invalid metadataPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"Cannot disseminate format (422)\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.identifier).to.eql(utils.findObjectByKey(pm.request.url.query, \"identifier\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"cannotDisseminateFormat\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=GetRecord&apikey={{institutional.user.edge.apikey}}&identifier={{identifierPrefix}}/{{identifier}}&metadataPrefix=mark_xml",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "GetRecord"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "identifier",
											"value": "{{identifierPrefix}}/{{identifier}}"
										},
										{
											"key": "metadataPrefix",
											"value": "mark_xml"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListIdentifiers",
					"item": [
						{
							"name": "/oai/ - ListIdentifiers empty result",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.variables.set(\"until\", moment().utc().subtract(100, 'years').format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers no any record found matching search criteria (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"noRecordsMatch\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{marc}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers invalid date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers illegal date format (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{marc}}&from=2018-11-13T12:13:50",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "2018-11-13T12:13:50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers invalid metadataPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers cannot disseminate format (422)\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"cannotDisseminateFormat\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{institutional.user.edge.apikey}}&metadataPrefix=mark_xml",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "mark_xml"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers bad resumption token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers The value of the resumptionToken argument is invalid (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.resumptionToken).to.eql(utils.findObjectByKey(pm.request.url.query, \"resumptionToken\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badResumptionToken\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{institutional.user.edge.apikey}}&resumptionToken=bWV0YWRhdGFQcmVmaXhhPW9haV9kYyZzZXQ9YWxsJnRvdGFsUmVjb3Jkcz0xMSZvZmZzZXQ9MiZuZXh0UmVjb3JkSWQ9NmI0YWUwODktZTFlZS00MzFmLWFmODMtZTExMzNmOGUzZGEwJnVudGlsPTIwMTgtMTEtMTRUMTQ6MzY6NTZa",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "resumptionToken",
											"value": "bWV0YWRhdGFQcmVmaXhhPW9haV9kYyZzZXQ9YWxsJnRvdGFsUmVjb3Jkcz0xMSZvZmZzZXQ9MiZuZXh0UmVjb3JkSWQ9NmI0YWUwODktZTFlZS00MzFmLWFmODMtZTExMzNmOGUzZGEwJnVudGlsPTIwMTgtMTEtMTRUMTQ6MzY6NTZa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListIdentifiers from grater than until",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.globals.set(\"from\", moment().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.globals.set(\"until\", moment().hours(0).format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListIdentifiers 'from' must be less than or equal to 'until' (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(4);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListIdentifiers&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{marc}}&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListIdentifiers"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ListRecords",
					"item": [
						{
							"name": "/oai/ - ListIRecords bad resumption token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords The value of the resumptionToken argument is invalid (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.resumptionToken).to.eql(utils.findObjectByKey(pm.request.url.query, \"resumptionToken\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badResumptionToken\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{institutional.user.edge.apikey}}&resumptionToken=bWV0YWRhdGFQcmVmaXhhPW9haV9kYyZzZXQ9YWxsJnRvdGFsUmVjb3Jkcz0xMSZvZmZzZXQ9MiZuZXh0UmVjb3JkSWQ9NmI0YWUwODktZTFlZS00MzFmLWFmODMtZTExMzNmOGUzZGEwJnVudGlsPTIwMTgtMTEtMTRUMTQ6MzY6NTZa",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "resumptionToken",
											"value": "bWV0YWRhdGFQcmVmaXhhPW9haV9kYyZzZXQ9YWxsJnRvdGFsUmVjb3Jkcz0xMSZvZmZzZXQ9MiZuZXh0UmVjb3JkSWQ9NmI0YWUwODktZTFlZS00MzFmLWFmODMtZTExMzNmOGUzZGEwJnVudGlsPTIwMTgtMTEtMTRUMTQ6MzY6NTZa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords empty result",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.variables.set(\"until\", moment().utc().subtract(100, 'years').format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords no any record found matching search criteria (404)\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"noRecordsMatch\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{marc}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords invalid date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords illegal date format (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(3);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{marc}}&from=2018-11-13T12:13:50",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "2018-11-13T12:13:50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords invalid metadataPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf13b3e1-a311-4deb-a43e-0d6d4303ae61",
										"exec": [
											"let jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords cannot disseminate format (422)\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(2);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"cannotDisseminateFormat\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{institutional.user.edge.apikey}}&metadataPrefix=mark_xml",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "mark_xml"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "/oai/ - ListRecords from grater than until",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
										"exec": [
											"var moment = require('moment');\r",
											"pm.globals.set(\"from\", moment().format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));\r",
											"pm.globals.set(\"until\", moment().hours(0).format(\"YYYY-MM-DDTHH:mm:ss[Z]\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32277bc7-451d-4d58-828b-944c885e1698",
										"exec": [
											"var jsonData = xml2Json(responseBody)[\"OAI-PMH\"];",
											"",
											"let utils = eval(globals.loadUtils);",
											"console.log(jsonData);",
											"",
											"pm.test(\"ListRecords 'from' must be less than or equal to 'until' (400)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Is XML\", function () {",
											"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
											"});",
											"",
											"pm.test(\"Request is correct\", function() {",
											"    pm.expect(Object.keys(jsonData.request.$).length).to.eql(4);",
											"    pm.expect(jsonData.request.$.verb).to.eql(utils.findObjectByKey(pm.request.url.query, \"verb\"));",
											"    pm.expect(jsonData.request.$.metadataPrefix).to.eql(utils.findObjectByKey(pm.request.url.query, \"metadataPrefix\"));",
											"    pm.expect(jsonData.request.$.from).to.eql(utils.findObjectByKey(pm.request.url.query, \"from\"));",
											"    pm.expect(jsonData.request.$.until).to.eql(utils.findObjectByKey(pm.request.url.query, \"until\"));",
											"});",
											"",
											"pm.test(\"Error is returned\", function() {",
											"    pm.expect(jsonData).to.have.property('error');",
											"});",
											"",
											"pm.test(\"Error is valid\", function() {",
											"    let errorCode = jsonData.error.$.code;",
											"    pm.expect(errorCode).to.eql(\"badArgument\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept-Encoding",
										"type": "text",
										"value": "identity"
									}
								],
								"url": {
									"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=ListRecords&apikey={{institutional.user.edge.apikey}}&metadataPrefix={{marc}}&from={{from}}&until={{until}}",
									"protocol": "{{edge.protocol}}",
									"host": [
										"{{edge.host}}"
									],
									"port": "{{edge.port}}",
									"path": [
										"oai"
									],
									"query": [
										{
											"key": "verb",
											"value": "ListRecords"
										},
										{
											"key": "apikey",
											"value": "{{institutional.user.edge.apikey}}"
										},
										{
											"key": "metadataPrefix",
											"value": "{{marc}}"
										},
										{
											"key": "from",
											"value": "{{from}}"
										},
										{
											"key": "until",
											"value": "{{until}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "/oai/ - Acces denied",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									"pm.variables.set(\"edge.badApiKey\", \"eyJzIjoiQUJDREVGR0hJSiIsInQiOiJib2d1cyIsInUiOiJib2d1cyJ9\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"pm.test(\"Acces denied (403)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Is plain text\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/plain');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=Identify&apikey={{edge.badApiKey}}",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "Identify"
								},
								{
									"key": "apikey",
									"value": "{{edge.badApiKey}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/apiKeyPath - Acces denied",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									"pm.variables.set(\"edge.badApiKey\", \"eyJzIjoiQUJDREVGR0hJSiIsInQiOiJib2d1cyIsInUiOiJib2d1cyJ9\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"pm.test(\"Acces denied (403)\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"pm.test(\"Is plain text\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/plain');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/{{edge.badApiKey}}?verb=Identify",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai",
								"{{edge.badApiKey}}"
							],
							"query": [
								{
									"key": "verb",
									"value": "Identify"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/ - Invalid apKey",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"pm.test(\"Invalid API Key (401)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Is plain text\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/plain');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=Identify&apikey=a",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "Identify"
								},
								{
									"key": "apikey",
									"value": "a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/apiKeyPath - Invalid apKeyPath Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"pm.test(\"IInvalid apiKey (401)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Is plain text\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/plain');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai/a?verb=Identify",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai",
								"a"
							],
							"query": [
								{
									"key": "verb",
									"value": "Identify"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/oai/ - badVerb",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "930715a0-e0fd-4545-9cd3-9740f467a953",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32277bc7-451d-4d58-828b-944c885e1698",
								"exec": [
									"let jsonData = xml2Json(responseBody);",
									"console.log(jsonData);",
									"",
									"pm.test(\"Identify completed with (400)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Is XML\", function () {",
									"    pm.expect(postman.getResponseHeader('Content-Type')).to.contain('text/xml');",
									"});",
									"",
									"pm.test(\"Error is returned\", function() {",
									"    pm.expect(jsonData[\"OAI-PMH\"]).to.have.property('error');",
									"});",
									"",
									"pm.test(\"Error is valid\", function() {",
									"    let errorCode = jsonData[\"OAI-PMH\"].error.$.code;",
									"    pm.expect(errorCode).to.eql(\"badVerb\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"type": "text",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{edge.protocol}}://{{edge.host}}:{{edge.port}}/oai?verb=badVerb&apikey={{institutional.user.edge.apikey}}",
							"protocol": "{{edge.protocol}}",
							"host": [
								"{{edge.host}}"
							],
							"port": "{{edge.port}}",
							"path": [
								"oai"
							],
							"query": [
								{
									"key": "verb",
									"value": "badVerb"
								},
								{
									"key": "apikey",
									"value": "{{institutional.user.edge.apikey}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Cleanup",
			"item": [
				{
					"name": "Delete institutional user",
					"item": [
						{
							"name": "Delete user's credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d4e68cd5-eca2-4427-ba8b-6f059a5fc130",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.variables.get(\"protocol\") + \"://\" ",
											"        + pm.variables.get(\"url\") + \":\" ",
											"        + pm.variables.get(\"okapiport\") + \"/authn/credentials?query=userId=\" + pm.globals.get(\"testData\").user.id,",
											"    method: \"GET\",",
											"    header: {",
											"        \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
											"        \"Content-type\": \"application/json\"",
											"    }",
											"}, function (err, response) {",
											"    if (response.code == 200) {",
											"        pm.variables.set(\"credentialsId\", response.json().credentials[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ff89363-4db6-40bc-a848-e7532b2a7bc0",
										"exec": [
											"let testFunc = pm.variables.get(\"credentialsId\") ? pm.test : pm.test.skip;",
											"testFunc(\"Credentials deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.variables.unset(\"credentialsId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{credentialsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{credentialsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user's permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "234a882a-edd7-4bac-8bc2-7f89c8a7a713",
										"exec": [
											"pm.sendRequest({",
											"    url: pm.variables.get(\"protocol\") + \"://\" ",
											"        + pm.variables.get(\"url\") + \":\" ",
											"        + pm.variables.get(\"okapiport\") + \"/perms/users?query=userId=\" + pm.globals.get(\"testData\").user.id,",
											"    method: \"GET\",",
											"    header: {",
											"        \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
											"        \"Content-type\": \"application/json\"",
											"    }",
											"}, function (err, response) {",
											"    if (response.code == 200) {",
											"        pm.variables.set(\"permissionsId\", response.json().permissionUsers[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f74eb5c8-1652-480c-9fac-356b3a3ffc56",
										"exec": [
											"let testFunc = pm.variables.get(\"permissionsId\") ? pm.test : pm.test.skip;",
											"testFunc(\"Permissions deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.environment.unset(\"permissionsId\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{permissionsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{permissionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "123459a0-b737-4767-a32c-1c5692b8d920",
										"exec": [
											"pm.variables.set(\"userId\", pm.globals.get(\"testData\").user.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac493f0c-3e8c-4c07-94d2-6105617f0384",
										"exec": [
											"pm.test(\"User deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{userId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "51550a77-35a8-45ab-bf74-f093a8202d42",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0decf5ff-c87f-4041-a8cd-ef1a9f2003bd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Revert configs",
					"item": [
						{
							"name": "Get configs and revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let oaiPmhConfigs = [];",
											"pm.test(\"Storing current configs for oai-pmh\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    oaiPmhConfigs = pm.response.json().configs;",
											"    console.log(\"Current configs: \" + oaiPmhConfigs);",
											"});",
											"",
											"let configsToProcess = pm.globals.get(\"testData\").configs.codes;",
											"let originalOaiPmhConfigs = pm.environment.get(\"oaiPmhConfigs\") ? JSON.parse(pm.environment.get(\"oaiPmhConfigs\")) : [];",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configCode = configsToProcess[i];",
											"    let originalConfig = getConfigByCode(originalOaiPmhConfigs, configCode);",
											"    if (originalConfig) {",
											"        updateConfig(originalConfig);",
											"    } else if (oaiPmhConfigs.length > 0) {",
											"        let configId = getConfigByCode(oaiPmhConfigs, configCode).id;",
											"        deleteConfig(configId);",
											"    } else {",
											"        console.log(\"The config cannot be reverted with code=\" + configCode);",
											"    }",
											"}",
											"",
											"function getConfigByCode(configs, code) {",
											"    let config = configs.filter(value => value.code === code);",
											"    return config.length > 0 ? config[0] : null;",
											"}",
											"",
											"function deleteConfig(id) {",
											"    pm.sendRequest({",
											"        url: pm.variables.get(\"protocol\") + \"://\" ",
											"            + pm.variables.get(\"url\") + \":\" ",
											"            + pm.variables.get(\"okapiport\") + \"/configurations/entries/\" + id,",
											"        method: \"DELETE\",",
											"        header: {",
											"            \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
											"            \"Accept-Encoding\": \"identity\"",
											"        }",
											"    }, function (err, response) {",
											"        pm.test(\"Config deleted\", function () {",
											"            pm.expect(response.code).to.eql(204);",
											"        });",
											"    });",
											"}",
											"",
											"function updateConfig(body) {",
											"    pm.sendRequest({",
											"        url: pm.variables.get(\"protocol\") + \"://\" ",
											"            + pm.variables.get(\"url\") + \":\" ",
											"            + pm.variables.get(\"okapiport\") + \"/configurations/entries/\" + body.id,",
											"        method: \"PUT\",",
											"        header: {",
											"            \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
											"            \"Content-type\": \"application/json\",",
											"            \"Accept-Encoding\": \"identity\"",
											"        },",
											"        body: JSON.stringify(body)",
											"    }, function (err, response) {",
											"        pm.test(\"Config updated\", function () {",
											"            pm.expect(response.code).to.eql(204);",
											"        });",
											"    });",
											"}",
											"pm.environment.unset(\"oaiPmhConfigs\");",
											"pm.environment.unset(\"fromDate\");",
											"",
											"// 'storageType' is edge-oai-pmh collection variable",
											"if (pm.variables.get(\"storageType\") === \"SRS\") {",
											"    postman.setNextRequest(\"Delete SRS record\");",
											"} else {",
											"    postman.setNextRequest(\"Delete Inventory marc-json\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==OAI-PMH",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==OAI-PMH"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete SRS records",
					"item": [
						{
							"name": "Delete SRS record",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "123459a0-b737-4767-a32c-1c5692b8d920",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\")) || 1;",
											"if (currentIteration == 1) {",
											"    pm.variables.set(\"currentIteration\", currentIteration)",
											"}",
											"",
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [\"No record to delete\"];",
											"pm.variables.set(\"recordId\", records[0]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac493f0c-3e8c-4c07-94d2-6105617f0384",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\"));",
											"pm.test(\"SRS record #\" + currentIteration + \" deleted by id=\" + pm.variables.get(\"recordId\"), function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Send request again if there are records to delete",
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [\"No id\"];",
											"if (records.length > 1) {",
											"    records.shift();",
											"    pm.environment.set(\"createdRecords\", JSON.stringify(records));",
											"    pm.variables.set(\"currentIteration\", ++currentIteration);",
											"    postman.setNextRequest(\"Delete SRS record\");",
											"} else {",
											"    pm.environment.unset(\"createdRecords\");",
											"    pm.variables.unset(\"currentIteration\");",
											"    postman.setNextRequest();",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/records/{{recordId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"records",
										"{{recordId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete SRS snapshot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "123459a0-b737-4767-a32c-1c5692b8d920",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac493f0c-3e8c-4c07-94d2-6105617f0384",
										"exec": [
											"pm.test(\"SRS snapshot deleted by id=\" + pm.variables.get(\"srsSnapshotId\"), function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"pm.environment.unset(\"fromDate\");",
											"let permissions = pm.environment.get(\"existingUserPermissionsToAdd\") ? JSON.parse(pm.environment.get(\"existingUserPermissionsToAdd\")) : [];",
											"if (permissions.length > 0) {",
											"    postman.setNextRequest(\"Delete existing user permission\");",
											"} else {",
											"    postman.setNextRequest(null);",
											"    pm.globals.clear();",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/source-storage/snapshots/{{srsSnapshotId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"source-storage",
										"snapshots",
										"{{srsSnapshotId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete inventory records",
					"item": [
						{
							"name": "Delete Inventory marc-json",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "976c44b6-9efa-4f76-8818-aa488c6ceb15",
										"exec": [
											"pm.test(\"Deleted record #\" + pm.variables.get(\"currentIteration\") + \" by id=\" + pm.variables.get(\"instanceId\"), function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cacc131d-5556-41ea-aaf8-92e6907f7a80",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\")) || 1;",
											"if (currentIteration == 1) {",
											"    pm.variables.set(\"currentIteration\", currentIteration)",
											"}",
											"",
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [pm.globals.get(\"testData\").instance1.id];",
											"pm.variables.set(\"instanceId\", records[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}/source-record/marc-json",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-storage",
										"instances",
										"{{instanceId}}",
										"source-record",
										"marc-json"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Inventory instances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cc46022-e60f-4734-b0b5-a23ca495b282",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\"));",
											"pm.test(\"Deleted instance #\" + currentIteration + \" by id=\" + pm.variables.get(\"instanceId\"), function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"// Send request again if there are records to delete",
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [\"No id\"];",
											"if (records.length > 1) {",
											"    records.shift();",
											"    pm.environment.set(\"createdRecords\", JSON.stringify(records));",
											"    pm.variables.set(\"currentIteration\", ++currentIteration);",
											"    postman.setNextRequest(\"Delete Inventory marc-json\");",
											"} else {",
											"    pm.environment.unset(\"createdRecords\");",
											"    pm.variables.unset(\"currentIteration\");",
											"",
											"    // Check if there are permissions to delete or test run should be stopped",
											"    let permissions = pm.environment.get(\"existingUserPermissionsToAdd\") ? JSON.parse(pm.environment.get(\"existingUserPermissionsToAdd\")) : [];",
											"    if (permissions.length > 0) {",
											"        postman.setNextRequest();",
											"    } else {",
											"        postman.setNextRequest(null);",
											"        pm.globals.clear();",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "318b5739-ba76-418e-ac31-f052eb894f79",
										"exec": [
											"let currentIteration = parseInt(pm.variables.get(\"currentIteration\")) || 1;",
											"let records = pm.environment.get(\"createdRecords\") ? JSON.parse(pm.environment.get(\"createdRecords\")) : [pm.globals.get(\"testData\").instance1.id];",
											"pm.variables.set(\"instanceId\", records[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{instanceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-storage",
										"instances",
										"{{instanceId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete existing user permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
								"exec": [
									"let permissions = JSON.parse(pm.environment.get(\"existingUserPermissionsToAdd\"));",
									"pm.test(\"Deleted permission=\" + permissions[0], function () {",
									"    pm.response.to.have.status(204);",
									"",
									"    // If there are more permissions to delete, send request again",
									"    if (permissions.length > 1) {",
									"        permissions.shift();",
									"        pm.environment.set(\"existingUserPermissionsToAdd\", JSON.stringify(permissions));",
									"        postman.setNextRequest(\"Delete existing user permission\");",
									"    } else {",
									"        pm.environment.unset(\"existingUserPermissionsToAdd\");",
									"        postman.setNextRequest();",
									"    }",
									"});",
									"pm.globals.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dded3598-c238-487d-b06c-721c60509cf4",
								"exec": [
									"let permissions = JSON.parse(pm.environment.get(\"existingUserPermissionsToAdd\"));",
									"pm.variables.set(\"permissionNameToDelete\", permissions[0]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"type": "text",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{existingUserId}}/permissions/{{permissionNameToDelete}}?indexField=userId",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{existingUserId}}",
								"permissions",
								"{{permissionNameToDelete}}"
							],
							"query": [
								{
									"key": "indexField",
									"value": "userId"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aab0639c-5e64-4ad1-b296-ad829c519ebd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "16fa792e-fd75-4612-979a-07974ef36cf9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4a4babf7-24f5-4f69-be22-8d7bc543a965",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // Hardcoded id",
					"    user: {",
					"        \"id\": \"dd0e3f0b-1f55-4ccc-9ec5-a7e5054cb758\",",
					"        \"username\": \"user\",",
					"        \"active\": true,",
					"        \"proxyFor\": [],",
					"        \"personal\": {",
					"            \"lastName\": \"LastName\",",
					"            \"firstName\": \"FirstName\",",
					"            \"addresses\": []",
					"        }",
					"    },",
					"    credentials: {",
					"\t    \"username\": \"user\",",
					"\t    \"password\": \"password\"",
					"    },",
					"    permissions: {",
					"\t    \"userId\": \"dd0e3f0b-1f55-4ccc-9ec5-a7e5054cb758\",",
					"\t    \"permissions\": [\"oai-pmh.all\"]",
					"    },",
					"    instance1: {",
					"      \"id\": \"601a8dc4-dee7-48eb-b03f-d02fdf0debd0\",\"source\": \"MARC\",\"title\": \"ADVANCING LIBRARY EDUCATION: TECHNOLOGICAL INNOVATION AND INSTRUCTIONAL DESIGN\",\"contributors\": [{\"name\": \"Sigal, Ari\",\"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\",\"primary\": true}],\"identifiers\": [{\"identifierTypeId\": \"2e48e713-17f3-4c13-a9f8-23845bb210af\",\"value\": \"9781466636897\"},{\"identifierTypeId\": \"6051f95c-028e-4c6a-8a9e-ee689dd51453\",\"value\": \"1\"}],\"sourceRecordFormat\": \"MARC-JSON\",\"instanceTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2c\"},",
					"    configs: {",
					"        codes: [\"repository.baseURL\", \"repository.maxRecordsPerResponse\"],",
					"        bodyTemplate: {",
					"            \"module\": \"OAI-PMH\",",
					"            \"configName\": \"Test Config\",",
					"            \"code\": \"\",",
					"            \"description\": \"Test Config Description\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    srsData: {",
					"\t\tparsedRecords: [",
					"            {\"leader\":\"01741nam a2200373 cb4500\",\"fields\":[{\"001\":\"101073931X\"},{\"003\":\"DE-601\"},{\"005\":\"20180416162657.0\"},{\"008\":\"180111s2018    sz            000 0 eng d\"},{\"020\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"3319643991\"},{\"9\":\"3-319-64399-1\"}]}},{\"020\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"9783319643991\"},{\"9\":\"978-3-319-64399-1\"}]}},{\"020\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"9783319644004 (electronic)\"},{\"9\":\"978-3-319-64400-4\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(OCoLC)ocn992783736\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(OCoLC)992783736\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(DE-599)GBV101073931X\"}]}},{\"040\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"ger\"},{\"c\":\"GBVCP\"},{\"e\":\"rda\"}]}},{\"041\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"eng\"}]}},{\"245\":{\"ind1\":\"0\",\"ind2\":\"0\",\"subfields\":[{\"a\":\"Futures, biometrics and neuroscience research\"},{\"c\":\"Luiz Moutinho, Mladen Sokele, editors\"}]}},{\"264\":{\"ind1\":\"3\",\"ind2\":\"1\",\"subfields\":[{\"a\":\"Cham\"},{\"b\":\"Palgrave Macmillan\"},{\"c\":\"[2018]\"}]}},{\"300\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"xxix, 224 Seiten\"},{\"b\":\"Illustrationen\"}]}},{\"336\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Text\"},{\"b\":\"txt\"},{\"2\":\"rdacontent\"}]}},{\"337\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"ohne Hilfsmittel zu benutzen\"},{\"b\":\"n\"},{\"2\":\"rdamedia\"}]}},{\"338\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Band\"},{\"b\":\"nc\"},{\"2\":\"rdacarrier\"}]}},{\"490\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Innovative research methodologies in management\"},{\"v\":\" / Luiz Moutinho, Mladen Sokele ; Volume 2\"}]}},{\"500\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Enthält 9 Beiträge\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"8\":\"1.1 x\"},{\"a\":\"Betriebswirtschaftslehre\"},{\"0\":\"(DE-601)091351391\"},{\"0\":\"(DE-STW)12041-5\"},{\"2\":\"stw\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"8\":\"1.2 x\"},{\"a\":\"Management\"},{\"0\":\"(DE-601)091376173\"},{\"0\":\"(DE-STW)12085-6\"},{\"2\":\"stw\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"8\":\"1.3 x\"},{\"a\":\"Wissenschaftliche Methode\"},{\"0\":\"(DE-601)091401445\"},{\"0\":\"(DE-STW)16727-0\"},{\"2\":\"stw\"}]}},{\"700\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Moutinho, Luiz\"},{\"e\":\"HerausgeberIn\"},{\"4\":\"edt\"},{\"0\":\"(DE-601)509450954\"},{\"0\":\"(DE-588)131450204\"}]}},{\"700\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Sokele, Mladen\"},{\"e\":\"HerausgeberIn\"},{\"4\":\"edt\"}]}},{\"830\":{\"ind1\":\" \",\"ind2\":\"0\",\"subfields\":[{\"a\":\"Innovative research methodologies in management\"},{\"b\":\" / Luiz Moutinho, Mladen Sokele\"},{\"v\":\"Volume 2\"},{\"9\":\"2.2018\"},{\"w\":\"(DE-601)1011380293\"}]}},{\"856\":{\"ind1\":\"4\",\"ind2\":\"2\",\"subfields\":[{\"y\":\"Inhaltsverzeichnis\"},{\"u\":\"http://www.gbv.de/dms/zbw/101073931X.pdf\"},{\"m\":\"V:DE-601;B:DE-206\"},{\"q\":\"application/pdf\"},{\"3\":\"Inhaltsverzeichnis\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"ZBW Kiel <206>\"},{\"d\":\"!H:! A18-1775\"},{\"x\":\"L\"},{\"z\":\"LC\"},{\"s\":\"206/1\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"ZBW Kiel <206>\"},{\"a\":\"26\"},{\"b\":\"1740761685\"},{\"c\":\"01\"},{\"f\":\"H:\"},{\"d\":\"A18-1775\"},{\"e\":\"u\"},{\"x\":\"206/1\"}]}}]},",
					"            {\"leader\":\"02143ngm a2200409 c 4500\",\"fields\":[{\"001\":\"643935371\"},{\"003\":\"DE-601\"},{\"005\":\"20160520072526.0\"},{\"007\":\"vu uvuuuu\"},{\"008\":\"110113s2010                  000 0 ger d\"},{\"020\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"9789279164316\"},{\"9\":\"978-92-79-16431-6\"}]}},{\"024\":{\"ind1\":\"7\",\"ind2\":\" \",\"subfields\":[{\"a\":\"10.2768/21035\"},{\"2\":\"doi\"}]}},{\"028\":{\"ind1\":\"5\",\"ind2\":\"2\",\"subfields\":[{\"a\":\"MI-32-10-386-57-Z\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(DE-599)GBV643935371\"}]}},{\"040\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"ger\"},{\"c\":\"GBVCP\"}]}},{\"041\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"ger\"},{\"a\":\"eng\"},{\"a\":\"spa\"},{\"a\":\"fre\"},{\"a\":\"ita\"},{\"a\":\"dut\"},{\"a\":\"por\"}]}},{\"084\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"55.80\"},{\"9\":\"Verkehrswesen\"},{\"9\":\"Transportwesen: Allgemeines\"},{\"2\":\"bkl\"}]}},{\"245\":{\"ind1\":\"0\",\"ind2\":\"2\",\"subfields\":[{\"a\":\"A journey through Europe\"},{\"h\":\"Bildtontraeger\"},{\"b\":\"high-speed lines\"},{\"c\":\"European Commission, Directorate-General for Mobility and Transport\"}]}},{\"300\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"1 DVD-Video (14 Min.)\"},{\"b\":\"farb.\"},{\"c\":\"12 cm\"}]}},{\"610\":{\"ind1\":\"1\",\"ind2\":\"7\",\"subfields\":[{\"0\":\"(DE-601)132918269\"},{\"0\":\"(DE-588)5098525-5\"},{\"a\":\"Europäische Union\"},{\"2\":\"gnd\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"0\":\"(DE-601)104616431\"},{\"0\":\"(DE-588)4113934-3\"},{\"a\":\"Hochgeschwindigkeitszug\"},{\"2\":\"gnd\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"0\":\"(DE-601)106129678\"},{\"0\":\"(DE-588)4062953-3\"},{\"a\":\"Verkehrsnetz\"},{\"2\":\"gnd\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"8\":\"1.1 x\"},{\"a\":\"Hochgeschwindigkeitsverkehr\"},{\"0\":\"(DE-601)091366011\"},{\"0\":\"(DE-STW)18089-3\"},{\"2\":\"stw\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"8\":\"1.2 x\"},{\"a\":\"Hochgeschwindigkeitsverkehr\"},{\"0\":\"(DE-601)091366011\"},{\"0\":\"(DE-STW)18089-3\"},{\"2\":\"stw\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"8\":\"1.3 x\"},{\"a\":\"Schienenverkehr\"},{\"0\":\"(DE-601)091388066\"},{\"0\":\"(DE-STW)13255-2\"},{\"2\":\"stw\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"8\":\"1.4 x\"},{\"a\":\"EU-Verkehrspolitik\"},{\"0\":\"(DE-601)091358701\"},{\"0\":\"(DE-STW)18627-1\"},{\"2\":\"stw\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"8\":\"1.5 x\"},{\"a\":\"EU-Staaten\"},{\"0\":\"(DE-601)091358639\"},{\"0\":\"(DE-STW)17983-5\"},{\"2\":\"stw\"}]}},{\"710\":{\"ind1\":\"2\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Europäische Kommission\"},{\"b\":\"Generaldirektion Mobilität und Verkehr\"},{\"0\":\"(DE-601)667202439\"},{\"0\":\"(DE-588)16174192-7\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"ZBW Kiel <206>\"},{\"d\":\"!K:! DVD 49\"},{\"x\":\"L\"},{\"z\":\"LC\"},{\"s\":\"206\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"THULB Jena <27>\"},{\"d\":\"!Mag5! EDZ 0720 17\"},{\"x\":\"L\"},{\"z\":\"LC\"},{\"f\":\"Bestand Europäisches Dokumentationszentrum\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"TIB/UB Hannover <89>\"},{\"d\":\"!FBW MagNB! CD oek 6715/042\"},{\"x\":\"L\"},{\"z\":\"C\"},{\"s\":\"89/18\"},{\"g\":\"!FBW EU! CD oek 6715/042\"},{\"x\":\"L\"},{\"z\":\"C\"},{\"s\":\"89/18\"}]}},{\"951\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"eu\"},{\"2\":\"26\"}]}},{\"951\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"oek 6715\"},{\"2\":\"70\"}]}},{\"951\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"oek 6715 3ah\"},{\"2\":\"70\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"ZBW Kiel <206>\"},{\"a\":\"26\"},{\"b\":\"1231491841\"},{\"c\":\"01\"},{\"f\":\"K:\"},{\"d\":\"DVD 49\"},{\"e\":\"u\"},{\"x\":\"0206\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"THULB Jena <27>\"},{\"a\":\"31\"},{\"b\":\"1219949035\"},{\"c\":\"01\"},{\"f\":\"Mag5\"},{\"d\":\"EDZ 0720 17\"},{\"e\":\"d\"},{\"k\":\"Bestand Europäisches Dokumentationszentrum\"},{\"x\":\"0027\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"TIB/UB Hannover <89>\"},{\"a\":\"70\"},{\"b\":\"1219604739\"},{\"c\":\"70\"},{\"f\":\"FBW MagNB\"},{\"d\":\"CD oek 6715/042\"},{\"e\":\"s\"},{\"f\":\"FBW EU\"},{\"d\":\"CD oek 6715/042\"},{\"e\":\"s\"},{\"x\":\"89/18\"}]}}]},",
					"            {\"leader\":\"01926nam a2200397 cc4500\",\"fields\":[{\"001\":\"880391235\"},{\"003\":\"DE-601\"},{\"005\":\"20180615233857.0\"},{\"007\":\"he amu000uuuu\"},{\"008\":\"170217s2016    xxu           000 0 eng d\"},{\"020\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"9780866989732\"},{\"9\":\"978-0-86698-973-2\"}]}},{\"020\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"0866989730\"},{\"9\":\"0-86698-973-0\"}]}},{\"020\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"9780866985529\"},{\"9\":\"978-0-86698-552-9\"}]}},{\"020\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"0866985522\"},{\"9\":\"0-86698-552-2\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(OCoLC)962073864\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(OCoLC)ocn962073864\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(OCoLC)962073864\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(DE-599)GBV880391235\"}]}},{\"040\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"ger\"},{\"c\":\"GBVCP\"},{\"e\":\"rda\"}]}},{\"041\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"eng\"},{\"a\":\"ang\"},{\"a\":\"lat\"}]}},{\"245\":{\"ind1\":\"0\",\"ind2\":\"0\",\"subfields\":[{\"a\":\"Anglo-Saxon manuscripts in microfiche facsimile\"},{\"n\":\"Volume 25\"},{\"p\":\"Corpus Christi College, Cambridge II, MSS 12, 144, 162, 178, 188, 198, 265, 285, 322, 326, 449\"},{\"h\":\"microform\"},{\"c\":\"A. N. Doane (editor and director), Matthew T. Hussey (associate editor), Phillip Pulsiano (founding editor)\"}]}},{\"264\":{\"ind1\":\"3\",\"ind2\":\"1\",\"subfields\":[{\"a\":\"Tempe, Arizona\"},{\"b\":\"ACMRS, Arizona Center for Medieval and Renaissance Studies\"},{\"c\":\"2016\"}]}},{\"300\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"69 Mikrofiches\"},{\"e\":\"1 Begleitbuch (XII, 167 Seiten)\"}]}},{\"336\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Text\"},{\"b\":\"txt\"},{\"2\":\"rdacontent\"}]}},{\"337\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Mikroform\"},{\"b\":\"h\"},{\"2\":\"rdamedia\"}]}},{\"338\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Mikrofiche\"},{\"b\":\"he\"},{\"2\":\"rdacarrier\"}]}},{\"490\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Medieval and Renaissance Texts and Studies\"},{\"v\":\"volume 497\"}]}},{\"500\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Titel und Angaben zu beteiligter Person vom Begleitheft\"}]}},{\"546\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"In English with segments in Anglo-Saxon and Latin\"}]}},{\"700\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Lucas, Peter J.\"},{\"e\":\"VerfasserIn von Zusatztexten\"},{\"4\":\"wat\"},{\"0\":\"(DE-601)699400066\"},{\"0\":\"(DE-588)188475893\"}]}},{\"710\":{\"ind1\":\"2\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Arizona Center for Medieval and Renaissance Studies\"}]}},{\"773\":{\"ind1\":\"0\",\"ind2\":\"8\",\"subfields\":[{\"q\":\"25.2016\"},{\"w\":\"(DE-601)281985480\"}]}},{\"830\":{\"ind1\":\" \",\"ind2\":\"0\",\"subfields\":[{\"w\":\"(DE-601)13055846X\"},{\"v\":\"volume 497\"},{\"9\":\"49700\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"SBB-PK Berlin <1+1A>\"},{\"d\":\"!2! 1 F 5327-25\"},{\"x\":\"L\"},{\"z\":\"LC\"},{\"f\":\"Mikrofiches\"},{\"d\":\"!2! 1 F 5327-25,Beil.\"},{\"x\":\"L\"},{\"z\":\"LC\"},{\"f\":\"Begleitbuch\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"SBB-PK Berlin <1+1A>\"},{\"a\":\"11\"},{\"b\":\"1665961309\"},{\"c\":\"01\"},{\"f\":\"2\"},{\"d\":\"1 F 5327-25\"},{\"e\":\"d\"},{\"k\":\"Mikrofiches\"},{\"x\":\"0001\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"SBB-PK Berlin <1+1A>\"},{\"a\":\"11\"},{\"b\":\"1665961317\"},{\"c\":\"02\"},{\"f\":\"2\"},{\"d\":\"1 F 5327-25,Beil.\"},{\"e\":\"u\"},{\"k\":\"Begleitbuch\"},{\"x\":\"0001\"}]}}]},",
					"            {\"leader\":\"00778nam a2200217 c 4500\",\"fields\":[{\"001\":\"53957015X\"},{\"003\":\"DE-601\"},{\"005\":\"20070817075301.0\"},{\"007\":\"hu uuu   uuuu\"},{\"008\":\"070816s1955    xxu           000 0 eng d\"},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(DE-599)GBV53957015X\"}]}},{\"040\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"ger\"},{\"c\":\"GBVCP\"}]}},{\"041\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"eng\"}]}},{\"100\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Stavrou, C.N.\"}]}},{\"245\":{\"ind1\":\"1\",\"ind2\":\"4\",\"subfields\":[{\"a\":\"The Neurotic Heroine in Tennessee Williams\"},{\"h\":\"microform\"},{\"c\":\"C.N. Stavrou\"}]}},{\"264\":{\"ind1\":\"3\",\"ind2\":\"1\",\"subfields\":[{\"a\":\"New York\"},{\"b\":\"Columbia University\"},{\"c\":\"1955\"}]}},{\"300\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"1 Mikrofilm\"},{\"a\":\"26-34 S.\"}]}},{\"533\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Mikrofilm-Ausg.\"},{\"d\":\"1957\"},{\"e\":\"1 Mikrofilm\"},{\"7\":\"|1957||||||||||\"}]}},{\"773\":{\"ind1\":\"0\",\"ind2\":\"8\",\"subfields\":[{\"i\":\"Aus: \"},{\"t\":\"Literature and Psychology, 5 (1955) 26.-34.\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"UB Kiel <8>\"},{\"g\":\"!8/55! WIL | STA | Neu\"},{\"x\":\"N\"},{\"z\":\"N\"},{\"g\":\"Bibliothekszimmer\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"UB Kiel <8>\"},{\"a\":\"24\"},{\"b\":\"830721037\"},{\"c\":\"01\"},{\"f\":\"8/55\"},{\"d\":\"WIL | STA | Neu\"},{\"e\":\"i\"},{\"d\":\"Bibliothekszimmer\"},{\"x\":\"0008\"}]}}]},",
					"            {\"leader\":\"01107nam a2200253 ca4500\",\"fields\":[{\"001\":\"1008673218\"},{\"003\":\"DE-601\"},{\"005\":\"20180615212835.0\"},{\"007\":\"hu uuu   uuuu\"},{\"008\":\"171211s1993                  000 0 eng d\"},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(DE-599)GBV1008673218\"}]}},{\"040\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"ger\"},{\"c\":\"GBVCP\"},{\"e\":\"rda\"}]}},{\"041\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"eng\"}]}},{\"100\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Matwiejczyk-Montgomery, Marian Ann J.\"},{\"e\":\"VerfasserIn\"},{\"4\":\"aut\"}]}},{\"245\":{\"ind1\":\"1\",\"ind2\":\"0\",\"subfields\":[{\"a\":\"Concepts of fashion 1921 - 1987\"},{\"h\":\"microform\"},{\"b\":\"a study of garments worn by selected winners of the Miss America Pageant\"},{\"c\":\"Marian Ann J. Matwiejczyk-Montgomery\"}]}},{\"264\":{\"ind1\":\"3\",\"ind2\":\"1\",\"subfields\":[{\"a\":\"Ann Arbor, MI\"},{\"b\":\"University Microfims International\"},{\"c\":\"1993\"}]}},{\"336\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Text\"},{\"b\":\"txt\"},{\"2\":\"rdacontent\"}]}},{\"337\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Mikroform\"},{\"b\":\"h\"},{\"2\":\"rdamedia\"}]}},{\"338\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Mikrofiche\"},{\"b\":\"he\"},{\"2\":\"rdacarrier\"}]}},{\"502\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"Dissertation\"},{\"c\":\"New York University\"},{\"d\":\"1993\"}]}},{\"533\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Mikrofiche-Ausgabe\"}]}},{\"655\":{\"ind1\":\"0\",\"ind2\":\"7\",\"subfields\":[{\"0\":\"(DE-588)4113937-9\"},{\"a\":\"Hochschulschrift\"},{\"2\":\"gnd-content\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"PKB (Museen) Berlin\"},{\"d\":\"!KB LIPP RARA! R-MF-Lipp Mc 101 f kl\"},{\"x\":\"N\"},{\"z\":\"N\"},{\"s\":\"3181 /011\"},{\"g\":\"R-MF-Lipp:Mc:101:f:kl:\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"PKB (Museen) Berlin\"},{\"a\":\"181\"},{\"b\":\"1729698859\"},{\"c\":\"10\"},{\"f\":\"KB LIPP RARA\"},{\"d\":\"R-MF-Lipp Mc 101 f kl\"},{\"e\":\"i\"},{\"d\":\"R-MF-Lipp:Mc:101:f:kl:\"},{\"x\":\"3181 /011\"}]}}]},",
					"            {\"leader\":\"01860nam a2200337 ca4500\",\"fields\":[{\"001\":\"1010770160\"},{\"003\":\"DE-601\"},{\"005\":\"20180214103458.0\"},{\"008\":\"180111s2018    xxu           000 0 eng d\"},{\"020\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"9781473937703\"},{\"c\":\"set\"},{\"9\":\"978-1-4739-3770-3\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(DE-599)GBV1010770160\"}]}},{\"040\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"ger\"},{\"c\":\"GBVCP\"},{\"e\":\"rda\"}]}},{\"041\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"eng\"}]}},{\"044\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"xxu\"},{\"a\":\"xxk\"},{\"a\":\"ii\"}]}},{\"050\":{\"ind1\":\" \",\"ind2\":\"0\",\"subfields\":[{\"a\":\"H\"}]}},{\"082\":{\"ind1\":\"0\",\"ind2\":\"0\",\"subfields\":[{\"a\":\"300\"}]}},{\"084\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"74.72\"},{\"9\":\"Stadtplanung\"},{\"9\":\"kommunale Planung\"},{\"2\":\"bkl\"}]}},{\"084\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"74.12\"},{\"9\":\"Stadtgeographie\"},{\"9\":\"Siedlungsgeographie\"},{\"2\":\"bkl\"}]}},{\"245\":{\"ind1\":\"0\",\"ind2\":\"4\",\"subfields\":[{\"a\":\"The city\"},{\"b\":\"post-modernity\"},{\"c\":\"edited by Alan Latham\"}]}},{\"264\":{\"ind1\":\"3\",\"ind2\":\"1\",\"subfields\":[{\"a\":\"Los Angeles\"},{\"a\":\"London\"},{\"a\":\"New Delhi\"},{\"a\":\"Singapore\"},{\"a\":\"Washington DC\"},{\"a\":\"Melbourne\"},{\"b\":\"SAGE\"},{\"c\":\"2018\"}]}},{\"336\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Text\"},{\"b\":\"txt\"},{\"2\":\"rdacontent\"}]}},{\"337\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"ohne Hilfsmittel zu benutzen\"},{\"b\":\"n\"},{\"2\":\"rdamedia\"}]}},{\"338\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Band\"},{\"b\":\"nc\"},{\"2\":\"rdacarrier\"}]}},{\"490\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"SAGE benchmarks in culture and society\"}]}},{\"520\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Cities are sites of great wealth and poverty, of hope and despair, of social and economic dynamism, as well as tradition and established power. Social scientists and humanities scholars have over the past three decades generated an impressive range of perspectives for making sense of the vast complexities of cities. These perspectives tell both of the economic, social and political dynamism cities generate, and point to possible lines of future development. The four volumes, The City: Post-Modernity, will focus more exclusively on the contemporary city, looking at the subject through the lenses of globalization and post-colonialism, amongst others\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"0\":\"(DE-601)106153919\"},{\"0\":\"(DE-588)4056723-0\"},{\"a\":\"Stadt\"},{\"2\":\"gnd\"}]}},{\"650\":{\"ind1\":\" \",\"ind2\":\"7\",\"subfields\":[{\"0\":\"(DE-601)104288515\"},{\"0\":\"(DE-588)4115604-3\"},{\"a\":\"Postmoderne\"},{\"2\":\"gnd\"}]}},{\"655\":{\"ind1\":\"0\",\"ind2\":\"7\",\"subfields\":[{\"0\":\"(DE-588)4143413-4\"},{\"a\":\"Aufsatzsammlung\"},{\"2\":\"gnd-content\"}]}},{\"700\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Latham, Alan\"},{\"e\":\"HerausgeberIn\"},{\"4\":\"edt\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"SUB+Uni Hamburg <18>\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"SUB+Uni Hamburg <18>\"},{\"a\":\"22\"},{\"b\":\"1740834291\"},{\"c\":\"01\"},{\"x\":\"0018\"}]}}]},",
					"            {\"leader\":\"01906naa a2200349 c 4500\",\"fields\":[{\"001\":\"1011184508\"},{\"003\":\"DE-601\"},{\"005\":\"20180301091013.0\"},{\"008\":\"180119s2018                  000 0 eng d\"},{\"016\":{\"ind1\":\"7\",\"ind2\":\" \",\"subfields\":[{\"a\":\"243003-4\"},{\"2\":\"DE-600\"}]}},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(DE-599)GBV1011184508\"}]}},{\"040\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"ger\"},{\"c\":\"GBVCP\"},{\"e\":\"rda\"}]}},{\"041\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"eng\"}]}},{\"100\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Da, Gaofeng\"},{\"e\":\"VerfasserIn\"},{\"4\":\"aut\"},{\"0\":\"(DE-601)1015051618\"},{\"0\":\"(DE-588)1153556588\"}]}},{\"245\":{\"ind1\":\"1\",\"ind2\":\"0\",\"subfields\":[{\"a\":\"On the signature of complex system\"},{\"b\":\"a decomposed approach\"},{\"c\":\"Gaofeng Da, Ping Shing Chan, Maochao Xu\"}]}},{\"336\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Text\"},{\"b\":\"txt\"},{\"2\":\"rdacontent\"}]}},{\"337\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"ohne Hilfsmittel zu benutzen\"},{\"b\":\"n\"},{\"2\":\"rdamedia\"}]}},{\"338\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Band\"},{\"b\":\"nc\"},{\"2\":\"rdacarrier\"}]}},{\"700\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Chan, Ping Shing\"},{\"e\":\"VerfasserIn\"},{\"4\":\"aut\"},{\"0\":\"(DE-601)718654811\"},{\"0\":\"(DE-588)1023876256\"}]}},{\"700\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Xu, Maochao\"},{\"e\":\"VerfasserIn\"},{\"4\":\"aut\"},{\"0\":\"(DE-601)720932068\"},{\"0\":\"(DE-588)1025070240\"}]}},{\"773\":{\"ind1\":\"0\",\"ind2\":\"8\",\"subfields\":[{\"i\":\"Enthalten in\"},{\"t\":\"European journal of operational research : EJOR\"},{\"d\":\"Amsterdam : Elsevier\"},{\"g\":\"Vol. 265, No. 3 (2018), p. 1115-1123\"},{\"q\":\"265:3<1115-1123\"},{\"w\":\"(DE-601)129611131\"},{\"x\":\"0377-2217\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"ZBW Kiel <206>\"},{\"d\":\"!H:ls! Z 6556\"},{\"x\":\"L\"},{\"z\":\"LC\"},{\"s\":\"206 /1\"},{\"c\":\"184.2008 -\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"UB Clausthal <104>\"},{\"d\":\"!104 /13!  CL 13\"},{\"x\":\"N\"},{\"z\":\"N\"},{\"g\":\"lfdcl13\"},{\"c\":\"2006 -\"},{\"f\":\"Genauen Bestand bitte im Institut erfragen\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"TIB /UB Hannover <89>\"},{\"d\":\"ZN 8146 Haus2\"},{\"x\":\"L\"},{\"z\":\"C\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"DNB <101>\"},{\"d\":\"!101a! ZB 93727\"},{\"x\":\"L\"},{\"z\":\"C\"},{\"s\":\"0101 /001\"},{\"g\":\"!MZLS! 10-n\"},{\"c\":\"54.1992(1991),1u.3; 56.1992 -\"}]}},{\"951\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"bwl\"},{\"2\":\"26\"}]}},{\"951\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"11\"},{\"2\":\"30\"}]}},{\"952\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"d\":\"265\"},{\"j\":\"2018\"},{\"e\":\"3\"},{\"b\":\"16\"},{\"c\":\"3\"},{\"h\":\"1115-1123\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"ZBW Kiel <206>\"},{\"a\":\"26\"},{\"b\":\"892666773\"},{\"c\":\"04\"},{\"f\":\"H:ls\"},{\"d\":\"Z 6556\"},{\"e\":\"b\"},{\"g\":\"Bestand: 184.2008 -\"},{\"x\":\"206 /1\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"UB Clausthal <104>\"},{\"a\":\"30\"},{\"b\":\"1174535881\"},{\"c\":\"02\"},{\"f\":\"104 /13\"},{\"d\":\" CL 13\"},{\"e\":\"g\"},{\"d\":\"lfdcl13\"},{\"g\":\"Bestand: 2006 -\"},{\"k\":\"Genauen Bestand bitte im Institut erfragen\"},{\"x\":\"0104\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"TIB /UB Hannover <89>\"},{\"a\":\"70\"},{\"b\":\"13765989X\"},{\"c\":\"01\"},{\"d\":\"ZN 8146 Haus2\"},{\"e\":\"f\"},{\"g\":\"Bestand: 1.1977 - \"},{\"x\":\"0089\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"DNB <101>\"},{\"a\":\"267\"},{\"b\":\"9001929018\"},{\"c\":\"01\"},{\"f\":\"101a\"},{\"d\":\"ZB 93727\"},{\"e\":\"f\"},{\"f\":\"MZLS\"},{\"d\":\"10-n\"},{\"g\":\"Bestand: 54.1992(1991),1u.3; 56.1992 -\"},{\"x\":\"0101 /001\"}]}}]},",
					"            {\"leader\":\"01344nja a2200289 c 4500\",\"fields\":[{\"001\":\"1011162431\"},{\"003\":\"DE-601\"},{\"005\":\"20180118183625.0\"},{\"007\":\"su uuuuuuuuuuu\"},{\"008\":\"180118s2017                  000 0 ger d\"},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(DE-599)GBV1011162431\"}]}},{\"040\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"ger\"},{\"c\":\"GBVCP\"},{\"e\":\"rda\"}]}},{\"041\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"ger\"}]}},{\"100\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Bach, Johann Sebastian\"},{\"e\":\"KomponistIn\"},{\"4\":\"cmp\"},{\"0\":\"(DE-601)134579348\"},{\"0\":\"(DE-588)11850553X\"}]}},{\"240\":{\"ind1\":\"1\",\"ind2\":\"0\",\"subfields\":[{\"0\":\"(DE-601)701589477\"},{\"0\":\"(DE-588)300007736\"},{\"a\":\"Ich habe genung\"}]}},{\"245\":{\"ind1\":\"1\",\"ind2\":\"0\",\"subfields\":[{\"a\":\"Cantatas for bass\"},{\"n\":\"4\"},{\"p\":\"Ich habe genug : BWV 82 / Johann Sebastian Bach ; Matthias Goerne, baritone ; Freiburger Barockorchester, Gottfried von der Goltz, violin and conductor\"}]}},{\"246\":{\"ind1\":\"1\",\"ind2\":\"3\",\"subfields\":[{\"i\":\"Abweichender Titel\"},{\"a\":\"Ich habe genung\"}]}},{\"300\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Track 10-14\"}]}},{\"336\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"aufgeführte Musik\"},{\"b\":\"prm\"},{\"2\":\"rdacontent\"}]}},{\"337\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"audio\"},{\"b\":\"s\"},{\"2\":\"rdamedia\"}]}},{\"338\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Audiodisk\"},{\"b\":\"sd\"},{\"2\":\"rdacarrier\"}]}},{\"700\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Arfken, Katharina\"},{\"e\":\"InstrumentalmusikerIn\"},{\"4\":\"itr\"},{\"0\":\"(DE-601)576364940\"},{\"0\":\"(DE-588)135158265\"}]}},{\"700\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Goltz, Gottfried von der\"},{\"e\":\"DirigentIn\"},{\"4\":\"cnd\"},{\"0\":\"(DE-601)081724969\"},{\"0\":\"(DE-588)122080912\"}]}},{\"710\":{\"ind1\":\"2\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Freiburger Barockorchester\"},{\"e\":\"InstrumentalmusikerIn\"},{\"4\":\"itr\"},{\"0\":\"(DE-601)12121060X\"},{\"0\":\"(DE-588)5066798-1\"}]}},{\"773\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"w\":\"(DE-601)895161729\"},{\"t\":\"Cantatas for bass, Bach, Johann Sebastian. - Arles : Harmonia Mundi\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"SBB-PK Berlin <1+1A>\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"SBB-PK Berlin <1+1A>\"},{\"a\":\"11\"},{\"b\":\"1742288871\"},{\"c\":\"01\"},{\"x\":\"0001\"}]}}]},",
					"            {\"leader\":\"00906nmm a2200253 ca4500\",\"fields\":[{\"001\":\"858092093\"},{\"003\":\"DE-601\"},{\"005\":\"20160502164752.0\"},{\"007\":\"cu uuu---uuuuu\"},{\"008\":\"160502m20169999gw      o     000 0 eng d\"},{\"035\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"(DE-599)GBV858092093\"}]}},{\"040\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"b\":\"ger\"},{\"c\":\"GBVCP\"},{\"e\":\"rda\"}]}},{\"041\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"eng\"}]}},{\"100\":{\"ind1\":\"1\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Ris, Robert\"},{\"e\":\"VerfasserIn\"},{\"4\":\"aut\"},{\"0\":\"(DE-601)778649407\"},{\"0\":\"(DE-588)1047595397\"}]}},{\"245\":{\"ind1\":\"1\",\"ind2\":\"4\",\"subfields\":[{\"a\":\"The chess player’s mating guide\"},{\"h\":\"Computer Datei\"},{\"c\":\"Robert Ris\"}]}},{\"264\":{\"ind1\":\"3\",\"ind2\":\"1\",\"subfields\":[{\"a\":\"Hamburg\"},{\"b\":\"Chessbase GmbH\"},{\"c\":\"[2016]-\"}]}},{\"336\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Computerprogramm\"},{\"b\":\"cop\"},{\"2\":\"rdacontent\"}]}},{\"337\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Computermedien\"},{\"b\":\"c\"},{\"2\":\"rdamedia\"}]}},{\"338\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"Computerdisk\"},{\"b\":\"cd\"},{\"2\":\"rdacarrier\"}]}},{\"490\":{\"ind1\":\"0\",\"ind2\":\" \",\"subfields\":[{\"a\":\"Fritztrainer\"},{\"a\":\"Tactics\"}]}},{\"655\":{\"ind1\":\"0\",\"ind2\":\"7\",\"subfields\":[{\"0\":\"(DE-588)4585131-1\"},{\"a\":\"DVD-ROM\"},{\"2\":\"gnd-carrier\"}]}},{\"710\":{\"ind1\":\"2\",\"ind2\":\" \",\"subfields\":[{\"a\":\"ChessBase GmbH\"},{\"g\":\"Hamburg\"},{\"e\":\"Verlag\"},{\"4\":\"pbl\"},{\"0\":\"(DE-601)269520015\"},{\"0\":\"(DE-588)2177108-X\"}]}},{\"900\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"a\":\"GBV\"},{\"b\":\"SUB+Uni Hamburg <18>\"}]}},{\"954\":{\"ind1\":\" \",\"ind2\":\" \",\"subfields\":[{\"0\":\"SUB+Uni Hamburg <18>\"},{\"a\":\"22\"},{\"b\":\"1613697813\"},{\"c\":\"01\"},{\"x\":\"0018\"}]}}]}",
					"\t\t]",
					"\t}",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.findObjectByKey = function findObjectByKey(queryParams, key) {",
					"        var array = queryParams.members;",
					"        for (var i = 0; i < array.length; i++) {",
					"            if (array[i].key === key) {",
					"                return array[i][\"value\"];",
					"            }",
					"        ",
					"        }",
					"        return null;",
					"    }",
					"    ",
					"   utils.sendRequestWithResumptionToken = function sendRequestWithResumptionToken(oaiResponse, verb) {",
					"        let resumptionToken = oaiResponse[verb].resumptionToken._;",
					"        console.log(resumptionToken);",
					"        let paths = pm.request.url.path; ",
					"        let path = \"\";",
					"        for ( var i = 0; i < paths.length; i++) {",
					"            path += \"/\" + paths[i];",
					"        }",
					"        pm.sendRequest({",
					"            url: pm.variables.get(\"edge.protocol\") + \"://\" ",
					"                + pm.variables.get(\"edge.host\") + \":\" ",
					"                + pm.variables.get(\"edge.port\")",
					"                + path + \"?apikey=\"",
					"                + pm.variables.get(\"institutional.user.edge.apikey\") + \"&resumptionToken=\"",
					"                + resumptionToken + \"&verb=\"",
					"                + verb,",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
					"                \"Accept-Encoding\": \"identity\"",
					"            }",
					"        }, function (err, response) {",
					"            let result = xml2Json(response.text())[\"OAI-PMH\"];",
					"            console.log(result);",
					"            pm.test(\"Request with resumption token successfully completed (200)\", function () {",
					"                 pm.expect(response.code).to.equal(200);",
					"            });",
					"            var key = Object.keys(result[verb]);",
					"            var recordsLength = Number(result[verb][key[0]].length);",
					"            recordsLength = recordsLength ? recordsLength : 1;",
					"            let currentListSize = Number(result[verb].resumptionToken.$.cursor) + recordsLength;",
					"            let completeListSize = result[verb].resumptionToken.$.completeListSize;",
					"            if (currentListSize < completeListSize) {",
					"                sendRequestWithResumptionToken(result, verb)",
					"            } else {",
					"                pm.test(\"Resumption token is empty\", function () {",
					"                    pm.expect(result[verb].resumptionToken._).to.equal(undefined);",
					"                });",
					"            }",
					"        });",
					"    }",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4d4ea915-b9aa-4698-9b8f-a6ced1ae131e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "63391219-1439-4c45-93ad-351204a101ae",
			"key": "dc",
			"value": "oai_dc",
			"type": "string"
		},
		{
			"id": "9f8dc490-2339-4d74-a182-0158ddad6dc4",
			"key": "marc",
			"value": "marc21",
			"type": "string"
		},
		{
			"id": "ed382201-a20b-4d82-862f-65659f46d2bc",
			"key": "storageType",
			"value": "SRS",
			"type": "string"
		},
		{
			"id": "54c95255-9470-4559-9d53-933a355eb13c",
			"key": "recordsToCreate",
			"value": "25",
			"type": "string"
		},
		{
			"id": "2c1f47c6-fc45-46a4-a731-92a0c58bcc97",
			"key": "repository.baseURL",
			"value": "http://folio-api-tests.org/oai",
			"type": "string"
		},
		{
			"id": "8c7a7995-b630-4f51-bd11-4fa71d5ca158",
			"key": "repository.maxRecordsPerResponse",
			"value": "10",
			"type": "string"
		},
		{
			"id": "5f484807-9279-473c-ba6e-76ce3fab6042",
			"key": "institutional.user.edge.apikey",
			"value": "eyJzIjoiN2JyNU1WZ3dNbnE0SW5ocGZrcnAiLCJ0IjoiZGlrdSIsInUiOiJkaWt1In0=",
			"type": "string"
		}
	]
}