{
	"info": {
		"_postman_id": "68c2fe8a-6b1b-476f-af38-c94bbba4c615",
		"name": "mod-finance",
		"description": "Tests for mod-finance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13ed16e9-c283-410a-a0fb-1b820d4ac59f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ce9f026e-70c9-40ad-80c8-8993dd293929",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fb5d47c-3bec-4b52-b8f4-f59fcd7361be",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0c4ad7cf-257d-4eda-a513-52712492502e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-finance\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"",
											"",
											"//remove after implementing mod-finance CRUD API",
											"utils.getModuleId(\"mod-finance-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"//",
											"",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c00ee3b7-211b-4551-a070-7b841a541b0b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "956d45f8-9112-4b55-9ea1-799ef8c98df9",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "69b7e6ee-6ad2-4dc1-9b04-3810c8d1fe64",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68376123-c39b-4688-b45c-7b0284cc898c",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55719fff-038b-49a0-9512-2331423e9556",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b593cdf-ac2a-4cf0-995e-c670bd05f441",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8cad6ef0-4cf3-41eb-8bde-c50e8e8d6bf4",
										"exec": [
											"eval(globals.loadUtils).sendGetRequest('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])', (err, res) => {",
											"        let userPermissions = globals.testData.users.admin.permissions;",
											"        userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"        userPermissions.permissions.push(\"finance.order-transaction-summaries.item.post\");",
											"        pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7056f710-d8be-40ad-bfea-22e5c044ba94",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b8d639a8-81e7-425e-9b68-54df1e82c2c4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27f1236d-f89e-4a9e-a978-b43360c79655",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "083c6a48-a2b0-4566-97b3-626bce67d460",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e509bf77-6e1f-4402-86fc-1aa7a03bec37",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"testConfigs.configNames.forEach(configName => utils.createFinanceConfig(configName));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a1edfd18-322d-4b07-bb3b-3a4771481de1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==FINANCE",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==FINANCE"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a72ae65-0eac-435a-9d82-bd2269fc24fb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d37f14ea-d326-47c8-98c0-7e9416aad7d0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load all schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ff8a90c-76d1-47a2-a729-9850f6e76223",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modFinanceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d3e1fa4-8817-4510-9570-779129bdf6c8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moduleName = 'mod-finance';",
											"",
											"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(response.text()).to.include(moduleName);",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];",
											"        pm.variables.set('modFinanceId', moduleId);",
											"    });",
											"});",
											"",
											"",
											"function buildPmRequest1(path) {",
											"    return {",
											"        url: utils.buildOkapiUrl(path),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
											"        }",
											"    };",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modFinanceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42a89cc4-cbae-4394-90e3-8fe7f3faacc7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6c9473a9-e3cc-496a-a630-9899c0451e41",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3f00bc1f-905c-4a42-a13c-4e278de47d7e",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ce2d62de-e64d-4310-9a6e-537d2af74140",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0c59272-d80f-4001-8ee0-81518003d066",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8861336c-e25f-4143-aead-fc22f6c64716",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8472e72-438b-44fa-b32a-f6515d58325f",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "864df2ef-7a30-462b-bcbe-bce9101fa884",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37b0b087-d4a3-4acf-a1d2-84c18483e366",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f9ae30fd-9740-462f-9679-19a4fd6fc76f",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create group - for Group Fund Fiscal Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d074021d-5870-454f-86d9-d02970f0cecf",
										"exec": [
											"pm.test(\"Group is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "107c0964-7662-4513-a8e5-2ac740343f6a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let group = utils.buildGroupMinContent(\"GROUP_GFFY\");",
											"group.name = \"Test group for GFFY\";",
											"",
											"pm.environment.set(\"groupContent\", JSON.stringify(group));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - for CRUD test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba549d81-8771-4436-b742-28554dbbbba0",
										"exec": [
											"pm.test(\"Group is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupForCrudId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcb02049-9f5f-4bed-9fbe-a6ae1b555d71",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let group = utils.buildGroupMinContent(\"GROUP_GRUD\");",
											"",
											"pm.environment.set(\"groupContent\", JSON.stringify(group));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa8ad421-d110-46e6-9b69-c26f2bd96f2d",
										"exec": [
											"pm.test(\"Groups is retrieved\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().groups.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e8ef85f-ea75-4778-8d95-f70ba8418586",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "158889d0-9d2b-484b-a2d5-9e71c1ccb6da",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateGroup(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c972b47-a7b3-4dbc-b527-1f8acd86569e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9d4541a-7c39-43c2-99ee-42bc1b4b465a",
										"exec": [
											"pm.test(\"Group is updated\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "06e43410-4a1c-42c4-9c10-3e9baaca1e8d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let groupForUpdate = JSON.parse(pm.environment.get(\"groupContent\"));",
											"",
											"groupForUpdate.name = \"newGroupName\";",
											"",
											"pm.variables.set(\"groupContent\", JSON.stringify(groupForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "052f9c7b-37be-4768-b574-ed37658484ab",
										"exec": [
											"pm.test(\"Group is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38943b85-dbe7-41a9-95a3-83e05dc0a8f5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fiscal years",
					"item": [
						{
							"name": "Create fiscal year  - required for budgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "272e36d4-4cf7-4e49-b319-f45900acf793",
										"exec": [
											"pm.test(\"Fiscal Year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fiscalYearId\", pm.response.json().id);",
											"    // MODFIN-94 Add series field while creating/updating a FiscalYear",
											"    pm.expect(pm.response.json().series).to.exist;",
											"});",
											"",
											"pm.test(\"Fiscal Year contains Currenct\", () => {",
											"    pm.expect(pm.response.json().currency).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2891016b-70e7-4e05-ba49-7c7572edd65f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fyContent\", JSON.stringify(utils.buildFiscalYearMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fiscal year  - required for budgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "507c61b2-525a-4d88-b172-ffab1c49eefc",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"secondFiscalYearId\", pm.response.json().id); ",
											"    // MODFIN-94 Add series field while creating/updating a FiscalYear",
											"    pm.expect(pm.response.json().series).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d04cf3d-e0ca-4020-8029-b4781a347b96",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fy = utils.buildFiscalYearMinContent(\"FY2020\");",
											"",
											"pm.environment.set(\"secondFyContent\", JSON.stringify(fy));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{secondFyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fiscal year list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef3eb5c2-9cd2-4499-82e0-33267eeb482e",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().fiscalYears.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c88c0ab-c5a7-4826-86c5-5c045260005b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c89884fd-c3e3-48be-8dfb-45a2cd1575af",
										"exec": [
											"pm.test(\"FiscalYear is updated is created\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8ad3d96e-a005-4471-aa82-1b81f28ecec2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let fyForUpdate = JSON.parse(pm.variables.get(\"secondFyContent\"));",
											"",
											"fyForUpdate.name = \"newFYName\";",
											"",
											"pm.variables.set(\"secondFyContent\", JSON.stringify(fyForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{secondFyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{secondFiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{secondFiscalYearId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fiscal year by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13495376-c4bb-47fa-abe6-585f43cb965b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fiscal year is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateFiscalYear(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69d37b8c-1775-4812-9aa4-20be433bc7c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{secondFiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{secondFiscalYearId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fiscal year for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "024893c8-e771-42cd-8cb5-cebc4dc032ad",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Fiscal Year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fyForDeleteId\", pm.response.json().id); ",
											"});",
											"",
											"pm.test(\"Fiscal Year contains Currency from Config\", () => {",
											"    pm.expect(pm.response.json().currency).to.exist;",
											"     pm.expect(pm.response.json().currency).to.equal(\"USD\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90a2f23c-6dcd-4348-ad57-93854733dd9f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fy = utils.buildFiscalYearMinContent(\"THRD2020\");",
											"",
											"pm.variables.set(\"fyForDelete\", JSON.stringify(fy));",
											"",
											"let localeConfig = globals.testData.localeConfigs.bodyTemplate;",
											"localeConfig.value = \"{\\\"locale\\\":\\\"en-US\\\",\\\"timezone\\\":\\\"America/New_York\\\",\\\"currency\\\":\\\"USD\\\"}\";",
											"utils.createConfig(localeConfig);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyForDelete}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Test Fiscal Year picks currency from configuration while creating"
							},
							"response": []
						},
						{
							"name": "Delete fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d875aee0-1e97-41ad-9587-1fc1cd150173",
										"exec": [
											"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6fff8a1a-3d2f-4d18-9cd6-58a96cb82c9b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{fyForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{fyForDeleteId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ledgers",
					"item": [
						{
							"name": "Create first ledger - required for funds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e04796a-ccd1-4f36-97dc-2737cd5b9541",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "64046dd9-512f-400c-be15-d3fdf3fd11f4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let ledger = utils.buildLedgerMinContent();",
											"ledger.fiscalYearOneId = pm.environment.get(\"fiscalYearId\");",
											"pm.environment.set(\"ledgerContent\", JSON.stringify(ledger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second ledger - for CRUD test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d48cdc9c-ac47-45f9-97e7-19813b844a60",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"secondLedgerId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a878032-14ee-421d-8c05-183ab9a0d4ef",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let secondLedger = utils.buildLedgerMinContent();",
											"secondLedger.code = \"SCND-TST-LDGR-CODE\";",
											"secondLedger.name = \"Second Ledger Name\";",
											"secondLedger.fiscalYearOneId = pm.environment.get(\"secondFiscalYearId\");",
											"",
											"pm.environment.set(\"ledgerContent\", JSON.stringify(secondLedger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ledger list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9420a418-4d61-4f66-a5a2-4413ff1bff8f",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().ledgers.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a86ac7f-afb4-4ba4-9427-547f0fc72153",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ledger by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1fd0d19-fa0e-4e2e-8727-fbe91c594a80",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Ledger is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateLedger(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39d404fa-d5f9-422b-bd45-09a5f70af510",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af49a52f-fa9c-48f9-b16c-fc95040de8a2",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17899c43-7d7d-44a4-9bbd-5e9712f1b4e6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let ledgerForUpdate = JSON.parse(pm.environment.get(\"ledgerContent\"));",
											"",
											"ledgerForUpdate.name = \"newLedgerName\";",
											"",
											"pm.variables.set(\"ledgerContent\", JSON.stringify(ledgerForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d31a963-21e9-46ba-ab26-f4520bd2efbf",
										"exec": [
											"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0657b3d-be0c-4777-9dae-02c7647d69c4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund types",
					"item": [
						{
							"name": "Create first type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0617c80-a4a1-42ef-ac82-f23673260c4f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let type = {};",
											"",
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    type = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund type content is valid\", function() {",
											"    utils.validateFundType(type);",
											"    pm.environment.set(\"fundTypeId\", type.id);",
											"    pm.expect(type.name).to.eql(\"First\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a1abac8b-c091-4803-99f4-13e82913ab81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"First\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f51f478b-b5c3-4150-9d6e-8a75cb341cec",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund type is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateFundType(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf232280-505c-41f5-98c4-7565fb2012f1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5b7547d-d0d3-4c7a-9eba-c07634d45d64",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let type = {};",
											"",
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    type = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund type content is valid\", function() {",
											"    utils.validateFundType(type);",
											"    pm.environment.set(\"fundTypeId2\", type.id); ",
											"    pm.expect(type.name).to.eql(\"Second\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b6aa72a-3f80-4f51-85bb-3c505a540a93",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{$guid}}\",\n\t\"name\": \"Second\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records by query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19f0b051-73b4-49b6-a723-2f2e4e96c026",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund type record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.fundTypes).to.have.lengthOf(1);",
											"    records.fundTypes.forEach(type => utils.validateFundType(type));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ebbb5d56-3b06-4fe1-837c-6c3dbce2059b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=name==Second",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "name==Second"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d2ce7e0-7f20-4081-a4c4-2b351bb41c3f",
										"exec": [
											"pm.test(\"Fund type is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2d20952-5da5-4d4b-bb82-249b1c0138fb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Updated\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e4978bf-dcdb-4e09-ba52-8476f3dc2a80",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund type is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let type = pm.response.json();",
											"    utils.validateFundType(type);",
											"    pm.expect(type.name).to.eql(\"Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a87ae063-cef6-4401-b56c-0ab62595fdfc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50b4688b-fa7c-414a-813a-9a25da52cec1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 fund type records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.fundTypes).to.have.lengthOf(2);",
											"    collection.fundTypes.forEach(type => utils.validateFundType(type));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bd3687d-568f-4d14-954e-31ee7279b381",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0bef78b1-677d-4824-b084-632d7aa64e16",
										"exec": [
											"pm.test(\"Fund type is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "47bec019-5f2b-4530-b25b-7c3192a434e0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc4f41a9-3617-45ed-8da8-e4d11476b44a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund type record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.fundTypes).to.have.lengthOf(1);",
											"    utils.validateFundType(collection.fundTypes[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bd8d99b-28cb-4f14-8632-4e53b79ed514",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Funds",
					"item": [
						{
							"name": "Create first fund - required for budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ed33db7-2279-42a3-bc88-9daf67cff24c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"fundId\", record.fund.id); ",
											"    pm.expect(record.fund.code).to.eql(\"FRST-FND\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8e1a9a8-c7a3-44a3-ab94-063cde4303a3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"FRST-FND\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecadff10-0271-442e-a14a-4966fdae2c35",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateCompositeFund(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0579a9f8-f589-4fe0-891f-872179a3cb5d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d3d8bb5-c152-46b6-b7b4-72820e621e42",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"fundId2\", record.fund.id);",
											"    pm.environment.set(\"fundContent2\", record);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b690b92-b64f-4073-808a-45f784948fde",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"SCND-FND\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records by query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be119406-9305-4770-923e-18f31ee8febf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.funds).to.have.lengthOf(1);",
											"    utils.validateFund(records.funds[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "48018c01-3c19-41d1-8f0d-52271a90ccf5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds?query=fundTypeId=\"\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "fundTypeId=\"\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03d4e9dc-03da-4376-b426-3248fbe76a50",
										"exec": [
											"pm.test(\"Fund is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dacde72e-7019-406c-957e-49badd32f6e2",
										"exec": [
											"let record = pm.environment.get(\"fundContent2\");",
											"record.fund.name = \"Updated\";",
											"pm.variables.set(\"fundContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f233149-dd94-4e43-a877-61978d0153de",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let record = pm.response.json();",
											"    utils.validateCompositeFund(record);",
											"    pm.expect(record.fund.name).to.eql(\"Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a2a1595-fbb1-4e59-b6e0-ada7000bfb00",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "000d9328-3cdc-4513-abca-e6c89adbdcc3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 fund records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.funds).to.have.lengthOf(2);",
											"    collection.funds.forEach(record => utils.validateFund(record));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c904187-b0ab-4a7c-b48c-2742d05781f2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8001b12e-6db6-48b8-89f3-a71ebb8e96a5",
										"exec": [
											"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c663f612-04f0-4b8d-97d6-100cda576172",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3dc8b2e4-ee1f-455a-ba28-5aeb01a91c64",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.funds).to.have.lengthOf(1);",
											"    utils.validateFund(collection.funds[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "14c34583-c6b1-4c25-9bd2-160a640a612c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets",
					"item": [
						{
							"name": "Budget deletion without transaction",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6737a9d4-0f55-4a90-90bb-618d80ede7f5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9a92c65b-5e59-4b4c-a99f-3f4aa4810358",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22ea5e0e-a459-49cf-a420-2976def8bca9",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4ee78d41-975f-4539-805a-badf0a73a302",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e915a49b-7f00-4b4e-b697-d93ab2b9c908",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5c6b1536-2787-4341-bd7b-42f91cb1725a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let group = utils.buildGroupMinContent(\"GROUP_GRUD\");",
													"",
													"pm.environment.set(\"groupContent\", JSON.stringify(group));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73001423-97a5-4654-abbd-d8f099e013b4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a98fc70e-1d22-4754-9b1f-e426f82ce541",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")), [pm.environment.get(\"groupId\")])));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9e0f383-6d34-4a65-9f35-ff7f5845811f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "81668e2c-3363-4ca3-ae48-4e26494c7fda",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b78ae6d0-1e8e-4ecb-9472-b3f22a156de4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a416875c-d982-4a00-8789-30e9b0e9733b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae993246-eddf-4f9d-88a2-40bf849a5409",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6e56e888-561d-4694-8ef3-f24ea4650ca6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e170eb55-d7f2-46c4-921b-6f327266aa44",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7787d018-20ba-434d-ba01-6359a0e073b0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get group fund fiscal year by budgetId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89dbe06e-c28b-4fd1-879d-a638f0391dfa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
													"    pm.expect(records.totalRecords).to.equal(1);",
													"    pm.environment.set(\"groupFundFYId\", records.groupFundFiscalYears[0].id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5316ee69-a420-4a3e-bfd1-51d15f86412d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=budgetId=={{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"group-fund-fiscal-years"
											],
											"query": [
												{
													"key": "query",
													"value": "budgetId=={{allocBudgetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6be7304-cef5-4ee3-ac45-a63ac12f5c05",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a22693b9-c3f6-460b-b7e5-0b26a475d004",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b7e5016-1bcb-4d58-881c-4a77d5f173f9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4303a321-91f1-485a-bea1-f0c1f6b175b1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10ae42df-1d72-4082-af4b-da4c95e7cb0e",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e116dca1-090f-484a-9aa7-bd699c0a4fc9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1def9482-2a78-4f8d-b751-300d6f838499",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d0b0b1d7-749c-41be-a2ea-e6e2789471a4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get group fund fiscal year by budgetId after budget deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "422c92c7-6830-4754-bf4f-92872838e7ff",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
													"    pm.response.to.be.ok;",
													"    let record = pm.response.json();",
													"    pm.expect(record).not.empty;",
													"    pm.expect(record).to.not.have.property('budgetId');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "46cdfee0-5c0c-4e5a-88c6-1e1d1af8145a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/group-fund-fiscal-years/{{groupFundFYId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"group-fund-fiscal-years",
												"{{groupFundFYId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81963888-d7ac-4682-9a9e-cfaefaf8dc64",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec8632ab-3fe8-42dc-ac45-216db31ed32b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86558825-3a41-440c-9e21-87f1b853de69",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f38c0fb4-965b-46f6-806a-f72e8b8eb082",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83735b71-4a65-447d-83b7-cab664610ca5",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "87bd4ec5-c417-4c65-a560-f6e512351417",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Budget deletion without transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8219f6ab-e743-4bb5-9eac-748f20762cf6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "62d49f97-3290-4c2d-ae0b-9f72f28ea30f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create first budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97e2f051-dc54-42c6-ae57-7d67e433b47d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Budget content is valid\", function() {",
											"    utils.validateBudget(record);",
											"    pm.environment.set(\"budgetId\", record.id); ",
											"    pm.expect(record.name).to.eql(\"FRST-BDGT\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99434f84-d0e1-4a2f-a5ba-32e0d204c1c9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"FRST-BDGT\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c6d7852-1de3-4b8c-8c5b-c5ec230b6ce1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Budget is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateBudget(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc8465c6-1d01-4c82-814a-e52a27be18e3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "545fdb49-e170-4be7-8dea-67502c30e872",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Budget content is valid\", function() {",
											"    utils.validateBudget(record);",
											"    pm.environment.set(\"budgetId2\", record.id);",
											"    pm.environment.set(\"budgetContent2\", record);",
											"    pm.expect(record.budgetStatus).to.eql(\"Planned\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cee9acc7-feb3-4d3a-9dbc-481753fa63c6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let budget = utils.buildBudgetMinContent(\"SCND-BDGT\");",
											"budget.budgetStatus = \"Planned\";",
											"budget.fiscalYearId = pm.environment.get(\"secondFiscalYearId\");",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(budget));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records by complex query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f619e514-6e49-4068-90c6-74fdb8f82fd6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One budget record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.budgets).to.have.lengthOf(1);",
											"    utils.validateBudget(records.budgets[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5f71770-48bf-4231-9858-0ebd5a54f5d3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=budgetStatus==Planned and fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "budgetStatus==Planned and fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e87b089a-eeff-44bb-a1f5-7c70accc5757",
										"exec": [
											"pm.test(\"Budget is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ec41261-fb57-4c69-aaa5-8573da4a7ac6",
										"exec": [
											"let record = pm.environment.get(\"budgetContent2\");",
											"record.budgetStatus = \"Frozen\";",
											"pm.variables.set(\"budgetContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab39e5a9-e485-4fd5-b1ea-d02a664d950f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Budget is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let record = pm.response.json();",
											"    utils.validateBudget(record);",
											"    pm.expect(record.budgetStatus).to.eql(\"Frozen\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b2a5b52-d847-435f-8962-095aeaa0c12d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records by complex query- 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a8ec61a-52ba-4d7e-b40b-59cbd15e7065",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 budget records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.budgets).to.have.lengthOf(2);",
											"    collection.budgets.forEach(record => utils.validateBudget(record));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4dd7eb86-9ce7-4b06-ad68-5d3234c60afd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73b3526e-dd3e-457f-8ea5-cc220561b91c",
										"exec": [
											"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6834b42c-8e6b-40da-8b5c-f2ea039c017d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records without query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65497b85-69c1-4db4-a30f-60c4e74120d4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One budget record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.budgets).to.have.lengthOf(1);",
											"    utils.validateBudget(collection.budgets[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f19f340a-ef18-4d65-b949-2e52d4be4ccb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group Fund Fiscal Years",
					"item": [
						{
							"name": "Create group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3227b80a-0038-443a-9c44-e578471f0c38",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Group fund fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"    pm.environment.set(\"groupFundFiscalYearForCrudId\", record.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b1d22a2-c6ad-41a2-8430-21442622403d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupFundFiscalYearContent\", ",
											"JSON.stringify(utils.buildGroupFundFiscalYearMinContent(pm.environment.get(\"groupId\"), pm.environment.get(\"fundId\"), pm.environment.get(\"fiscalYearId\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupFundFiscalYearContent}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify created group fund fiscal years",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eff6e00d-0a9c-4ded-ac1d-d1b743543dc7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fund fiscal year founded\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a559aeb-ac9b-4b35-be47-c5dbe56f23cd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=id={{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "id={{groupFundFiscalYearForCrudId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d52f7b6c-a7c2-4e9d-82b2-6e32b8b3f0e8",
										"exec": [
											"pm.test(\"Group fund fiscal year type is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f26ae3da-5142-4a21-ba0e-5cd4e02d9216",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years/{{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years",
										"{{groupFundFiscalYearForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba7a7f1a-54ca-4f95-b112-a3e1a5f35561",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(0);",
											"    pm.expect(records.totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df4d8fd5-3461-450b-983d-84b15db69f54",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=id=={{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{groupFundFiscalYearForCrudId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assign funds to groups",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create group 1 - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d396ea75-16e6-48f6-8afb-52769b934581",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dadc519e-563f-4650-87f6-7230ed013677",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group 2 - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "184a1ea7-2884-4198-9df9-b1f2e94fcf2b",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId2\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "adc150c0-2ea5-4f50-ba43-0fd958851fab",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let group = utils.buildGroupMinContent();",
													"group.code = \"tst-grp-2\";",
													"group.name = \"Test group 2\";",
													"pm.variables.set(\"groupContent\", JSON.stringify(group));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fiscal year one - test current fy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbd51308-490e-4579-96ac-99998b94dfcc",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testCurrentFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fd19c851-7291-4b13-99f0-aa887085e335",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').subtract(2, 'year');",
													"var end = moment().endOf('year').subtract(2, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTCURRENT\";",
													"fiscalYear.code = \"TESTCURRENT2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fiscal year one - test next fy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2154464-4767-4214-bf09-1ebb1aaeacd5",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testNextFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "92fb72af-61dd-4a27-bcb0-ea13385ed2cf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').subtract(2, 'year');",
													"var end = moment().endOf('year').subtract(2, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEXT\";",
													"fiscalYear.code = \"TESTNEXT2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create current fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e27447da-634b-4267-884f-55010d5f28fe",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"currentFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9fff0ad0-51b8-497d-aa20-a9a9c8d69e85",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year');",
													"var end = moment().endOf('year');",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTCURRENT\";",
													"fiscalYear.code = \"TESTCURRENT2019\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create next fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34139cb1-8baf-4885-9504-0dbc92025e4e",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"nextFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2ee85078-07a5-46a2-a040-18e1c968fe92",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').add(1, 'year');",
													"var end = moment().endOf('year').add(1, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEXT\";",
													"fiscalYear.code = \"TESTNEXT2020\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger current",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37b15c20-b718-47fc-ab77-4102b4270e77",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"currentFyLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c31a1981-77ab-42c0-a12d-42510b87e4d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testCurrentFiscalYearOneId\");",
													"ledger.name = \"Current\";",
													"ledger.code = \"TEST_CURRENT\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger next",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6efbb609-9829-41cc-b321-4a7d3ca328e6",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"nextFyLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d348a167-42dc-4488-8533-65bd22d0e4c8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testNextFiscalYearOneId\");",
													"ledger.name = \"Next\";",
													"ledger.code = \"TEST_NEXT\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create fund with groups - current fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d19222c-fb71-482d-95ac-fd55ec6b4da1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4db5615a-15af-4e7f-8429-5cf3e886831a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_CURRENT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"currentFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund with groups - current fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bea8b61-b4d7-4250-aa6d-5016fe432b49",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.have.status(200);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.groupIds).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d3003a5-f409-4d10-8369-5d3366cc66c4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{currentFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{currentFyFundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query - current FY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c483a62-56f9-40f1-9e76-ff18b1658cd0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {}; ",
											"",
											"pm.test(\"Group fund fiscal years founded\", function () {",
											"    pm.response.to.be.ok;",
											"    records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});",
											"",
											"pm.test(\"Group fund fiscal years contain expected year id\", function () {",
											"    records.groupFundFiscalYears.forEach(gffy => {",
											"        pm.expect(gffy.fiscalYearId).to.equal(pm.environment.get(\"currentFiscalYearId\"));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "682f2c6a-094c-46fb-b74f-35532bbbe742",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=fundId={{currentFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "fundId={{currentFyFundId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff26b129-ca5a-414e-ac70-eb6db14eddd0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"nextFyFundId\", record.fund.id);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c05e17a3-2f01-4911-a75e-08e384d49c39",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_NEXT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"nextFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2769faf5-28ef-40b4-8353-c65657fbdce3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.have.status(200);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.groupIds).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6e8eb59-3d7d-4b59-9160-b0fe18078969",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query - next FY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0d2a0d1-cc1c-4646-a5e6-9a8ad9df751d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {}; ",
											"",
											"pm.test(\"Group fund fiscal years founded\", function () {",
											"    pm.response.to.be.ok;",
											"    records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});",
											"",
											"pm.test(\"Group fund fiscal years contain expected year id\", function () {",
											"    records.groupFundFiscalYears.forEach(gffy => {",
											"        pm.expect(gffy.fiscalYearId).to.equal(pm.environment.get(\"nextFiscalYearId\"));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6430da0b-6d06-4e81-ac9f-8917320e63fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=fundId={{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "fundId={{nextFyFundId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e4b9e37-428e-4cb2-a1c6-05c0b4544924",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {};",
											"",
											"pm.test(\"Composite Fund is updated\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"utils.sendGetRequest('/finance/group-fund-fiscal-years?query=fundId=' + pm.environment.get(\"nextFyFundId\"), (err, res) => {",
											"        pm.test(\"Group fund fiscal year deleted\", function () {",
											"            pm.expect(res).to.be.ok;",
											"             records = res.json();",
											"             pm.expect(records.totalRecords).to.equal(1);",
											"             pm.expect(records.groupFundFiscalYears[0].groupId).to.equal(pm.environment.get(\"groupId2\"));",
											"        });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4e7c1f0e-71b9-4e37-a42c-d4f83f55838b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_UPDATE_NEXT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"nextFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId2\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Restrictions",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c119a30c-c15d-4769-9b4f-e73e23a5d7e6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9e6fe13d-f2bc-4168-84a8-f2361cf96b22",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "493586cb-928c-4dcb-80f6-9a7c4fd1819b",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e20c18cb-68b7-4e44-b95c-4934f4febf34",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdb3fb71-60d5-451b-92c6-43de61ff0b66",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"histFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"HIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "56d1d7bd-400f-463a-8024-ada6eb3752a3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"History\",\n\t  \"code\": \"HIST\",\n\t  \"externalAccountNo\": \"276507594438808\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"subdivided by geographic regions, to match individual selectors\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae28f7e6-c4c8-4ab6-9607-8ea2faa2d62f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"canhistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"CANHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b99a7314-ea53-43aa-9250-c9b6e609ae3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Canadian History\",\n\t  \"code\": \"CANHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL; use for Canada once CANLATHIST is inactivated\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\",\n\t  \"allocatedFromIds\": [\"{{histFundId}}\"]\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d37d58e-9d0f-441c-b69b-7eb24e15fe35",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"lathistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"LATHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c32ad17a-d543-4645-9f1b-b918c344e369",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Latin America History\",\n\t  \"code\": \"LATHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update HIST fund - add allocatedToIds set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62c14ac5-42b1-4cf4-84ac-f7d6b78c6fb2",
												"exec": [
													"pm.test(\"Fund is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ff001686-30d9-4175-a8f9-74a49f710860",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/finance/funds/\" + pm.environment.get(\"histFundId\"), function (err, res) {",
													"    let histFund = res.json();",
													"    histFund.fund.allocatedToIds = new Array(pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"));",
													"",
													"    pm.environment.set(\"histFundContent\", JSON.stringify(histFund));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c80c1d6-63d1-4cbb-9a19-eba729a3cb00",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"histBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"HIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4bd6ccdb-4641-4f45-b543-f817edbe4c84",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"histBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"HIST-BDGT\", pm.environment.get(\"histFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "deb2ef7c-4695-4a73-85d1-c85f0dd64874",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"canhistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"CANHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "41452243-6b1d-42b0-b12d-dcc5162d5a07",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"canhistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"CANHIST-BDGT\", pm.environment.get(\"canhistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{canhistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e697456e-da63-4473-9146-f71a60aa9ceb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"lathistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"LATHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ae76e4b-20b1-4c2a-bd76-73393af7940c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"lathistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"LATHIST-BDGT\", pm.environment.get(\"lathistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lathistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create external allocation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be808a73-cfb8-4054-8ac4-f9d95521fed7",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53a26152-f972-4be9-8608-04df7f6a6d6a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7db67600-371a-4d94-824f-5461f724526f",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c9aafbe-a9db-4062-8279-402fe40a5503",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation matching allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e641360-93db-4989-9c6e-24c689f50a52",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "249da418-281d-4513-a949-33026216a395",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"canhistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9a6fdf2-ff7d-42e9-a16d-47c695706ddd",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3c75e64-1cae-4a8e-9aa8-ab8a39a5d432",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer matching allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "707c27cb-28b7-4b0b-b71f-0dd0bd69d706",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1865936b-20fd-4a64-a917-d1fc6ac94be5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"canhistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bffef1e7-19d4-4b38-ab02-73fe40c8eb61",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e48c5190-80c9-4344-b500-e4e8cf6b5aa4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with empty allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5dcf711-b97c-41a3-addf-4383b706456b",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "521e784b-391c-4ac4-87f1-9fc16a1f1fde",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bd17182-f66a-4552-8a89-fc8ef9fcb3d2",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e9396722-07d3-4ade-ae99-7e23412f541b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with empty allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ac52e03-03e7-40eb-8895-9f43f99070a7",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bdb8c3de-21ec-476c-b630-efe1524960e0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d90edc-a007-4d24-bbde-9bc04815c37c",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "617b2914-a1dc-4dbc-b08b-e4da74a725c0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with empty allocatedFromIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5a2a178-eec1-4ab4-8c26-9c6f8ad79646",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c914ec1c-ebfa-41ca-91d9-acf8679355a0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"lathistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34e09eef-0d6d-4c35-9eec-0bbca1e8dee7",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "47c44e66-2ed0-4e35-8a0a-0305cce2320d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with empty allocatedFromIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a4bed49-675c-46c5-9145-a7286ebfd3e4",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "747a6dc6-c7e4-4e44-a4b7-ce26dac9971f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"lathistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5085a608-3103-4031-ac77-0d142383b7b9",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e235367-5364-4976-b220-a52d4e76df34",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f288846-fcb3-4bef-8883-3f072d6330d1",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f70fe8f2-0cb5-45a1-b32d-7b297134fed8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{histBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{histBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a594a85f-99e4-4ffa-8eb7-342e9a54302b",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6e15898a-bdbf-4c9c-a9fa-35298c0527fc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{canhistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{canhistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b02126d-71a8-4241-a590-5286cb83960a",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48245b49-af5c-444c-9ae9-45b94d0bc672",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{lathistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{lathistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c03cb7b2-a1c0-4a3e-98a1-af386c40dfa3",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "92f99248-ad46-4f1d-be98-40d696682cd1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{lathistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{lathistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6f7d5f1-1389-475b-96de-7853f1313dcb",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dff0ca99-8ef0-4082-bc3c-7f84b12fb547",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{canhistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{canhistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8276ba69-2f67-4bdf-b540-08c8c06cd696",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e0420edc-d9c6-4618-a392-c5c79c191fac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17333c1c-282c-457b-afc8-6726cbe0d548",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4124fdc3-64af-4ef1-b003-e2c8b2163f8e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "925d06da-8f09-4021-a273-5ccc35896862",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1f460fd9-5ff7-4a1a-b1f4-68fe5f35c5c5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Allocations",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "839c9ac3-5ae0-44ae-a665-a30c1ec6f3a9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "67579313-73a7-486d-9601-8ff491b8c5ae",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4dd73a0-041d-4a57-9cbb-dc96eafa8909",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "200e1677-d8c9-4921-95c9-639b539953af",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a47b570f-a9ed-4c4c-80d6-9d019c879e3d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "72221149-7145-43df-9d44-ffc3587161d2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4b6e452-cb88-4758-9b84-6ec54feba24d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78d90be4-7a6a-4199-a5f0-b8b61f0815cd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "384a9c64-77bf-4b02-8b03-58cf8f71868d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "455bea19-91f4-42b0-a752-8e1baf60f8fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14de5a3a-0e9e-4a7b-a84f-1c46ab12cf51",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b8f8b1bf-6505-4997-bc71-23989361d2e6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f231e202-91cd-47c7-842d-b45c65e69c4d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "df451a87-dc06-4a66-b442-697444b950d9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "283e70c7-c84e-49c7-815d-ef0f7536c024",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "437bfa18-4fb3-4f9e-97b5-31b1d1e087ab",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14e9f2fe-c458-4e53-8fa0-d91db03a37dc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4432d837-0210-49b0-905e-dee082294adf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6245deeb-5afb-49e2-a416-e7dd1879eb60",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8e3241ba-d83f-48b7-bbf9-e9d6ea7a953e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{transactionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger record with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e98ba5a-ac53-4d3d-a46e-0e6ad0d5339b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledger is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json();",
													"    utils.validateLedger(ledger);",
													"    let allocation = JSON.parse(pm.environment.get(\"allocationContent\"));",
													"    pm.expect(ledger.allocated).to.equal(allocation.amount);",
													"    pm.expect(ledger.available).to.equal(allocation.amount);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "066c5077-2faa-439c-948b-0554aedca50c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}?fiscalYear={{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{allocFiscalYearId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger records by fiscalYear with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3e57751-28de-4afa-9df3-a0929407d2a3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledgers are retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json().ledgers[0];",
													"    utils.validateLedger(ledger);",
													"    let allocation = JSON.parse(pm.environment.get(\"allocationContent\"));",
													"    pm.expect(ledger.allocated).to.equal(allocation.amount);",
													"    pm.expect(ledger.available).to.equal(allocation.amount);",
													"    pm.environment.unset(\"allocationContent\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "14da85b8-477e-4159-9146-f52572f4ee17",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers?fiscalYear={{allocFiscalYearId}}&query=id=={{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{allocFiscalYearId}}"
												},
												{
													"key": "query",
													"value": "id=={{allocLedgerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f22aa66-80a1-4648-b4e7-562fc70b8b76",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "45819108-57d5-4126-9c72-6635b7e37aee",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a70cb32-9e77-4149-ba63-850346746396",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee29a9fb-6915-41c9-9cf1-679bf61c55ba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c712682-685f-443c-b687-86e24c062f29",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48eb94cb-e0da-4bc9-a0b1-4b1261ba4a35",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b81b212-e932-415c-8bf7-e9fac7ffa324",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f37df4c8-5c8d-45fe-b0d3-e7f0c8b6aa06",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52dcfb5a-a92b-4b20-b204-2268fb2f8989",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a17710cd-b092-4e54-9a6e-e93be196f171",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Encumbrances",
							"item": [
								{
									"name": "Prepare data for encumbrances",
									"item": [
										{
											"name": "Create fiscal year  - required for budgets",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a7963ad9-1c9f-45dc-8b75-e88d85c6b62f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ENCFY2019\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2db5d15a-c2f6-47db-b3a5-d86123dac406",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encFiscalYearId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encFyContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ledger - required for funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "21d3a2ab-8045-4408-b8a9-042702cb1a75",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encLedgerId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "588c12b9-3ff0-4654-8a52-d3ea5222cbde",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let ledger = utils.buildLedgerMinContent(\"ENC-LDGR\", \"Test encumbrance ledger\");",
															"ledger.fiscalYearOneId = pm.environment.get(\"encFiscalYearId\");",
															"pm.variables.set(\"encLedgerContent\", JSON.stringify(ledger));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encLedgerContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Fund 1 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "89313119-0eee-4f34-b0ed-027154cd4f49",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Encumbrance Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Encumbrance Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fund1Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"ENC-FND1\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4768914e-7b53-4044-8697-8b9ef2b7f840",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ENC-FND1\", pm.environment.get(\"encLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encFundContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Fund 2 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b1759ac-ada0-4fc9-b69e-6b3e386a3431",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Encumbrance Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Encumbrance Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fund2Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"ENC-FND2\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ea4dd928-afbe-4460-9ef8-f6cdb9f9b9c4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encFundContent2\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ENC-FND2\", pm.environment.get(\"encLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encFundContent2}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6a0cbeb1-4218-4c87-881e-e0eef73c365f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"encBudget1Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"ENC-BDGT1\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f0754db9-1bd4-4cf2-b0d7-29d7177e8ee7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ENC-BDGT1\", pm.environment.get(\"fund1Id\"), pm.environment.get(\"encFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "34a439b7-6dcc-4bb8-a30b-6cc643ebf987",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"encBudget2Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"ENC-BDGT2\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2963f625-de78-4fd4-85c2-25b28036718e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ENC-BDGT2\", pm.environment.get(\"fund2Id\"), pm.environment.get(\"encFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Allocate money for budget 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "813e8cfd-bdbe-422e-8816-db1390d9bc40",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"transaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3020840b-914c-4d84-b309-4f35d1235e57",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(2500, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"fund1Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Allocate money for budget 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4da719d9-e42e-48c3-b1fa-b0f70a72961b",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"transaction2Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d058c2b8-5e08-438d-a94a-4130cb0bff6d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(1500, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"fund2Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 1 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "19108fdb-61e8-42fe-8d34-b77b3e805c9a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b1cf541d-7d1c-4568-85ca-7f8295f06c93",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22d7c218-87d4-41d1-a2f6-dfd3cc7476a7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "46f71f39-d74e-401b-a2b7-bc5de65eb139",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Test Encumbrance Restrictions",
									"item": [
										{
											"name": "Create encumbrance with insufficient funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a6c2c449-1d8c-4cc1-ad31-e30312eac041",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is not created\", () => {",
															"    pm.response.to.have.status(400);",
															"    response = pm.response.json();",
															"    pm.expect(response.errors[0].message).to.equal(\"Fund cannot be paid due to restrictions\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d05d9cdd-f734-4f31-af7d-711fdab6d26e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let encumbranceRemainingAmount = 2501;",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(encumbranceRemainingAmount, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Encumbrance\");",
															"",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fund1Id\");",
															"pm.environment.set(\"restrictedEncumbranceContent\", JSON.stringify(transactionEncumbrance));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{restrictedEncumbranceContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e5f03809-20df-4400-858e-5e7c2b015ad1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2e021c08-a860-4685-9271-2635aad8c60f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Test encumbrances",
									"item": [
										{
											"name": "Create order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "28a62dbf-9a5e-483f-9101-0b6f483e2182",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e1edddfa-2986-4132-8de7-c36380abb3ed",
														"exec": [
															"pm.test(\"Order transaction summary is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"orderTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{$guid}}\",\r\n  \"numTransactions\": 2\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create encumbrance 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cb441a8a-95bc-4b91-81e7-af1b0d0bb5be",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encumbrance1Id\", pm.response.json().id);",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "50f3b8c0-79e2-4db0-ac46-995091184b8c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"var uuid = require(\"uuid\");",
															"",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(25, pm.environment.get(\"encFiscalYearId\"), null, \"Encumbrance\");",
															"encumbranceMinContent.initialAmountEncumbered = 25;",
															"encumbranceMinContent.amountExpended = 0;",
															"encumbranceMinContent.amountAwaitingPayment = 0;",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"",
															"transactionEncumbrance.encumbrance.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionSummaryId\");",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fund1Id\");",
															"delete transactionEncumbrance.toFundId;",
															"",
															"pm.environment.set(\"encumbrance1Content\", JSON.stringify(transactionEncumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance1Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create encumbrance 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0c28b8a0-a727-4300-865d-54ec8ae98892",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encumbrance2Id\", pm.response.json().id);",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4a9040c2-345f-4a36-bb69-ac673dff7061",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"var uuid = require(\"uuid\");",
															"",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(105, pm.environment.get(\"encFiscalYearId\"), null, \"Encumbrance\");",
															"encumbranceMinContent.initialAmountEncumbered = 105;",
															"encumbranceMinContent.amountExpended = 0;",
															"encumbranceMinContent.amountAwaitingPayment = 0;",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"",
															"transactionEncumbrance.encumbrance.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionSummaryId\");",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fund2Id\");",
															"delete transactionEncumbrance.toFundId;",
															"",
															"pm.environment.set(\"encumbrance2Content\", JSON.stringify(transactionEncumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance2Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 1 record after encumbrances creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d36e31cd-8b40-4381-9a94-a4f2d397de94",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(2500 - 25);",
															"    pm.expect(budget.encumbered).to.eql(0 + 25);",
															"    pm.expect(budget.unavailable).to.eql(0 + 25);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "44d12147-f10f-42f6-a072-14fa6cb180c5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 2 record after encumbrances creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "60aa2bc8-9f56-4003-9ec6-8b817e850385",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(1500 - 105);",
															"    pm.expect(budget.encumbered).to.eql(0 + 105);",
															"    pm.expect(budget.unavailable).to.eql(0 + 105);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "88ba689a-c97a-47cc-bf81-5b0894957f6a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ledger record with summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a34d07fb-fc41-4763-b5e2-b282180947fd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"    utils.validateLedger(ledger);",
															"    let encumbrance1 = JSON.parse(pm.environment.get(\"encumbrance1Content\"));",
															"    let encumbrance2 = JSON.parse(pm.environment.get(\"encumbrance2Content\"));",
															"    pm.expect(ledger.available).to.equal(2500 + 1500 - encumbrance1.amount - encumbrance2.amount);",
															"    pm.expect(ledger.unavailable).to.equal(encumbrance1.amount + encumbrance2.amount);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c500fbfe-b4ee-45a3-aad2-52ba33587af9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}?fiscalYear={{encFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{encLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{encFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8c530314-bab8-4d67-9dc9-cf024f7219f9",
														"exec": [
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6a01efe9-43d1-4972-b6ce-55dc5742063f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"invoice-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create positive pending payments, encumbrance linked",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "14207e6a-3867-4b3b-b6d9-de51e422da46",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pendingPaymentTransaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "39d5b3da-fc15-4e2d-ba0f-643582991ebb",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let pendingPayment = utils.buildPaymentTransactionMinContent(10.0, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"fund1Id\"), \"Pending payment\");",
															"pendingPayment.awaitingPayment = {};",
															"pendingPayment.awaitingPayment.encumbranceId = pm.environment.get(\"encumbrance1Id\");",
															"pendingPayment.awaitingPayment.releaseEncumbrance = false;",
															"pendingPayment.sourceInvoiceId = pm.environment.get(\"invoiceTransactionSummaryId\");",
															"pendingPayment.fromFundId = pm.environment.get(\"fund1Id\");",
															"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(pendingPayment));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pendingPaymentContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 1 updated after Pending payment creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "852ebefb-ec72-40c9-93b1-cf3991417516",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Unreleased\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(15);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(25);",
															"    pm.expect(encumbrance.encumbrance.amountAwaitingPayment).to.eql(10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fee9667b-52ef-418f-b5a5-02642d2fa1c5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3fac3e6a-becd-47d4-bce7-11ec9cdfefa4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "373ebb96-a0d4-4c27-8da8-3219149aeecf",
														"exec": [
															"pm.test(\"Order transaction summary is updated\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{orderTransactionSummaryId}}\",\r\n  \"numTransactions\": 2\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries/{{orderTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries",
														"{{orderTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updete encumbrace 1 to make it pending",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9996e755-e23d-457b-a109-c747360c89bb",
														"exec": [
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f07819a6-effd-48b1-9e0f-f62fdafb5dc0",
														"exec": [
															"let encumbrance = JSON.parse(pm.environment.get(\"encumbrance1Content\"));",
															"encumbrance.encumbrance.status = \"Pending\";",
															"",
															"pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance1Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release encumbrance request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e576b982-6cf6-46e9-9a9c-32e9370fa15c",
														"exec": [
															"pm.test(\"Encumbrance successfully released\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "dd4b95b0-dd8f-42d2-a4c0-79f1d740a5c7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/release-encumbrance/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"release-encumbrance",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 1 updated with pending status",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "054aa669-1362-42b0-aca4-a7a7d309e680",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Pending\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.amountAwaitingPayment).to.eql(10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1e7bce8e-126f-4511-9b95-e175269ff9ae",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 2 updated with Released status",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db2d4446-85f0-4d2f-8007-044c56926ea4",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance2Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Released\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(105);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8a61eb52-daa0-4151-9ff2-de42d9a09a0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 1 record after encumbrances become Pending",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7afed006-587d-48c5-8e68-44736eaef149",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(2500 - 10);",
															"    pm.expect(budget.encumbered).to.eql(0);",
															"    pm.expect(budget.unavailable).to.eql(0 + 10);",
															"    pm.expect(budget.awaitingPayment).to.eql(0 + 10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fb8cddf8-0cbb-4c37-85df-a9763647aed0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 2 record after encumbrances being Relesed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "252c9e79-55ad-4a6a-9fb4-7a3fbccaa14e",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(1500);",
															"    pm.expect(budget.encumbered).to.eql(0);",
															"    pm.expect(budget.unavailable).to.eql(0 );",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "83bcf791-9a66-4d35-94d0-3bd80589a830",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ledger record with summary after encumbrances update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b7a4624-1522-4714-b934-ad27f8f77a9f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"    utils.validateLedger(ledger);",
															"    pm.expect(ledger.available).to.equal(2500 + 1500 - 10);",
															"    pm.expect(ledger.unavailable).to.equal(10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "821c8c6f-18be-45ff-9a30-cfc291252bcc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}?fiscalYear={{encFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{encLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{encFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update order transaction summaries, increase num transactions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4bd552bd-cdd0-469f-a035-34d470281e44",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b3ac6dab-5c72-4031-ba94-d65a3573cebe",
														"exec": [
															"pm.test(\"Order transaction summary is updated\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{orderTransactionSummaryId}}\",\r\n  \"numTransactions\": 3\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries/{{orderTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries",
														"{{orderTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create encumbrance 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87d5e92f-b874-40e3-8ad5-598e9855c775",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encumbrance3Id\", pm.response.json().id);",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2178e83f-6519-471a-ae85-853b47a87ee1",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(45, pm.environment.get(\"encFiscalYearId\"), null, \"Encumbrance\");",
															"encumbranceMinContent.initialAmountEncumbered = 45;",
															"encumbranceMinContent.amountExpended = 0;",
															"encumbranceMinContent.amountAwaitingPayment = 0;",
															"encumbranceMinContent.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionSummaryId\");",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fund1Id\");",
															"delete transactionEncumbrance.toFundId;",
															"pm.environment.set(\"encumbrance3Content\", JSON.stringify(transactionEncumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance3Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update encumbrace 1 to make it Unreleased, change initialAmountEncumbred",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "021f4a29-962f-43f9-876f-2cede13f491b",
														"exec": [
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "674f5f10-876e-49e6-a127-d240ac63ff79",
														"exec": [
															"let encumbrance = JSON.parse(pm.environment.get(\"encumbrance1Content\"));",
															"encumbrance.encumbrance.status = \"Unreleased\";",
															"encumbrance.encumbrance.initialAmountEncumbered = 110;",
															"encumbrance.amount = 110;",
															"",
															"pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance1Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update encumbrace 2 to try update amounts",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7150af69-fc46-4d08-aab5-64ec2edf66e5",
														"exec": [
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1e68e44e-2c13-4bde-9ab4-ec8f87ddb284",
														"exec": [
															"let encumbrance = JSON.parse(pm.environment.get(\"encumbrance2Content\"));",
															"encumbrance.encumbrance.initialAmountEncumbered = 110;",
															"encumbrance.amount = 110;",
															"",
															"pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance1Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 1 updated with Unreleased status, amount consider awaitingPayment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b058a129-e852-4143-94e1-1616d7b82f24",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Unreleased\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(110 - 10);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(110);",
															"    pm.expect(encumbrance.encumbrance.amountAwaitingPayment).to.eql(10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e8a82efc-b000-459d-ae07-b238fd889cbf",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 2 not changed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f36a122a-f4cb-4f88-83a9-f420bf31a24a",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance2Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Released\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(105);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "026c920e-9e3a-40ce-b311-81d84fd27b6e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 3 created",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b92644cb-63fa-4ea8-8184-55a7dc988bd7",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance3Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Unreleased\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(45);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(45);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "622cd0ba-64f7-4ad6-961b-71bf14f8d32c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance3Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance3Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 1 record after encumbrance 1 unopened and new encumbrance created",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "650b444b-4d6b-4d53-a82e-64f343963601",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(2500 - 110 - 45);",
															"    pm.expect(budget.encumbered).to.eql(0 + 110 - 10 + 45);",
															"    pm.expect(budget.unavailable).to.eql(0 + 110 + 45);",
															"    pm.expect(budget.awaitingPayment).to.eql(0 + 10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b3ad1e45-d1e5-4216-b69a-e10fd13bec1b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 2 not changed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af3ba106-6456-46db-8586-2f639caa2db8",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(1500);",
															"    pm.expect(budget.encumbered).to.eql(0);",
															"    pm.expect(budget.unavailable).to.eql(0 );",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e7f95707-78ce-4ac0-b226-e9c709a740bd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ledger record with summary after 2nd encumbrances update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "281b095a-7249-47b4-aafc-58e1132d4736",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"    utils.validateLedger(ledger);",
															"    let encumbrance1 = JSON.parse(pm.environment.get(\"encumbrance1Content\"));",
															"    let encumbrance2 = JSON.parse(pm.environment.get(\"encumbrance2Content\"));",
															"    pm.expect(ledger.available).to.equal(2500 + 1500 - 50);",
															"    pm.expect(ledger.unavailable).to.equal(50);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1c805164-4ab5-49d5-af03-108f12f02302",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}?fiscalYear={{encFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{encLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{encFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Clean up",
									"item": [
										{
											"name": "Delete encumbrance 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e16ade54-98a0-43a7-a39e-8c121bc35913",
														"exec": [
															"pm.test(\"Encumbrance is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4238b0e7-40f8-4511-ba7e-068c2d9a8519",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete encumbrance 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "49f14f0e-85ae-483e-82bc-7e8dc359f970",
														"exec": [
															"pm.test(\"Encumbrance is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "764e5890-d80d-4031-ac7a-3f503b6f14ed",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete encumbrance 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "35ca6ace-36e6-4399-bab1-6750d15174e5",
														"exec": [
															"pm.test(\"Encumbrance is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ce510510-3226-46cd-8bca-d2891778bd0d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance3Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance3Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "629e7119-c2d9-433b-844c-fb5415e993d2",
														"exec": [
															"pm.test(\"Allocation is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "578b5786-e586-460b-8472-4c8d6ae98374",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{transaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9645abd6-f9fc-44ab-b72a-a064ac6e16b1",
														"exec": [
															"pm.test(\"Allocation is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1fe9449c-1bda-4ee1-a40c-d2922c167256",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transaction2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{transaction2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete pending payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eaa4b25a-1039-4db1-b7c2-d973146ce52b",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0b2b06c9-2cd5-472e-9bfb-8d33c4d0437d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{pendingPaymentTransaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{pendingPaymentTransaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget 1 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ff3f752-88e0-47a3-8b10-9c845436ad03",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "150fe209-f1b1-423a-8ad3-8ae4bef4cabb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1b078351-08c7-43a7-989c-6476bc764292",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b10fe095-239d-42ec-9fc0-3752748cda8c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Fund 1 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "754fe619-9dab-4759-ad03-92fbed8c78ea",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7e801e5e-2f6f-4e58-aade-15180132f58a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fund1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fund1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Fund 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93cdaa19-12eb-47a5-9602-a3aa6ea990d3",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "df31abc7-f602-441c-b041-46aae5f3575b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fund2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fund2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Ledger",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "91443b71-fc6d-44c6-a1d1-52bff2088860",
														"exec": [
															"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4fbd3ecb-0db1-4e38-b1ec-4ad395c66c2c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{encLedgerId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fiscal year",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f7799fdd-a6b4-4f5e-8b2e-13ab8b7fd7ad",
														"exec": [
															"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c224098a-7eed-4171-bd4c-753e076ec877",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{encFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years",
														"{{encFiscalYearId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Create Transaction encumbrances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0dc3c359-4c98-40d6-bfdf-0494d5ff2a5b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0a32ee37-e24f-4381-b24a-e6b18f08422c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pending payments",
							"item": [
								{
									"name": "Prepare data",
									"item": [
										{
											"name": "Create fiscal year  - required for budgets",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "88c8f4c0-464e-464f-b4a6-5e2fbaebd924",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"PCFY2020\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "83f56c20-cd6e-4d9b-981a-04001f6c16e6",
														"exec": [
															"pm.test(\"Fisscal Year is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcFiscalYearId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFyContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ledger - required for funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7703edc3-ef91-4eec-ab96-91589c609f54",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcLedgerId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "52870cca-89a9-4753-b6bd-35037341dbfc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let ledger = utils.buildLedgerMinContent(\"PC-LDGR\", \"Test transaction ledger\");",
															"ledger.fiscalYearOneId = pm.environment.get(\"pcFiscalYearId\");",
															"pm.environment.set(\"pcLedgerContent\", JSON.stringify(ledger));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcLedgerContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fund 1 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "00247805-685f-44ec-87c3-bf8e063ed113",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFund1Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"PP-FND1\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "183dc5dd-2a54-4801-92ec-9e9e3d5c7d6e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"PP-FND1\", pm.environment.get(\"pcLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFundContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fund 2 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5fecd31d-8dfa-439d-9444-89a9ce3d5c71",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFund2Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"PP-FND2\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d03cd88a-3618-4b7e-ab62-eb3e92fcc742",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"PP-FND2\", pm.environment.get(\"pcLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFundContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7ef7a808-15ef-490c-b01a-18627be3fd70",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"PP-BDGT\", pm.environment.get(\"fromFund1Id\"), pm.environment.get(\"pcFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "da7dc03b-446b-460e-986a-e9647bb80596",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"allocBudget1Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"PP-BDGT\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9c589553-0258-4a73-b6af-ccb3280a400d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"PP-BDGT2\", pm.environment.get(\"fromFund2Id\"), pm.environment.get(\"pcFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dfd8aa52-df0b-4741-8996-eb4b885db832",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"allocBudget2Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"PP-BDGT2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create allocations to Budget 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3bb6be0e-bf83-4848-8e86-06c29019d26b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(1000, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund1Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "27bb92a2-d800-4075-b74e-18055cdd0b7f",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"allocTransaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create allocations to Budget 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ddaba7ee-7dfa-4d31-9a42-f74e00449390",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(2000, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund2Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8bf2844f-2f61-4450-8a50-c6f501f2c5ae",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"allocTransaction2Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e62d85cb-cb17-4eb6-a8cc-5a0afd80ecfe",
														"exec": [
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "22b0811a-ef20-4b5c-b116-21819c7c3cc5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 2,\n  \"numPaymentsCredits\": 2\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"invoice-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8d5f43d8-ff65-4242-a0d9-b702ff00d3bd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "88ca617c-803e-416e-8e5d-af75def49707",
														"exec": [
															"pm.test(\"Order transaction summary is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"ordersTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{$guid}}\",\r\n  \"numTransactions\": 1\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d8ead310-c31d-4c11-aabe-932e94e2af21",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"    pm.environment.set(\"encumbranceId\", record.id);",
															"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8288fd32-6fe9-4e65-99b1-5a20de7bc03f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"var uuid = require(\"uuid\");",
															"",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(125, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund1Id\"), \"Encumbrance\");",
															"encumbranceMinContent.initialAmountEncumbered = 125;",
															"encumbranceMinContent.sourcePurchaseOrderId = pm.environment.get(\"ordersTransactionSummaryId\");",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fromFund1Id\");",
															"pm.environment.set(\"encumbranceContent\", JSON.stringify(transactionEncumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbranceContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f4a7f5fd-552b-49c7-9f84-ead0d8a02ec7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bb3f3e38-62c8-4625-b380-6258c190ca89",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Test API",
									"item": [
										{
											"name": "Get ledger record with summary before",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "00af1d39-dff0-43bb-9bcc-e7847e409afe",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"",
															"    pm.expect(ledger.available).to.equal(3000 - 125);",
															"    pm.expect(ledger.unavailable).to.equal(125);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c64e86e3-4d7e-408c-ba01-9d9fb0494a11",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}?fiscalYear={{pcFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{pcLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{pcFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record before 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ecb1d99f-ae2c-4e42-a649-21a79ffe4490",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().allocated).to.eql(1000.0);",
															"    pm.expect(pm.response.json().available).to.eql(875.0);",
															"     pm.expect(pm.response.json().unavailable).to.eql(125.0);",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(0.0);",
															"    // 100 = 0.0 - 100(pending payment)",
															"    pm.expect(pm.response.json().encumbered).to.eql(125.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "08b0d346-da62-4fec-b95d-14e05b92305e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record before 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50c4e8f8-37c7-4861-af76-cce8bea9e26b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().allocated).to.eql(2000.0);",
															"    pm.expect(pm.response.json().available).to.eql(2000.0);",
															"    pm.expect(pm.response.json().unavailable).to.eql(0.0);",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(0.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "96e89e6c-6b64-4b57-9de0-29a1b834bc93",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create positive pending payments, encumbrance linked, encumbrance is going to be released",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "73f8a1bd-9e1d-4292-8fe0-66def2bc84c2",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pendingPaymentTransaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a72b5bb6-ac61-408d-9cdf-dcfc3feeaf2c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let pendingPayment = utils.buildPaymentTransactionMinContent(100.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund1Id\"), \"Pending payment\");",
															"pendingPayment.awaitingPayment = {};",
															"pendingPayment.awaitingPayment.encumbranceId = pm.environment.get(\"encumbranceId\");",
															"pendingPayment.awaitingPayment.releaseEncumbrance = true;",
															"pendingPayment.sourceInvoiceId = pm.environment.get(\"invoiceTransactionSummaryId\");",
															"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(pendingPayment));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pendingPaymentContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create negative pending payments, encumbrance not linked",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7c929eca-21b5-4aa2-919f-43843f87d840",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pendingPaymentTransaction2Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e38f5113-8199-40ff-b6ee-cd8eb862d550",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let pendingPayment = utils.buildPaymentTransactionMinContent(-50.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund2Id\"), \"Pending payment\");",
															"pendingPayment.sourceInvoiceId = pm.environment.get(\"invoiceTransactionSummaryId\");",
															"pendingPayment.amount=-50;",
															"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(pendingPayment));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pendingPaymentContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrance is updated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "871e2fc5-2431-4d50-80bc-e36f3a7e0315",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Verify transaction released\", function() {",
															"    pm.response.to.be.ok;",
															"    let encumbrance = pm.response.json();",
															"    pm.expect(encumbrance.amount).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Released\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7d66d9c8-cf87-402b-ba56-589962f52658",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{encumbranceId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{encumbranceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 1 record after pending payments",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "979b2494-5c4c-475c-b67a-4f5afc194e65",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(100.0);",
															"    // 100 = 0.0 - 100(pending payment)",
															"    pm.expect(pm.response.json().encumbered).to.eql(0.0);",
															"    pm.expect(pm.response.json().available).to.eql(900.0);",
															"    pm.expect(pm.response.json().unavailable).to.eql(100.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9df17e26-0788-4646-bd80-fa34c7e5ccd9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 2 record after pending payments",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87cdd1cd-f88b-4d60-9c36-026d12e6a6a4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(-50.0);",
															"    pm.expect(pm.response.json().encumbered).to.eql(0.0);",
															"    pm.expect(pm.response.json().available).to.eql(2050.0);",
															"    pm.expect(pm.response.json().unavailable).to.eql(0.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "771b47f1-fc6c-40c6-a49e-f2824f1f4be7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ledger record with summary after",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d47e116f-714c-44a3-995f-258b1a940780",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"",
															"    pm.expect(ledger.available).to.equal(3000 - 100 + 50);",
															"    pm.expect(ledger.unavailable).to.equal(100);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b5754359-0995-4002-b03a-9630aeb549d2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}?fiscalYear={{pcFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{pcLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{pcFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check tinvoice transaction summary is processed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "15eb78a5-20fe-439a-9e97-af7666936f10",
														"exec": [
															"pm.test(\"Transaction sumary is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.expect(pm.response.json().numPendingPayments).to.eql(-2);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e3264686-e172-42b7-84e7-96840621273b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/invoice-transaction-summaries/{{invoiceTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"invoice-transaction-summaries",
														"{{invoiceTransactionSummaryId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Clean-up",
									"item": [
										{
											"name": "Delete order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "20f93808-23e6-47b6-bb8d-4a85bca77daf",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "52113c59-3921-4b43-8010-377db8f459a3",
														"exec": [
															"pm.test(\"Order transaction summary is deleted\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/order-transaction-summaries/{{ordersTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"order-transaction-summaries",
														"{{ordersTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c2843aff-53c0-4dda-af1f-48284a4c49b2",
														"exec": [
															"pm.test(\"Trasaction allocation is deleted\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "460deddd-6ddd-44d4-8d34-008de2450db4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/invoice-transaction-summaries/{{invoiceTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"invoice-transaction-summaries",
														"{{invoiceTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation transaction 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3548bc54-ceab-460d-aa78-3d6c0be3f3b2",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5537d157-4056-4d69-9d47-ae4815f4762f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{allocTransaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{allocTransaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation transaction 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9956e4ec-836e-4421-9b6f-0790b13585e9",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "66568632-c768-4a63-852e-6143a6d8cb9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{allocTransaction2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{allocTransaction2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete pending payment 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8a44196-c827-420b-8c4e-416a53fbd7bb",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "83feb3fd-e652-406f-ae97-fc88f73d9891",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{pendingPaymentTransaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{pendingPaymentTransaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete pending payment 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "40ecd838-7a0d-4d2b-9553-0b903b9978e5",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3cf49646-9022-43b8-96c3-6d591a07a9c5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{pendingPaymentTransaction2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{pendingPaymentTransaction2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete encumbrance transaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1a97ba85-a835-46e8-8c56-909651f98451",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "00b80b01-1a4b-4121-82b0-4fa644d046de",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbranceId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbranceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a84a1936-b435-43ff-8b3c-fd73d7c9dcad",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7cd501a9-979b-4a20-9570-b41a817a60c1",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c325a515-b8d8-4be1-8af7-ace3a006ab67",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6cba9aa5-c6dd-42ad-80e8-760a8616af48",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fund record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "866915d2-0c88-46ff-aeed-74b04ec1ee93",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "834149c6-6d95-47a0-bf4c-744b4115d95f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFund1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fromFund1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fund 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bee29964-bfef-4b2e-aee0-4df98969fb63",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "760003a5-024a-4329-add9-3395a6665abb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFund2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fromFund2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Ledger",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f78709dd-bdc6-4732-83d1-bfe10d3ada5e",
														"exec": [
															"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9c5bbd9c-93ef-4d45-ac86-9044271407c9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{pcLedgerId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fiscal year",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6ad9292c-617b-45c8-9057-fa7146129b34",
														"exec": [
															"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "118f020a-7e29-4ea6-9cec-222d0fff68ea",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{pcFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years",
														"{{pcFiscalYearId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transfers",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e1b44f5d-a771-4507-a68a-740831bd0a62",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"TRANSFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "df030197-1fe6-489b-a55e-238506667b9e",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49c71d46-1249-474e-8feb-822fc88b1333",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7a24f21e-f23c-439a-86e4-5197a0f4c76e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"TRANS-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"transFiscalYearId\");",
													"pm.variables.set(\"transLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create from fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a55f1bb-08cc-45aa-a987-a135fd1b4456",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function () {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"fromFundId\", record.fund.id);",
													"    pm.expect(record.fund.code).to.eql(\"FROM-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ead5110b-3baf-4620-900e-764a740716aa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"FROM-FND\", pm.environment.get(\"transLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create to fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac732ff9-0f58-42e3-92f4-f48d1d3f8032",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function () {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id);",
													"    pm.expect(record.fund.code).to.eql(\"TO-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f0608a99-b0d4-4a43-bf27-f34b9644d86e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TO-FND\", pm.environment.get(\"transLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create from budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "089c79f2-bf0b-4640-90b7-6221d23db8fe",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"fromBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"FROM-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e4466137-f64f-4859-aec0-c73ef10c2895",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"FROM-BDGT\", pm.environment.get(\"fromFundId\"), pm.environment.get(\"transFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create to budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c75b7989-f4de-48b4-bff5-af913a514800",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"toBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"TO-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f5600783-95fd-4a52-b5d3-79532b38524c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TO-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"transFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8a7222d-46fc-4436-9157-cdf6da43b676",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "118f389b-6b91-48e6-b4d6-b50d8c7beb07",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{transFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08cea061-727d-4483-b32d-b27570b8aa65",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "da109d69-628b-4703-b638-ebd3b35d8838",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get from budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fde73d85-c593-4c1a-abfd-6e613bfb0cd1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f8ddf0e8-f290-4cca-958c-a2c504a7bb6d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{fromBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{fromBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get to budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b31e2bd-69a8-428b-bd19-7424171aa598",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dc71c6a4-3dce-43a3-a422-296d2dbe2033",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{toBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{toBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b08d0137-0e6f-44c2-87f5-169fc9839e61",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transferId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "10da632c-5244-4a15-b098-80b08c6e4029",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"transferContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"transFiscalYearId\"), pm.environment.get(\"fromFundId\"), pm.environment.get(\"toFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger record with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cbe481d-bdbe-45e0-a3c3-9592244c3425",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledger is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json();",
													"    utils.validateLedger(ledger);",
													"    let allocation = JSON.parse(pm.environment.get(\"transferContent\"));",
													"    pm.expect(ledger.available).to.equal(0);",
													"    pm.environment.unset(\"transferContent\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b133aa56-9791-4b5e-8514-256598865b2c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{transLedgerId}}?fiscalYear={{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{transLedgerId}}"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{transFiscalYearId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87214f4f-5f66-49de-bd65-b4050b2df82e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction transfer is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66c9a81f-7aab-44b8-86d6-d6e5a125bf38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "790735cb-a0cc-4e4e-95ff-2aebbaa0ca30",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a8aaa1d-c816-4de1-a178-0eeeb9c5297c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{transferId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13673de5-de0a-4e30-8cd1-1d060d292ad3",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "46523e39-77c2-4816-90ef-8fd00ef66717",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete from budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d486b6e-fedc-4a93-a7db-e180b1e390e7",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1954cdad-87a6-487f-b6b9-93684dc1c6e7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{fromBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{fromBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete to budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3ef2ac4-f71a-4f66-8d88-bf7a898e3b98",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e6a3bda-188d-413c-b349-f4dc7c21fe63",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{toBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{toBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete from fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfb7b4f6-2746-446c-9e88-dfa2d96fc913",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8edd8edc-f99f-4e21-89f4-e32a3159ac04",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{fromFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete to fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbb3e6ff-ab2c-4b1a-86a4-8460a47884a5",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e3e1508a-6dbf-4fc7-be66-8d9271d08108",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3938c9d-52f2-436b-bcc0-bac1215e2278",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c1e4b8b-fb24-4b50-aaaf-84f32af6c6e3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{transLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{transLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60b20d96-4336-4474-a918-7c93c0fde295",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "36d7969e-39f9-4984-bb01-7125ad08c595",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{transFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payments Credits",
							"item": [
								{
									"name": "Prepare data for Payments and Credits",
									"item": [
										{
											"name": "Create fiscal year  - required for budgets",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5e6f0a2a-627b-4267-a8f9-10c4978a9da0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"PCFY2020\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6a5cdd51-f20d-4ac2-8531-6756fe5ff3dc",
														"exec": [
															"pm.test(\"Fisscal Year is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcFiscalYearId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFyContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ledger - required for funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "203d0154-a102-404b-86d1-a017d64ff1ab",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcLedgerId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9703af10-44d8-4c23-bac4-8f5c91483de7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let ledger = utils.buildLedgerMinContent(\"PC-LDGR\", \"Test transaction ledger\");",
															"ledger.fiscalYearOneId = pm.environment.get(\"pcFiscalYearId\");",
															"pm.environment.set(\"pcLedgerContent\", JSON.stringify(ledger));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcLedgerContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fund - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "60b075b9-2583-482c-ac3c-d88d223580e0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFundId\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"PC-FND\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cb822260-78f8-4c86-9f75-87f7e6f6c3d1",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"PC-FND\", pm.environment.get(\"pcLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFundContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget first",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "54dd0d1d-fe26-4572-9dfa-58bf84977783",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"PC-BDGT\", pm.environment.get(\"fromFundId\"), pm.environment.get(\"pcFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b12cd299-62d9-4cb6-b496-fb9f82d5e87b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"allocBudgetId\", record.id); ",
															"    pm.expect(record.name).to.eql(\"PC-BDGT\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create allocations to Budget",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9f643624-f506-4ee7-90c5-28648ed7227e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(1000, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "86671920-6821-4256-b65d-e23dfb809505",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"allocTransactionId\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record before",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9cc9b0ee-e6e7-4aec-ac67-d13cbbe842bd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().allocated).to.eql(1000.0);",
															"    pm.expect(pm.response.json().available).to.eql(1000.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cd56ea2c-3d10-4df4-b393-e27424c1f57f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudgetId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d9181ed4-aca5-4593-a2fb-159a067cbe40",
														"exec": [
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "67b2199d-c20a-4752-b061-ba93f9958303",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"invoice-transaction-summaries"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create pending payments for payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52d0b1cb-5beb-43b2-90d0-d9ccce19a1fd",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction payment is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pendingPaymentTransaction1Id\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ba5f6aec-9665-40cd-8c0f-d92917c76e37",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(100.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Pending payment\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pendingPaymentContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create payments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b669abc7-5fd5-4f18-8223-49db9492937f",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction payment is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"paymentTransactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99a2c6b8-7f28-47ca-9b79-fb3a3aa2dbfd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"paymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(100.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Payment\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{paymentContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice transaction summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "855df63c-ef38-477a-865a-e245f7728265",
												"exec": [
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "273aa6be-6051-4c31-9ce2-5940824d33cb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"invoice-transaction-summaries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create pending payments for credit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16721c3a-94ff-4702-b1cc-a63be5f81267",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction payment is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pendingPaymentTransaction2Id\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "571d7677-7113-45e8-842a-ed6606b32e4c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(-20.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Pending payment\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pendingPaymentContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a2794c6-18f2-4bb7-918b-34c7728441e3",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction credits is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"creditTransactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Credit\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bcae7cc6-1921-4c03-9d02-945054ba93da",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"creditContent\", JSON.stringify(utils.buildCreditTransactionMinContent(20.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Credit\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{creditContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"credits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record after payments and credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5119b1cd-fb50-489f-9ab3-4cb780fa1632",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"    // 0.0 = 80 - 100(payment) + 20(credit)",
													"    pm.expect(pm.response.json().awaitingPayment).to.eql(0.0);",
													"    // 80.0 = 0 + 100(payment) - 20(credit)",
													"    pm.expect(pm.response.json().expenditures).to.eql(80.0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5d32ed8a-d7a5-45b5-8513-339e8f2e0ead",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get and verify payment transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa516a69-e209-467f-8dcc-3236717dc31f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction payment is retrieved and validated\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"    pm.expect(pm.response.json().amount).to.eql(100.0);",
													"    pm.expect(pm.response.json().transactionType).to.eql(\"Payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a9c6efe-5c1f-4cdd-910c-79ddde2fa081",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{paymentTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{paymentTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get and verify credit transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5ecc84b-0396-4ee9-b14e-694c61cb8fc9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction credit is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"    pm.expect(pm.response.json().amount).to.eql(20.0);",
													"    pm.expect(pm.response.json().transactionType).to.eql(\"Credit\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "411cfe33-6eb3-4f67-b41d-885e288121b6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{creditTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{creditTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check pending payment 1 deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b07df824-4638-4912-b694-80de7e30f20e",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(404));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f35f3408-9bd5-4e46-a72b-e187f4c3818e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{pendingPaymentTransaction1Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{pendingPaymentTransaction1Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check pending payment 1 deleted Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23f8ae43-8147-4874-877d-912d1a4245ad",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(404));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dbbfe4e5-a766-4b5f-a090-6790a2ad4b8f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{pendingPaymentTransaction2Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{pendingPaymentTransaction2Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete allocation transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec2aa97e-d19e-4cd1-b877-830a28885010",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c34c6736-1546-4794-97f4-c35dfc3877e4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{allocTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{allocTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete payment transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0659ba30-0d71-41e8-9f9a-10761d60146c",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3a472ab3-8969-446f-866f-3e6947ece590",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{paymentTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{paymentTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete credit transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0362d7d-165f-42d3-ae1a-67d537a94a7b",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9780562f-1b96-4417-9e8a-202f198ef093",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{creditTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{creditTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf420c49-228d-4e44-8925-0a3f9396d41b",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1c8b1dd-93a2-40d2-8d2c-ac704f09822b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4383980-b794-4404-8d46-b6e3ccbc1ba7",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fbb0307a-b5f0-4a57-8118-5dda92d24a53",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{fromFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77b8ae8a-9855-42e4-be2f-20e44cb3fefe",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "61689208-e914-49d7-87b0-f0ea84753c3d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{pcLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41a31ee1-9cce-4115-a57b-ee60ab14de37",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "de9a58ac-ba85-43fa-8ae1-6e6dcb48f83c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{pcFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{pcFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Current fiscal year",
					"item": [
						{
							"name": "Create current fiscal year for ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29ac29a6-8c1b-430c-8f0c-9b2e02154056",
										"exec": [
											"pm.test(\"Current fiscal year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"currentFiscalYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1816e5c4-3ee0-493d-b37e-32092ec26f4b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moment = require('moment');",
											"",
											"let currentFiscalYear = utils.buildFiscalYearMinContent();",
											"var start = moment().startOf('year');",
											"var end = moment().endOf('year');",
											"",
											"currentFiscalYear.periodStart = start.format('YYYY-MM-DD');",
											"currentFiscalYear.periodEnd = end.format('YYYY-MM-DD');",
											"",
											"currentFiscalYear.name = \"CurrentFY\";",
											"currentFiscalYear.code = \"CF1111\";",
											"currentFiscalYear.series = \"CFYSERIES\";",
											"",
											"pm.variables.set(\"fyContent\", JSON.stringify(currentFiscalYear));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create next fiscal year for ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "420051f7-65bf-44da-9c61-142622ba7258",
										"exec": [
											"pm.test(\"Next fiscal year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"nextFiscalYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eba20754-3066-4855-b6a6-9dbfcb3c9824",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moment = require('moment');",
											"",
											"let nextFiscalYear = utils.buildFiscalYearMinContent();",
											"var start = moment().startOf('year').add(1, 'year');",
											"var end = moment().endOf('year').add(1, 'year');",
											"",
											"nextFiscalYear.periodStart = start.format('YYYY-MM-DD');",
											"nextFiscalYear.periodEnd = end.format('YYYY-MM-DD');",
											"",
											"nextFiscalYear.name = \"NextFY\";",
											"nextFiscalYear.code = \"CF2222\";",
											"nextFiscalYear.series = \"CFYSERIES\";",
											"",
											"pm.variables.set(\"fyContent\", JSON.stringify(nextFiscalYear));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ledger with next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca666566-7330-4d31-a409-4d1ed55496ba",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ledgerForCurrentFiscalYearId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc85295f-ccb7-44be-8084-776e2188c521",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let ledger = utils.buildLedgerMinContent(\"n-lgr\", \"Next FY ledger\");",
											"ledger.fiscalYearOneId = pm.environment.get(\"nextFiscalYearId\");",
											"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get current fiscal year by ledger id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf68a702-425c-4f3e-bcb8-911836b71ff0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Current fiscal year is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    let ledger = pm.response.json();",
											"    pm.expect(ledger.id).to.equal(pm.environment.get(\"currentFiscalYearId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ede1394-3271-479d-92b4-677223b5ebc5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{ledgerForCurrentFiscalYearId}}/current-fiscal-year",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{ledgerForCurrentFiscalYearId}}",
										"current-fiscal-year"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group FiscalYear Summary",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create group fund fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "668abec5-37bb-477a-9724-0df0f8c75373",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Group fund fiscal year is created\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ab53853-ca75-4449-a0d7-43783fc1622a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"groupFundFiscalYearContent\", ",
													"JSON.stringify(utils.buildGroupFundFiscalYearMinContent(pm.environment.get(\"groupId\"), pm.environment.get(\"fundId\"), pm.environment.get(\"fiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupFundFiscalYearContent}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"group-fund-fiscal-years"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get group fiscal year summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b02b0dd-1fce-468d-bc87-d5b978c82f66",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fiscal year summary is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    let summaries = pm.response.json().groupFiscalYearSummaries;",
											"    pm.expect(summaries.length).to.equal(1);",
											"    utils.validateGroupFiscalYearSummaries(summaries[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "adc1eb62-532b-42c3-b9f7-3adb56471542",
										"exec": [
											"// let utils = eval(globals.loadUtils);",
											"",
											"// let fiscalYear = utils.buildFiscalYearMinContent(\"DD1259\");",
											"// let group = utils.buildGroupMinContent();",
											"",
											"// // Create fiscal year",
											"// pm.test(\"Fiscal year is created\", function() {",
											"//     utils.sendPostRequest('/finance/fiscal-years', fiscalYear, (err, res) => {",
											"//         pm.expect(res).to.have.status(201);",
											"//         pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//             // Create group",
											"//             pm.test(\"Group is created\", function() {",
											"//                 utils.sendPostRequest('/finance/groups', group, (err, res) => {",
											"//                 pm.expect(res).to.have.status(201);",
											"//                 pm.variables.set(\"groupId\", res.json().id);",
											"//                 pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//                 // Create fund",
											"//                 pm.test(\"Fund is created\", function() {",
											"//                     utils.sendPostRequest('/finance/funds', group, (err, res) => {",
											"//                     pm.expect(res).to.have.status(201);",
											"//                     pm.variables.set(\"fundIdId\", res.json().id);",
											"//                     });",
											"//                 });",
											"//             });",
											"//         });",
											"//     });",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fiscal-year-summaries?query=groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{fiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fiscal-year-summaries"
									],
									"query": [
										{
											"key": "query",
											"value": "groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{fiscalYearId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Exchange rate",
					"item": [
						{
							"name": "Get exchange rate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4371c563-6bda-4741-96de-c9b24751dcfb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Exchange rate is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateExchangeRate(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f91646a7-bd32-4247-87e1-bdea26e35b37",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=EUR",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "EUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate for same currencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ebdb758-a26b-4e82-a804-ab52cd5898b3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Exchange rate for equal currencies is 1.0\", function () {",
											"    pm.response.to.be.ok;",
											"    let exchangeRate = pm.response.json();",
											"    pm.expect(exchangeRate.exchangeRate).to.eql(1.0);",
											"    utils.validateExchangeRate(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8f84659-c1bb-47d1-888c-545988be14ba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=USD",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ef034ea5-c79b-495a-9b21-96796be91e69",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ff3a2d26-6d28-4d57-8b04-3432dca70d77",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Ledgers",
					"item": [
						{
							"name": "Get ledger by id, with summary ledgerFY not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b632203a-8f21-4356-adac-c397333f11b4",
										"exec": [
											"pm.test(\"Fund cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"ledgerFYNotFound\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "045b271c-54b2-4144-858e-0b61756accc7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{ledgerId}}?fiscalYear={{fyForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{ledgerId}}"
									],
									"query": [
										{
											"key": "fiscalYear",
											"value": "{{fyForDeleteId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund types",
					"item": [
						{
							"name": "Create first type for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83e519ec-3fa6-4b26-a642-90745b9c9c6c",
										"exec": [
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a963f55d-9825-46bc-a1ba-7a057c5de9b8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second type for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "daeca3c1-3294-4109-89b0-f6e379b4069b",
										"exec": [
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundTypeId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6211291d-c454-4ec6-8f1f-af6d1bdfc5d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative2\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create type without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac05f5ab-68b9-4409-8ed7-f296009e80ce",
										"exec": [
											"pm.test(\"Fund type is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"name\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56c9a9ee-5b0a-4f06-91fb-ef644c70dcda",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create type - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed7ccc91-c732-4976-b17e-98c7e6b3f19f",
										"exec": [
											"pm.test(\"Fund type is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ba6e2a9d-75f7-4a71-98b1-2aa3a2ad8eef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update type - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d359dba5-5b87-44bd-aff8-d687c18f89ff",
										"exec": [
											"pm.test(\"Fund type is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18223f5e-500c-4c32-a60f-5a85a56d08f1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for types by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68dbe021-d1b0-4da8-8fd4-c77553b48d75",
										"exec": [
											"pm.test(\"Fund types cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "877adb8c-bfd1-43fb-803f-3a5d46422b0d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Funds",
					"item": [
						{
							"name": "Create first fund for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2efda193-e55c-4162-a17b-a6637036fa07",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundId\", pm.response.json().fund.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f34f6c0b-1186-428d-a908-096a2dfb1602",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fund for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "798b146c-b343-4a3f-8984-a8df896a9f0b",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let record = pm.response.json();",
											"    pm.environment.set(\"fundId2\", record.fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b27f76be-37be-448a-a473-90077e746d10",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST2\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28dd3a3b-26f2-41ea-ba5a-53a8c035516a",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c13559f9-5f56-4261-8c9f-8bcba8b23204",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d96d9669-77ee-4b49-b6b5-d127e21947f6",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2452daec-b4e4-46ce-9a4d-bb2e2331cb2a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - non existent ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "224ccdfe-c748-421c-8b58-559d38fd1ab4",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"ledgerid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "601d8515-e1ed-4676-ab24-04c8d89aef9d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST3\", uuid.v4()))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - non existent fund type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1d87c93-e3b4-409a-bb43-33f2fc803653",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fundtypeid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed262a04-d0ce-4d6f-b6e1-f8a1c08dab80",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"let record = utils.buildCompositeFund(utils.buildFundMinContent(\"TST3\"));",
											"record.fund.fundTypeId = uuid.v4();",
											"pm.variables.set(\"fundContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a7ea259-018b-4694-bd5c-77e64dc111a3",
										"exec": [
											"pm.test(\"Fund is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5eaeea12-dbb5-41e1-b111-192cd075a2aa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for funds by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68f25960-5e98-418a-a3f6-e9e31199f4ea",
										"exec": [
											"pm.test(\"Fund cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a5fae59-b8a8-44e7-bb2b-731dcf0d55a8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create first group for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "635d9aee-bcb0-491f-ac0b-a664a174cb01",
										"exec": [
											"pm.test(\"Group is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d7f4e21b-1711-43b4-b1c1-41fa90dd4ee9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST1\", \"NEGATIVE_TEST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second group for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8e5cb9e-70ca-4638-b20b-7231698b5d09",
										"exec": [
											"pm.test(\"Group is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb7b96be-db32-428b-91cd-cc6114fba556",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST2\", \"NEGATIVE_TEST2\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6731e08e-bc5c-4dce-8431-1f532db146a7",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "933dc31c-b5a9-40d7-9d10-6279b9f7cdff",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49cb93a4-92a8-4d8e-b0ed-d77f18641ebe",
										"exec": [
											"pm.test(\"Group is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2fa29d26-edd7-4907-82ce-3b117d1fc222",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST3\", \"NEGATIVE_TEST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe17a9de-4b40-4869-8416-76f40cccca19",
										"exec": [
											"pm.test(\"Group is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51d71b98-ef3e-4bc8-9bae-a6d7aa2ba9e5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST1\", \"NEGATIVE_TEST3\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d686e14-7968-4b5b-8358-8b3f86540d36",
										"exec": [
											"pm.test(\"Group is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af19e643-a94f-4a7f-9e39-0fe09c889b9c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST3\",  \"NEGATIVE_TEST2\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupId1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42d7feeb-3e4a-4bbe-8e46-b534d47d6717",
										"exec": [
											"pm.test(\"Group is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7fd6ab81-31c8-40f4-9192-4718fb47bd1a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST2\",  \"NEGATIVE_TEST3\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupId1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for groups by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9dbb3a5f-2682-48de-8851-8bca26b4bce2",
										"exec": [
											"pm.test(\"Groups cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d22b7f5-dfe9-42e9-a897-8089fe430729",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets",
					"item": [
						{
							"name": "Budget deletion with existing transaction",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86451991-c3f7-4d19-9388-19b1af2dc7b9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c58ba62c-84ff-4c4f-8530-977a5685afff",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec7166f6-daeb-4517-b091-3847ce8b697e",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "039d4274-77db-4525-ae7f-64217a633752",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "329bda3a-c298-4b97-ae78-8fbcbcd223ee",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7a99cc25-2052-4711-8809-11d8abca33d3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49afd00c-5f63-4ec2-a4db-24a77fe8b11d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a2621db3-f909-474c-a924-2708a7375487",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3daf2ce2-590c-47f2-b4de-41c8777c3425",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "309542ab-0f8e-4050-b6d4-9e198d40ea2f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8208724-2bab-44da-a510-90ba9ee73bde",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bbbadd3d-bcfc-419a-ba3e-5863eb3cc9f8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73cc1a5c-eda7-4972-b60b-2c028b6d20d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b1327c44-3e82-4ceb-93ef-04572494a435",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5eb8cd5a-f925-4386-abe6-37ee8cd4272f",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5fd944c3-6916-4502-bdac-58abadd29486",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e425e99a-26ed-4603-84bd-7845cde16548",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1cf8a77-308b-4012-8ac8-600078dbf58d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f876d223-7e93-4284-b0e6-913d10f32eb3",
												"exec": [
													"pm.test(\"Budget deletion is failed\", function () {",
													"    pm.response.to.have.status(400).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].code).to.contain(\"transactionIsPresentBudgetDeleteError\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f422a534-7db6-4a88-af8d-e6783a923c75",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fecfc1c7-3477-488c-84d5-7e55ce2cc411",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b7f4d5d-e1b7-4087-aa67-613fbe86b3fc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record after transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e534c84-c631-42af-a0a5-cdbc74793e46",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "21570227-1639-4941-9bfd-b67d0af5bf0b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68bdcf5b-0d50-46db-ba3d-ab1c44cb243a",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aea1790a-ac4c-42a7-9be4-0afbda422ecb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e85d0f8d-cec5-4f33-8263-6389b621b4c8",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a46db26c-9918-403f-b2a0-8946a679c4d2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69177985-4401-4caf-9b47-013d69daa5d0",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6e975ab4-e4de-42a0-b1c0-7f93bc56d42b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Delete budget with existing transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "596f839f-0e7f-4e5f-9af3-b936dfd84c7c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5956bda9-ba7a-44ec-8957-c6866ef69d0a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create first budget for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5dedfec2-6470-4c3f-84a1-c5140e90949c",
										"exec": [
											"pm.test(\"Budget is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4cac1817-6afc-40be-9382-715ce0004d1a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));",
											"pm.environment.set(\"firstBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second budget for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0eff772e-19de-422d-bd0c-a298566ed0a8",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let record = pm.response.json();",
											"    pm.environment.set(\"budgetId2\", record.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7e78309-98f4-41d1-8b8e-519295ba89cb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let scndBudget = utils.buildBudgetMinContent(\"TST2\");",
											"scndBudget.fundId = pm.environment.get(\"fundId2\");",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(scndBudget));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57fe1073-00c0-4699-bd59-3c13284d524b",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46997fa1-c809-440e-9276-cb5cf8096530",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4154c5b1-440f-44cc-91fa-91b3ad8326e7",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dbf7d42f-17d8-490f-9f87-024841849d8c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - non existent fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a164420-4ced-4512-a8ad-17666156bc5a",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fundid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6b70a8a6-26f6-4cd5-88d2-5245be8140ed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST3\", uuid.v4())));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - non existent fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f2cf898-d405-4dcd-9c09-4110b0e36427",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fiscalyearid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "30450954-6842-4dea-9c17-f5a59599c5ae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"let record = utils.buildBudgetMinContent(\"TST3\");",
											"record.fiscalYearId = uuid.v4();",
											"pm.variables.set(\"budgetContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b77b8280-5d82-41a1-b303-1e45c151f441",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "202f70cb-2bc0-48e8-9817-4867adfef60f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for budgets by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eec8bea2-4b6a-4fca-9bb3-d2e7f738562d",
										"exec": [
											"pm.test(\"Budgets cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2c82152e-156f-4a9a-bf4a-52166870ebc0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets Restrictions",
					"item": [
						{
							"name": "Allocate money for budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80755136-6c17-46de-89ae-7a27913a3704",
										"exec": [
											"let record = {};",
											"pm.test(\"Trasaction allocation is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
											"    record = pm.response.json();",
											"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "31f44dee-fdef-4a4b-9d45-fb6785c9975d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(90, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Allocation\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{allocationContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order transaction summaries",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "84e5303d-3402-4f4c-9b7d-5f363ce75e27",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "edbcccb8-d440-424a-80c8-5ae7d10cce62",
										"exec": [
											"pm.test(\"Order transaction summary is created\", () => {",
											"    pm.environment.set(\"orderTransactionIdBudget\", pm.response.json().id);",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"e5ae4afd-3fa9-494e-a972-f541df9b8772\",\r\n  \"numTransactions\": 1\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"order-transaction-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice transaction summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99ae3d14-73cd-42a9-8054-f8846025ecaa",
										"exec": [
											"pm.test(\"Trasaction allocation is created\", () => {",
											"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id);",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4be94c15-d458-4161-8f97-7e04b9004688",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"187c7e6f-782a-4bd0-a04e-7174d4da2415\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"invoice-transaction-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create encumbrances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a72a98e3-86d3-489a-a9c1-86e1e4fc35a1",
										"exec": [
											"let record = {};",
											"pm.test(\"Trasaction encumbrance is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"encumbranceId\", pm.response.json().id);",
											"    record = pm.response.json();",
											"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f73b4860-efe6-43ed-be99-57d7afc70021",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
											"let transactionEncumbrance = utils.buildTransactionMinContent(25, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Encumbrance\");",
											"",
											"transactionEncumbrance.encumbrance = encumbranceMinContent;",
											"transactionEncumbrance.encumbrance.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionIdBudget\");",
											"transactionEncumbrance.fromFundId = pm.environment.get(\"fundId\");",
											"pm.environment.set(\"encumbranceContent\", JSON.stringify(transactionEncumbrance));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{encumbranceContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create pending payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5752405-c165-4b7a-ae83-15a8981d9a26",
										"exec": [
											"pm.test(\"Trasaction pending payment is created\", () => {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e87ae632-bef0-4452-a163-dbcd1542dbc8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pendingPayment = utils.buildPaymentTransactionMinContent(30, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Pending payment\");",
											"pm.environment.set(\"paymentContent\", JSON.stringify(pendingPayment));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{paymentContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e44fe8b0-8aa5-4861-a015-3f78fc513737",
										"exec": [
											"pm.test(\"Trasaction payment is created\", () => {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7793f818-5040-4a04-b102-7cfae075c26b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.environment.set(\"paymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(30, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Payment\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{paymentContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d263b1b4-6ab3-43bb-925b-012082eadeba",
										"exec": [
											"pm.test(\"Get Budget\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"firstBudgetContent\", JSON.stringify(pm.response.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4315530-28b4-4442-9dac-36f4492d7259",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget allowableEncumbrance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "402a9e83-e682-4f05-ab55-9f90e7c0250a",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"allowableEncumbranceLimitExceeded\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67df4637-9bc7-4735-9f57-38ae654daeae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let budgetForUpdate = JSON.parse(pm.environment.get(\"firstBudgetContent\"));",
											"",
											"budgetForUpdate.allowableEncumbrance = 1;",
											"budgetForUpdate.allowableExpenditure = 100;",
											"",
											"",
											"pm.variables.set(\"firstBudgetContent\", JSON.stringify(budgetForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{firstBudgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated budget Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "019dec4b-a2af-4d38-a603-1a4f15336207",
										"exec": [
											"pm.test(\"Get Budget\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2b9a6c19-7611-4be8-afe3-cf8a4d53a629",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget allowableExpenditures",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39ea70ef-69f4-4ad0-b651-494cbe6f01a7",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"allowableExpenditureLimitExceeded\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f65e8b2-6b78-4d5d-835d-0ce4524d4c60",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let budgetForUpdate = JSON.parse(pm.variables.get(\"firstBudgetContent\"));",
											"",
											"budgetForUpdate.allowableEncumbrance = 100;",
											"budgetForUpdate.allowableExpenditure = 1;",
											"",
											"pm.variables.set(\"firstBudgetContent\", JSON.stringify(budgetForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{firstBudgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "126b8aaa-a129-4eea-ae9c-13d4b659bc8e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9d470930-ddf7-406e-864d-a6bb92be9835",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group fund fiscal year",
					"item": [
						{
							"name": "Create group fund fiscal year without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d87751d-d0a1-47b9-81e1-76eb3a2a6091",
										"exec": [
											"pm.test(\"Group fund fiscal year is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"groupId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b697ad80-00dc-4c7b-b277-eb562f965fdc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"78872d8a-bf16-420b-829f-206da38f6c10\",\r\n  \"fiscalYearId\": \"684b5dc5-92f6-4db7-b996-b549d88f5e4e\",\r\n  \"fundId\": \"68872d8a-bf16-420b-829f-206da38f6c10\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4aca79cb-9b09-46f4-89d0-8a87c915354d",
										"exec": [
											"pm.test(\"Group fund fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "42317064-c68e-4a16-9003-f0f58fe71ac9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"a8bf1036-502c-42e4-8783-00a60beeae24\",\r\n  \"groupId\": \"{{groupId}}\",\r\n  \"fiscalYearId\": \"{{fiscalYearId}}\",\r\n  \"fundId\": \"{{fundId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group fund fiscal year - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e55e352-c3a5-47df-9a0f-078272cc426d",
										"exec": [
											"pm.test(\"Group fund fiscal year is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d676d4f0-db02-4709-a9b0-88e00f424a4f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"a8bf1036-502c-42e4-8783-00a60beeae24\",\r\n  \"groupId\": \"{{groupId}}\",\r\n  \"fiscalYearId\": \"{{fiscalYearId}}\",\r\n  \"fundId\": \"{{fundId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group fund fiscal year - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaef1f74-cafd-4f53-ae5b-88632b1f354b",
										"exec": [
											"pm.test(\"Group fund fiscal year is not deleted\", function () {",
											"    pm.response.to.have.status(404).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "784dbd34-ef07-436d-8022-0201fc788f82",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years/d65969c5-1887-4801-8024-486502bd2a1b",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years",
										"d65969c5-1887-4801-8024-486502bd2a1b"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for group fund fiscal year by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bb4b460-012e-4b0c-9d56-39ed17b09fa6",
										"exec": [
											"pm.test(\"Fund types cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3a16dd-2d2a-4b9d-82c0-7de867a9c4d0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assign funds to groups",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create fiscal year one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2f93a14-9cb0-42dd-879c-d66b2d26ee93",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testNegativeFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7e7205a1-21cf-4455-b04e-12cd5e385ccb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"const today = moment.utc();",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = today.startOf('year').subtract(1, 'years');",
													"var end = today.endOf('year').subtract(1, 'years');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEGATIVE\";",
													"fiscalYear.code = \"TESTNEGATIVE2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  after next fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecb45109-96c4-471f-aec3-087426b3a25c",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"afterNextFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eb291f7e-4dc7-48d0-9b9a-d65998dd9f84",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"const today = moment.utc();",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = today.startOf('year').add(2, 'years');",
													"var end = today.endOf('year').add(2, 'years');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEGATIVE\";",
													"fiscalYear.code = \"TESTNEGATIVE2021\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74dfc498-b61f-4314-a30a-f1225cd526dd",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"negativeLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6bf70e5-3cd2-4c6e-8133-26cd683a1ad6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testNegativeFiscalYearOneId\");",
													"ledger.name = \"Negative\";",
													"ledger.code = \"TESTNEGATIVE\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create fund with groups - current fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1bb8557-6e4e-4ba8-b094-1db08b042235",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aeb94704-ae3a-4cc4-b40f-35bb5434dd3c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TESTNEGATIVE\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"negativeFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund with groups - current fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b33d36d-dd86-4d8f-912e-cd4e27e7a018",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is not updated\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18f29217-dd8e-4178-b783-ac97e42c72cf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TESTNEGATIVE\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"negativeFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId2\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Restrictions",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0669384d-ea67-4e88-a115-1eaff0bfdd56",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aeb31228-b191-4a14-8d37-a553d6ce2a0d",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f08d8c11-029b-4a99-8962-c66c44880939",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e0dcc3b5-7f55-42fd-8a12-02463fc1b07a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "285e10f8-0037-4fd6-9972-bbd8f4af740b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"histFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"HIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c357fc3-9e0a-4e86-a70c-4fd419f1fa48",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"History\",\n\t  \"code\": \"HIST\",\n\t  \"externalAccountNo\": \"276507594438808\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"subdivided by geographic regions, to match individual selectors\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85099ff3-92d5-42d6-8c18-ca5d9f75eb94",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"canhistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"CANHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcba75ae-e4b3-4c70-a026-b8b53eebaa48",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Canadian History\",\n\t  \"code\": \"CANHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL; use for Canada once CANLATHIST is inactivated\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\",\n\t  \"allocatedFromIds\": [\"{{histFundId}}\"]\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efc19581-3f9f-4717-9e29-f1d16274a13c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"lathistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"LATHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f95cf33b-e18d-4a0c-b8f6-5d6ed3dce9fd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Latin America History\",\n\t  \"code\": \"LATHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update HIST fund - add allocatedToIds set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "015cb492-bb44-40ab-b101-c715043d99c0",
												"exec": [
													"pm.test(\"Fund is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20160208-ad90-48f0-87ca-447b6c8bc753",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/finance/funds/\" + pm.environment.get(\"histFundId\"), function (err, res) {",
													"    let histFund = res.json();",
													"    histFund.fund.allocatedToIds = new Array(pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"));",
													"    ",
													"    pm.environment.set(\"histFundContent\", JSON.stringify(histFund));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ASIAHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec36fcbc-eefc-4e70-96d0-676d0a778f67",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"asiahistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ASIAHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fb78b8f0-a5c3-4066-96e9-12c9b1640069",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Asian History\",\n\t  \"code\": \"ASIAHIST\",\n\t  \"externalAccountNo\": \"94508839006119\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"use for East, Central, and South Asia\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\",\n\t  \"allocatedToIds\": [\"{{histFundId}}\"],\n\t  \"allocatedFromIds\": [\"cf23adf0-61ba-4887-bf82-956c4aae2260\"]\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "044a237e-d8e0-4e63-bd77-cba68f97e990",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"histBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"HIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "70f778f3-c5e0-43cb-92c2-b21c3bffc4d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"histBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"HIST-BDGT\", pm.environment.get(\"histFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db593778-05a9-4dad-b921-2fe37108d76d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"canhistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"CANHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7e42ac90-24cf-4731-89ee-e2f4a5ac7817",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"canhistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"CANHIST-BDGT\", pm.environment.get(\"canhistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{canhistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62069c64-d9e0-4a8e-882a-fe526a656f2f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"lathistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"LATHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "275004a6-a2d9-48e4-8798-e928b9f900cd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"lathistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"LATHIST-BDGT\", pm.environment.get(\"lathistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lathistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ASIAHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75bf1bc0-02ca-444d-9167-d843941756f8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"asiahistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"ASIAHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c60254fb-d1d9-4196-9225-71b0c7347124",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"asiahistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ASIAHIST-BDGT\", pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{asiahistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with allocated ids mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0328034a-4eb1-42f4-838f-44e05c661fcb",
												"exec": [
													"pm.test(\"Allocation is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c93a911d-9222-4cde-92eb-75e28885aa8c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"canhistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with allocated ids mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a31ad846-5120-464e-9d1b-ea743ecd8a6b",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "42d295ca-68a4-427b-87c1-4e1804e3035b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"canhistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with allocatedFromIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06f0da1b-f970-4d90-b565-d3b3935757d5",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cb3782a1-b2e3-44ec-9809-1de0e7b10ae3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"lathistFundId\"), pm.environment.get(\"canhistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with allocatedFromIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ad3ab0e-7c60-4288-996e-4ace6b171f24",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ca81caa-6fc9-4b11-86a9-ddcb44b68c0c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"lathistFundId\"), pm.environment.get(\"canhistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with allocatedToIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2543b656-404c-4325-9178-8d35db3fd5a3",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "789d03f7-f246-4cd6-925f-6280cdaf50b5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"lathistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with allocatedToIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "192e5236-2151-46bd-b97e-0ea432719d9e",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f072e5f3-4b09-4057-837c-177460969c4e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"lathistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d0b577b-79eb-4749-8cb6-dd7d425a3691",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8cb63832-9eae-4a06-84f3-b7098c997e67",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{histBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{histBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "712353a6-7243-462f-954c-ae44063a528f",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "15861bdd-cd3a-4055-8e06-6db78ad931ea",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{canhistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{canhistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9e077cf-1027-44d0-9cf7-366535b84ede",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17ea1993-e9be-4154-a27e-555e72c7acaa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{lathistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{lathistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ASIAHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9e38241-a651-423b-9cde-3a1ee57f405f",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "10cf6c83-738f-4da4-a8c7-109a6d9bb789",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{asiahistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{asiahistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ASIAHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be33154e-800b-4ab5-a232-9b7f5e6caab9",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60d3fa7f-da5f-4a13-81cc-13ee840d5419",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{asiahistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{asiahistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89c1c4b9-dba9-41bf-80fd-54796f5594ee",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "374aa6b5-94a2-4cc2-bac4-937ac08866ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{lathistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{lathistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2244eee3-593d-4750-a8f9-9dce4c3a10dc",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4217df51-7858-4869-94e8-8a0100fb75c0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{canhistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{canhistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0e27549-6034-445e-a919-59a40932fc03",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7162498e-920e-4cce-9f70-96fe0f4b0ef9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5497ec8-9968-41c0-b14b-da5461cbc555",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "627db81d-0d1a-4856-807b-b8d6cfd66b4c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "629a825c-67e4-46e6-9ee2-a21c6fd93019",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3b8ee985-d787-4e77-b4ed-3765fb72444a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create transaction Transfer without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f63d83d-9ed5-4bc5-878e-78d840ad3bb9",
										"exec": [
											"pm.test(\"Transfers is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "32f0b9fa-85e4-4032-9114-0e00f94e887b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b24a45a8-97a0-42d7-8dcd-2d6e631ab71d",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"currency\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e365b637-ff88-49c8-86cb-8f69418a632c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation without toFundId and fromFundId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "019add9e-f15e-46b7-8aee-e75ac57ce566",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.be.eql(\"Missing to/from fund id\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f029feda-1416-42ee-9e14-f2561a1cf020",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer without fromFundId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ee660a1-3358-45ae-b9e2-8ee46e7aaf5d",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.be.eql(\"Missing to/from fund id\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "529d9ed0-2a2c-43c5-b5f8-45f179026742",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer without toFundId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "210b926c-b17b-4df4-8f1c-6d0774b1d78c",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.be.eql(\"Missing to/from fund id\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7331ed4-7a5b-4de9-8818-8d5c98f09205",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"fromFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Encumbrance without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2aa32000-bdea-4b38-9b99-23ccb0b7cebe",
										"exec": [
											"pm.test(\"Encumbrance is not created - missing transactionType field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"transactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62f0c053-6663-4d33-82b0-237b2b9dedf4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Payment without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22e16333-835d-4738-bea0-8428d5a176e8",
										"exec": [
											"pm.test(\"Payments is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a0efaab-d918-44ea-ad47-1c17c88d0743",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Payment\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Credit without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46a500aa-09e6-4390-826b-b0ae5ceebc8d",
										"exec": [
											"pm.test(\"Credits is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "182e17c6-597e-47e0-a483-7e6e39cc7176",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Credit\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"credits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transaction by id - wrong id, not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4301763-ebc5-4aa2-9439-2deba8e85747",
										"exec": [
											"pm.test(\"Encumbrance not found - wrong id\", function () {",
											"    pm.response.to.have.status(404).and.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6579400-81f8-4105-8122-b7b2fa4dc470",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"randomId\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{randomId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transactions",
										"{{randomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f81a7b72-a0c1-4d00-a8d4-458d21a011bd",
										"exec": [
											"pm.test(\"Allocations is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1d346bfc-ddf9-4556-b093-fd43e921b885",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4127fc7c-66ee-44aa-b299-2b5791e94e32",
										"exec": [
											"pm.test(\"Transfers is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "606a8b69-a40e-412e-ac3f-bb347f0dbd71",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Payment with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f1804e1-14d9-4b38-aadf-1769f17cd936",
										"exec": [
											"pm.test(\"Payments is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9545582b-c2bf-4b23-9eec-21dd7e69ec81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Credit with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76d451ab-e0a3-4f45-a8e9-35bd053abad2",
										"exec": [
											"pm.test(\"Credits is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f2aa5128-820f-49cc-b6f4-cd07ae6c94d1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"credits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Encumbrance with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e94e40f7-8be5-486c-ac1d-d0f4dfd42a7e",
										"exec": [
											"pm.test(\"Encumbrances is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5e4b6b4-36ee-4e9e-ade0-49e21963afa0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Current fiscal year",
					"item": [
						{
							"name": "Get current fiscal year for non-existed ledger id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b87189e0-84fd-4eb0-a31d-25eb0ecf1b92",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Current fiscal year isn't retrieved\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "acdcac41-1c4e-4730-a51d-2a3521ec9f9e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{$guid}}/current-fiscal-year",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{$guid}}",
										"current-fiscal-year"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group fiscal year summary",
					"item": [
						{
							"name": "Get group fiscal year summary - fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405903c3-f408-49c6-bfd0-d85c6e89df55",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fiscal year summary is empty\", function() {",
											"    pm.response.to.be.ok;",
											"    let summaries = pm.response.json().groupFiscalYearSummaries;",
											"    pm.expect(summaries.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fcd3460a-c410-461f-9392-0cf9dd8d63a6",
										"exec": [
											"// let utils = eval(globals.loadUtils);",
											"",
											"// let fiscalYear = utils.buildFiscalYearMinContent(\"DD1259\");",
											"// let group = utils.buildGroupMinContent();",
											"",
											"// // Create fiscal year",
											"// pm.test(\"Fiscal year is created\", function() {",
											"//     utils.sendPostRequest('/finance/fiscal-years', fiscalYear, (err, res) => {",
											"//         pm.expect(res).to.have.status(201);",
											"//         pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//             // Create group",
											"//             pm.test(\"Group is created\", function() {",
											"//                 utils.sendPostRequest('/finance/groups', group, (err, res) => {",
											"//                 pm.expect(res).to.have.status(201);",
											"//                 pm.variables.set(\"groupId\", res.json().id);",
											"//                 pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//                 // Create fund",
											"//                 pm.test(\"Fund is created\", function() {",
											"//                     utils.sendPostRequest('/finance/funds', group, (err, res) => {",
											"//                     pm.expect(res).to.have.status(201);",
											"//                     pm.variables.set(\"fundIdId\", res.json().id);",
											"//                     });",
											"//                 });",
											"//             });",
											"//         });",
											"//     });",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fiscal-year-summaries?query=groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fiscal-year-summaries"
									],
									"query": [
										{
											"key": "query",
											"value": "groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{$guid}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Exchange rate",
					"item": [
						{
							"name": "Get exchange rate missing request parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf3fa9fe-13fe-453f-ad39-c563540875e3",
										"exec": [
											"pm.test(\"Get exchange rate missing request parameters: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ca0782d-4d17-4b36-8f51-e89c9aa16c54",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate missing from parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "774a6fc0-694a-4395-9903-e6b778e0fa17",
										"exec": [
											"pm.test(\"Get exchange rate missing from parameter: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "17f35c63-7707-41ed-9b86-e0af7c7f511e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?to=USD",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "to",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate missing to parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da3f2a5c-b687-4532-906d-4f37e200f71a",
										"exec": [
											"pm.test(\"Get exchange rate missing to parameter: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a592fb1-bd6b-4a47-a167-148024136091",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate for invalid currency code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6ca0429-009c-4dff-a635-edc2e7e4c55b",
										"exec": [
											"pm.test(\"Get exchange rate for invalid currency code: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9d365194-28cc-441a-adf6-bb21ae64acb1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=EU",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "EU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate for non-existent currency code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85612f69-942f-4add-b8a5-762aeb1ee488",
										"exec": [
											"pm.test(\"Get exchange rate for non-existent currency code: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d79925e3-9b66-49cc-ae22-f76c4d9af99d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=ABC",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "ABC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d9d5cf8-bdea-4fb6-bbe4-fafec6ac1279",
										"exec": [
											"pm.test(\"Get not availible exchange rate: NOT_FOUND\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d978443c-aa8d-414b-8f7b-4c560c2bfb48",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=ALL",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "ALL"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f12a60e-4eb2-478a-a03c-d5066edf5d97",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7b30d318-d3bf-41e0-838d-18f9aecb7228",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eff62f7d-290a-477d-bbc8-22cc91065780",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0483b527-9a77-48f3-8a2b-dd9665edc22c",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "379a635d-a51e-4983-83e7-300df5726f55",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [],",
					"        bodyTemplate: {",
					"            \"module\": \"FINANCE\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    localeConfigs: {",
					"        configNames: [],",
					"        bodyTemplate: {",
					"            \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"            \"module\": \"ORG\",",
					"            \"configName\": \"localeSettings\",",
					"            \"description\": \"locale Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"{\\\"locale\\\":\\\"en-US\\\",\\\"timezone\\\":\\\"America/New_York\\\",\\\"currency\\\":\\\"USD\\\"}\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Finance API - Admin\",",
					"                    \"lastName\": \"Finance Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [\"finance-storage.transactions.item.delete\", \"finance.order-transaction-summaries.item.post\"]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"regular-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Limited user\",",
					"                    \"lastName\": \"Finance Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"regular-user\",",
					"                \"password\": \"regular-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"finance.all\",",
					"                    \"finance.order-transaction-summaries.item.post\",",
					"                    \"finance-storage.transactions.item.delete\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test finance tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"finances_schema_\";",
					"",
					"    /**",
					"     * Builds Postman Request base data",
					"     */",
					"    utils.buildPmRequest = function (path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    utils.sendPostRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function (path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"",
					"    utils.copyJsonObj = function (obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function (configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function (configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function (configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.createFinanceConfig = function (configName) {",
					"        let body = utils.copyJsonObj(globals.testData.configs.bodyTemplate);",
					"        body.configName = configName;",
					"        body.value = pm.variables.get(configName);",
					"        utils.createConfig(body);",
					"    };",
					"",
					"    utils.createConfig = function (body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function (err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function (body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function (id) {",
					"        const timerId = setTimeout(() => { }, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Build group record with minimal required fields.",
					"     */",
					"    utils.buildGroupMinContent = function (code, name) {",
					"        return {",
					"            \"code\": code || \"TST-GRP\",",
					"            \"status\": \"Active\",",
					"            \"name\": name || \"Test group\"",
					"        };",
					"",
					"    };",
					"    /**",
					"     * Build ledger record with minimal required fields.",
					"     */",
					"    utils.buildLedgerMinContent = function (code, name) {",
					"        return {",
					"            \"code\": code || \"TST-LDGR\",",
					"            \"ledgerStatus\": \"Active\",",
					"            \"name\": name || \"Test ledger\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build fiscal year record with minimal required fields.",
					"     */",
					"    utils.buildFiscalYearMinContent = function (code) {",
					"        return {",
					"            \"code\": code || \"FY2019\",",
					"            \"name\": \"Test fiscal year\",",
					"            \"periodStart\": \"2019-01-01T00:00:00Z\",",
					"            \"periodEnd\": \"2025-12-30T23:59:59Z\",",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build group fund fiscal year record with minimal required fields.",
					"     */",
					"    utils.buildGroupFundFiscalYearMinContent = function (groupId, fundId, fiscalYearId) {",
					"        return {",
					"            \"groupId\": groupId,",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"fundId\": fundId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Fund record with minimal required fields.",
					"     */",
					"    utils.buildFundMinContent = function (code, ledgerId) {",
					"        return {",
					"            \"code\": code || \"TST-FND\",",
					"            \"fundStatus\": \"Active\",",
					"            \"ledgerId\": ledgerId || pm.variables.get(\"ledgerId\"),",
					"            \"name\": \"Test fund\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Composite Fund record.",
					"     */",
					"    utils.buildCompositeFund = function (fund, groupIds) {",
					"        return {",
					"            \"fund\": fund || buildFundMinContent(),",
					"            \"groupIds\": groupIds || []",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build budget record with minimal required fields.",
					"     */",
					"    utils.buildBudgetMinContent = function (name, fundId, fiscalYearId) {",
					"        return {",
					"            \"allocated\": 0,",
					"            \"name\": name || \"TST-BDGT\",",
					"            \"budgetStatus\": \"Active\",",
					"            \"fundId\": fundId || pm.variables.get(\"fundId\"),",
					"            \"fiscalYearId\": fiscalYearId || pm.variables.get(\"fiscalYearId\"),",
					"            \"allowableEncumbrance\": 100,",
					"            \"allowableExpenditure\": 100",
					"        };",
					"    };",
					"",
					"    var uuid = require('uuid');",
					"    /**",
					"     * Build encumbrance record with minimal required fields.",
					"     */",
					"    utils.buildEncumbranceMinContent = function () {",
					"        return {",
					"            \"initialAmountEncumbered\": 25,",
					"            \"status\": \"Unreleased\",",
					"            \"orderType\": \"One-Time\",",
					"            \"subscription\": false,",
					"            \"reEncumber\": false,",
					"            \"sourcePurchaseOrderId\": \"e5ae4afd-3fa9-494e-a972-f541df9b877e\",",
					"            \"sourcePoLineId\": uuid.v4()",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build transaction record with minimal required fields.",
					"     */",
					"    utils.buildTransactionMinContent = function (amount, fiscalYearId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build transaction between funds record with minimal required fields.",
					"     */",
					"    utils.buildTransactionBetweenFunds = function (amount, fiscalYearId, fromFundId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"fromFundId\": fromFundId,",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build payments transaction record with minimal required fields.",
					"     */",
					"    utils.buildPaymentTransactionMinContent = function (amount, fiscalYearId, fromFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"fromFundId\": fromFundId || pm.environment.get(\"fromFundId\"),",
					"            \"sourceInvoiceId\": pm.environment.get(\"invoiceTransactionSummaryId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build credits transaction record with minimal required fields.",
					"     */",
					"    utils.buildCreditTransactionMinContent = function (amount, fiscalYearId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"sourceInvoiceId\": pm.environment.get(\"invoiceTransactionSummaryId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates the content of the fund type record",
					"     */",
					"    utils.validateFundType = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fund_type.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the fund record",
					"     */",
					"    utils.validateFund = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.fundStatus).to.exist;",
					"        pm.expect(jsonData.ledgerId).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fund.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the composite fund record",
					"     */",
					"    utils.validateCompositeFund = function (jsonData) {",
					"        pm.expect(jsonData.fund).to.exist;",
					"        utils.validateFund(jsonData.fund);",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_fund.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the budget record",
					"     */",
					"    utils.validateBudget = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.allocated).to.exist;",
					"        pm.expect(jsonData.budgetStatus).to.exist;",
					"        pm.expect(jsonData.fundId).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"budget.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the transaction record",
					"     */",
					"    utils.validateTransaction = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.amount).to.exist;",
					"        pm.expect(jsonData.currency).to.exist;",
					"        pm.expect(jsonData.source).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.transactionType).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"transaction.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the content of the ledger record",
					"    */",
					"    utils.validateLedger = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.ledgerStatus).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"ledger.json\")));",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates the content of the group record",
					"     */",
					"    utils.validateGroup = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.status).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"group.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the content of the fiscal year record",
					"    */",
					"    utils.validateFiscalYear = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.periodStart).to.exist;",
					"        pm.expect(jsonData.periodEnd).to.exist;",
					"        pm.expect(jsonData.series).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fiscal_year.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the content of the group fiscal year summary record",
					"    */",
					"    utils.validateGroupFiscalYearSummaries = function (jsonData) {",
					"        pm.expect(jsonData.groupId).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.allocated).to.exist;",
					"        pm.expect(jsonData.available).to.exist;",
					"        pm.expect(jsonData.unavailable).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"group_fiscal_year_summary.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the exchange rate",
					"    */",
					"    utils.validateExchangeRate = function (jsonData) {",
					"        pm.expect(jsonData.from).to.exist;",
					"        pm.expect(jsonData.to).to.exist;",
					"        pm.expect(jsonData.exchangeRate).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"exchange_rate.json\")));",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"budgetId\");",
					"        pm.environment.unset(\"budgetId2\");",
					"        pm.environment.unset(\"budgetContent2\");",
					"        pm.environment.unset(\"fiscalYearId\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"fundId2\");",
					"        pm.environment.unset(\"fundContent2\");",
					"        pm.environment.unset(\"fundTypeId\");",
					"        pm.environment.unset(\"fundTypeId2\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"xokapitoken-limitedUesr\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"gffyGroupId\");",
					"        pm.environment.unset(\"gffyLedgerId\");",
					"        pm.environment.unset(\"gffyFiscalYearId\");",
					"        pm.environment.unset(\"gffyFundTypeId\");",
					"        pm.environment.unset(\"gffyFundId\");",
					"        pm.environment.unset(\"groupFundFiscalYearId\");",
					"        pm.environment.unset(\"groupId\");",
					"        pm.environment.unset(\"testCurrentFiscalYearOneId\");",
					"        pm.environment.unset(\"testNextFiscalYearOneId\");",
					"        pm.environment.unset(\"currentFiscalYearId\");",
					"        pm.environment.unset(\"nextFiscalYearId\");",
					"        pm.environment.unset(\"currentFyLedgerId\");",
					"        pm.environment.unset(\"nextFyLedgerId\");",
					"        pm.environment.unset(\"currentFyFundId\");",
					"        pm.environment.unset(\"nextFyFundId\");",
					"        pm.environment.unset(\"testNegativeFiscalYearOneId\");",
					"        pm.environment.unset(\"afterNextFiscalYearId\");",
					"        pm.environment.unset(\"negativeLedgerId\");",
					"        pm.environment.unset(\"groupForCrudId\");",
					"        pm.environment.unset(\"groupId1\");",
					"        pm.environment.unset(\"groupId2\");",
					"        pm.environment.unset(\"allocFiscalYearId\");",
					"        pm.environment.unset(\"allocLedgerId\");",
					"        pm.environment.unset(\"toFundId\");",
					"        pm.environment.unset(\"allocBudgetId\");",
					"        pm.environment.unset(\"transactionId\");",
					"        pm.environment.unset(\"encFiscalYearId\");",
					"        pm.environment.unset(\"encLedgerId\");",
					"        pm.environment.unset(\"fromFundId\");",
					"        pm.environment.unset(\"encBudgetId\");",
					"        pm.environment.unset(\"encumbranceId\");",
					"        pm.environment.unset(\"transFiscalYearId\");",
					"        pm.environment.unset(\"transLedgerId\");",
					"        pm.environment.unset(\"transBudgetId\");",
					"        pm.environment.unset(\"transferId\");",
					"        pm.environment.unset(\"currentFiscalYearId\");",
					"        pm.environment.unset(\"nextFiscalYearId\");",
					"        pm.environment.unset(\"ledgerForCurrentFiscalYearId\");",
					"        pm.environment.unset(\"pcFiscalYearId\");",
					"        pm.environment.unset(\"pcLedgerId\");",
					"        pm.environment.unset(\"fromFundId\");",
					"        pm.environment.unset(\"allocBudgetId\");",
					"        pm.environment.unset(\"allocTransactionId\");",
					"        pm.environment.unset(\"invoiceTransactionSummaryId\");",
					"        pm.environment.unset(\"paymentTransactionId\");",
					"        pm.environment.unset(\"creditTransactionId\");",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function (jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b6d6eda9-779c-4422-af1b-e9948fff0803",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ce619d80-f10f-4131-902a-a3a77686cddf",
			"key": "mod-financeResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-finance/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "563f6719-cf60-46d2-a4a6-474709b295a8",
			"key": "testTenant",
			"value": "finance_api_tests",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}