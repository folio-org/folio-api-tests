{
	"info": {
		"_postman_id": "7b365bb2-7612-4bfa-996a-2812844b023a",
		"name": "mod-users-bl",
		"description": "API tests for the /bl-users.\n\nAPIs include:\n- /bl-users (R)\n- /bl-users/by-id/{id} (R)\n- /bl-users/by-username/{username} (R)\n- /bl-users/_self (R)\n- /bl-users/login (C)\n\nNotes:\n- Permission expansion (expandPermissions) does not work! [MODUSERBL-28](https://issues.folio.org/browse/MODUSERBL-28) needs to be fixed first. As a result, only one test for permission expansion test (/bl-users) is currently created. When this bug is fixed, we should add permission expansion tests to the rest of the APIs.\n- Do not increase the \"limit\" query parameter in \"/bl-users\" until [MODUSERBL-27](https://issues.folio.org/browse/MODUSERBL-27) is fixed.\n- Schema retrieval is not completely from GitHub, due to the nonconformance of the \"/bl-users\" response. GitHub can be used when [MODUSERBL-26](https://issues.folio.org/browse/MODUSERBL-26) is complete.\n- This API is just a proxy for other APIs with little validation. Issues in the source APIs are exposed in these APIs as well, so as bugs are fixed in dependant APIs, these tests should fail as well.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/bl-users",
			"item": [
				{
					"name": "/bl-users - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "484d5678-ea34-47fc-bdde-a589896f80d9",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"compositeUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))));",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    // Need to use a variable copy of this schema (MODUSERBL-26). See the test description for more info.",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"compositeUserListObject.json\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().compositeUsers.length).to.be.at.most(10); // limit default",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							]
						},
						"description": "Returns a list of users. Validation fails due to missing required fields \"totalResults\" and \"recordCount\" in compositeUserListObject.json. Until [MODUSERBL-26](https://issues.folio.org/browse/MODUSERBL-26) is fixed, we will use a local version of the schema that does not include those fields, but has additionalProperties set to false so that when this test will fail if they are present."
					},
					"response": []
				},
				{
					"name": "/bl-users?expandPermissions=true&query=userId=={{test_user_id}} - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a912d70a-12c4-45da-96f0-3d74e6ac95bc",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"compositeUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))));",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    // Need to use a variable copy of this schema (MODUSERBL-26). See the test description for more info.",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"compositeUserListObject.json\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().compositeUsers.length).to.equal(1);",
									"    pm.expect(pm.response.json().compositeUsers[0].permissions.permissions).to.have.members([",
									"        \"users.all\"",
									"    ]);",
									"",
									"    // permission expansion does not work due to MODUSERBL-28. See the description",
									"    // for more info. Below is the list of permissions that should be added to the",
									"    // above array when the issue is fixed.",
									"    // \"users.collection.get\",",
									"    // \"users.item.get\",",
									"    // \"users.read.basic\",",
									"    // \"users.read.restricted\",",
									"    // \"users.item.post\",",
									"    // \"users.item.put\",",
									"    // \"users.item.delete\",",
									"    // \"usergroups.collection.get\",",
									"    // \"usergroups.item.get\",",
									"    // \"usergroups.item.post\",",
									"    // \"usergroups.item.put\",",
									"    // \"usergroups.item.delete\",",
									"    // \"addresstypes.collection.get\",",
									"    // \"addresstypes.item.get\",",
									"    // \"addresstypes.item.post\",",
									"    // \"addresstypes.item.put\",",
									"    // \"addresstypes.item.delete\",",
									"    // \"proxiesfor.collection.get\",",
									"    // \"proxiesfor.item.get\",",
									"    // \"proxiesfor.item.post\",",
									"    // \"proxiesfor.item.put\",",
									"    // \"proxiesfor.item.delete\"",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpUserTestFunction\"));",
									"",
									"    cleanUpUserTest();",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "939740b9-f91f-4e5b-8b1b-ce0bc795e631",
								"exec": [
									"eval(pm.variables.get(\"createUserWithPermsFunction\"));",
									"",
									"createUserWithPerms([\"users.all\"]);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?expandPermissions=true&query=id=={{test_user_id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "expandPermissions",
									"value": "true"
								},
								{
									"key": "query",
									"value": "id=={{test_user_id}}"
								}
							]
						},
						"description": "Test a user for expanded permissions. This doesn't currently work due to problems with the code. This is the tracking issue: [MODUSERBL-28](https://issues.folio.org/browse/MODUSERBL-28). Once fixed, this test will break and the extra permissions, commented out in the test, will need to be added to the test case."
					},
					"response": []
				},
				{
					"name": "/bl-users?offset=-1 - 400 (offset less than min 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - is less than min\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						},
						"description": "Failure case where the offset query parameter is less that the min value, currently 0."
					},
					"response": []
				},
				{
					"name": "/bl-users?limit=-1 - 400 (limit less than min 0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c1d93da-2005-4013-b152-bdb5b20b4aee",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - is less than min\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						},
						"description": "Failure case where the limit query parameter is less that the min value, currently 0."
					},
					"response": []
				},
				{
					"name": "/bl-users?offset= - 400 (offset is empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7da61625-d75f-456f-b082-2101521ac31f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - empty offset\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?offset=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "offset",
									"value": ""
								}
							]
						},
						"description": "Failure case where the offset query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
					},
					"response": []
				},
				{
					"name": "/bl-users?limit= - 400 (limit is empty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b3c5e24-9263-4f44-a63f-a7fab5df40e7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - empty limit\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?limit=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "limit",
									"value": ""
								}
							]
						},
						"description": "Failure case where the limit query parameter is empty. The current 400 status message suggests that there is no default in the RAML, which is a bit misleading."
					},
					"response": []
				},
				{
					"name": "/bl-users/offset=-2147483649 - 400 (offset less than Integer.MIN_VALUE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36347953-3a34-4cde-9b77-1d7d4e4dac6c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - is less than int min\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?offset=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "offset",
									"value": "-2147483649"
								}
							]
						},
						"description": "Failure case where the offset query parameter is less that the min value for an int, currently -2,147,483,648."
					},
					"response": []
				},
				{
					"name": "/bl-users?limit=-2147483649 - 400 (limit less than Integer.MIN_VALUE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02c0cb09-b11b-4368-91cf-044a9c62d36c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - is less than int min\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?limit=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "limit",
									"value": "-2147483649"
								}
							]
						},
						"description": "Failure case where the limit query parameter is less that the min value for an int, currently -2,147,483,648."
					},
					"response": []
				},
				{
					"name": "/bl-users?offset=2147483648 - 400 (offset exceeds Integer.MAX_VALUE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6289db22-451e-473b-8452-655f62fbaeb6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - offset exceeds int max\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?offset=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "offset",
									"value": "2147483648"
								}
							]
						},
						"description": "Failure case where the offset query parameter exceeds the max int value, currently 2,147,483,647."
					},
					"response": []
				},
				{
					"name": "/bl-users?limit=2147483648 - 400 (limit exceeds Integer.MAX_VALUE)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "753e0caa-4c9c-422b-bf94-3d1e1b7ca9b9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - limit exceeds int max\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						},
						"description": "Failure case where the limit query parameter exceeds the max int value, currently 2,147,483,647."
					},
					"response": []
				},
				{
					"name": "/bl-users?query=foo* - 400 (bad query CQL)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "150d7a90-074d-4bb8-a7e2-9d6a6b6a8341",
								"exec": [
									"pm.test(\"400 test - bad CQL\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?query=foo*",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "query",
									"value": "foo*"
								}
							]
						},
						"description": "Failure case where the \"query\" query parameter is not valid CQL."
					},
					"response": []
				},
				{
					"name": "/bl-users?query= - 400 (empty query)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23229256-a839-469c-b6b3-e6af62b15911",
								"exec": [
									"pm.test(\"400 test - empty query\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users?query=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						},
						"description": "Failure case where the \"query\" query parameter is empty."
					},
					"response": []
				},
				{
					"name": "/bl-users - 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b79b617-4f51-46cf-b284-3848e4cc7618",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29562f38-ef06-464a-82f6-81fee0b071c1",
								"type": "text/javascript",
								"exec": [
									"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							]
						},
						"description": "Failure test due to the auth token not being set."
					},
					"response": []
				},
				{
					"name": "/bl-users - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ccbfe6a-4c48-4ac9-a4c3-76acdbad4338",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"    pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"validate permission\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"users-bl.collection.get\");",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpUserTestFunction\"));",
									"",
									"    cleanUpUserTest();",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
								"type": "text/javascript",
								"exec": [
									"eval(pm.variables.get(\"createUserFunction\"));",
									"",
									"createUser();",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users"
							]
						},
						"description": "Failure test for a user missing the required permission."
					},
					"response": []
				}
			]
		},
		{
			"name": "/bl-users/by-id",
			"item": [
				{
					"name": "/bl-users/by-id/{id} - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b03b6f1a-b7fa-4d24-9bc2-8211fc44721d",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().user.id).to.equal(pm.variables.get(\"id\"));",
									"    pm.expect(pm.response.json().permissions.permissions).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
									"",
									"    cleanUpVariables([\"id\"]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72d022c4-8168-421f-a4be-6a3a4047267c",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users?query=username=\" + pm.environment.get(\"username\"),",
									"    method: 'GET',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"))",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user lookup error: \" + err);",
									"    } else {",
									"        if (res.code === 200) {",
									"            pm.variables.set(\"id\", res.json().users[0].id);",
									"        } else {",
									"            console.log(\"user lookup failed: \" + res.reason());",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-id/{{id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-id",
								"{{id}}"
							]
						},
						"description": "Returns a user."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-id/{id}?include=credentials - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b442d4b8-8a27-4cbf-ad4a-a2bdee5831b7",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().user.id).to.equal(pm.variables.get(\"id\"));",
									"    pm.expect(pm.response.json().credentials.credentials).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().credentials.credentials[0].userId).to.equal(pm.variables.get(\"id\"));",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
									"",
									"    cleanUpVariables([\"id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72d022c4-8168-421f-a4be-6a3a4047267c",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users?query=username=\" + pm.environment.get(\"username\"),",
									"    method: 'GET',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"))",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user lookup error: \" + err);",
									"    } else {",
									"        if (res.code === 200) {",
									"            pm.variables.set(\"id\", res.json().users[0].id);",
									"        } else {",
									"            console.log(\"user lookup failed: \" + res.reason());",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-id/{{id}}?include=credentials",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-id",
								"{{id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "credentials"
								}
							]
						},
						"description": "Returns a user with credential data."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-id/{id}?include=credentials&include=perms - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "062c3da6-d570-4556-85ab-efc23dae7d33",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().user.id).to.equal(pm.variables.get(\"id\"));",
									"    pm.expect(pm.response.json().permissions.permissions).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().credentials.credentials).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().credentials.credentials[0].userId).to.equal(pm.variables.get(\"id\"));",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
									"",
									"    cleanUpVariables([\"id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72d022c4-8168-421f-a4be-6a3a4047267c",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users?query=username=\" + pm.environment.get(\"username\"),",
									"    method: 'GET',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"))",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user lookup error: \" + err);",
									"    } else {",
									"        if (res.code === 200) {",
									"            pm.variables.set(\"id\", res.json().users[0].id);",
									"        } else {",
									"            console.log(\"user lookup failed: \" + res.reason());",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-id/{{id}}?include=credentials&include=perms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-id",
								"{{id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "credentials"
								},
								{
									"key": "include",
									"value": "perms"
								}
							]
						},
						"description": "Returns a user with credential and permissions data."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-id/{id} - 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b79b617-4f51-46cf-b284-3848e4cc7618",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29562f38-ef06-464a-82f6-81fee0b071c1",
								"type": "text/javascript",
								"exec": [
									"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-id/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-id",
								"{{$guid}}"
							]
						},
						"description": "Failure test due to the auth token not being set."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-id/{id} - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46276b7c-bf64-403e-94fb-f2917a164998",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"    pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"validate permission\", function() {",
									"    pm.expect(pm.response.text()).to.match(/users-bl.item.get$|perms.users.get$/);",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpUserTestFunction\"));",
									"",
									"    cleanUpUserTest();",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
								"type": "text/javascript",
								"exec": [
									"eval(pm.variables.get(\"createUserFunction\"));",
									"",
									"createUser();",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-id/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-id",
								"{{$guid}}"
							]
						},
						"description": "Failure test for a user missing the required permission."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-id/{id} - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d986a8c4-dfb5-40b8-912b-9850948a840c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
									"",
									"    cleanUpVariables([\"id\"]);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ec3b3190-558d-4041-abef-566e72351dca",
								"type": "text/javascript",
								"exec": [
									"let uuid = require('uuid');",
									"",
									"pm.variables.set(\"id\", uuid.v4());",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-id/{{id}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-id",
								"{{id}}"
							]
						},
						"description": "Return a user with an unknown id."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cf842394-8723-4fa4-8cf2-306900f82d4d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e0b74c1e-e529-465c-a0a8-180976399000",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "/bl-users/by-username",
			"item": [
				{
					"name": "/bl-users/by-username/{username} - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c75c3be-0009-461d-80da-faeb05701544",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().permissions.permissions).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
									"",
									"    cleanUpVariables([\"id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21c5117-b1f2-46f6-b4b8-1fcff9b25e18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-username",
								"{{username}}"
							]
						},
						"description": "Returns a user given a username."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-username/{username}?include=credentials - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b22cd013-727f-4e92-8f99-fb994352fad2",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().credentials.credentials).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
									"",
									"    cleanUpVariables([\"id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "08cdb808-d269-499c-8fde-2edc373c90f1",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}?include=credentials",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-username",
								"{{username}}"
							],
							"query": [
								{
									"key": "include",
									"value": "credentials"
								}
							]
						},
						"description": "Returns a user with credential data."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-username/{username}?include=credentials&include=perms - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ada03d92-d447-490d-8771-d3580edc141b",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().permissions.permissions).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().credentials.credentials).to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "87a0f425-7b34-4dff-a3e6-5c171c2b4c03",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}?include=credentials&include=perms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-username",
								"{{username}}"
							],
							"query": [
								{
									"key": "include",
									"value": "credentials"
								},
								{
									"key": "include",
									"value": "perms"
								}
							]
						},
						"description": "Returns a user with credential and permissions data."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-username/{username} - 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b79b617-4f51-46cf-b284-3848e4cc7618",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29562f38-ef06-464a-82f6-81fee0b071c1",
								"type": "text/javascript",
								"exec": [
									"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-username",
								"{{username}}"
							]
						},
						"description": "Failure test due to the auth token not being set."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-username/{username} - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46276b7c-bf64-403e-94fb-f2917a164998",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"    pm.response.to.have.body();",
									"});",
									"",
									"pm.test(\"validate permission\", function() {",
									"    pm.expect(pm.response.text()).to.match(/users-bl.item.get$|perms.users.get$/);",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpUserTestFunction\"));",
									"",
									"    cleanUpUserTest();",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fc943a45-a2da-462c-8910-3746fa12cf63",
								"type": "text/javascript",
								"exec": [
									"eval(pm.variables.get(\"createUserFunction\"));",
									"",
									"createUser();",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{test_user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{username}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-username",
								"{{username}}"
							]
						},
						"description": "Failure test for a user missing the required permission."
					},
					"response": []
				},
				{
					"name": "/bl-users/by-username/{username} - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "484de01f-52e9-4ee7-95e1-a2736ade2008",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "52b80c96-8ee2-46b3-8ce4-723b0ef11307",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/by-username/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"by-username",
								"{{$guid}}"
							]
						},
						"description": "Return a user with an unknown username."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cf842394-8723-4fa4-8cf2-306900f82d4d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e0b74c1e-e529-465c-a0a8-180976399000",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "/bl-users/_self",
			"item": [
				{
					"name": "/bl-users/_self - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd114b1d-6e28-4ea4-b147-315da827f876",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().permissions.permissions).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
									"",
									"    cleanUpVariables([\"id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21c5117-b1f2-46f6-b4b8-1fcff9b25e18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"_self"
							]
						},
						"description": "Returns the logged in user."
					},
					"response": []
				},
				{
					"name": "/bl-users/_self?include=credentials - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0220466b-3041-49db-8e9b-9bd6dbca559a",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().credentials.credentials).to.be.an(\"array\");",
									"});",
									"",
									"pm.test(\"clean up\", function() {",
									"    eval(pm.variables.get(\"cleanUpVariablesFunction\"));",
									"",
									"    cleanUpVariables([\"id\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "08cdb808-d269-499c-8fde-2edc373c90f1",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/_self?include=credentials",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"_self"
							],
							"query": [
								{
									"key": "include",
									"value": "credentials"
								}
							]
						},
						"description": "Returns a user with credential data."
					},
					"response": []
				},
				{
					"name": "/bl-users/_self?include=credentials&include=perms - 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb04932a-9d51-47a9-b342-f02fee67b685",
								"exec": [
									"pm.test(\"success test - 200 and JSON body\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().permissions.permissions).to.be.an(\"array\");",
									"    pm.expect(pm.response.json().credentials.credentials).to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "87a0f425-7b34-4dff-a3e6-5c171c2b4c03",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/_self?include=credentials&include=perms",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"_self"
							],
							"query": [
								{
									"key": "include",
									"value": "credentials"
								},
								{
									"key": "include",
									"value": "perms"
								}
							]
						},
						"description": "Returns a user with credential and permissions data."
					},
					"response": []
				},
				{
					"name": "/bl-users/_self - 401",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b79b617-4f51-46cf-b284-3848e4cc7618",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "29562f38-ef06-464a-82f6-81fee0b071c1",
								"type": "text/javascript",
								"exec": [
									"pm.variables.unset('xokapitoken-' + pm.variables.get('module'));",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{xokapitoken-{{module}}}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"_self"
							]
						},
						"description": "Failure test due to the auth token not being set."
					},
					"response": []
				},
				{
					"name": "/bl-users/_self - 404 (no auth token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "484de01f-52e9-4ee7-95e1-a2736ade2008",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "52b80c96-8ee2-46b3-8ce4-723b0ef11307",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/_self",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"_self"
							]
						},
						"description": "Return logged in user with no auth token. This returns a 404 due to mod-users returning a 404 for an internal query, which uses \"UNDEFINED\\_USER\\_\\_\\<IP\\>:\\<PORT\\>\\_\\_\\<TS\\>\" as the user name."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cf842394-8723-4fa4-8cf2-306900f82d4d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e0b74c1e-e529-465c-a0a8-180976399000",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "/bl-users/login",
			"item": [
				{
					"name": "/bl-users/login - 201",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4210d71-add2-4756-8d10-03736fd1e5f7",
								"exec": [
									"pm.test(\"success test - 201, JSON body and token header\", function() {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"    pm.response.to.have.header(\"X-Okapi-Token\");",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(JSON.stringify(pm.variables.get(\"userdata.json\"))));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(JSON.stringify(pm.variables.get(\"usergroup.json\"))));",
									"    tv4.addSchema(\"permissionUser.json\", JSON.parse(JSON.stringify(pm.variables.get(\"permissionUser.json\"))));",
									"    tv4.addSchema(\"credentials.json\", JSON.parse(JSON.stringify(pm.variables.get(\"credentials.json\"))));",
									"    tv4.addSchema(\"proxyfor.json\", JSON.parse(JSON.stringify(pm.variables.get(\"proxyfor.json\"))));",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(JSON.stringify(pm.variables.get(\"metadata.schema\"))));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(JSON.stringify(pm.variables.get(\"compositeUser.json\"))))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"validate data\", function() {",
									"    pm.expect(pm.response.json().user.username).to.equal(pm.environment.get(\"username\"));",
									"    pm.expect(pm.response.json().permissions.permissions).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21c5117-b1f2-46f6-b4b8-1fcff9b25e18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"{{username}}\", \"password\": \"{{password}}\" }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/bl-users/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"bl-users",
								"login"
							]
						},
						"description": "Returns an auth token for the user."
					},
					"response": []
				},
				{
					"name": "/bl-users/login - 422 (unknown user name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ba0fcf1-b0a8-4d4d-a466-ab6fcfb532c1",
								"exec": [
									"pm.test(\"422 test - unknown user\", function() {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.have.body();",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21c5117-b1f2-46f6-b4b8-1fcff9b25e18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"{{$guid}}\", \"password\": \"{{$randomInt}}\" }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						},
						"description": "Returns an auth token for an unknown user."
					},
					"response": []
				},
				{
					"name": "/bl-users/login - 422 (bad password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba64503d-c8d1-4582-9936-bb1713fb685f",
								"exec": [
									"pm.test(\"422 test - bad password\", function() {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.have.body();",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21c5117-b1f2-46f6-b4b8-1fcff9b25e18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"{{username}}\", \"password\": \"{{$randomInt}}\" }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						},
						"description": "Returns an auth token for a user with a bad password."
					},
					"response": []
				},
				{
					"name": "/bl-users/login - 400 (bad json)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aefef12d-46a2-4295-97c7-ab394ebc402e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad json\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21c5117-b1f2-46f6-b4b8-1fcff9b25e18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"username\": \"{{username}}\", \"password\": \"{{password}}\""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						},
						"description": "Returns an auth token for a user with invalid JSON."
					},
					"response": []
				},
				{
					"name": "/bl-users/login - 400 (empty json)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62f085e6-0ebd-4264-964c-e5767e31e1dd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - empty json\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21c5117-b1f2-46f6-b4b8-1fcff9b25e18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						},
						"description": "Returns an auth token for a user with an empty JSON object."
					},
					"response": []
				},
				{
					"name": "/bl-users/login - 400 (no body)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e96b94e7-fb12-4e40-a0a2-4db565a5b4ce",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - no body\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f21c5117-b1f2-46f6-b4b8-1fcff9b25e18",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						},
						"description": "Returns an auth token for a user with no body."
					},
					"response": []
				}
			],
			"description": "The structure for the login POST is:\n\n```\n{\n  \"title\": \"Login Credentials Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"username\": {\n      \"type\": \"string\"\n    },\n    \"userId\": {\n      \"type\": \"string\"\n    },\n    \"password\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\nHowever, the code makes no reference to userId. In fact, including it instead of username causes a 400 with the obscure error message \"Improperly formatted request\".",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fafa541b-bfce-469f-9b37-6cbcb1b2f747",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "38e20bc5-ee2f-47cc-84dd-36b0084f254a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{xokapitoken-{{module}}}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a78626e8-2224-4b14-8487-b09a78c676c7",
				"type": "text/javascript",
				"exec": [
					"eval(pm.variables.get(\"retrieveSchemaFunction\"));",
					"",
					"const handler = (schema, common) => {",
					"    if (pm.variables.has(schema) === false) {",
					"        if (common === false) { ",
					"            retrieveModuleSchema(schema, (err, res) => {",
					"                if (res !== null) {",
					"                    pm.variables.set(schema, res);",
					"                }",
					"            });",
					"        } else {",
					"            retrieveRAMLUtilsSchema(schema, (err, res) => {",
					"                if (res !== null) {",
					"                    pm.variables.set(schema, res);",
					"                }",
					"            });",
					"        }",
					"    }",
					"};",
					"",
					"let schemas = pm.variables.get(\"module_schemas\").split(\" \");",
					"for (let i = 0; i < schemas.length; i++) {",
					"    handler(schemas[i], false);",
					"}",
					"",
					"schemas = pm.variables.get(\"common_schemas\").split(\" \");",
					"for (let i = 0; i < schemas.length; i++) {",
					"    handler(schemas[i], true);",
					"}",
					"",
					"eval(pm.variables.get(\"loginFunction\"));",
					"",
					"login();",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7e68ebf7-f0a1-49f8-bef4-28437cebd86f",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"schemas loaded\", () => {",
					"    const common_schemas = pm.variables.get(\"common_schemas\").split(\" \");",
					"    const module_schemas = pm.variables.get(\"module_schemas\").split(\" \");",
					"    for (let i = 0; i < common_schemas.length; i++) {",
					"        pm.expect(pm.variables.has(common_schemas[i])).to.equal(true, common_schemas[i] + \" failed to load\");",
					"    }",
					"    for (let i = 0; i < module_schemas.length; i++) {",
					"        pm.expect(pm.variables.has(module_schemas[i])).to.equal(true, module_schemas[i] + \" failed to load\");",
					"    }",
					"});",
					"",
					"tv4.dropSchemas();"
				]
			}
		}
	],
	"variable": [
		{
			"id": "2f4a2ade-c097-4698-9726-e303a047a5fb",
			"key": "module",
			"value": "mod-users-bl",
			"type": "string"
		},
		{
			"id": "f03a5c4d-4bae-497a-8dd3-c527415875da",
			"key": "module_version",
			"value": "v4.4.0",
			"type": "string"
		},
		{
			"id": "27bcbba6-1652-4d4d-aa14-88173aaa6287",
			"key": "raml-utils_version",
			"value": "0fdbe83a6fed316f0fed1b857ebefacc3abf9a72",
			"type": "string"
		},
		{
			"id": "3f46e3d4-ac4e-4a26-92e7-85cf12376b7e",
			"key": "retrieveSchemaFunction",
			"value": "var retrieveSchema = function(module, version, schemaLoc, schemaName, cb) {\n    pm.sendRequest({\n        url: \"https://raw.githubusercontent.com/folio-org/\" + module + \"/\" + version + schemaLoc + schemaName,\n        method: 'GET',\n    }, function(err, res) {\n        if (err !== null) {\n            console.log(\"Schema retrieval error for: \" + schemaName + \" - \" + err);\n            cb(\"failed\", null);\n        } else {\n            if (res.code === 200) {\n                cb(null, res.json());\n            } else {\n                console.log(\"Schema retrieval falied for: \" + schemaName + \" - \"  + res.reason());\n            cb(\"failed\", null);\n            }\n        }\n    });\n};\n\nvar retrieveModuleSchema = (schemaName, cb) => {\n\tconst module = pm.variables.get(\"module\");\n\tconst version = pm.variables.get(\"module_version\");\n\tretrieveSchema(module, version, \"/ramls/\", schemaName, cb);\n};\n\nvar retrieveRAMLUtilsSchema = function(schemaName, cb) {\n\tconst version = pm.variables.get(\"raml-utils_version\");\n\tretrieveSchema(\"raml\", version, \"/schemas/\", schemaName, cb);\n};",
			"type": "string"
		},
		{
			"id": "cefcd0bc-4d2c-4258-85e5-9328847fd15e",
			"key": "module_schemas",
			"value": "compositeUser.json credentials.json proxyfor.json userdata.json usergroup.json permissionUser.json",
			"type": "string"
		},
		{
			"id": "dba9011d-4723-49d1-a9bc-4213c1556797",
			"key": "common_schemas",
			"value": "errors.schema error.schema parameters.schema metadata.schema",
			"type": "string"
		},
		{
			"id": "9d198a64-3e11-4c5c-b598-bc0e4452a663",
			"key": "loginFunction",
			"value": "var login = function() {\n\t//Clear out the previously set token as it may be expired or invalid\n\t//by the time this test runs again, since it is stored in an\n\t//environment variable.\n\tlet mod = pm.variables.get(\"module\");\n\t\n\t//Acquire a valid auth token\n\tif (pm.variables.has(\"xokapitoken-\" + mod) === false) {\n\t pm.sendRequest({\n\t     url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",\n\t     method: 'POST',\n\t     header: {\n\t         'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n\t         'Content-Type': 'application/json'\n\t     },\n\t     body: {\n\t         mode: 'raw',\n\t         raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})\n\t     }\n\t }, function(err, res) {\n\t     if (err !== null) {\n\t         console.log(\"Login error: \" + err);\n\t     } else {\n\t         if (res.code === 201) {\n\t             pm.variables.set(\"xokapitoken-\" + mod, res.headers.get(\"X-Okapi-Token\"));\n\t         } else {\n\t             console.log(\"Login failed: \" + res.reason());\n\t         }\n\t     }\n\t });\n\t}\n}",
			"type": "string"
		},
		{
			"id": "5a3e13f1-f037-47cc-8b71-65bc8963c3b8",
			"key": "compositeUserListObject.json",
			"value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"compositeUsers\": {\n      \"type\": \"array\",\n      \"id\": \"compositeUserList\",\n      \"items\": {\n        \"type\": \"object\",\n        \"$ref\": \"compositeUser.json\"\n      }\n    }\n  },\n  \"required\": [\n    \"compositeUsers\"\n  ],\n  \"additionalProperties\": false\n}",
			"type": "string"
		},
		{
			"id": "69df9dda-e666-4e75-a0d1-ebffe7fa43e7",
			"key": "createUserFunction",
			"value": "var createUser = function() {\n\tvar uuid = require('uuid');\n\n\tpm.variables.set('test_user_id', uuid.v4());\n\n\tlet token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));\n\n\tpm.sendRequest({\n\t    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",\n\t    method: 'POST',\n\t    header: {\n\t        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n\t        'X-Okapi-Token': token,\n\t        'Content-Type': 'application/json'\n\t    },\n\t    body: {\n\t        mode: 'raw',\n\t        raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), active: true})\n\t    }\n\t}, function(err, res) {\n\t    if (err !== null) {\n\t        console.log(\"user creation error: \" + err);\n\t    } else {\n\t        if (res.code === 201) {\n\t            pm.sendRequest({\n\t                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",\n\t                method: 'POST',\n\t                header: {\n\t                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n\t                    'X-Okapi-Token': token,\n\t                    'Content-Type': 'application/json'\n\t                },\n\t                body: {\n\t                    mode: 'raw',\n\t                    raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), password: 'test_user'})\n\t                }\n\t            }, function(err, res) {\n\t                if (err !== null) {\n\t                    console.log(\"Credential creation error: \" + err);\n\t                } else {\n\t                    if (res.code === 201) {\n\t                        pm.variables.set('test_user_credId', res.json().id);\n\t                        pm.sendRequest({\n\t                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",\n\t                            method: 'POST',\n\t                            header: {\n\t                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n\t                                'X-Okapi-Token': token,\n\t                                'Content-Type': 'application/json'\n\t                            },\n\t                            body: {\n\t                                mode: 'raw',\n\t                                raw : JSON.stringify({ userId: pm.variables.get('test_user_id'), permissions: []})\n\t                            }\n\t                        }, function(err, res) {\n\t                            if (err !== null) {\n\t                                console.log(\"permissions creation error: \" + err);\n\t                            } else {\n\t                                if (res.code === 201) {\n\t                                    pm.variables.set('test_user_permsId', res.json().id);\n\t                                    pm.sendRequest({\n\t                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",\n\t                                        method: 'POST',\n\t                                        header: {\n\t                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n\t                                            'Content-Type': 'application/json'\n\t                                        },\n\t                                        body: {\n\t                                            mode: 'raw',\n\t                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})\n\t                                        }\n\t                                    }, function(err, res) {\n\t                                        if (err !== null) {\n\t                                            console.log(\"Test user login error: \" + err);\n\t                                        } else {\n\t                                            if (res.code === 201) {\n\t                                                pm.variables.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));\n\t                                            } else {\n\t                                                console.log(\"Test user login failed: \" + res.reason());\n\t                                            }\n\t                                        }\n\t                                    });\n\t                                } else {\n\t                                    console.log(\"permissions creation failed: \" + res.reason());\n\t                                }\n\t                            }\n\t                        });\n\t                    } else {\n\t                        console.log(\"Auth creation failed: \" + res.reason());\n\t                    }\n\t                }\n\t            });\n\t        } else {\n\t            console.log(\"User creation failed: \" + res.reason());\n\t        }\n\t    }\n\t});\n};",
			"type": "string"
		},
		{
			"id": "56d89271-e8d1-4348-8de8-23a029dca3f1",
			"key": "cleanUpUserTestFunction",
			"value": "var cleanUpUserTest = function() {\n    eval(pm.variables.get(\"cleanUpVariablesFunction\"));\n\n    let token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));\n    \n    pm.sendRequest({\n        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.variables.get('test_user_id'),\n        method: 'DELETE',\n        header: {\n            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n            'X-Okapi-Token': token,\n            'Content-Type': 'application/json'\n        }\n    }, function(err, res) {\n        pm.test(\"user deleted\", function() {\n            pm.expect(res).to.have.status(204);\n            cleanUpVariables([\"test_user_id\", \"test_user_token\"]);\n\n            pm.sendRequest({\n                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.variables.get('test_user_credId'),\n                method: 'DELETE',\n                header: {\n                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n                    'X-Okapi-Token': token,\n                    'Content-Type': 'application/json'\n                }\n            }, function(err, res) {\n                pm.test(\"credentials deleted\", function() {\n                    pm.expect(res).to.have.status(204);\n                    cleanUpVariables([\"test_user_credId\"]);\n\n                    pm.sendRequest({\n                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.variables.get('test_user_permsId'),\n                        method: 'DELETE',\n                        header: {\n                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n                            'X-Okapi-Token': token,\n                            'Content-Type': 'application/json'\n                        }\n                    }, function(err, res) {\n                        pm.test(\"permissions deleted\", function() {\n                            pm.expect(res).to.have.status(204);\n                            cleanUpVariables([\"test_user_permsId\"]);\n                        });\n\n                    });\n                });\n            });\n        });\n    });\n};",
			"type": "string"
		},
		{
			"id": "d2aae47d-c3a7-4de3-9be7-109fe1691733",
			"key": "cleanUpVariablesFunction",
			"value": "var cleanUpVariables = function(vars) {\n\tfor (let i = 0; i < vars.length; i++) {\n\t\tpm.variables.unset(vars[i]);\n\t\tpm.expect(pm.variables.get(vars[i]), vars[i] + \" exists\").to.not.exist;\n\t}\n}",
			"type": "string"
		},
		{
			"id": "31977ad8-bc4f-4075-acfd-b4b1473e33bf",
			"key": "createUserWithPermsFunction",
			"value": "var createUserWithPerms = function(perms) {\n\tvar uuid = require('uuid');\n\n\tpm.variables.set('test_user_id', uuid.v4());\n\n\tlet token = pm.variables.get(\"xokapitoken-\" + pm.variables.get(\"module\"));\n\n\tpm.sendRequest({\n\t    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",\n\t    method: 'POST',\n\t    header: {\n\t        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n\t        'X-Okapi-Token': token,\n\t        'Content-Type': 'application/json'\n\t    },\n\t    body: {\n\t        mode: 'raw',\n\t        raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), active: true})\n\t    }\n\t}, function(err, res) {\n\t    if (err !== null) {\n\t        console.log(\"user creation error: \" + err);\n\t    } else {\n\t        if (res.code === 201) {\n\t            pm.sendRequest({\n\t                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",\n\t                method: 'POST',\n\t                header: {\n\t                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n\t                    'X-Okapi-Token': token,\n\t                    'Content-Type': 'application/json'\n\t                },\n\t                body: {\n\t                    mode: 'raw',\n\t                    raw : JSON.stringify({ username: 'test_user', id: pm.variables.get('test_user_id'), password: 'test_user'})\n\t                }\n\t            }, function(err, res) {\n\t                if (err !== null) {\n\t                    console.log(\"Credential creation error: \" + err);\n\t                } else {\n\t                    if (res.code === 201) {\n\t                        pm.variables.set('test_user_credId', res.json().id);\n\t                        pm.sendRequest({\n\t                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",\n\t                            method: 'POST',\n\t                            header: {\n\t                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),\n\t                                'X-Okapi-Token': token,\n\t                                'Content-Type': 'application/json'\n\t                            },\n\t                            body: {\n\t                                mode: 'raw',\n\t                                raw : JSON.stringify({ userId: pm.variables.get('test_user_id'), permissions: perms})\n\t                            }\n\t                        }, function(err, res) {\n\t                            if (err !== null) {\n\t                                console.log(\"permissions creation error: \" + err);\n\t                            } else {\n\t                                if (res.code === 201) {\n\t                                    pm.variables.set('test_user_permsId', res.json().id);\n\t                                } else {\n\t                                    console.log(\"permissions creation failed: \" + res.reason());\n\t                                }\n\t                            }\n\t                        });\n\t                    } else {\n\t                        console.log(\"Auth creation failed: \" + res.reason());\n\t                    }\n\t                }\n\t            });\n\t        } else {\n\t            console.log(\"User creation failed: \" + res.reason());\n\t        }\n\t    }\n\t});\n};\n",
			"type": "string"
		}
	]
}
