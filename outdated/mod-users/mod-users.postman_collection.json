{
	"info": {
		"_postman_id": "9a57f0c5-930a-4a78-9c93-7ef4a582e8b6",
		"name": "mod-users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_error_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{schema_error}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{schema_error}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_errors_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{schema_errors}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{schema_errors}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "metadata.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "105282cc-4e6f-48e8-982e-d7134cac2578",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_metadata_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{schema_metadata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{schema_metadata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "resultInfo.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d1f6195-4630-415d-9eed-56d38033d5aa",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_resultInfo_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{schema_resultInfo}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{schema_resultInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "tags.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "779af7ea-1e68-4a3f-84f2-d26fa3f39b90",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_tags_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{schema_tags}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{schema_tags}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "parameters.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad455e26-7dc6-4d08-a023-8910e4368b53",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_parameters_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{schema_parameters}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{schema_parameters}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addresstype.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0403a5ee-5278-4de2-8071-449f0138b3ec",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_addresstype_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{mod_name}}/{{schema_addresstype}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{mod_name}}",
								"{{schema_addresstype}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addresstypeCollection.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "956effde-7569-4722-9955-308630b087ff",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_addresstypeCollection_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{mod_name}}/{{schema_addresstypeCollection}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{mod_name}}",
								"{{schema_addresstypeCollection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "proxyfor.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5135711b-4235-464c-8bbe-d2f4eec7e2b4",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_proxyfor_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{mod_name}}/{{schema_proxyfor}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{mod_name}}",
								"{{schema_proxyfor}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "proxyforCollection.json Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a5e3c62-9ec5-49b7-be97-8906a9cbf9b9",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_proxyforCollection_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{mod_name}}/{{schema_proxyforCollection}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{mod_name}}",
								"{{schema_proxyforCollection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "userdata.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c5dcbea-474a-484f-bcbc-e2e7a02fc5c5",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_userdata_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{mod_name}}/{{schema_userdata}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{mod_name}}",
								"{{schema_userdata}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "userdataCollection.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49a442fd-5ff6-4c8e-9c9c-3ac6891ceac7",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_userdataCollection_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{mod_name}}/{{schema_userdataCollection}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{mod_name}}",
								"{{schema_userdataCollection}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "usergroups.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b213ce4-b91d-44ef-80ed-016ede0d6957",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_usergroups_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{mod_name}}/{{schema_usergroups}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{mod_name}}",
								"{{schema_usergroups}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "usergroup.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d58bf639-34cc-4058-840a-2dbf37c8c1d8",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_usergroup_content\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{schema_path}}/{{mod_name}}/{{schema_usergroup}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{schema_path}}",
								"{{mod_name}}",
								"{{schema_usergroup}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "/groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01e46ecd-8e7b-4c4f-9ecd-59d946f60c97",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.environment.set(\"usergrupsnumber\",pm.response.json().totalRecords);",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(pm.environment.get(\"schema_usergroup_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_usergroups_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - limit -valid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2706c6fa-b786-4c84-9498-a56e20fc480c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"let data1 = JSON.parse(responseBody);",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(pm.environment.get(\"schema_usergroup_content\")));",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.environment.get(\"schema_usergroups_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?limit=30",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "limit",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - limit - negative value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3053e9ee-516c-40b1-9c6a-b4892c471883",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - limit - exeeds max value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3053e9ee-516c-40b1-9c6a-b4892c471883",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - offset - valid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2ed72c4-22b2-401c-a214-cb6b47e5b4cf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain number records defined by offset\", function () {",
									"    if(pm.environment.get(\"usergrupsnumber\")>0){",
									"        pm.expect(pm.response.json().usergroups.length).to.equal(1);",
									"    }",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(pm.environment.get(\"schema_usergroup_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_usergroups_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "01e9d430-0dd3-42a1-b0e1-8cbc99e708e0",
								"type": "text/javascript",
								"exec": [
									"let originalNum = pm.environment.get(\"usergrupsnumber\");",
									"let offset= 0;",
									"",
									"if(originalNum >1){",
									"    offset = originalNum-1;",
									"}",
									"pm.variables.set(\"groupoffset\", offset);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?offset={{groupoffset}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "offset",
									"value": "{{groupoffset}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - offset - 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b00e040-e8d2-4add-8875-396070e6410a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain number records defined by offset\", function () {",
									"    if(pm.environment.get(\"usergrupsnumber\")>0){",
									"        pm.expect(pm.response.json().usergroups.length).to.equal(pm.environment.get(\"usergrupsnumber\"));",
									"    }",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(pm.environment.get(\"schema_usergroup_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_usergroups_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "01e9d430-0dd3-42a1-b0e1-8cbc99e708e0",
								"type": "text/javascript",
								"exec": [
									"let originalNum = pm.environment.get(\"usergrupsnumber\");",
									"let offset= 0;",
									"",
									"if(originalNum >1){",
									"    offset = originalNum-1;",
									"}",
									"pm.variables.set(\"groupoffset\", offset);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?offset=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - offset - negative value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44eb357e-28dd-4575-90f8-9461cd1b4257",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "01e9d430-0dd3-42a1-b0e1-8cbc99e708e0",
								"type": "text/javascript",
								"exec": [
									"let originalNum = pm.environment.get(\"usergrupsnumber\");",
									"let offset= 0;",
									"",
									"if(originalNum >1){",
									"    offset = originalNum-1;",
									"}",
									"pm.variables.set(\"groupoffset\", offset);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - offset - exeeds max limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44eb357e-28dd-4575-90f8-9461cd1b4257",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "01e9d430-0dd3-42a1-b0e1-8cbc99e708e0",
								"type": "text/javascript",
								"exec": [
									"let originalNum = pm.environment.get(\"usergrupsnumber\");",
									"let offset= 0;",
									"",
									"if(originalNum >1){",
									"    offset = originalNum-1;",
									"}",
									"pm.variables.set(\"groupoffset\", offset);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?offset=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "offset",
									"value": "2147483648"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eccaaf0-2e72-4ef2-b43f-8f935b6e8997",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.environment.set(\"newgroupid\", response.id);",
									"",
									"//",
									"pm.test(\"New group was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"     pm.expect(response.group).to.eql(\"fse testing librarian\");",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_usergroup_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"group\": \"fse testing librarian\",\r\n  \"desc\": \"basic test lib group\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - duplicate entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "565d9dd6-28f9-44c8-99fc-27853e559790",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"New group was created. Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"   });",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
									"    tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"Error message is correct\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal('Group exists');",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal('group');",
									"    pm.expect(pm.response.json().errors[0].parameters[0].value).to.equal('fse testing librarian');",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"group\": \"fse testing librarian\",\r\n  \"desc\": \"basic test lib group\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups/{{newgroupid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "609005d8-2094-44eb-bac6-20a876d44ddd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Group was successfully updated. Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"group\": \"fse testing librarian\",\r\n  \"desc\": \"main test lib group\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups/{{newgroupid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups",
								"{{newgroupid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - malformed json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a0e55cb-3ea9-4f31-9d16-eef69c00ac7f",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test(\"New group was not created. Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response must have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"group\": \"malformed test \",\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34324ef6-59e3-4650-9ae7-35b146d941cd",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Access denied. Status is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"group\": \"librarian\",\r\n  \"desc\": \"basic lib group\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups/{{newgroupid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf9a8d7e-fef0-4ed3-93fd-3bae1ab1173f",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"let groupId = pm.environment.get(\"newgroupid\");",
									"",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"    pm.expect(response.group).to.eql(\"fse testing librarian\");",
									"    pm.expect(response.id).to.eql(groupId);",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_usergroup_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"  // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"  // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups/{{newgroupid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups",
								"{{newgroupid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - query by group with wildcard",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3701ef8a-9323-4d11-ae9f-a558fb568096",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"let groupId = pm.environment.get(\"newgroupid\");",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"    pm.expect(pm.response.json().usergroups.length).to.be.above(0);",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(pm.environment.get(\"schema_usergroup_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_usergroups_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"  // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"  // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b658e941-2860-4ffd-842a-8104f7ca1270",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?query=(group=fse*)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "query",
									"value": "(group=fse*)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - query by group",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6527a2c5-9122-469c-ae53-f6133eae1d19",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"let groupId = pm.environment.get(\"newgroupid\");",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"    pm.expect(response.usergroups[0].group).to.eql(\"fse testing librarian\");",
									"    pm.expect(response.usergroups[0].id).to.eql(groupId);",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(pm.environment.get(\"schema_usergroup_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_usergroups_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"  // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"  // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?query=(group=fse testing librarian)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "query",
									"value": "(group=fse testing librarian)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - query by group and desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65f15cd6-09b9-436c-a8d6-ebf90e3c440a",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"let groupId = pm.environment.get(\"newgroupid\");",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"    pm.expect(response.usergroups[0].group).to.eql(\"fse testing librarian\");",
									"    pm.expect(response.usergroups[0].id).to.eql(groupId);",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(pm.environment.get(\"schema_usergroup_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_usergroups_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "86e6fcdc-8458-4d14-8559-d9c8bce64fcb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?query=(group=fse* and desc=main*)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "query",
									"value": "(group=fse* and desc=main*)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups - query by group id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65f15cd6-09b9-436c-a8d6-ebf90e3c440a",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"let groupId = pm.environment.get(\"newgroupid\");",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"    pm.expect(response.usergroups[0].group).to.eql(\"fse testing librarian\");",
									"    pm.expect(response.usergroups[0].id).to.eql(groupId);",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"usergroup.json\", JSON.parse(pm.environment.get(\"schema_usergroup_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_usergroups_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "86e6fcdc-8458-4d14-8559-d9c8bce64fcb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups?query=(group=fse* and desc=main*)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "query",
									"value": "(group=fse* and desc=main*)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups/{{newgroupid}} - missing tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94a50e99-9d9e-429e-ad05-1c6a3dceec2f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups/{{newgroupid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups",
								"{{newgroupid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups/{{newgroupid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0397790-9d25-434a-9660-294ff54727e0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups/{{newgroupid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups",
								"{{newgroupid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/groups/{{newgroupid}} -validate deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df6d9e3d-3588-4d64-ae3b-7f7b6e637bd3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups/{{newgroupid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"groups",
								"{{newgroupid}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bebb4996-f68e-47ca-a222-8a17842c0a2c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bf914e35-582e-4ad4-8efa-5109d949796b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "addresstypes",
			"item": [
				{
					"name": "/addresstypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5944772d-1e3d-4ca7-b6b4-bf47773e2838",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"let data1 = JSON.parse(responseBody);",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"addresstype.json\", JSON.parse(pm.variables.get(\"schema_addresstype_content\")));",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.environment.get(\"schema_addresstypeCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/addresstypes",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"addresstypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "/addresstypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "141a8ba7-e195-4646-b594-2cf02dca5c1e",
								"type": "text/javascript",
								"exec": [
									"let response = JSON.parse(responseBody);",
									"pm.environment.set(\"newaddresstypeid\", response.id);",
									"",
									"pm.test(\"New address type was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"     pm.expect(response.addressType).to.eql(\"primary fse testing\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_addresstype_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"addressType\": \"primary fse testing\",\r\n  \"desc\": \"primary fse testing address\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/addresstypes",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"addresstypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "/addresstypes/{{newaddresstypeid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80aa6920-883f-44a7-8ade-d7a497a027ce",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Address type was successfully updated. Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"addressType\": \"primary fse testing\",\r\n  \"desc\": \"main fse testing address\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/addresstypes/{{newaddresstypeid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"addresstypes",
								"{{newaddresstypeid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/addresstypes - malformed json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a948632-3694-45d8-a826-52169a71dd70",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test(\"New address type was not created. Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response must have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"addressType\": \"malformed address\",\r\n\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/addresstypes",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"addresstypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "/addresstypes - access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40a20c7a-4045-40a0-8aae-d34923f84d2d",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Access denied. Status is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"addressType\": \"primary fse testing\",\r\n  \"desc\": \"primary fse testing address\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/addresstypes",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"addresstypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "/addresstypes/{{newaddresstypeid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca953592-6a50-4726-a2a5-f82abf5412b6",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"var addressTypeId = pm.environment.get(\"newaddresstypeid\");",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    ",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"     ",
									"     pm.expect(response.desc).to.eql(\"main fse testing address\");",
									"     pm.expect(response.id).to.eql(addressTypeId);",
									"    ",
									"     ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_addresstype_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/addresstypes/{{newaddresstypeid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"addresstypes",
								"{{newaddresstypeid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/addresstypes/{{newaddresstypeid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f93a0a01-f3f0-40c7-a0be-a0531a5df4d4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/addresstypes/{{newaddresstypeid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"addresstypes",
								"{{newaddresstypeid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/addresstypes/{{newaddresstypeid}} - verify deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af9d596d-9301-4a9c-860b-ad1d447fc799",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/addresstypes/{{newaddresstypeid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"addresstypes",
								"{{newaddresstypeid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "proxiesfor",
			"item": [
				{
					"name": "/proxiesfor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00023ee2-82e2-465a-aecd-3f20785f32d3",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"proxyforid\", response.id);",
									"",
									"//",
									"pm.test(\"New proxy was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"schema_proxyfor_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"proxieuser1\",\r\n  \"proxyUserId\": \"proxieuser2\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/proxiesfor",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"proxiesfor"
							]
						}
					},
					"response": []
				},
				{
					"name": "/proxiesfor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c542555-9caa-4abe-a187-5c9b7c108ba0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"let data1 = JSON.parse(responseBody);",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"proxyfor.json\", JSON.parse(pm.environment.get(\"schema_proxyfor_content\")));",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.environment.get(\"schema_proxyforCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/proxiesfor",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"proxiesfor"
							]
						}
					},
					"response": []
				},
				{
					"name": "/proxiesfor/{{proxyforid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b41e4586-8b6c-449c-bd5b-b85ef62ba5f2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.environment.get(\"schema_proxyfor_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									" });",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/proxiesfor/{{proxyforid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"proxiesfor",
								"{{proxyforid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/proxiesfor/{{proxyforid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6f12c72-7e73-44c9-90b6-3550d216d476",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Proxy was successfully updated. Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"proxieuser11\",\r\n  \"proxyUserId\": \"proxieuser22\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/proxiesfor/{{proxyforid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"proxiesfor",
								"{{proxyforid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/proxiesfor- malformed json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99ce9a69-8dc9-4216-97cc-6131d50b3c50",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test(\"New proxy was not created. Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response must have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"proxieuser1\"\r\n  \"proxyUserId\": \"proxieuser2\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/proxiesfor",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"proxiesfor"
							]
						}
					},
					"response": []
				},
				{
					"name": "/proxiesfor - access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e2b3fa3-7cb2-4c71-bf98-ed450f73dd72",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Access denied. Status is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//verify header",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"proxieuser1\",\r\n  \"proxyUserId\": \"proxieuser2\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/proxiesfor",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"proxiesfor"
							]
						}
					},
					"response": []
				},
				{
					"name": "/proxiesfor/{{proxyforid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccb3a5ee-a324-485b-bbc8-5d22eee333e2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/proxiesfor/{{proxyforid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"proxiesfor",
								"{{proxyforid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/proxiesfor/{{proxyforid}} -validate deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5bb8a02-fd40-423f-bfed-63ad2ea488e9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									" });",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/proxiesfor/{{proxyforid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"proxiesfor",
								"{{proxyforid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f48b939-9888-4e50-aa7f-4921577b55da",
								"type": "text/javascript",
								"exec": [
									"",
									"let testUserId=pm.response.json().users[0].id;",
									"pm.environment.set(\"testuserid\", testUserId);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"    pm.expect(pm.response.json().totalRecords).to.not.equal(0);",
									"     ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"tags.schema\", JSON.parse(pm.variables.get(\"schema_tags_content\")));",
									"    tv4.addSchema(\"resultInfo.schema\", JSON.parse(pm.variables.get(\"schema_resultInfo_content\")));",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    tv4.addSchema(\"userdata.json\", JSON.parse(pm.environment.get(\"schema_userdata_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_userdataCollection_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eef0e512-f998-4d91-a0ec-0beac953cf96",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newuserid\", response.id);",
									"",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"    pm.expect(pm.response.json().totalRecords).to.not.equal(0)",
									"     ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"tags.schema\", JSON.parse(pm.variables.get(\"schema_tags_content\")));",
									"    tv4.addSchema(\"metadata.schema\", JSON.parse(pm.variables.get(\"schema_metadata_content\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"schema_userdata_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9954452-6b48-4f1c-8a90-625a1012b006",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get('protocol') + '://' + pm.environment.get('url') + ':' + pm.environment.get('okapiport') + '/groups' ,",
									"    method: 'GET',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"    }",
									"}, function (err, res) {",
									"    if(res.json().usergroups.length >0){",
									"     pm.environment.set('newusergroupid', res.json().usergroups[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"posttestuser\",\r\n  \"id\": \"{{$guid}}\",\r\n  \"active\": true,\r\n  \"type\": \"patron\",\r\n  \"patronGroup\":\"{{newusergroupid}}\",\r\n  \"personal\": {\r\n    \"lastName\": \"user\",\r\n    \"firstName\": \"posttest\",\r\n    \"email\": \"up@biblioteka.pl\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{{newuserid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a690a7c5-6a14-4d49-908a-1ff27ce653c9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response contains correct record\", function () {",
									"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"newuserid\"));",
									"});",
									"",
									"var schema ={",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"title\": \"User Schema\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"username\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"id\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"externalSystemId\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"barcode\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"active\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"patronGroup\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"meta\": {",
									"      \"type\": \"object\"",
									"    },",
									"    \"proxyFor\": {",
									"      \"description\" : \"Deprecated\",",
									"      \"type\": \"array\",",
									"      \"items\": {",
									"      \"type\": \"string\"",
									"      }",
									"    },",
									"    \"personal\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"lastName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"firstName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"middleName\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"email\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"phone\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"mobilePhone\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"dateOfBirth\": {",
									"          \"type\": \"string\",",
									"          \"format\": \"date-time\"",
									"        },",
									"        \"addresses\": {",
									"          \"type\": \"array\",",
									"          \"minItems\": 0,",
									"          \"items\": {",
									"            \"type\": \"object\",",
									"            \"properties\": {",
									"              \"id\": {",
									"                \"type\": \"string\"",
									"              },",
									"              \"countryId\": {",
									"                \"type\": \"string\"",
									"              },",
									"              \"addressLine1\": {",
									"                \"type\": \"string\"",
									"              },",
									"              \"addressLine2\": {",
									"                \"type\": \"string\"",
									"              },",
									"              \"city\": {",
									"                \"type\": \"string\"",
									"              },",
									"              \"region\": {",
									"                \"type\": \"string\"",
									"              },",
									"              \"postalCode\": {",
									"                \"type\": \"string\"",
									"              },",
									"              \"addressTypeId\": {",
									"                \"type\": \"string\"",
									"              },",
									"              \"primaryAddress\": {",
									"                \"type\": \"boolean\"",
									"              }",
									"            },",
									"            \"additionalProperties\": false",
									"          }",
									"        },",
									"        \"preferredContactTypeId\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"additionalProperties\": false,",
									"      \"required\": [",
									"        \"lastName\"",
									"      ]",
									"    },",
									"    \"enrollmentDate\": {",
									"      \"type\": \"string\",",
									"      \"format\": \"date-time\"",
									"    },",
									"    \"expirationDate\": {",
									"      \"type\": \"string\",",
									"      \"format\": \"date-time\"",
									"    },",
									"    \"createdDate\": {",
									"      \"type\": \"string\",",
									"      \"format\": \"date-time\"",
									"    },",
									"    \"updatedDate\": {",
									"      \"type\": \"string\",",
									"      \"format\": \"date-time\"",
									"    },",
									"    \"metadata\" : {",
									"      \"type\" : \"object\",",
									"      \"$ref\" : \"../metadata.schema\"",
									"    }",
									"  },",
									"  \"additionalProperties\": false,",
									"  \"required\": [",
									"    \"id\"",
									"  ]",
									"};",
									"var data1 = JSON.parse(responseBody);",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(data1, schema)).to.be.true;",
									" ",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{newuserid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"{{newuserid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{{newuserid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de49ce39-ce77-4255-91e3-7982de241e87",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "659c91c9-8e63-4dfe-80cb-baecae5cb56b",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get('protocol') + '://' + pm.environment.get('url') + ':' + pm.environment.get('okapiport') + '/groups' ,",
									"    method: 'GET',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"    }",
									"}, function (err, res) {",
									"    if(res.json().usergroups.length >0){",
									"     pm.environment.set('newusergroupid', res.json().usergroups[0].id)",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"posttestuser\",\r\n  \"id\": \"{{newuserid}}\",\r\n  \"active\": true,\r\n  \"type\": \"patron\",\r\n   \"patronGroup\":\"{{newusergroupid}}\"\r\n },\r\n  \"personal\": {\r\n    \"lastName\": \"user\",\r\n    \"firstName\": \"PUTtest\",\r\n    \"email\": \"up@biblioteka.pl\",\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{newuserid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"{{newuserid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/{{newuserid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f130e31e-ffd9-4951-8612-fbac62ac9d64",
								"type": "text/javascript",
								"exec": [
									"//this actually should be 404 status",
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{newuserid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"{{newuserid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/3ae9bc25-e65b-4bb7-875a-3d440a24309a (non-existent user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4300850-b836-4003-ba91-e345eca7c9a4",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"          pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Not found\");",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/3ae9bc25-e65b-4bb7-875a-3d440a24309a",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"3ae9bc25-e65b-4bb7-875a-3d440a24309a"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users/3ae9bc25-e65b-4bb7-875a-3d440a24309a (non-existent user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b159c9a5-710a-4d66-89d3-9fdf88af9a20",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-user-id\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/3ae9bc25-e65b-4bb7-875a-3d440a24309a",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users",
								"3ae9bc25-e65b-4bb7-875a-3d440a24309a"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users - access denied",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0ff8e26-8e93-44ca-96b5-d828f2f6e963",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Access denied. Status is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"posttestuser\",\r\n  \"id\": \"1123aaa0721bbb0804ccc\",\r\n  \"active\": true,\r\n  \"type\": \"patron\",\r\n   \"patronGroup\":\"{{newusergroupid}}\"\r\n },\r\n  \"personal\": {\r\n    \"lastName\": \"user\",\r\n    \"firstName\": \"posttest\",\r\n    \"email\": \"up@biblioteka.pl\",\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users - missing required field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "608bb210-3a43-4118-8ce4-f909a37b2c1d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Validation error. Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"var data1 = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"schema_parameters_content\")));",
									"    tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"schema_error_content\")));",
									"    pm.expect(tv4.validate(data1, JSON.parse(pm.environment.get(\"schema_errors_content\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"pm.test(\"Error message is correct\", function () {",
									"    pm.expect(pm.response.json().errors[0].message).to.equal('may not be null');",
									"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.equal('id');",
									"    pm.expect(pm.response.json().errors[0].parameters[0].value).to.equal('null');",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"posttestuser\",\r\n  \"active\": true,\r\n  \"type\": \"patron\",\r\n   \"patronGroup\":\"{{newusergroupid}}\"\r\n },\r\n  \"personal\": {\r\n    \"lastName\": \"user\",\r\n    \"firstName\": \"posttest\",\r\n    \"email\": \"up@biblioteka.pl\",\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "/users - malformed json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e1c42fb-b723-4c94-bfce-06b3b7988241",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"New group was not created. Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response must have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"posttestuser\"\r\n  \"id\": \"1123aaa0721bbb0804ccc\",\r\n  \"active\": true,\r\n  \"type\": \"patron\",\r\n   \"patronGroup\":\"{{newusergroupid}}\"\r\n },\r\n  \"personal\": {\r\n    \"lastName\": \"user\",\r\n    \"firstName\": \"posttest\",\r\n    \"email\": \"up@biblioteka.pl\",\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c6c33acb-b9bc-4946-9692-b6273047f59f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a6a71463-be17-49e6-8caa-dc6ba5d39b0a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b90b1d9c-0141-44f7-b1a4-e26989278e35",
			"key": "mod_name",
			"value": "mod-users",
			"type": "string"
		},
		{
			"id": "e2992000-8e39-4f73-a814-e655a674e63e",
			"key": "mod_version",
			"value": "v14.2.0",
			"type": "string"
		},
		{
			"id": "9862b394-b4b0-4552-802d-bfa13ce0fcf6",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "c9fdd051-00f2-4f62-8437-11ecfef5ea70",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "7b12dac3-a1b0-4844-bcf0-f9f4da522b43",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "8b6763fe-07fa-4808-8a32-f0c18d942d39",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "33a7dee5-930b-477b-a6bd-98aaae341c8a",
			"key": "schema_metadata",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "9acb0baf-37d0-4a65-8b63-7cf0599972a2",
			"key": "schema_resultInfo",
			"value": "resultInfo.schema",
			"type": "string"
		},
		{
			"id": "f52c8ca8-a384-4514-a73f-0b556dbb6cb0",
			"key": "schema_tags",
			"value": "tags.schema",
			"type": "string"
		},
		{
			"id": "02c186a5-f7b6-48d6-8190-57cd9fe29e26",
			"key": "schema_addresstype",
			"value": "addresstype.json",
			"type": "string"
		},
		{
			"id": "1e1981e7-811c-4ac7-b7e6-00cb9604458b",
			"key": "schema_addresstypeCollection",
			"value": "addresstypeCollection.json",
			"type": "string"
		},
		{
			"id": "34aebbf2-cabf-4aa0-8ba2-e315bc63aaad",
			"key": "schema_proxyfor",
			"value": "proxyfor.json",
			"type": "string"
		},
		{
			"id": "ea38c3cf-5c49-4957-ac0a-5e96070e4a78",
			"key": "schema_proxyforCollection",
			"value": "proxyforCollection.json",
			"type": "string"
		},
		{
			"id": "cc2049b9-07ce-48e6-b2d4-0072947ed098",
			"key": "schema_userdata",
			"value": "userdata.json",
			"type": "string"
		},
		{
			"id": "4a9f706c-2875-4178-ae73-6d9ba5ec7a98",
			"key": "schema_userdataCollection",
			"value": "userdataCollection.json",
			"type": "string"
		},
		{
			"id": "d321179d-d873-4e02-a149-5f9474797cee",
			"key": "schema_usergroup",
			"value": "usergroup.json",
			"type": "string"
		},
		{
			"id": "b6a667bb-a838-4ae5-ac7b-2b681ed8c1cc",
			"key": "schema_usergroups",
			"value": "usergroups.json",
			"type": "string"
		},
		{
			"id": "9bfce8de-c6a1-47ec-bd51-3e7874999cb4",
			"key": "schema_path",
			"value": "raml/raml0.8/schemas",
			"type": "string"
		}
	]
}