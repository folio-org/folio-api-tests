{
	"info": {
		"_postman_id": "f42f651c-4583-4579-81e8-2cc393cc2191",
		"name": "shared-tenant",
		"description": "Test the shared /tenant endpoint used by some modules. The /tenant implementation is in RMB, so we will use mod-users to test it. For now, we run this test along with other OKAPI tests.\n\nNote: \n1, to access mod-users directly, a new environment variable named \"mod_url\" is introduced to point to shared module ALB address. \n2, for some reason, when test against devqa or devqa-tmp, both Postman runner and Newman hang on two requests for a long time (~7 minutes): 1 /_/tenant POST upgrade to same version; 2 /_/DELETE. Those exact same requests can finish pretty quick when use curl or Chrome Advanced Rest Client plugin.\n3, the test does NOT work on Vagrant box even after open the mod-users port.\n\nBTW following collection variables are defined:\n1, schema_errors: errors.schema (Schema name)\n2, schema_error: error.schema (Schema name)\n3, schema_parameters: parameters.schema (Schema name)\n4, schema_loc: https://raw.githubusercontent.com/folio-org (Schema location. Use master branch for now)\n5, test_mod: mod-users (Use which module to test tenant API, aka mod_url context. Need to set it empty if mod-users module is deployed without /mod-users context)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get errors.schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f708b061-026b-44d6-92ba-dff26a1b6a94",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"schema_errors_content\", responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_errors}}",
					"host": [
						"{{schema_loc}}"
					],
					"path": [
						"raml",
						"{{schema_commit}}",
						"schemas",
						"{{schema_errors}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get error.schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e952041-5ba6-4602-8b63-0549e94a6a4f",
						"exec": [
							"pm.test(\"GET schema_error OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"GET schema_error has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"schema_error_content\", responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_error}}",
					"host": [
						"{{schema_loc}}"
					],
					"path": [
						"raml",
						"{{schema_commit}}",
						"schemas",
						"{{schema_error}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get parameters.schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad455e26-7dc6-4d08-a023-8910e4368b53",
						"exec": [
							"pm.test(\"GET schema_parameters OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"GET schema_parameters has JSON body\", function () {",
							"    pm.response.to.have.jsonBody();",
							"});",
							"",
							"pm.environment.set(\"schema_parameters_content\", responseBody);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_parameters}}",
					"host": [
						"{{schema_loc}}"
					],
					"path": [
						"raml",
						"{{schema_commit}}",
						"schemas",
						"{{schema_parameters}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3e8e8fd-3a94-45d2-92ac-b49a2b254b58",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"login OK\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// set a temp env varialbe, and remove it in the last test",
							"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"authn",
						"login"
					]
				},
				"description": "Set okapi-token header to be used by following tests."
			},
			"response": []
		},
		{
			"name": "create a test tenant",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eb0353d8-9ea1-41b5-8f5f-5a54f45c67ee",
						"type": "text/javascript",
						"exec": [
							"// this test tenant will be removed in the last test",
							"pm.test(\"Create test tenant OK\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.have.jsonBody();",
							"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"test_tenant_id\"));",
							"});",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d27d5f84-4f52-478f-a9ad-c1de1f2f7d01",
						"type": "text/javascript",
						"exec": [
							"pm.environment.set(\"test_tenant_id\", \"fst_\" + Math.floor(Math.random() * 1000));"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n   \"id\": \"{{test_tenant_id}}\",\r\n   \"name\": \"Test tenant for /_/tenant API\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"_",
						"proxy",
						"tenants"
					]
				}
			},
			"response": []
		},
		{
			"name": "/_/tenant GET return false",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4cb23dc-4dd5-4be5-8b69-3991c015efc1",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has body\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"",
							"pm.test(\"Response body is false\", function () {",
							"  pm.expect(pm.response.text()).to.include(\"false\");",
							"});",
							"",
							"console.log(pm.response.text());",
							"",
							"pm.test(\"Reponse header Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Reponse header Content-Type is text/plain\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"text/plain\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{test_tenant_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{mod_url}}/{{test_mod}}/_/tenant",
					"host": [
						"{{mod_url}}"
					],
					"path": [
						"{{test_mod}}",
						"_",
						"tenant"
					]
				}
			},
			"response": []
		},
		{
			"name": "/_/tenant DELETE non-existing",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e79800a1-5dfc-4733-b1f5-56ccd3ffaa16",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Delete non-existing tenant should return 404 or 400 (500 now)\", function () {",
							"      pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{test_tenant_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{mod_url}}/{{test_mod}}/_/tenant",
					"host": [
						"{{mod_url}}"
					],
					"path": [
						"{{test_mod}}",
						"_",
						"tenant"
					]
				}
			},
			"response": []
		},
		{
			"name": "/_/tenant POST bad content",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "78ce8a07-a4d5-4d7b-965b-45ddda1770c0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should be 400 for bad content\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{test_tenant_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{$guid}}"
				},
				"url": {
					"raw": "{{mod_url}}/{{test_mod}}/_/tenant",
					"host": [
						"{{mod_url}}"
					],
					"path": [
						"{{test_mod}}",
						"_",
						"tenant"
					]
				}
			},
			"response": []
		},
		{
			"name": "/_/tenant POST invalid content",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7cc7b3ae-4b86-44ef-aa82-be8aa4206e32",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should be 422 for invalid content\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"let jsonData = JSON.parse(responseBody);",
							"pm.test(\"Response error schema validation\", function() {",
							"    // register schema using both name and id if available",
							"    let schema_parameters = JSON.parse(pm.variables.get(\"schema_parameters_content\"));",
							"    tv4.addSchema(pm.variables.get(\"schema_parameters\"), schema_parameters);",
							"    if (schema_parameters.id) {",
							"        tv4.addSchema(schema_parameters.id, schema_parameters);",
							"    }",
							"    let schema_error = JSON.parse(pm.variables.get(\"schema_error_content\"));",
							"    tv4.addSchema(pm.variables.get(\"schema_error\"), schema_error);",
							"    if (schema_error.id) {",
							"        tv4.addSchema(schema_error.id, schema_error);",
							"    }",
							"    pm.expect(tv4.validate(jsonData, ",
							"        JSON.parse(pm.variables.get(\"schema_errors_content\")))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;    ",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{test_tenant_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bad_module_to\": \"ID9\",\r\n  \"bad_module_from\": \"ID8\"\r\n}"
				},
				"url": {
					"raw": "{{mod_url}}/{{test_mod}}/_/tenant",
					"host": [
						"{{mod_url}}"
					],
					"path": [
						"{{test_mod}}",
						"_",
						"tenant"
					]
				}
			},
			"response": []
		},
		{
			"name": "/_/tenant POST upgrade non-existing tenant",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "862e28ad-9447-484e-bf00-fb69bfc09ef8",
						"exec": [
							"pm.test(\"Response should be 201 to upgrade non-existing\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{test_tenant_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-okapi-url",
						"value": "{{protocol}}://{{url}}:{{okapiport}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"module_to\": \"ID19\",\r\n  \"module_from\": \"ID18\"\r\n}"
				},
				"url": {
					"raw": "{{mod_url}}/{{test_mod}}/_/tenant",
					"host": [
						"{{mod_url}}"
					],
					"path": [
						"{{test_mod}}",
						"_",
						"tenant"
					]
				}
			},
			"response": []
		},
		{
			"name": "/_/tenant POST OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "74582557-8ef2-49e7-a5f3-96636dbe7069",
						"exec": [
							"pm.test(\"Create should be OK for valid request\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b1c5ddbb-83fd-407b-a879-83539cc5d84e",
						"exec": [
							"pm.environment.set(\"test_mod_from_version\", \"100.1\");",
							"pm.environment.set(\"test_mod_to_version\", \"100.2\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{test_tenant_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-okapi-url",
						"value": "{{protocol}}://{{url}}:{{okapiport}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"module_to\": \"{{test_mod_from_version}}\"\r\n}"
				},
				"url": {
					"raw": "{{mod_url}}/{{test_mod}}/_/tenant",
					"host": [
						"{{mod_url}}"
					],
					"path": [
						"{{test_mod}}",
						"_",
						"tenant"
					]
				}
			},
			"response": []
		},
		{
			"name": "/_/tenant GET return true",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ea38573-479a-48e1-8df1-573e8b16cfca",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response OK\", function () {",
							"    pm.response.to.be.ok;",
							"});",
							"",
							"pm.test(\"Response has body\", function () {",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"pm.test(\"Response body is true\", function () {",
							"    pm.response.to.have.body(\"true\");",
							"});",
							"",
							"pm.test(\"Reponse header Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"pm.test(\"Reponse header Content-Type is text/plain\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"text/plain\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{test_tenant_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{mod_url}}/{{test_mod}}/_/tenant",
					"host": [
						"{{mod_url}}"
					],
					"path": [
						"{{test_mod}}",
						"_",
						"tenant"
					]
				}
			},
			"response": []
		},
		{
			"name": "/_/tenant POST upgrade",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "23334e8e-084b-4814-a012-7513ca30c981",
						"exec": [
							"pm.test(\"Response should be 201 if upgrade\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{test_tenant_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "x-okapi-url",
						"value": "{{protocol}}://{{url}}:{{okapiport}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"module_from\": \"{{test_mod_from_version}}\",\r\n  \"module_to\": \"{{test_mod_to_version}}\"\r\n}"
				},
				"url": {
					"raw": "{{mod_url}}/{{test_mod}}/_/tenant",
					"host": [
						"{{mod_url}}"
					],
					"path": [
						"{{test_mod}}",
						"_",
						"tenant"
					]
				}
			},
			"response": []
		},
		{
			"name": "/_/tenant DELETE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e8ebd24-ec13-4ec8-8c21-c78b769e1a88",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should be 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{test_tenant_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"module_to\": \"ID8\"\r\n}"
				},
				"url": {
					"raw": "{{mod_url}}/{{test_mod}}/_/tenant",
					"host": [
						"{{mod_url}}"
					],
					"path": [
						"{{test_mod}}",
						"_",
						"tenant"
					]
				}
			},
			"response": []
		},
		{
			"name": "cleanup: delete test tenant, and unset temp variables",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bc52932e-f26b-4545-95cb-47447ba1768b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Delete test tenant OK\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// unset temp variables",
							"pm.environment.unset(\"test_tenant_id\");",
							"pm.environment.unset(\"xokapitoken\");",
							"pm.environment.unset(\"schema_errors_content\");",
							"pm.environment.unset(\"schema_error_content\");",
							"pm.environment.unset(\"schema_parameters_content\");",
							"pm.environment.unset(\"test_mod_from_version\");",
							"pm.environment.unset(\"test_mod_to_version\");"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2b93488d-7b60-4f87-86b6-20c96825a2ca",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{test_tenant_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"_",
						"proxy",
						"tenants",
						"{{test_tenant_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "107c0426-85b7-4d74-ab7b-5d6e491a69af",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0bf728bb-98b4-4762-a4bf-a5e7108d3a7f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "485397b2-b6b1-4567-9e4f-50686eb5e3b5",
			"key": "schema_errors",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "e9a91e33-5d99-4de2-9b43-3401a3a4092e",
			"key": "schema_error",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "c9280f89-0cd2-4608-a1b2-a483ad6784d2",
			"key": "schema_parameters",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "b41ff758-efa1-41d8-b187-7e28b75e29dd",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "c057f2f6-54c4-4d44-9872-dedb1373bd67",
			"key": "test_mod",
			"value": "mod-users",
			"type": "string"
		},
		{
			"id": "33fddc06-3b2b-4e19-a3f3-50c01b2af67f",
			"key": "schema_commit",
			"value": "a22e8c5b7ab919c692407a0d674f53c317088aac",
			"type": "string"
		}
	]
}