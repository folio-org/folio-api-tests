{
	"info": {
		"_postman_id": "20457921-2c33-47e4-9de5-1ce00a0164cf",
		"name": "mod-orders",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2f09ebd-7769-4b2b-9268-bc4a11debe3e",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "01f3ff77-974c-46d1-98db-a8523a24480c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5b5e667c-c02b-4e10-965b-5aee6bacbdb4",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5fff1dda-42dc-429d-8b66-291b43c35ced",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-orders\", bodyHandler);",
											"utils.getModuleId(\"mod-finance-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"utils.getModuleId(\"mod-circulation\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1fb1281b-abe3-4e42-8a3f-94637fc5f7ef",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "02bdef49-d954-40f2-858d-84570abbaa36",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d1c9bfd8-39cd-464b-ad53-ca2b10a580c6",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07f54817-f815-47d1-bbf9-800c605933f8",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eadd30fd-7905-4fae-81c4-e8734f76b984",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3525a730-2c42-46d8-950e-41fca6a3e1d5",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15c30df6-60e9-410c-ade0-0bc62b6439e5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pmRq = {",
											"    url: utils.buildOkapiUrl('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),",
											"    method: \"GET\",",
											"    header: {\"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")}",
											"};",
											"pm.sendRequest(pmRq, (err, res) => {",
											"    let userPermissions = globals.testData.users.admin.permissions;",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4ee1eb3-abde-4d68-a793-42338a93926f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d88da0f1-56c6-46c5-92f4-8ee0fda40816",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f378ea3-899d-4de2-97f3-ca9b5ac9e7c1",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d63a6d1f-c8ca-4cea-96fc-0e3e6589ffa0",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order approve permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf65f1cf-c83a-4396-814f-092686802b03",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "583eb117-4dc3-4785-bf34-058dfe46a33f",
										"exec": [
											"pm.test(\"Permission is created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissionName\": \"orders.item.approve\",\r\n  \"displayName\": \"Permission to approve order\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order unopen permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a180a42-f569-470c-bf13-d28b5f57f62d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fae7fead-cca5-4990-b454-c001b440d631",
										"exec": [
											"pm.test(\"Permission is created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissionName\": \"orders.item.unopen\",\r\n  \"displayName\": \"Permission to unopen order\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54a23356-9970-447a-8ff0-d80597f82529",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85954a69-741d-4dab-a44f-a31a00ee3613",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check TENANT configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45380576-3310-4f0e-a43d-301261e6ba97",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testTenantConfigs = globals.testData.tenantConfig;",
											"let bodyTemplate = globals.testData.tenantConfig.bodyTemplate;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current tenant configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-tenant-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testTenantConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    console.log(configName + \": \" + value);",
											"    utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-tenant-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cbbe14f6-334a-4e4b-b92d-7d67dabb2026",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==TENANT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==TENANT"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "54b40cd9-31a8-43b4-a6a0-eef342183562",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd03cf20-24e8-47df-ae72-2c55de8d623a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load all schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f05412cd-b292-4126-8f48-92e04b78e742",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modOrdersId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be017a8a-12e4-4d74-ad70-72644b251d21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moduleName = 'mod-orders';",
											"",
											"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(response.text()).to.include(moduleName);",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];",
											"        pm.variables.set('modOrdersId', moduleId);",
											"    });",
											"});",
											"",
											"",
											"function buildPmRequest1(path) {",
											"    return {",
											"        url: utils.buildOkapiUrl(path),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
											"        }",
											"    };",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modOrdersId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9dca8af5-68d2-4477-9930-f903c37ffbdd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "92a3cbfc-8f78-45c3-86f1-cb417b6b68d3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare global data",
					"item": [
						{
							"name": "Institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0630959d-f63a-4124-ad42-589a36555ad5",
										"exec": [
											"pm.test(\"Record is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52110e78-2889-42d3-bebf-b2a58882cd24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \"Universitet\",\n    \"code\": \"TU\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Campus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63a3a8fb-fa52-4764-9e0d-cd91a34d7a44",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bdd444cf-0910-4054-97ba-5c67a70dd6d6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \" Campus\",\n    \"code\": \"TC\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"campuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Library",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79443c89-23b2-41fc-8e01-dfe516d9f4a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38febeb2-a22f-4437-a90f-c16042b90a02",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"name\": \"Library\",\n    \"code\": \"TL\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"libraries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Service point",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d86d216b-9db5-4e46-9f89-3d2c786a9d5d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b95d6c60-c729-4d1c-acd1-587106293ed2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"name\": \"Service point\",\n    \"code\": \"TSP\",\n    \"discoveryDisplayName\": \"Service point 1\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"service-points"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50e6a848-434c-44b4-931f-346145865a4d",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a530bf54-b0a7-4c92-a810-dd6d7ec7a0c1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"b32c5ce2-6738-42db-a291-2796b1c3c4c6\",\n    \"name\": \"Location 1\",\n    \"code\": \"LOC1\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84715a7c-61dd-476a-9097-057fe8671da8",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "772e660f-e4e2-43e6-9b75-8d72bf905a0b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n    \"name\": \"Location 2\",\n    \"code\": \"LOC2\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34deb980-005d-44e2-8c12-09e1e62dee86",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId3\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e017944c-a993-48cc-8fac-eb25837f5968",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"f17914b0-048a-42f2-b6c1-fc6f38edf157\",\n    \"name\": \"Location 3\",\n    \"code\": \"LOC3\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare vendors",
					"item": [
						{
							"name": "Post active vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "868b1a9e-8c79-4bac-a490-7897fba38a64",
										"exec": [
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "acc506a6-2bfb-465d-9f83-f40885ccb4f8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post inactive vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edc9f682-8d11-41e4-9885-d8bcdfe34505",
										"exec": [
											"pm.test(\"Storing inactive vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"inactiveVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d5d498b2-4d90-49ba-9838-f8a90ac8f86e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test inactive vendor\",\n\t\"code\": \"TIV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Inactive\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "Fiscal Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2712a5f-c49b-48c1-bd91-42acbf255da1",
										"exec": [
											"pm.test(\"Fiscal Year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63836e9a-6db6-473c-8e98-d85c34cf7fd6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\n  \"name\": \"TST-Fiscal Year 2020\",\n  \"code\": \"FY2020\",\n  \"description\": \"January 1 - December 30\",\n  \"periodStart\": \"2020-01-01T00:00:00Z\",\n  \"periodEnd\": \"2020-12-30T23:59:59Z\",\n  \"series\": \"FY\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Creates a Fiscal Year record which will be used to create a ledger record"
							},
							"response": []
						},
						{
							"name": "Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45b3cef4-113a-4bb7-a9aa-afbe28412ea5",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a227927d-a051-46d2-a636-b0f5f0f0d8c4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n\t\"code\": \"TST-LDG\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Test ledger\",\r\n    \"fiscalYearOneId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n    \"restrictEncumbrance\": false\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99013aaf-78eb-4b12-86cd-a564a2c5c937",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fundId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2c8c627-31e3-479f-af9d-42accc7c18dd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"TST-FND\",\r\n  \"description\": \"Fund for orders API Tests\",\r\n  \"externalAccountNo\": \"1111111111111111111111111\",\r\n  \"fundStatus\": \"Active\",\r\n  \"ledgerId\": \"{{ledgerId}}\",\r\n  \"name\": \"Fund for orders API Tests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c6eeea5-bbd0-4935-bb40-89b3c534bc58",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "78977f62-6148-40a0-ae7e-c18c3cee08fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Active\",\r\n  \"fundId\": \"{{fundId}}\",\r\n  \"name\": \"Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n  \"allocated\": 9999999\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fea6ca2f-38c3-4fdf-94ed-86ff895a0355",
										"exec": [
											"var id = pm.response.json().fund.id",
											"var code = pm.response.json().fund.code",
											"pm.environment.set(\"fundId-2\", id);",
											"pm.environment.set(\"fundCode-2\", code);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f18495d-5266-4a9e-bfd8-089f3a1d53f2",
										"exec": [
											"pm.environment.set(\"fundCode-2\", \"first\" + Math.floor(Math.random() * 999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"fundStatus\": \"Active\",\n        \"name\": \"{{fundCode-2}}\",\n        \"code\": \"{{fundCode-2}}\",\n        \"externalAccountNo\": \"tttt\",\n        \"ledgerId\": \"{{ledgerId}}\"\n    },\n    \"groupIds\": []\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f393fbdc-d8c4-4126-8d9a-ebca1cc767c5",
										"exec": [
											"var id = pm.response.json().id",
											"pm.environment.set(\"budgetId-2\", id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9376ede7-c3cb-4c9e-91dc-21f9e5a28bd5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fiscalYearId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\n    \"budgetStatus\": \"Active\",\n    \"allowableExpenditure\": 100,\n    \"allowableEncumbrance\": \"\",\n    \"allocated\": \"100\",\n    \"fundId\": \"{{fundId-2}}\",\n    \"name\": \"{{fundCode-2}}-FY2020\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare inventory types",
					"item": [
						{
							"name": "Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "200334b2-dd9b-4680-8921-f5e360ebd1b2",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"identifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f796-6d25-45fe-9902-84a033c0a23e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0010-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-identifierTypeName}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "ISBN Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ca26daa-f3fe-40f3-83e5-58354ce7cfba",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"isbnIdentifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "932736e4-384f-447f-9920-cb8fc9365456",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n  \"name\": \"ISBN\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates ISBN identifier type to be used for ISBN validation"
							},
							"response": []
						},
						{
							"name": "Instance Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bdfc080-70a1-4ee6-8787-ab815986cb28",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c21128f7-7e92-47b3-951e-85f92bffbef9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceTypeCode}}\",\r\n  \"name\": \"{{inventory-instanceTypeCode}}\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Type - zzz",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27a21e7b-8888-4d21-b3bd-3e8ffbdfd368",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "435fba9f-a286-4386-9957-f25644acb9d3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"30fffe0e-e985-4144-b2e2-1e8179bdb41f\",\r\n  \"code\": \"zzz\",\r\n  \"name\": \"unspecified\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c56c2429-268c-416f-bde6-fe8370e6ccda",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceStatusId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d55f43f4-5c84-4dee-8389-4178b35c15fa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceStatusCode}}\",\r\n  \"name\": \"{{inventory-instanceStatusCode}}\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses"
									]
								},
								"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Loan Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be91920c-dc0f-4398-a8f8-59fc6e950419",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"loanTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd3d007c-1bab-4b70-8341-0971ac4b4de2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-loanTypeName}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-types"
									]
								},
								"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Material Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "393829b1-625f-4949-b149-28963c2a397e",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"materialTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e79ce8f9-511f-494a-9e1b-04f66be02936",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\r\n  \"name\": \"materialTypeName\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Contributor name type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "525a46c0-b884-4a83-bfe4-e654736a472b",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"contributorNameTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ea022b5f-8311-4270-9a6c-28d01a77d046",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0005-1111-aaaa-6f7264657273\",\r\n  \"name\": \"contributorNameType\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"contributor-name-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Patron Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee381e0a-0cb4-4c91-9464-9150c6fc11d1",
										"exec": [
											"let user = globals.testData.users.regular.user;",
											"user.patronGroup",
											"pm.variables.set(\"userData\", JSON.stringify(user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22cce406-691f-49f5-b947-e080f611dd04",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"_patron_group_id\", pm.response.json().id)",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\" : \"Test Patron Group\",\n    \"desc\" : \"Test Patron Group Member\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "996fffee-3f8e-439b-936a-94f8269676b9",
										"exec": [
											"let user = globals.testData.users.regular.user;",
											"user.type = \"patron\",",
											"user.active = true,",
											"user.barcode = \"236964750970123\",",
											"user.patronGroup = pm.environment.get(\"_patron_group_id\");",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6448cb79-e08e-452a-a147-d00de2d9c90a",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "552b93f7-2c8e-41d4-a2f4-c375518cbe8f",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1618115e-c1a4-463f-beea-10b0301d33f7",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75513cdb-bc39-440f-826a-67f4911a8639",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ca88efa7-cf75-4598-b606-8d29caa1f9ad",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50164e9d-8e21-4b3c-8102-e597f134aab9",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da84e8fe-4898-47f2-b5dc-59b457c5cf21",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create restricted user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc6e374f-688d-4560-b2ce-d75789dd276d",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.restricted.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c39c0832-f1b1-4145-9c87-52119b97352e",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8d7e74a-30ef-4b4f-a430-9d866e488d33",
										"exec": [
											"pm.test(globals.testData.users.restricted.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "47a1a487-0ad6-423b-8341-2cacd8ec9a84",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.restricted.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4343a58f-1dcf-4338-99d3-0a8e2dcaa446",
										"exec": [
											"pm.test(globals.testData.users.restricted.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a645f02-0fe4-46a7-9b1c-74e428621015",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.restricted.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad9e81cd-b25b-490b-8a36-08358e2a7f65",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-restricted\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "748a6efb-178a-45f5-8d75-854e28789b1d",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.restricted.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5cd974a1-cf19-4d83-923c-8a5ab681a984",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "704c1a86-f763-4b35-a68d-badb1774ab3c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Empty Order",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d478f2c-8ed6-4594-8373-ad249596d7f4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15d4e6e5-02d8-43ee-af03-1907324558fa",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(0);",
											"    });",
											"",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"    ",
											"    pm.test(\"MODORDERS-145: Verify status to be Pending\", function(){",
											"        pm.expect(jsonData.workflowStatus).to.equal(\"Pending\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get created empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "91768b10-6fb5-47e2-8896-786122aac51a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d8fceb94-5450-4c44-bdf8-fe2702b369e2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});",
											"",
											"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
											"    let order = pm.response.json();",
											"    pm.expect(order.approved).to.be.false;",
											"    pm.expect(order.reEncumber).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Update order with new poNumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ce66bfe-bc75-4e88-a801-3c7c80280a64",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get Order and update poNumber only (MODORDERS-150)",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"    let order  = res.json();",
											"    let number = \"UPD\" + order.poNumber;",
											"    order.poNumber = number;",
											"    pm.variables.set(\"updatedNumber\", number);",
											"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4fb7b8a3-77b2-4237-87c5-570ac7da8084",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"        pm.test(\"Verify order updated with new PO number\", () => pm.expect(res.json().poNumber).to.equal(pm.variables.get(\"updatedNumber\")));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Get empty order by order id and validate totalItems",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44b5044a-a77a-4fea-abff-1f2ab9a29fc4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "441f82a5-f230-4f73-b87d-130044cab52d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d949a4f5-3547-44b2-82ee-53970a6472c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "94e1dcc9-6ad6-470f-bbbc-94be932da43a",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"description": "Verifies that an order can be created and deleted without order lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9fe88410-ff99-4e2a-9db8-d75a1a317863",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5efafa8c-7a4c-4f6d-b982-5f3e10d900e2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending Order",
					"item": [
						{
							"name": "Create Pending order",
							"item": [
								{
									"name": "Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "99be4067-ee83-4a23-a23c-a3eac0759478",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5ff822ed-0eff-42d7-aabb-34bc543483f0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"utils.verifyOrderCalculatedInfo(jsonData);",
													"",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"completeOrderId\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.globals.set(\"completeOrderPoNumber\",\"\\\"\"+jsonData.poNumber+\"\\\"\");",
													"    pm.expect(jsonData.notes).to.exist;",
													"    pm.expect(jsonData.vendor).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_listed_print_monograph}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Create order in Pending status without material types",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3b052c61-b406-4f4a-9edd-a77f65d86a31",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_po_line_without_material_type.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.compositePoLines[0].alerts = [];",
													"    order.compositePoLines[0].reportingCodes = [];",
													"    pm.globals.set(\"create_order_po_line_without_material_type\", JSON.stringify(order));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1fed2952-a174-41c2-b95c-057ef1953618",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    console.log(jsonData)",
													"    pm.globals.set(\"order_po_line_without_material_type\", jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{create_order_po_line_without_material_type}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update second line and delete",
							"item": [
								{
									"name": "Update second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f34d1f83-2fd6-477e-b27d-92047f214fe0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.purchaseOrderId = globals.completeOrderId;",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0401afba-14d3-42cf-93f1-1dde0eb90fbf",
												"exec": [
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Verifies that second line can be sussessfully updated"
									},
									"response": []
								},
								{
									"name": "Get second line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3f7c4c7e-bf9d-497b-ab1b-d05961eb5081",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d2bad3a2-7241-48cc-b8a8-0ad7cfc6aa5b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "442eaf2d-7843-4899-9639-e07f65cb063f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "32f82af0-2b3d-45d7-a4a3-1df3e4330180",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7d055fad-6837-4799-b194-ddb8e3c281fd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "039affd1-e385-44c0-b9a6-204671ef0ff9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"1 PO Line exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200 and verifies that only one line exists"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add empty line, update and delete",
							"item": [
								{
									"name": "Add empty line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e987a21-225c-4218-aa13-0a557bb332b5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.globals.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3e1f3017-38db-4dfe-9179-f47cc4c3c80f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/order-lines requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ee714ed0-21da-46d5-b27a-b1eec65b7017",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db9650d3-c28c-4230-bed0-d7e3dec81fac",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update empty line with complex content without location and createInventory=Instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "736d98bf-a417-47eb-964b-955183d0a7f8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.physical.createInventory = \"Instance\";",
													"    poline.locations = [];",
													"    poline.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"    poline.isPackage = false;",
													"    poline.instanceId = \"5bf370e0-8cca-4d9c-82e4-5170ab2a0a39\";",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dcb007ec-b903-4d8f-8692-db516e68fc47",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Status code is 204\", function() {",
													"    utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + pm.variables.get(\"poLineId\"), (err, res) => {",
													"        pm.test(\"Verify title updated with new instanceId\", () => pm.expect(res.json().titles[0].instanceId).to.equal(\"5bf370e0-8cca-4d9c-82e4-5170ab2a0a39\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Validates that empty line can be updated with complex content"
									},
									"response": []
								},
								{
									"name": "Get order and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "11372b14-bc49-425c-9dce-a748010c7345",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "20406c00-2089-4419-bff0-8e9efd15369b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "`GET /orders/composite-orders/<id>` request and validate content"
									},
									"response": []
								},
								{
									"name": "Delete last line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ae55ec9e-cf51-4d23-be01-e2a03dbbe863",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));",
													"",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c1184205-3f76-4bd7-8b6e-8a51f408ef97",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 204"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add line and update content",
							"item": [
								{
									"name": "Add line with complex content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6295a616-abda-4bf0-ba20-8f5e806f4b21",
												"exec": [
													"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"// make sure there is no id provided",
													"delete line.id;",
													"line.poLineNumber += \"1\";",
													"line.poLineDescription += \" another PO Line\";",
													"line.eresource.createInventory = \"Instance\";",
													"line.locations.pop();",
													"line.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0da37ffd-5ae4-425f-beba-d196c1689acf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_listed_print_monograph}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/id/lines/id requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b3f473af-5da4-424d-b755-cc21b9b3d439",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f3e99a22-dded-44be-936d-0a4007e5dd93",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "02aacbee-9b12-4077-9bd2-82ff46280c84",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "63f05a37-64c7-4631-aac5-a6b699d69a5b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update last line with empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2de3c151-125d-4fca-9100-82be0ddf02ee",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"pm.variables.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6653acf6-fb90-4623-9de1-cc76a80bef16",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get last line and verify empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ca9c3af2-70a5-4ddb-9c59-f35e1ee26951",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5ac1b249-f8d2-45a4-bc3a-14f829fb21ee",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30eb2b7f-2d3c-4e21-a1f9-dc923e2ba3e1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10da16a6-3325-447a-b7be-b4516a3193c2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": " Add expected receipt date to PO Line",
							"item": [
								{
									"name": "Update last line with expected receipt date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "808004ff-704d-4d7d-b4c1-b82f23424d03",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"// Using id of the last PO Line",
													"let poLineId = utils.getLastPoLineId();",
													"pm.variables.set(\"poLineId\", poLineId);",
													"utils.sendGetRequest(\"/orders/order-lines/\" + poLineId, (err, res) => {",
													"    // Get physical object",
													"    let compositePoLine = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"    let physical = compositePoLine.physical;",
													"    // make sure there is no id provided",
													"    delete physical.id;",
													"",
													"    // Get current date and add 1 month",
													"    let expectedReceiptDate = moment().utc().add(1, 'month').format();",
													"    pm.variables.set(\"expectedReceiptDate\", expectedReceiptDate);",
													"    physical.expectedReceiptDate = expectedReceiptDate;",
													"",
													"    let poLine  = res.json();",
													"    poLine.physical = physical;",
													"    poLine.locations = [compositePoLine.locations[0]];",
													"    pm.variables.set(\"updated_po_line\", JSON.stringify(poLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ada9b694-2169-48d3-b61b-97e80c315b32",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"// Get updated PO Line",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.variables.get(\"poLineId\"), function (err, res) {",
													"    pm.test(\"PO Line updated with expected receipt date\", function () {",
													"        let poLine  = res.json();",
													"        // Dates should be in the same format",
													"        let expectedReceiptDate = moment(pm.variables.get(\"expectedReceiptDate\")).utc().format();",
													"        let actualDate = moment(poLine.physical.expectedReceiptDate).utc().format();",
													"",
													"        pm.expect(actualDate).to.equal(expectedReceiptDate);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updated_po_line}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Gets content of last PO Line and updates it adding expected receipt date"
									},
									"response": []
								}
							],
							"description": "[MODORDERS-135](https://issues.folio.org/browse/MODORDERS-135)\n\nAdd an `expectedReceiptDate` field to the physical sub-object.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a7a105cd-06da-4d51-a49a-9afe3bc1699b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "82a0c404-1662-4bca-9c5e-56549a97dfbf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update order",
							"item": [
								{
									"name": "Update order leaving one line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f2d9bf98-5ef5-4e36-9126-49d5348975e0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"",
													"let completePolineIds = pm.globals.get(\"completePolineIds\") ? JSON.parse(pm.globals.get(\"completePolineIds\")) : [];",
													"utils.deleteTitlesByLineId(completePolineIds[completePolineIds.length - 2]);",
													"",
													"pm.variables.set(\"listUnitPriceUpdate\", 537.96);",
													"pm.variables.set(\"discountUpdate\", 19.84);",
													"pm.variables.set(\"discountTypeUpdate\", \"percentage\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 9);",
													"pm.variables.set(\"currencyUpdate\", \"BYN\");",
													"",
													"// Expected PO Line's total based on values above will be 3881.058624 and rounded to value below",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 3881.06);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7442993-b3f1-4601-b676-37faed48d9f5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // Retrieve order to verify updates",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        var order = {};",
													"         ",
													"        pm.test(\"Order retrieved after update\", function () {",
													"            pm.expect(err).to.equal(null);",
													"            pm.expect(res.code).to.eql(200);",
													"            pm.expect(res.json()).to.exist;",
													"            order = res.json();",
													"        });",
													"        ",
													"        pm.test(\"Order now has 1 PO Line\", function () {",
													"            utils.validatePoLines(order, 1);",
													"        });",
													"        ",
													"        pm.test(\"Validate poLineNumber after update\", function() {",
													"            utils.validatePoLinesNumber(order);",
													"        });",
													"        ",
													"        let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"",
													"        // The PO has one line so its total price equals to PO Line's total",
													"        utils.verifyOrderCalculatedInfo(order);",
													"",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            let cost = order.compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.currency).to.equal(pm.variables.get(\"currencyUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": \"268758test2\",\n  \"reEncumber\": false,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"id\": \"{{poLineId}}\",\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"{{currencyUpdate}}\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityElectronic\": 0,\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204\nReplaces content leaving only one line."
									},
									"response": []
								},
								{
									"name": "Update order changing POL cost again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d444d98a-516a-4471-8298-38238b27e7d7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"listUnitPriceUpdate\", 10.0);",
													"pm.variables.set(\"additionalCostUpdate\", 5.0);",
													"pm.variables.set(\"discountUpdate\", 15.01);",
													"pm.variables.set(\"discountTypeUpdate\", \"amount\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 21);",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));",
													"",
													"// Expected PO Line's total based on values above",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 199.99);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dd275152-759d-4917-89f0-86cd235ff245",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            pm.expect(res.json()).to.exist;",
													"            pm.expect(res.json().compositePoLines).to.have.lengthOf(1);",
													"",
													"            let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"            // The PO has one line so its total price equals to PO Line's total",
													"            utils.verifyOrderCalculatedInfo(res.json(), expectedTotalPrice);",
													"",
													"            let cost = res.json().compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.additionalCost).to.equal(pm.variables.get(\"additionalCostUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": {{completeOrderPoNumber}},\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 100.99,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"additionalCost\": {{additionalCostUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"USD\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update PO number",
							"item": [
								{
									"name": "Update order with new poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c232eb61-f92a-4f96-be9f-f2f7384d89a1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Order and update poNumber only",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"    let order  = res.json();",
													"    order.poNumber = \"newponumber\";",
													"    delete order.totalItems;",
													"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
													"});",
													"",
													"pm.globals.set(\"poNumber\", \"newponumber\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a4af9c64-de17-4fc6-b0ad-0f3c7920f93f",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedOrder}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order and validate poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a3139108-33ca-4b9f-b21d-95ef2b8bcfa3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e4a62c56-db00-4026-a543-63a256cef07c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"Validate poNumber\", function() {",
													"    pm.expect(jsonData.poNumber).to.equal(pm.globals.get(\"poNumber\"));",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "46a25031-d3fb-4a4a-bc19-0016b56ffe28",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "02d50c07-377d-4536-8517-77a95edfb185",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"approved\": false,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"{{poNumber}}\",\n    \"orderType\": \"One-Time\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 99.99,\n    \"totalItems\": 2,\n    \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n    \"workflowStatus\": \"Pending\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get order and validate line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "203ef91a-f8a8-4c39-84ce-17192530a6bf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "562b32b9-6e93-4078-b15b-7da8b955f8e7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"1 po line exists\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate poLineNumber\", function() {",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order summary leaving only PO number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "471cd986-2e2f-43f6-b37f-daffe9c5ae8e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b9397604-18ad-45e0-b170-c91ce3655584",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"poNumber\": \"{{poNumber}}\",\n\t\"orderType\": \"One-Time\",\n\t\"vendor\": \"{{activeVendorId}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "68757361-dfb2-494c-b2a4-574ce94e27b3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7e278194-f191-4483-8d73-e7453a568f5f",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate that response contains default fields on creating an empty order\", function () {",
													"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
													"    pm.expect(jsonData.compositePoLines).to.have.lengthOf(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "62c08237-17ac-4a78-ba28-540216cc7e00",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45fbf562-856d-4eea-b0f7-d2dd25ec5b51",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create another Pending order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "de4094cd-5fe7-439a-9d2c-947f3a80d104",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let order = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Pending\";",
											"    // Setting create inventory to None for PO Line with P/E Mix format",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.poNumber = \"1MIX1EL1PHYS1OTH\";",
											"",
											"    // add billTo an shipTo properties",
											"    utils.sendGetRequest(\"/configurations/entries?query=module==TENANT and code==\" + globals.testData.tenantConfig.bodyTemplate.code, (congifErr, configRes) => {",
											"        let addressConfId = configRes.json().configs[0].id;",
											"        order.billTo = addressConfId;",
											"        order.shipTo = addressConfId;",
											"        pm.variables.set(\"tenantAddressConfigId\", addressConfId);",
											"        pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96771deb-274e-427c-bd95-90d6875e2f78",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"anotherCompleteOrderId\", jsonData.id);",
											"    pm.globals.set(\"another_complete_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Test billTo and shipTo properties existance\", function() {",
											"    pm.expect(jsonData.billTo).to.exist;",
											"    pm.expect(jsonData.shipTo).to.exist;",
											"    ",
											"    pm.expect(jsonData.billTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"    pm.expect(jsonData.shipTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open and adding 2 more lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7b3654f1-88ce-477c-9965-33ee1afb40ae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"another_complete_order_content\");",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    // Few more cases for MODORDERS-117",
											"    order.compositePoLines[0].orderFormat = \"Physical Resource\";",
											"    setPhysicalInfo(order.compositePoLines[0]);",
											"    order.compositePoLines[1].orderFormat = \"Other\";",
											"    setPhysicalInfo(order.compositePoLines[1]);",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Open\";",
											"    pendingOrder.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Pending\");",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"another_complete_order_content\");",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "524a7e4c-bce2-44df-af94-1e8841bf8bf5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        //check status changed",
											"        order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"        order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"       ",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Titles",
					"item": [
						{
							"name": "Create package po line for title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d27d24a0-4698-4578-aa1f-bd3ff8b8ee93",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"// make sure there is no id provided",
											"delete line.id;",
											"line.poLineNumber += \"1\";",
											"line.poLineDescription += \" another PO Line\";",
											"line.eresource.createInventory = \"Instance\";",
											"line.locations.pop();",
											"line.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
											"line.isPackage = true;",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "422e4017-e2a9-4921-9edf-5e118fbba783",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    ",
											"    ",
											"    pm.environment.set(\"poLineIdForTitle\", jsonData.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/id/lines/id requests that return 201"
							},
							"response": []
						},
						{
							"name": "Create title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3f7c87ab-fb70-4ebf-bdf1-13b199f1684c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "57fd99fc-a2c9-4344-9193-b7e28e68f25d",
										"exec": [
											"pm.test(\"Title status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"    let title = pm.response.json();",
											"    pm.expect(title.id).to.exist;",
											"    pm.variables.set(\"titleId\", title.id);",
											"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get title by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5eaa929e-2695-4748-9830-d314c8d2124d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3e679250-a6f7-489e-981c-98486bbfc7dc",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let retrievedTitle = pm.response.json();",
											"    pm.expect(retrievedTitle.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "efc4776c-a1ae-4a1b-9249-1275d5b98259",
										"exec": [
											"let titleBody = JSON.parse(pm.variables.get(\"titleContent\"));",
											"",
											"titleBody.title = \"New title name\";",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(titleBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cfe93dc2-87be-488f-9682-8261bc6b3233",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/titles/\" + pm.variables.get(\"titleId\"), (err, res) => {",
											"        pm.test(\"Title is updated\", () => {",
											"            pm.expect(res.code).to.eql(200);",
											"            var title = res.json();",
											"            pm.expect(title.title).to.eql(\"New title name\");",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get title collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "df47927e-d24b-44b1-8374-655a6e15a3cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "df309968-2cb0-4aff-9d51-1b3f29ec31c6",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"",
											"    var titles = pm.response.json();",
											"",
											"    pm.test(\"Verify order templates collection contains order templates\", () => {",
											"        pm.expect(titles.totalRecords).to.be.above(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "caa81170-4824-4271-9529-e5b401f26d28",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d644ee09-ad87-4a6e-9865-018f1d4cc31d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/titles/\" + pm.variables.get(\"titleId\"), (err, res) => {",
											"        pm.test(\"title is deleted\", () => {",
											"             pm.expect(res.code).to.eql(404);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces",
					"item": [
						{
							"name": "create title for piece",
							"item": [
								{
									"name": "Create title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bec96c99-edd9-4696-8cdb-6182a89acc69",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6937b742-bd3a-4666-bbdc-8564f8d10aad",
												"exec": [
													"pm.test(\"Title status code is 201\", function() {",
													"    pm.response.to.have.status(201);",
													"    let title = pm.response.json();",
													"    pm.expect(title.id).to.exist;",
													"    pm.variables.set(\"titleId\", title.id);",
													"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{titleContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "46242e9a-b05b-499b-a740-a51410c05b06",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    let piece = res.json();",
											"    piece.poLineId = pm.environment.get(\"poLineIdForTitle\");",
											"    piece.titleId = pm.variables.get(\"titleId\");",
											"    piece.locationId = pm.environment.get(\"locationId1\");",
											"    pm.globals.set(\"pieceRecord\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "326eba77-66db-43e2-a90d-cc06407ca518",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.globals.set(\"pieceIdToUpdate\", jsonData.id);",
											"    utils.validatePiece(jsonData);",
											"});",
											"",
											"pm.test(\"Each piece has these optional fields\", function () {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.expect(jsonData.caption).to.exist;",
											"    pm.expect(jsonData.comment).to.exist;",
											"    pm.expect(jsonData.itemId).to.exist;",
											"    pm.expect(jsonData.locationId).to.exist;",
											"    pm.expect(jsonData.supplement).to.exist;",
											"    pm.expect(jsonData.receivedDate).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{pieceRecord}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Edit piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "81e38c54-617c-4774-bf6f-b10c2afd598a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let piece = pm.globals.get(\"pieceRecord\");",
											"",
											"// Update piece format to Electronic",
											"piece.format = \"Electronic\";",
											"// Use this pieceIdToUpdate to delete in next delete request",
											"pm.variables.set(\"updatedPiece\", piece);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f6dca50-c836-465d-8455-98be82b929b4",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.have.status(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedPiece}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "75822dce-3327-482b-84bb-1e2e2c35582c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4b452c60-0be3-46d2-8572-4e5974942528",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "delete title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec1c3100-d44d-4caa-a37b-18275e9f94ac",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6d92510-6551-4ffd-8f91-888f228eeb47",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ensure receiptStatus consistency between Pieces PoLine",
					"item": [
						{
							"name": "Verify PoLine Awaiting ReceiptStatus",
							"item": [
								{
									"name": "create title for piece",
									"item": [
										{
											"name": "Create title",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "aec64367-ec08-437b-a50e-7294c4e26a95",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.variables.set(\"titleContent1\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b87edeff-acfa-45f1-ac35-d1e1bf5f7ee6",
														"exec": [
															"pm.test(\"Title status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"    let title = pm.response.json();",
															"    pm.expect(title.id).to.exist;",
															"    pm.variables.set(\"titleId1\", title.id);",
															"    pm.variables.set(\"titleContent1\", JSON.stringify(title));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{titleContent1}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create 1st Piece - Received",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fa3b5102-353c-4030-8007-958846168bcf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.globals.set(\"poLineIdToCreatePiece\", utils.getLastPoLineId());",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    piece.titleId = pm.variables.get(\"titleId1\");",
													"    piece.locationId = pm.environment.get(\"locationId1\");",
													"    pm.globals.set(\"pieceRecordAwaiting1\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "18a26201-5466-4901-864b-a2c403d07f66",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pieceId1ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function () {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										},
										"description": "MODORDERS-173 - ensure receiptStatus consistency between piece and poLine"
									},
									"response": []
								},
								{
									"name": "Create 2nd Piece - Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "04f53695-9edc-446b-b954-ddee31bd5467",
												"exec": [
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    piece.caption = \"Tutorial Volume 99\";",
													"    piece.comment = \"Special Edition II\";",
													"    piece.format = \"Physical\";",
													"    piece.itemId = \"522a501a-56b5-48d9-b28a-3a8f02482d97\";",
													"    piece.receivingStatus = \"Expected\";",
													"    piece.supplement = true;",
													"    piece.receivedDate = \"2018-10-10T00:00:00.000+0000\";",
													"    piece.titleId = pm.variables.get(\"titleId1\");",
													"    piece.locationId = pm.environment.get(\"locationId1\");",
													"    pm.globals.set(\"pieceRecordAwaiting2\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c022d301-173b-4fb4-b908-1b8b21443b94",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pieceId2ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function () {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting2}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 1st piece - to Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "68d5fb91-4c8b-4580-a234-a4fe93f1936d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let pieceId1ToUpdate = pm.variables.get(\"pieceId1ToUpdate\");",
													"utils.sendGetRequest(\"/orders-storage/pieces/\" + pieceId1ToUpdate, function (err, res) {",
													"    piece = res.json();",
													"    let receivingStatus = piece.receivingStatus;",
													"    console.log(\"receivingStatus storage: \" + receivingStatus);",
													"});",
													"",
													"var piece1 = {};",
													"piece1 = JSON.parse(pm.globals.get(\"pieceRecordAwaiting1\"));",
													"",
													"// Update piece1 receivingStatus to Expected",
													"piece1.receivingStatus = \"Expected\"; // Received -> Expected will trigger event",
													"",
													"// Use this pieceIdToUpdate to delete in next delete request",
													"pm.variables.set(\"updatedPieceRecordAwaiting1\", JSON.stringify(piece1));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4b52eba5-765c-4aa2-b4e5-f1e8053a856e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPieceRecordAwaiting1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all pieces by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8374a5c6-d8eb-4fde-af70-879a6af9644a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fe54faa9-4ef6-4312-ac4d-147c26461d40",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces[0].receivingStatus).to.equal(\"Expected\");",
													"    pm.expect(jsonData.pieces[1].receivingStatus).to.equal(\"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdToCreatePiece}}"
												}
											]
										},
										"description": "GET /orders-storage/pieces requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get PoLine by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c516874f-8cc6-4a55-83b4-8cab616825af",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83407bcd-6192-47b4-8d68-688363948ca5",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    ",
													"    // All pieces receiving status is \"Expected\" so receiptStatus should be \"Awaiting Receipt\"",
													"    pm.expect(jsonData.receiptStatus).to.equal(\"Awaiting Receipt\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineIdToCreatePiece}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete first piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a874e7d0-5ef4-4ec0-8831-eda69a8b0abb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "65717063-0043-4b53-a54c-26ccefd5511a",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId1ToUpdate\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								},
								{
									"name": "Delete second piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3739ce39-a534-4338-9213-f0c006b0799a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7aecbc2-405a-406d-a032-bd281430568c",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId2ToUpdate\");",
													"pm.globals.unset(\"poLineIdToCreatePiece\");",
													"pm.globals.unset(\"pieceRecordAwaiting1\");",
													"pm.globals.unset(\"pieceRecordAwaiting2\");",
													"pm.globals.unset(\"updatedPieceRecordAwaiting1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId2ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId2ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								},
								{
									"name": "delete title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e4b8745d-420c-4e41-959b-b9181f03417f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ce4314ec-0642-4e5f-8157-d202aa0758e1",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles",
												"{{titleId1}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8226e32c-3251-4490-bb16-3fea17dc783e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4b5b4fb3-b670-4b29-97b1-b090b91e08bf",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a4ed51cd-15f1-4e02-8c67-44518d16eb53",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8284b677-c063-4a18-9eb0-a3accb41726c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Open order",
					"item": [
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "53a31484-1f38-43df-ace7-902a7bd073d3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"1MIX1EL\";",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "575900ab-dbba-41dc-8738-1353a68b5b87",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Partially Paid\"));",
											"utils.verifyOrderCalculatedInfo(jsonData);",
											"",
											"pm.test(\"Each order has these fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"completeOpenOrderId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"    // the approval details are set on OPEN if \"approval required\" is set to false",
											"    pm.expect(jsonData.approvalDate).to.exist;",
											"    pm.expect(jsonData.approvedById).to.exist;",
											"  ",
											"});",
											"  utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "52bd5895-746b-40d8-8894-2c223ccebe65",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order = utils.prepareOrder(res.json());",
											"    pm.variables.set(\"po_one_physical_one_electronic_lines\", JSON.stringify(order));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "99c5d1d0-35fd-4ab1-ac71-08191a822c6b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"physElecOpenOrderId\", order.id); ",
											"});",
											"",
											"pm.test(\"2 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"    order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"    order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Fully Paid\"));",
											"});",
											"    utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_one_physical_one_electronic_lines}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Create Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5df66695-a393-4750-8952-4e357f7c2a7e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
											"        method: \"GET\"",
											"    },",
											"    function (err, res) {",
											"        let order  = res.json();",
											"        order.workflowStatus = \"Open\";",
											"        order = utils.deletePoNumber(order);",
											"        for(var i = 0; i < order.compositePoLines.length; i++) {",
											"    \t  order.compositePoLines[i].receiptStatus = \"Receipt Not Required\";",
											"    \t  order.compositePoLines[i].paymentStatus = \"Pending\";",
											"        }",
											"        ",
											"        pm.variables.set(\"orderWithReceiptNotRequiredLines\", JSON.stringify(utils.prepareOrder(order)));",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac110916-026c-421e-b5ad-d2d702e8d190",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Receipt Not Required\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"orderWithReceiptNotRequiredId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithReceiptNotRequiredLines}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\n[MODORDERS-304](https://issues.folio.org/browse/MODORDERS-304). Even though Receiving is not required, Inventory interaction happens based on CreateInventory setting"
							},
							"response": []
						},
						{
							"name": "Create Open order for receiving history test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bb69cde6-2733-44c7-bec4-27672a88bb4f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = false;",
											"    order = utils.deletePoNumber(order);",
											"    pm.variables.set(\"poListedPrintMonographForReceivingHistory\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ab140aa-5850-4724-8882-3cae12250956",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"receivingHistoryPoId\", order.id); ",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"});",
											"",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForReceivingHistory}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total, checkinItems is `true`.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `false`."
							},
							"response": []
						},
						{
							"name": "Create Open order. POLines with checkinItems = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aed34f22-6e6d-40f3-8c6a-1ada1e4864f5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1N\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = true;",
											"    ",
											"    pm.variables.set(\"poListedPrintMonographForPartialCheckIn\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ac8d928-c1c3-47ca-b0d9-02733a345969",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poToCheckinItemsId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForPartialCheckIn}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						},
						{
							"name": "Create order all po lines checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8763ba16-dc5a-4995-94f8-550821d96049",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1NPHYELEC\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = true;",
											"    order.compositePoLines[1].checkinItems = true;",
											"",
											"    // Set new product ids to be sure that new instances will be created",
											"    order.compositePoLines[0].details.productIds.pop();",
											"    ",
											"    order.compositePoLines[0].titleOrPackage = \"Hey! Just API testing checkin\"",
											"    order.compositePoLines[1].titleOrPackage = \"Hey! Just API testing checkin with no items\"",
											"    ",
											"    //set create Inventory so that no item interaction is necessary",
											"    order.compositePoLines[1].eresource.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"poForTestingCheckin\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d3264d44-08b5-4b4a-8024-2b950681e14f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => {",
											"     utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    if(line.orderFormat === \"Physical Resource\"){",
											"        pm.globals.set(\"checkin_physical_poLine\", line);",
											"    }else{",
											"        pm.globals.set(\"checkin_electronic_poLine\", line);",
											"    }",
											"    });",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poAllPoLineCheckin\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poForTestingCheckin}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order. POLines with isPackage = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7bd496c5-b9e2-4c42-aed1-30f75cf34554",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    let line = order.compositePoLines[0];",
											"    line.isPackage = true;",
											"    // Set checkingItems flag",
											"    order.compositePoLines = [line];",
											"    ",
											"    pm.variables.set(\"poListedPrintMonographForPartialCheckIn\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2d7687e8-f33b-4b42-ad2d-b72462f13ee7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory not entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 1);",
											"});",
											"",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForPartialCheckIn}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Unopen order",
					"item": [
						{
							"name": "Unopen workflows",
							"item": [
								{
									"name": "Unpopen order with 1POL and 1 Fund",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "54a49536-524b-4537-a568-bb210c63a441",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a0bb8c5f-9f4a-4252-b7a2-9a103e183363",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder338-1\", beOrder);",
															"    pm.variables.set(\"beOrderId338-1\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber338-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c0b61005-7c5d-4072-9194-21efb37b75c3",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "82548b1a-d6ae-400e-9850-4c936cbee42f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine338-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId338-1\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d44475ee-ede2-44f5-947e-ba59630ce1ef",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "00061187-a353-424c-8eda-71653399b6cb",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "53e51ebe-441a-4a5b-a858-2a447dafc53c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrde338-1\", beOrder);",
															"    pm.environment.set(\"bePOLEncumbrance338-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ebee5224-3725-4b6a-9a63-d5d277e1c21a",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"     pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "afa4a3ae-1f39-4c68-b0de-1d622b618469",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance338-1}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bf7e6c39-1e6b-43d8-8d17-735db61af43f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4b9a5a7c-98c6-4730-b65b-44f768282b32",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "From Unpopen to Open with 1POL and 1 Fund and POL quantity changed",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8f61044e-fa08-48f7-82dc-5737dc3ba0d6",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a5170396-d8b0-482a-bb82-0a54697c1861",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-2\", beOrder);",
															"    pm.environment.set(\"beOrderId338-2\", beOrder.id);",
															"    pm.environment.set(\"beOrderNumber338-2\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "509c4817-fcb5-4e3f-86eb-c623f208706d",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-2\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "67a4f0cc-39cc-466a-8a24-1aa8562ec358",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"beOrderLine338-2\", beOrderLine);",
															"    pm.environment.set(\"beOrderLineId338-2\", beOrderLine.id);",
															"    pm.environment.set(\"poLineNumber338-2\", beOrderLine.poLineNumber);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-2}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a8e593bc-17c7-4e27-8a5d-7e91f25886ef",
														"exec": [
															"setTimeout(function(){}, 2000);\r",
															"let utils = eval(globals.loadUtils);\r",
															"let order = {};\r",
															"\r",
															"pm.test(\"Order is open\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-2-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0b62ad3f-5c2d-4d91-8d6d-35bbe62b86e0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.environment.set(\"beOrder338-2\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId338-2\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-2-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "becc2999-3473-4624-91a5-46a0c4e83b23",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    transactionArray = pm.response.json();\r",
															"    transactionArray.transactions.forEach(encumbrance => {\r",
															"        pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"        pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"        pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "080f44b2-d29a-4a6f-a63a-5c21ccf6d3e7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "62d9c2cb-75e1-4f9d-b97f-bafaa39b01c0",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "23559351-4826-413a-b2e0-be8265ff9b2a",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "04acd31d-1a97-49e6-ba3e-4eba508b78a8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change quantity and cost for product in order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7e6299fc-4c4c-4ed7-8e6e-7b9557a593c3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0188b9b3-d1f6-4e37-9ae0-8a239768646c",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-2\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n      \"id\": \"{{beOrderLineId338-2}}\",\r\n      \"checkinItems\": false,\r\n      \"acquisitionMethod\": \"Approval Plan\",\r\n      \"alerts\": [],\r\n      \"claims\": [],\r\n      \"collection\": false,\r\n      \"contributors\": [\r\n        {\r\n          \"contributor\": \"Moutinho, Luiz\",\r\n          \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\r\n        }\r\n      ],\r\n      \"cost\": {\r\n        \"listUnitPrice\": 2.0,\r\n        \"currency\": \"USD\",\r\n        \"discount\": 10.0,\r\n        \"discountType\": \"percentage\",\r\n        \"quantityPhysical\": 3,\r\n        \"poLineEstimatedPrice\": 5.4\r\n      },\r\n      \"details\": {\r\n        \"productIds\": [\r\n          {\r\n        \t\"productId\": \"3319643991\",\r\n    \t\t\"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n            \"qualifier\": \"\"\r\n          }\r\n        ],\r\n        \"subscriptionInterval\": 0\r\n      },\r\n      \"eresource\": {\r\n        \"activated\": false,\r\n        \"createInventory\": \"Instance, Holding\",\r\n        \"trial\": false,\r\n        \"accessProvider\": \"{{activeVendorId}}\"\r\n      },\r\n      \"fundDistribution\": [\r\n        {\r\n          \"encumbrance\": \"{{fundEncumbranceId338-2}}\",\r\n          \"fundId\": \"{{fundId}}\",\r\n          \"distributionType\": \"percentage\",\r\n          \"value\": 100.0\r\n        }\r\n      ],\r\n      \"isPackage\": false,\r\n      \"locations\": [\r\n        {\r\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\r\n          \"quantity\": 3,\r\n          \"quantityPhysical\": 3\r\n        }\r\n      ],\r\n      \"orderFormat\": \"Physical Resource\",\r\n       \"paymentStatus\" : \"Awaiting Payment\",\r\n      \"physical\": {\r\n        \"createInventory\": \"None\",\r\n    \t\"materialSupplier\": \"{{activeVendorId}}\",\r\n    \t\"materialType\": \"{{materialTypeId}}\",\r\n        \"volumes\": []\r\n      },\r\n      \"poLineNumber\": \"{{poLineNumber338-2}}\",\r\n      \"publisher\": \"Palgrave Macmillan\",\r\n      \"purchaseOrderId\": \"{{beOrderId338-2}}\",\r\n     \"receiptStatus\" : \"Awaiting Receipt\",\r\n      \"reportingCodes\": [],\r\n      \"rush\": false,\r\n      \"source\": \"User\",\r\n      \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\r\n      \"vendorDetail\": {\r\n        \"instructions\": \"\",\r\n        \"vendorAccount\": \"BRXXXXX-01\"\r\n      },\r\n      \"metadata\": {\r\n        \"createdDate\": \"2020-06-03T07:32:15.794+0000\",\r\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\r\n        \"updatedDate\": \"2020-06-03T07:38:34.754+0000\",\r\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\r\n      }\r\n    }"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{beOrderLineId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines",
														"{{beOrderLineId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-2-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84f7d8da-ab13-4f0e-a692-59803450964b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.environment.set(\"beOrder338-2\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId338-2\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "337bf282-ef6d-44d7-82b4-28aac6565a4e",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-2-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d0dd599e-8efb-42e0-88d7-0b74496725b2",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    transactionArray = pm.response.json();\r",
															"    transactionArray.transactions.forEach(encumbrance => {\r",
															"        pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"        pm.expect(encumbrance.amount).to.equal(5.4);\r",
															"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(5.4);\r",
															"        pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"    });\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4049bd1d-98b8-49bc-b731-98dde615409b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1790a9bb-944a-4300-a071-5a9721d27ebd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "42ec6ce1-070b-4017-ac39-f3d1bb94b1a4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "From Unpopen to Open with 1POL and 1 Fund and fund changed",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bf21c303-e31d-4ece-9cdc-5e9f2d0cba82",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "62879834-c5d0-446b-9619-1c74685e8a10",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    pm.environment.set(\"beOrderId338-3\", beOrder.id);",
															"    pm.environment.set(\"beOrderNumber338-3\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9de77f6a-de1e-4a3a-a547-fdf71499bd12",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-2\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "42f26113-18a2-4db6-8807-52787483fee5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"beOrderLine338-3\", beOrderLine);",
															"    pm.environment.set(\"beOrderLineId338-3\", beOrderLine.id);",
															"    pm.environment.set(\"poLineNumber338-3\", beOrderLine.poLineNumber);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-3}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa364dc4-e390-4200-921a-f1f7d6a3b6e7",
														"exec": [
															"setTimeout(function(){}, 2000);\r",
															"let utils = eval(globals.loadUtils);\r",
															"let order = {};\r",
															"\r",
															"pm.test(\"Order is open\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d4699fa-c12b-4ee7-8c1c-4662591ea4fd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId-1-338-3\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8e3843d9-ed42-4834-ac3a-300fa8f3d6fa",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8e9f5082-15c0-4ce4-9a14-075376435a4d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "14244066-2f07-48aa-b300-216cd9739ca5",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b312691-a656-40aa-802c-69aeaa3d13d1",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2949d1b6-026e-4dd5-895e-a3c06a4efcef",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change fund in order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ee4b5cb4-246d-457c-a6ca-bbc35641155e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9fd12020-8725-45b0-ad0c-0e5b15783bbb",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n      \"id\": \"{{beOrderLineId338-3}}\",\r\n      \"checkinItems\": false,\r\n      \"acquisitionMethod\": \"Approval Plan\",\r\n      \"alerts\": [],\r\n      \"claims\": [],\r\n      \"collection\": false,\r\n      \"contributors\": [\r\n        {\r\n          \"contributor\": \"Moutinho, Luiz\",\r\n          \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\r\n        }\r\n      ],\r\n      \"cost\": {\r\n        \"listUnitPrice\": 2.0,\r\n        \"currency\": \"USD\",\r\n        \"discount\": 10.0,\r\n        \"discountType\": \"percentage\",\r\n        \"quantityPhysical\": 3,\r\n        \"poLineEstimatedPrice\": 5.4\r\n      },\r\n      \"details\": {\r\n        \"productIds\": [\r\n          {\r\n        \t\"productId\": \"3319643991\",\r\n    \t\t\"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n            \"qualifier\": \"\"\r\n          }\r\n        ],\r\n        \"subscriptionInterval\": 0\r\n      },\r\n      \"eresource\": {\r\n        \"activated\": false,\r\n        \"createInventory\": \"Instance, Holding\",\r\n        \"trial\": false,\r\n        \"accessProvider\": \"{{activeVendorId}}\"\r\n      },\r\n      \"fundDistribution\": [\r\n        {\r\n          \"encumbrance\": \"{{fundEncumbranceId-1-338-3}}\",\r\n          \"fundId\": \"{{fundId-2}}\",\r\n          \"distributionType\": \"percentage\",\r\n          \"value\": 100.0\r\n        }\r\n      ],\r\n      \"isPackage\": false,\r\n      \"locations\": [\r\n        {\r\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\r\n          \"quantity\": 3,\r\n          \"quantityPhysical\": 3\r\n        }\r\n      ],\r\n      \"orderFormat\": \"Physical Resource\",\r\n       \"paymentStatus\" : \"Awaiting Payment\",\r\n      \"physical\": {\r\n        \"createInventory\": \"None\",\r\n    \t\"materialSupplier\": \"{{activeVendorId}}\",\r\n    \t\"materialType\": \"{{materialTypeId}}\",\r\n        \"volumes\": []\r\n      },\r\n      \"poLineNumber\": \"{{poLineNumber338-3}}\",\r\n      \"publisher\": \"Palgrave Macmillan\",\r\n      \"purchaseOrderId\": \"{{beOrderId338-3}}\",\r\n     \"receiptStatus\" : \"Awaiting Receipt\",\r\n      \"reportingCodes\": [],\r\n      \"rush\": false,\r\n      \"source\": \"User\",\r\n      \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\r\n      \"vendorDetail\": {\r\n        \"instructions\": \"\",\r\n        \"vendorAccount\": \"BRXXXXX-01\"\r\n      },\r\n      \"metadata\": {\r\n        \"createdDate\": \"2020-06-03T07:32:15.794+0000\",\r\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\r\n        \"updatedDate\": \"2020-06-03T07:38:34.754+0000\",\r\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\r\n      }\r\n    }"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{beOrderLineId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines",
														"{{beOrderLineId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "00ab20a9-048e-43d7-8fd1-ee6d4a7b48f3",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "178266f9-d188-43ea-8bae-45c2179f707b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId338-2-3\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get released encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8381f9e5-6220-4b40-a383-31bbd7093aee",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Released\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b51c05e4-7f62-4b09-a2d2-d198128fb162",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get new encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "285b6a08-ea17-44fd-aca0-9b519990892c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(5.4);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(5.4);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "271d905b-59a7-4841-ad3f-dea7fd720a2b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId338-2-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId338-2-3}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8c690742-1e9b-4268-99b9-5b425939cbfa",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5f192ef0-379e-4c15-a45a-027f399aa33c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "65e51940-f5fd-48a1-b3e2-097d129a20fe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"UN0P3N\";",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.environment.set(\"orderForUnopenFlow\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d1cc7d2d-7878-4393-99cf-3098e6a8e849",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"orderForUnopenFlowId\", jsonData.id);",
											"    pm.environment.set(\"orderForUnopenFlowBody\", jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForUnopenFlow}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Unopen order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64bbacbe-c920-4810-9ab1-247c0a31c046",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let orderForUnopen = pm.environment.get(\"orderForUnopenFlowBody\");",
											"orderForUnopen.workflowStatus = \"Pending\";",
											"",
											"pm.variables.set(\"orderForUnopenBody\", JSON.stringify(orderForUnopen));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6e59c229-e38b-4239-a271-3d982e48a421",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForUnopenBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUnopenFlowId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUnopenFlowId}}"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund Distribution",
					"item": [
						{
							"name": "Open order 422 - fund distri total greater than poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3acf2392-b236-4d05-98c3-7abe17410bc6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 100;",
											"    order.compositePoLines[0].fundDistribution[1].value = 100;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "04a0fe14-d65b-4a3d-998c-01122da90536",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var error = {};",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    error = pm.response.json();",
											"    pm.expect(error).to.exist;",
											"    pm.expect(error.errors[0].code).to.equal(\"incorrectFundDistributionTotal\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d20b91a7-6dfe-4557-b91c-7836003f1ce0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = res.json();",
											"",
											"    pm.variables.set(\"delOrderWithPoNumber\", order.poNumber);",
											"    ",
											"    utils.sendGetRequest(\"/orders/composite-orders?query=poNumber=\" + pm.variables.get(\"delOrderWithPoNumber\"), function (err, res) {",
											"         let orderToDelete = res.json();",
											"         pm.variables.set(\"delOrderId\", orderToDelete.purchaseOrders[0].id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "af5cd6f6-e0bc-40de-90d0-587cb7c73374",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Open order 422 - fund distri total less than poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "781f1da9-3595-4b85-a7a9-05773ce9d0c6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 90;",
											"    order.compositePoLines[0].fundDistribution[1].value = 9;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "098d3f74-111f-4d3b-b3ea-732470728876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var error = {};",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    error = pm.response.json();",
											"    pm.expect(error).to.exist;",
											"    pm.expect(error.errors[0].code).to.equal(\"incorrectFundDistributionTotal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "17d073bc-6468-4077-94ea-57deaba37e71",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = res.json();",
											"    pm.variables.set(\"delOrderWithPoNumber\", order.poNumber);",
											"    ",
											"    utils.sendGetRequest(\"/orders/composite-orders?query=poNumber=\" + pm.variables.get(\"delOrderWithPoNumber\"), function (err, res) {",
											"        let orderToDelete = res.json();",
											"        pm.variables.set(\"delOrderId\", orderToDelete.purchaseOrders[0].id);",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b8d4e7a1-8d4a-4ef3-bfec-ef78c2ce246b",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Open order 201 - fund distri total equals poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1948ff8a-0a47-4601-995c-1450e5b36f30",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 90;",
											"    order.compositePoLines[0].fundDistribution[1].value = 10;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5fef2ced-2c7d-44a2-908b-06503a87369c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.environment.set(\"delOrderId201\", order.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6fe78a10-3bc1-411f-92ae-6ffffac1dcf4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e716ea26-3af6-4670-8ecb-e2716416629f",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId201}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId201}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Should recieve Pieces if item.status = \"Order closed\" and order.workflowStatus = \"Closed\"",
							"item": [
								{
									"name": "Create order One-Time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ebdab1a0-b9e0-4cf2-a91e-921dd6f750ec",
												"exec": [
													"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
													"if (bePoNumberNum === null) {",
													"    pm.environment.set(\"poNumberNum\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8468df61-4b3c-4b5f-87ce-31abe1ab0cff",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrder = pm.response.json();",
													"    pm.environment.set(\"order\", beOrder);",
													"    pm.environment.set(\"orderId\", beOrder.id);",
													"    pm.environment.set(\"orderNumber\", beOrder.poNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add order lines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1bda322-a002-48fe-b4a5-605bc303a7da",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrderLine = {};",
													"",
													"pm.test(\"Order line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrderLine = pm.response.json();",
													"    pm.environment.set(\"orderLine\", beOrderLine);",
													"    pm.environment.set(\"orderLineId\", beOrderLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{orderId}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Open order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c115b4f9-5ce1-4563-b5e4-de8e09dd87bb",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{orderId}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order is OPen",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Close order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5ea7939-14c1-44f2-929c-61b69fb0d066",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{orderId}}\",\n  \"approved\": false,\n  \"approvedById\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n  \"approvalDate\": \"2020-04-14T11:31:47.034+0000\",\n  \"dateOrdered\": \"2020-04-14T11:31:47.034+0000\",\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Closed\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:31:48.038+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  },\n  \"closeReason\": {\n    \"reason\": \"Ceased\",\n    \"note\": \"\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order is Close",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Recieve piece(Check-in)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e850a2b-13b0-4446-bfa7-e51929b33366",
												"exec": [
													"pm.test(\"Pieces is retrieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    let piecesArray = pm.response.json();",
													"    pm.environment.set(\"pieceId1\", piecesArray.pieces[0].id);",
													"    console.log(piecesArray.pieces[0].id)",
													"    pm.environment.set(\"pieceId2\", piecesArray.pieces[1].id);",
													"    console.log(piecesArray.pieces[1].id)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"value": "no-cache",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{orderLineId}} sortby locationId",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{orderLineId}} sortby locationId"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Recieve piece(Check-in)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80580b4c-c263-4509-a794-03d3234e1e2e",
												"exec": [
													"pm.test(\"Piece is recieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    receivingResultsArray = pm.response.json();",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[0].pieceId).to.be.equal( pm.environment.get(\"pieceId1\"));",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[0].processingStatus.type).to.be.equal(\"success\");",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[1].pieceId).to.be.equal( pm.environment.get(\"pieceId2\"));",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[1].processingStatus.type).to.be.equal(\"success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"toBeCheckedIn\": [\n    {\n      \"poLineId\": \"{{orderLineId}}\",\n      \"checkedIn\": 2,\n      \"checkInPieces\": [\n        {\n          \"id\": \"{{pieceId1}}\",\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n          \"itemStatus\": \"Order closed\"\n        },\n        {\n          \"id\": \"{{pieceId2}}\",\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n          \"itemStatus\": \"Order closed\"\n        }\n      ]\n    }\n  ],\n  \"totalRecords\": 2\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"check-in"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Receive all pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a8dd9b3-def9-47a8-8f2d-4944e22e3546",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ef9e25cb-2bdc-4201-8dc6-1db126acec6b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e2abc9c2-abfd-4d21-87e3-3a871f988f38",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9446f7e1-8d0f-41c1-ab21-2abc2e817f02",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert all received piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive 10 pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e4bc272-10d5-4b8a-abe2-9d0bec866887",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\", 10);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "499ed793-591d-4989-bf47-9c97f4978dba",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 10);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 10, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives 10 piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7c275ebd-8de9-4871-ade2-d06fcba31cbe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "572644cb-51af-4d27-bd9f-4cb28d469805",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 10 received piece records back to `Expected` and Inventory items back to `On order` for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "05e47b01-d943-4a8d-bae8-940de56da803",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5146d1db-fcf3-4184-925c-05c47c17de69",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4d291b3e-c168-41c3-a490-2e936904dc7c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79fe5c6e-a020-4c4f-b696-7c60dde71bbc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 10 pieces, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Revert 2 received pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a533be3-86e8-4036-9839-c11537a1e7d0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\", 2);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8d73be8c-4f2c-4ca9-994f-d0ad3115ce58",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 2, \"Expected\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 2 received piece records back to `Expected` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "619b3bba-7c80-4299-99d0-ac5df92a8ce3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9de4515e-fe17-4117-8ef5-a2a0d6ff4452",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 3 pieces, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Revert 1 received piece for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "645c6abe-3681-4232-a2d7-9a340faf48cd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c189708c-91f7-46ff-a94c-1318f072796a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, receivingHistoryTotalRecords - 1);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ba031d07-45c9-4587-927b-5b50e7682f15",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.completeOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cae38d16-cc51-434e-ab43-4e3abb9729bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with P/E Mix and Electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will be still `Open` after this operation because all PO Lines have `Partially Paid` payment status (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb216a3b-459d-4e6e-84b0-afafea621d9c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.physElecOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c66dc687-08fe-4484-886f-22d3e96fba05",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with physical and electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will become `Closed` after this operation because all PO Lines have `Fully Paid` payment status and `Fully Received` receipt status once all piece records are received (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with 4 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d71170b6-18c8-4828-99d0-38165695bf1d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.anotherCompleteOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4588625b-7a74-4330-b91a-800d7ab880e6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by requests from `Pending To Open order` folder (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).\nThe order will be closed after this operation (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Close orders updating payment status of each PO Line",
					"item": [
						{
							"name": "Get order with 4 lines and update each one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "97340c4e-3ce3-419d-bccd-3198d67e4d75",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03fdbe73-4ecc-4c62-ac42-bba5a0a37771",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.anotherCompleteOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].receiptStatus = \"Receipt Not Required\";",
											"        //let locations = lines[i].locations;",
											"       // for (let j = 0; j < locations.length; j++) {",
											"       //     locations[j].quantity = 9999;",
											"       // }      ",
											"    }",
											"        ",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(4);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get order with receipt not required and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aa8bce40-6412-4be2-b2b7-34af29abee26",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f1f1710a-718b-49a4-a8ab-40a8267e70d4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].receiptStatus = \"Receipt Not Required\";",
											"        //let locations = lines[i].locations;",
											"        //for (let j = 0; j < locations.length; j++) {",
											"        //    locations[j].quantity = 9999;",
											"        //}      ",
											"    }",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get Mixed order and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ca4b0b86-80d3-4a1d-b1aa-9834bdc0d158",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "52284a41-7716-499e-9733-50bb487f5d4b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].receiptStatus = \"Receipt Not Required\";",
											"        //let locations = lines[i].locations;",
											"        //for (let j = 0; j < locations.length; j++) {",
											"        //    locations[j].quantity = 9999;",
											"        //}    ",
											"    }",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "Update PO Lines' payment statuses of `Open` orders so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218)).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3b3bf969-466c-47b7-8634-4851807705f1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "650a9002-6dfa-4ad1-aee7-77d0bbbde69e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check closed orders and re-open",
					"item": [
						{
							"name": "Order with 4 PO Lines should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7edf594c-ef89-41a7-96b3-4b8a95a9598a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ef99fc1-613e-4046-9fe4-4b08f2ca1bc9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Cancelled\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9f141a86-81ed-4f69-b6ad-617c76ca8ec1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0eb27ae3-86f5-4b23-af61-e97beefc6672",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Partially Paid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c29d7029-e7bd-4da8-82cd-483024398ed5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f2359696-06e5-4483-92ba-120939e17073",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order: revert 1 received piece for Electronic line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f7ea9c74-99dc-4544-8a15-4b67e365af7d",
										"exec": [
											"eval(globals.loadUtils).prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1b297b35-2204-416a-910d-e40f753cc0d5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has successfully reverted piece\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Order with 4 PO Lines should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8075879-6137-4657-a452-e85dc3bbf07b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3210cd57-dc5b-43c8-b4b1-8304972c55a4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "15b169a8-bde6-4f4a-b843-e3767b95ce1f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73823fe6-7630-4928-8cf5-5b7327caec8d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cb463166-dd19-4b81-b191-78de17e53f3c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0494c024-5a29-4ae1-b272-ec812f2ad6d5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "The folder contains sets of requests:  \n1. Get orders and verify that their workflow status is `Closed`. If this is true, modify one of PO Line's payment status so the order becomes `Open` eventually.\n2. Roll back one of received piece so the order becomes `Open` eventually.\n3. Verify that orders were successfully re-opened by operations described above.\n\nSee [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218) for more details.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "04bf502a-b84c-4eab-a84d-f604d098ccb0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ba991b93-e892-440e-9442-a81e4776beec",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate New POnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "67e25bac-29ad-46e2-83dc-f50e1b165179",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5947fff3-5904-4595-8249-1f356208081e",
										"exec": [
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"NewPO111NewPO\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 204 if a valid and unique PO Number is given"
							},
							"response": []
						},
						{
							"name": "Get poNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2215a5b7-9460-47e1-9a35-ca3ce8eabe01",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify response status\r",
											"pm.test(\"First response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Validate PoNumber schema\r",
											"var schema = JSON.parse(pm.environment.get(utils.schemaPrefix + \"po_number.json\"));\r",
											"pm.test('PoNumber schema is valid', function() {\r",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//3.  Verify po number generation process\r",
											"utils.sendGetRequest(\"/orders/po-number\", function (err, res) {\r",
											"    pm.test(\"Second response status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Second request po number : \" + res.json().poNumber);\r",
											"\r",
											"        pm.test(\"po numbers are not same\", function () {\r",
											"            pm.expect(jsonData.poNumber).to.not.eql(res.json().poNumber);\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5fa5be0-4d0b-4a89-9409-ab7e232efbe9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number"
									]
								},
								"description": "GET /orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Orders",
					"item": [
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4cc60da7-e23b-40f3-b087-f2779176a42c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "789825c7-777e-4c89-9a03-da6c344142bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 3 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.purchaseOrders).to.have.lengthOf.at.least(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders by query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c51a495d-1506-49f9-93e7-2769e3cc8554",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6f271cfe-b127-4b75-a922-32f8c3ab5464",
										"exec": [
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate that response contains orders with proper workflow status\", function () {",
											"    for(var i = 0; i < jsonData.purchaseOrders.length; i++) {",
											"    \tpm.expect(jsonData.purchaseOrders[i].workflowStatus).to.equal(\"Open\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2bacda6f-0688-4c95-81de-0b151e8d8610",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "692997be-48fa-4347-bea0-02141fd14c83",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var purchaseOrdersData = {};",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    purchaseOrdersData = pm.response.json();",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"    ",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Validate that response contains orders sorted by dateOrdered ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    let purchaseOrders = pm.response.json().purchaseOrders;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"Validate that PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											"",
											"",
											"    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b6a19c18-f384-4a6a-bb02-d3dc7d68e30c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1af6e499-40f3-447f-8c8a-f27258bd4bd5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Response contains orders sorted by dateOrdered descending\", function () {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.most(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders with date range and nested field sorting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8d6b2de5-1263-45ad-867f-c44a41d86cbe",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5594dce9-2049-4901-97b6-2f932203a9a1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment');",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order with metadata.createdDate\", function () {",
											"    let numOfOrdersWithMetadata = 0;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(purchaseOrders[i]).to.have.property(\"metadata\");",
											"        if (purchaseOrders[i].hasOwnProperty('metadata') && purchaseOrders[i].metadata.hasOwnProperty('createdDate')) {",
											"            numOfOrdersWithMetadata++;",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.not.be.below(2);",
											"    pm.expect(numOfOrdersWithMetadata).to.not.be.below(2);",
											"    ",
											"    pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].metadata.createdDate);",
											"    }});",
											"    pm.test(\"Response contains orders in the fixed date range\", function () {",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"    }});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}} sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}} sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Order Lines",
					"item": [
						{
							"name": "Get list of lines by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a533dd3-7b01-4263-83a8-0eb367c18d97",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "924c24fd-db94-4ad1-a31b-26913cfd246d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 4 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.poLines).to.have.lengthOf.above(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of lines with \"Awaiting Payment\" status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8aa9eacd-4ac8-4dd1-a200-80f1755f0387",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1e11f240-9869-46e8-a504-1075763c7ba6",
										"exec": [
											"pm.test(\"Validate that response contains orders with proper payment status\", function () {",
											"    pm.response.to.have.status(200);",
											"    let poLines = pm.response.json().poLines;",
											"    pm.expect(poLines).to.have.lengthOf.at.least(5);",
											"    poLines.forEach(pol => pm.expect(pol.paymentStatus).to.equal(\"Awaiting Payment\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=10&query=paymentStatus==Awaiting Payment",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "query",
											"value": "paymentStatus==Awaiting Payment"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9842d082-7b8b-445c-9ad2-3b66616b4c17",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "43e5605c-5470-4285-a477-97d092176dee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.test(\"Check if polines sorted by order metadata.createdDate field\", function() {",
											"            if (poLines[i].hasOwnProperty('metadata')) {",
											"                pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"                date = new Date(poLines[i].metadata.createdDate);",
											"            }",
											"        });",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of order lines with date range and nested search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d7161d78-a48f-4e00-9f27-44a624c22580",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f9aacebb-d47d-4f78-8cc5-5f6358be07a7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment')",
											"",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.expect(poLines[i]).to.have.property(\"metadata\");",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"        //check polines date range",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"        date = new Date(poLines[i].metadata.createdDate);",
											"",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=physical.createInventory==Instance, Holding, Item AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "21200c38-5e60-4970-a3ef-245f34ccb0fc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3de8bb64-2dfb-48d4-8767-61f1fd59c178",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder line response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 PO line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.expect(poLines[i]).to.have.property(\"metadata\");",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(date);",
											"        date = new Date(poLines[i].metadata.createdDate);",
											"",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"PoLines with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f811f792-3ec3-44cb-a7b1-fc4d58d67bc0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6ae6d31b-78c4-496a-af46-84d2b3244eaf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces Creation",
					"item": [
						{
							"name": "P/E Mix Order (Physical and Electronic resources)",
							"item": [
								{
									"name": "Pieces PE Mix - Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d76cf527-8f6c-4fbe-8ef2-ecdc47a0c205",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order.compositePoLines[0].orderFormat = \"P/E Mix\";",
													"    ",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.variables.set(\"poListedPrintMonographPiece\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d845ad1a-514b-42d2-98c4-9aa80b9e1cce",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"orderIdPEMix\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{poListedPrintMonographPiece}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9e404d5f-aeea-44eb-9ab7-7bfc8f1506e4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "03374758-dc99-4df8-9134-476242b9925f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 2);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"P/E Mix\")[0].id); ",
													"    pm.globals.set(\"poLine2IdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"Electronic Resource\")[0].id);",
													"    pm.globals.set(\"requestBodyToBeUpdated\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(7);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receiving History initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "28ddc68f-9b57-407c-91c0-3287b6dd305f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "15b6e27b-f2e8-4634-ac95-b85bb3ac3d43",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2930ec07-b61c-46ec-af88-f4f784210060",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "da55941e-7c9e-4d7d-abda-e66550c64761",
												"exec": [
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyToBeUpdated}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ab6942d8-a4d3-4fdb-86fd-276872ef8805",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "20aa4d9e-ba01-4095-89d3-36efcf0fb5c7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(7);",
													"    jsonData.pieces.forEach(piece => utils.validatePiece(piece));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId==({{poLineIdPEMix}} or {{poLine2IdPEMix}})",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId==({{poLineIdPEMix}} or {{poLine2IdPEMix}})"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5ca1e17f-4a44-47a3-8f0b-1fa10bf7b9f9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "734de937-16b8-4c60-9faf-236a716d190a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// poLine1 -> 3 physical + 1 electronic = 4 pieces",
													"// poLine2 -> 3 electronic = 3 pieces",
													"// 3 + 4 -> 7 Pieces",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(7);",
													"    let receivingHistory = jsonData.receivingHistory;",
													"",
													"    let pol1PhysQty = receivingHistory.filter(entry => entry.pieceFormat === \"Physical\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol1ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol2ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLine2IdPEMix).length;",
													"    pm.expect(pol1PhysQty).to.eql(3);",
													"    pm.expect(pol1ElQty).to.eql(1);",
													"    pm.expect(pol2ElQty).to.eql(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for P/E Mix resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b27e2a35-f80e-4b9f-a3c8-57f8289af654",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"P/E Mix\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "84b64106-e96e-447e-87f0-bb04f4617cff",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for Electronic resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "76dec384-c2aa-43be-bf1b-9c2afb614abf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"Electronic Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "24b975a0-5b0f-4380-9280-88f21de63edf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 4 pieces, create inventory is `true`."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be2ca10a-880a-4e2c-a22b-e8db476ce06c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fff8f2fe-adfd-43c4-a0b1-a15cd30d4f96",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Order with only Physical resource",
							"item": [
								{
									"name": "Pieces Phy - Create Draft order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "36672985-4187-4249-a115-ce7881a98ba5",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"randomUUId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b2474a82-9fdf-4abc-b33b-8479b15cd450",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{randomUUId}}\",\n    \"approved\": true,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"PIECE100674545\",\n    \"orderType\": \"One-Time\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 152.63,\n    \"totalItems\": 6,\n    \"workflowStatus\": \"Pending\",\n    \"vendor\": \"{{activeVendorId}}\",\n    \"compositePoLines\": [\n        {\n            \"id\": \"4186d931-3965-4794-bfbf-a398944127c2\",\n            \"acquisitionMethod\": \"Purchase At Vendor System\",\n            \"alerts\": [\n                {\n                    \"id\": \"a8129c90-208d-4a0d-aba1-71faa188fe84\",\n                    \"alert\": \"Receipt overdue\"\n                }\n            ],\n            \"cancellationRestriction\": false,\n            \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n            \"claims\": [\n                {\n                    \"claimed\": false,\n                    \"sent\": \"2018-10-09T00:00:00.000+0000\",\n                    \"grace\": 30\n                }\n            ],\n            \"collection\": false,\n            \"contributors\": [\n                {\n                    \"contributor\": \"Ed Mashburn\",\n                    \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n                }\n            ],\n            \"cost\": {\n                \"listUnitPrice\": 24.99,\n                \"currency\": \"USD\",\n                \"additionalCost\": 10,\n                \"discount\": 5,\n                \"discountType\": \"percentage\",\n                \"quantityPhysical\": 3,\n                \"quantityElectronic\": 0,\n                \"poLineEstimatedPrice\": 81.22\n            },\n            \"description\": \"ABCDEFGH\",\n            \"details\": {\n                \"receivingNote\": \"ABCDEFGHIJKL\",\n                \"productIds\": [\n                    {\n                        \"productId\": \"9780764354113\",\n                        \"productIdType\": \"{{identifierTypeId}}\"\n                    }\n                ],\n                \"subscriptionFrom\": \"2018-10-09T00:00:00.000+0000\",\n                \"subscriptionInterval\": 824,\n                \"subscriptionTo\": \"2020-10-09T00:00:00.000+0000\"\n            },\n            \"donor\": \"ABCDEFGHIJKLM\",\n            \"fundDistribution\": [\n                {\n                    \"code\": \"HIST\",\n        \t\t\t\"fundId\": \"{{fundId}}\",\n        \t\t\t\"distributionType\": \"percentage\",\n        \t\t\t\"value\": 80\n                },\n                {\n                    \"code\": \"GENRL\",\n        \t\t\t\"fundId\": \"{{fundId}}\",\n                    \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\",\n        \t\t\t\"distributionType\": \"percentage\",\n        \t\t\t\"value\": 20\n                }\n            ],\n            \"locations\": [\n                {\n                    \"locationId\": \"{{locationId1}}\",\n                    \"quantity\": 1,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 1\n                },\n                {\n                    \"locationId\": \"{{locationId2}}\",\n                    \"quantity\": 2,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 2\n                }\n            ],\n            \"orderFormat\": \"Physical Resource\",\n            \"paymentStatus\": \"Awaiting Payment\",\n            \"physical\": {\n                \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n                \"receiptDue\": \"2018-10-10T00:00:00.000+0000\",\n                \"volumes\": [\n                    \"vol.1\"\n                ],\n                \"materialType\": \"{{materialTypeId}}\"\n            },\n            \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n            \"publicationDate\": \"2017\",\n            \"publisher\": \"Schiffer Publishing\",\n            \"purchaseOrderId\": \"8b854f27-06cf-41ed-a7cb-d00d5d8fe5e4\",\n            \"receiptStatus\": \"Pending\",\n            \"reportingCodes\": [\n                {\n                    \"id\": \"9f49a9b0-5868-45ac-a2ec-c5a405311f4a\",\n                    \"code\": \"CODE1\",\n                    \"description\": \"ABCDEF\"\n                },\n                {\n                    \"id\": \"4bf527d2-0a01-41ec-bb56-eb660f970248\",\n                    \"code\": \"CODE2\",\n                    \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                },\n                {\n                    \"id\": \"8fd796e5-6b8d-4f60-9302-4071e9e844da\",\n                    \"code\": \"CODE3\",\n                    \"description\": \"ABCDE\"\n                }\n            ],\n            \"requester\": \"Leo Bulero\",\n            \"rush\": true,\n            \"selector\": \"ABCD\",\n            \"source\": \"API\",\n            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n            \"vendorDetail\": {\n                \"instructions\": \"ABCDEFG\",\n                \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n                \"refNumber\": \"123456-78\",\n                \"refNumberType\": \"Supplier's unique order line reference number\",\n                \"vendorAccount\": \"8910-10\"\n            },\n            \"metadata\": {\n                \"createdDate\": \"2010-10-08T03:53:00.000+0000\",\n                \"createdByUserId\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "84ed7b41-0c75-480e-95c8-99d6ac2dca31",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ed23e3ce-4bae-4517-bff0-6747791b29ea",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 1);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPhysical\", order.compositePoLines[0].id); ",
													"    pm.globals.set(\"requestBodyPhysical\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(3);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receiving history initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7ec3f5c2-9ec3-48a1-9fbd-de83343e2309",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a937c371-fa1f-4e30-a462-6afa0aed39da",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "07df7d63-14bd-4f47-8034-12c52926f695",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "42fc9a26-9100-4215-a56e-46ed0dd95fc3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyPhysical}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "be22ebaf-47c7-4060-b7b8-017b0de73775",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f8bd4963-c3bc-4ca7-9f07-1242d3b8a782",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(3);",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Expected\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "053ae3b8-a0e7-416b-94de-7ac1afff6849",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9657bc22-99b4-48e3-8379-64d42780d7a8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// 3 pieces created for 3 physical resources",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => {",
													"        utils.validateReceivingHistory(history);",
													"        pm.expect(history.pieceFormat).to.equal(\"Physical\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receive all pieces for Physical resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a858750e-940e-42f2-8601-c4297aad8edf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.randomUUId, \"Physical Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "620e7d7d-8ede-4572-8e34-0bce931cc27a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
									},
									"response": []
								},
								{
									"name": "Get all pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "57ee4f26-6810-4118-a70e-4c75ee33e3d4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b3b8fae7-77e7-4de8-becd-977ca0f9c8c7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(3);",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Received\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ddfacadc-3a14-4710-a66d-98d38dbd8497",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6603cfe5-edb5-4edd-8340-4ff03d697b94",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create piece with itemId",
							"item": [
								{
									"name": "init inventory data",
									"item": [
										{
											"name": "create instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7a1e2baa-481e-4a58-b65b-21f47259349b",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d63382e5-8da4-4cc3-9909-cbe0a378ed2a",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"_instance_id\", uuid.v4());",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"discoverySuppress\": false,\n    \"staffSuppress\": false,\n    \"previouslyHeld\": false,\n    \"source\": \"FOLIO\",\n    \"title\": \"test\",\n    \"instanceTypeId\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\n    \"precedingTitles\": [],\n    \"succeedingTitles\": [],\n    \"id\": \"{{_instance_id}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances"
													]
												}
											},
											"response": []
										},
										{
											"name": "create holding",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "389374e8-aefe-47ae-9eb5-8d9d5500d534",
														"exec": [
															"pm.environment.set(\"_holding_id\", pm.response.json().id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"permanentLocationId\" : \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n\t\"instanceId\" : \"{{_instance_id}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{instanceId}}%20and%20permanentLocationId==53cf956f-c1df-410b-8bea-27f712cca7c0",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create item",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c24fab1f-6b43-4bf7-a55a-1c17bd51146d",
														"exec": [
															"pm.environment.set(\"_item_id\", pm.response.json().id);",
															"",
															"pm.test(\"purchaseOrderLineIdentifier is null\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.purchaseOrderLineIdentifier).to.eql(null);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\" : \"{{_holding_id}}\",\n    \"barcode\": \"{{$guid}}\",\n    \"materialType\": {\n        \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\"\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"items"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "create order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "466d86ca-a1d1-4037-9912-96a79ec99aef",
												"exec": [
													"var id = pm.response.json().id",
													"pm.environment.set(\"_order_id\", id);",
													"pm.environment.set(\"_poNumber\", pm.response.json().poNumber);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "369d37e9-c617-4e16-bcff-ffd6f9900217",
												"exec": [
													"var poNumberNum = pm.environment.get(\"poNumberNum\");",
													"if (poNumberNum === null) {",
													"    pm.environment.set(\"poNumberNum\", 1);",
													"    console.log('1');",
													"}else",
													"{",
													"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
													"    console.log('2');",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"poNumber\": \"99999{{poNumberNum}}\",\n    \"orderType\": \"One-Time\",\n    \"vendor\": \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "create order-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4263e8d6-8411-4df0-aea9-2639d638274e",
												"exec": [
													"pm.environment.set(\"_poline_id\", pm.response.json().id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"edition\" : \"First edition.\",\n  \"checkinItems\" : true,\n  \"instanceId\" : \"271827e7-8e62-4669-bb3a-fac5ed92c4e9\",\n  \"acquisitionMethod\" : \"Approval Plan\",\n  \"alerts\" : [ ],\n  \"claims\" : [ ],\n  \"contributors\" : [ {\n    \"contributor\" : \"Burnett, William (Consulting professor of design),\",\n    \"contributorNameTypeId\" : \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n  }, {\n    \"contributor\" : \"Evans, David J. (David John), 1953-\",\n    \"contributorNameTypeId\" : \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n  } ],\n  \"cost\" : {\n    \"listUnitPrice\" : 1.0,\n    \"currency\" : \"USD\",\n    \"discountType\" : \"percentage\",\n    \"quantityPhysical\" : 1,\n    \"poLineEstimatedPrice\" : 1.0\n  },\n  \"details\" : {\n    \"productIds\" : [ {\n      \"productId\" : \"9780525655244\",\n      \"productIdType\" : \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n      \"qualifier\" : \"(hardcover)\"\n    } ],\n    \"subscriptionInterval\" : 365\n  },\n  \"eresource\" : {\n    \"activated\" : false,\n    \"createInventory\" : \"Instance, Holding\",\n    \"trial\" : false,\n    \"accessProvider\" : \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\"\n  },\n  \"fundDistribution\" : [ {\n    \"fundId\" : \"65032151-39a5-4cef-8810-5350eb316300\",\n    \"distributionType\" : \"percentage\",\n    \"value\" : 100.0\n  } ],\n  \"isPackage\" : false,\n  \"locations\" : [ {\n    \"locationId\" : \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"quantity\" : 1,\n    \"quantityPhysical\" : 1\n  } ],\n  \"orderFormat\" : \"Physical Resource\",\n  \"paymentStatus\" : \"Pending\",\n  \"physical\" : {\n    \"createInventory\" : \"Instance, Holding, Item\",\n    \"materialType\" : \"1a54b431-2e4f-452d-9cae-9cee66c9a892\",\n    \"materialSupplier\" : \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\",\n    \"volumes\" : [ ]\n  },\n  \"poLineNumber\" : \"{{_poNumber}}-1\",\n  \"publicationDate\" : \"2020\",\n  \"publisher\" : \"Alfred A. Knopf\",\n  \"purchaseOrderId\" : \"{{_order_id}}\",\n  \"receiptStatus\" : \"Pending\",\n  \"reportingCodes\" : [ ],\n  \"source\" : \"User\",\n  \"titleOrPackage\" : \"Designing your work life : how to thrive and change and find happiness at work / Bill Burnett and Dave Evans.\",\n  \"vendorDetail\" : {\n    \"instructions\" : \"\",\n    \"vendorAccount\" : \"1234\"\n  },\n  \"metadata\" : {\n    \"createdDate\" : \"2020-04-17T12:07:19.778+0000\",\n    \"createdByUserId\" : \"b6c6415e-acec-561a-b7b6-a5f474393cbf\",\n    \"updatedDate\" : \"2020-04-17T12:07:19.778+0000\",\n    \"updatedByUserId\" : \"b6c6415e-acec-561a-b7b6-a5f474393cbf\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "get title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a172989d-4776-479d-9848-043778dbcef3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ce188510-7ea6-4afd-a77e-eabea5db21c6",
												"exec": [
													"pm.test(\"Title status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"    let title = pm.response.json().titles[0];",
													"    pm.expect(title.id).to.exist;",
													"    pm.variables.set(\"titleId\", title.id);",
													"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{_poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{_poline_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "create piece",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "052bd757-924f-4656-9894-aca629a3af01",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Physical\",\n    \"caption\": \"test\",\n    \"locationId\": \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{titleId}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										}
									},
									"response": []
								},
								{
									"name": "get item with purchaseOrderLineIdentifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0796afe-85c0-4254-9d9b-393dd4cd0cc6",
												"exec": [
													"",
													"pm.test(\"purchaseOrderLineIdentifier isn't null\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.purchaseOrderLineIdentifier).to.eql(pm.environment.get(\"_poline_id\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\": \"4e7762bf-eb3a-4fd4-bb9a-cf102bc122d1\",\n    \"barcode\": \"1234{{poNumber}}\",\n    \"materialType\": {\n        \"id\": \"615b8413-82d5-4203-aa6e-e37984cb5ac3\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"2b94c631-fca9-4892-a730-03ee529ffe27\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_item_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"inventory",
												"items",
												"{{_item_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5144e8f-043d-46de-841d-472f1c0216b7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "49a888fb-d35c-4975-99bc-75bbebbb96a5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create holdings/instance/item in time manual piece creation for POL is package",
							"item": [
								{
									"name": "Create holdings/instance/item in time manual piece creation where POL is package",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4a16f984-6d07-4910-9d2f-b2418d999a2a",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"poNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "461f6450-49f2-409f-9dd7-2ee3a7086e28",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"order356-1\", beOrder);",
															"    pm.variables.set(\"orderId356-1\", beOrder.id);",
															"    pm.variables.set(\"orderNumber356-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add package order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3ef97096-c455-4b9b-b6b4-9a0f8a1c20a6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"orderLine356-1\", beOrderLine);",
															"    pm.variables.set(\"orderLineId356-1\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-1}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance, Holding, Item\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8fccc34a-af45-463c-b416-d99e611d5a73",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.variables.set(\"title356-1\", title);",
															"    pm.variables.set(\"titleId356-1\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-1}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1688d787-7d7f-43f6-b973-7f38ad9351aa",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let piece = {};\r",
															"\r",
															"pm.test(\"Order line is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.variables.set(\"pieceId356-1\", piece.id);\r",
															"    pm.variables.set(\"pieceTitleId356-1\", piece.titleId);\r",
															"    pm.variables.set(\"pieceLocationId356-1\", piece.locationId);\r",
															"    pm.variables.set(\"piecePoLineId356-1\", piece.poLineId);\r",
															"    pm.variables.set(\"pieceItemId356-1\", piece.itemId);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-1}}\",\n\t\"titleId\":\"{{titleId356-1}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b64cc7b-f522-4432-ae7c-82407b122abc",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let line = {};\r",
															"\r",
															"pm.test(\"Get order\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    line = pm.response.json();\r",
															"    pm.expect(line.compositePoLines[0].instanceId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d4368131-3f2e-46c3-8280-701f53cc9090",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.variables.set(\"titleId356-1\", title.id);\r",
															"    pm.variables.set(\"titleInstanceId356-1\", title.instanceId);\r",
															"    pm.variables.set(\"titleTitle356-1\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.variables.get(\"orderLineId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1977b119-6bc8-4814-96b7-aa81b3aa61d5",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get instance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.variables.set(\"instanceId356-1\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.variables.get(\"titleTitle356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Item has link to title, POL, location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab040e8d-1de1-4878-91be-be12024960dd",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let item = {};\r",
															"\r",
															"pm.test(\"Get item\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    item = pm.response.json();\r",
															"    pm.variables.set(\"itemId356-1\", item.id);\r",
															"    pm.variables.set(\"itemHoldingId356-1\", item.holdingsRecordId);\r",
															"    pm.expect(item.title).to.be.equal(pm.variables.get(\"titleTitle356-1\"));\r",
															"    pm.expect(item.purchaseOrderLineIdentifier).to.be.equal(pm.variables.get(\"orderLineId356-1\"));\r",
															"    pm.expect(item.effectiveLocation.id).to.be.equal(pm.variables.get(\"pieceLocationId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{pieceItemId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"items",
														"{{pieceItemId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7af74b7e-194b-461a-81b5-25bfc4d80524",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holding = {};\r",
															"\r",
															"pm.test(\"Get holding\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holding = pm.response.json();\r",
															"    pm.variables.set(\"holdingId356-1\", holding.id);\r",
															"    pm.expect(holding.instanceId).to.be.equal(pm.variables.get(\"instanceId356-1\"));\r",
															"    pm.expect(holding.permanentLocationId).to.be.equal(pm.variables.get(\"pieceLocationId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{itemHoldingId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings",
														"{{itemHoldingId356-1}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create holdings/instancein time manual piece creation where POL is package Copy",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fc590d50-41c2-4897-bfc9-0431c94f9141",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"poNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4fb882de-5371-40ee-9804-5c60f4f40714",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"order356-2\", beOrder);",
															"    pm.environment.set(\"orderId356-2\", beOrder.id);",
															"    pm.environment.set(\"orderNumber356-2\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Package order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b82e770c-f276-43bd-97de-fcbd5565afb1",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"orderLine356-2\", beOrderLine);",
															"    pm.environment.set(\"orderLineId356-2\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-2}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bcae6a3b-8e04-450c-a57e-01aacbd2ee5f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Title is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.environment.set(\"title356-2\", title);",
															"    pm.environment.set(\"titleId356-2\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-2}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5c96de08-888a-4e71-bdec-91c487c39cc9",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let piece = {};\r",
															"\r",
															"pm.test(\"Piece is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.environment.set(\"pieceId356-2\", piece.id);\r",
															"    pm.environment.set(\"pieceTitleId356-2\", piece.titleId);\r",
															"    pm.environment.set(\"pieceLocationId356-2\", piece.locationId);\r",
															"    pm.environment.set(\"piecePoLineId356-2\", piece.poLineId);\r",
															"    pm.expect(piece.itemId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-2}}\",\n\t\"titleId\":\"{{titleId356-2}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9db2d4d4-d471-4df5-a449-6e83137a24b8",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let line = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    line = pm.response.json();\r",
															"    pm.expect(line.compositePoLines[0].instanceId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b7cc0fa-33ad-4cb5-861e-b7911a3a4eda",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.environment.set(\"titleId356-2\", title.id);\r",
															"    pm.environment.set(\"titleInstanceId356-2\", title.instanceId);\r",
															"    pm.environment.set(\"titleTitle356-2\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.environment.get(\"orderLineId356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a427c757-7a81-4686-8ee7-8c6f11fcabed",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.environment.set(\"instanceId356-2\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.environment.get(\"titleTitle356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5c305201-dcf5-4694-a287-5e7f1b86fb9e",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holdings = {};\r",
															"\r",
															"pm.test(\"Get holding\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holdings = pm.response.json();\r",
															"    pm.environment.set(\"holdingId356-2\", holdings.holdingsRecords[0].id);\r",
															"    pm.expect(holdings.holdingsRecords[0].instanceId).to.be.equal(pm.environment.get(\"instanceId356-2\"));\r",
															"    pm.expect(holdings.holdingsRecords[0].permanentLocationId).to.be.equal(pm.environment.get(\"pieceLocationId356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{titleInstanceId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{titleInstanceId356-2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create instance time manual piece creation where POL is package Copy Copy",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7f516a74-f5f4-4106-9741-3ddb93dfcfe7",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"poNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6a6d8ac7-ca21-4972-a0aa-cee2a662da18",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"order356-3\", beOrder);",
															"    pm.environment.set(\"orderId356-3\", beOrder.id);",
															"    pm.environment.set(\"orderNumber356-3\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0fe6ce98-be5e-46d7-bbfa-efba61ac476a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"orderLine356-3\", beOrderLine);",
															"    pm.environment.set(\"orderLineId356-3\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-3}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c2af8d40-6f75-4bd6-91a7-b6b82d78cdfa",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Piece is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.environment.set(\"title356-3\", title);",
															"    pm.environment.set(\"titleId356-3\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-3}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d0a8822-6432-45d1-bacb-ab3db324fa06",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let piece = {};\r",
															"\r",
															"pm.test(\"Piece is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.environment.set(\"pieceId356-3\", piece.id);\r",
															"    pm.environment.set(\"pieceTitleId356-3\", piece.titleId);\r",
															"    pm.environment.set(\"pieceLocationId356-3\", piece.locationId);\r",
															"    pm.environment.set(\"piecePoLineId356-3\", piece.poLineId);\r",
															"    pm.expect(piece.itemId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-3}}\",\n\t\"titleId\":\"{{titleId356-3}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "685832e7-a9bd-4004-97c6-81f22ab45bd1",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.environment.set(\"titleId356-3\", title.id);\r",
															"    pm.environment.set(\"titleInstanceId356-3\", title.instanceId);\r",
															"    pm.environment.set(\"titleTitle356-3\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.environment.get(\"orderLineId356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3fabff85-48ae-465b-8290-078641ae5932",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.environment.set(\"instanceId356-3\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.environment.get(\"titleTitle356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "855843e2-a10e-4c0c-9bb0-8ddb8dba64c5",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holdings = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holdings = pm.response.json();\r",
															"    pm.environment.set(\"holdingId356-3\", holdings.holdingsRecords[0].id);\r",
															"    pm.expect(holdings.holdingsRecords[0].instanceId).to.be.equal(pm.environment.get(\"instanceId356-3\"));\r",
															"    pm.expect(holdings.holdingsRecords[0].permanentLocationId).to.be.equal(pm.environment.get(\"pieceLocationId356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{titleInstanceId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{titleInstanceId356-3}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a34cbb33-0a1a-4232-a6b9-bb150629b731",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb8433c7-227e-4f5a-a69b-a7965721a146",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving History",
					"item": [
						{
							"name": "Get receiving history for Open Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c364650d-8380-4bcd-8b5e-b856f73ccd87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab02b5c8-0dbb-4178-9d97-621d4575d279",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"History has pieces to receive\", function() {",
											"    pm.expect(jsonData.totalRecords).to.equal(7);",
											"});",
											"",
											"pm.test(\"History contains all expected fields\", function(){",
											"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{receivingHistoryPoId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{receivingHistoryPoId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history for Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55ec41a9-9474-41f5-99cd-855dd019b823",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e72c02c2-842e-4d5b-801c-717c05ce0d2d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"History has no pieces to receive\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{orderWithReceiptNotRequiredId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Inventory",
					"item": [
						{
							"name": "Test createInventory defaults",
							"item": [
								{
									"name": "Create order with createInventory system value from config (createInventory config removed)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c77c055e-7ab3-47ab-9dd1-2e34f5d15419",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV5\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull1\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "366d08aa-505b-4650-a75b-daaa959e0419",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId1\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Create order with createInventory default config value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "de292235-dda7-44cd-92a2-caa957053913",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"",
													"    let bodyTemplate = testConfigs.bodyTemplate;",
													"    let configName = \"createInventory\";",
													"",
													"    bodyTemplate.configName = configName;",
													"    bodyTemplate.value = \"{\\\"eresource\\\": \\\"None\\\",\\\"physical\\\": \\\"None\\\", \\\"other\\\": \\\"None\\\"}\";",
													"    utils.createConfig(bodyTemplate);",
													"",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV6\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull2\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f749d0b1-9edf-457e-aeef-d57c5e38daee",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId2\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull2}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Get configs and delete them all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "659a8ac4-b0b2-4e3d-95a8-453fd8315dbb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Removing all current configs\", function() {",
													"    pm.response.to.be.ok;",
													"",
													"    let currentConfigs = pm.response.json().configs;",
													"    console.log(\"Current configs: \", currentConfigs);",
													"    for (var i = 0; i < currentConfigs.length; i++) {",
													"        let configId = currentConfigs[i].id;",
													"        utils.deleteConfig(configId);",
													"    }",
													"",
													"    pm.environment.unset(\"current-orders-configs\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f2e92b9b-3d88-4d36-a61d-50ee7594dfdb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS"
												}
											]
										},
										"description": "Delete configs to excercise next step. The case when order created with empty configuration"
									},
									"response": []
								},
								{
									"name": "Instance Status - temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d657c750-f15e-405e-9c8f-f97fbc568ea1",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "75237023-f9b4-46c6-b765-5c7327845948",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"daf2681c-25af-4202-a3fa-e58fdf806183\",\r\n  \"code\": \"temp\",\r\n  \"name\": \"Temporary\",\r\n  \"source\": \"folio\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"instance-statuses"
											]
										},
										"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Loan Type - Can circulate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9e7e1f0-93c2-4dfb-b467-58c8d8e4cfec",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d45ca0f8-99a3-4b91-a322-a0505f2a1909",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\":\"2b94c631-fca9-4892-a730-03ee529ffe27\",\r\n  \"name\":\"Can circulate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"loan-types"
											]
										},
										"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Create order with createInventory system value (configs are empty)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "59170f21-fd23-48b7-9543-9dbba7bb6e1a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV7\";",
													"",
													"    // remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull3\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f538a693-0052-4784-807d-fb8e2a17d673",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function() {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId3\", order.id);",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function() {",
													"    utils.validatePoLines(order, 1, true);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull3}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Test for the case described in [MODORDERS-209](https://issues.folio.org/browse/MODORDERS-209)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "00a0ebd4-3fe1-4d2e-9afe-8da5fe81fb8d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "31f69086-40a6-4c09-a79b-35db39b7d22e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create order with createInventory NONE and empty locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "986dae84-916f-4110-adf7-abf4b0e82a2c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV1\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.compositePoLines[0].physical.createInventory = \"None\";",
											"    ",
											"    order.compositePoLines[0].locations = [];",
											"",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryNone\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1bc80d36-fe91-423b-a3ce-493d8faff974",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryNoneId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Line and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryNone}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "46494095-d642-4a28-a662-17d52e031e9d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV2\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstance\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f8907047-3330-4110-b79c-ca626eb963df",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstance}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1afce49-ca75-496a-9f0e-fa112cea7504",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV3\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHolding\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "079b1006-1603-4c6c-a898-45c2f1978db6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHolding}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING_ITEM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b9f975b0-89dd-4edc-bed5-590457a7504f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV4\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHoldingItem\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7b36b83b-857e-4325-92d4-75e9c6ad277e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingItemId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHoldingItem}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Open order with P/E Mix, physical Instance, Holding, Items, electronic - None with locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9398181c-4abb-4ea6-9c8b-5f7808ee6590",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines.pop();",
											"    order.compositePoLines[0].cost.quantityPhysical = 2;",
											"    order.compositePoLines[0].cost.quantityElectronic = 2;",
											"    let location = {",
											"        \"locationId\": pm.environment.get(\"locationId1\"),",
											"        \"quantityElectronic\": 2,",
											"        \"quantityPhysical\": 2",
											"    };",
											"    ",
											"     order.compositePoLines[0].locations = [location];",
											"  ",
											"    pm.variables.set(\"po_mixed\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f2e27d63-ee5e-493c-bf06-7257ae5b1058",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 1);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_mixed}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Get current configs and restore test values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aac463b1-8b69-4da4-96b4-fcc4d5fe8747",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"let configNamesToProcess = testConfigs.configNames;",
											"",
											"let configs = [];",
											"pm.test(\"Get configs response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    configs = pm.response.json().configs;",
											"});",
											"",
											"console.log(\"Config codes to restore test values: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);",
											"pm.environment.set(\"temp-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2fd97ba9-0bea-4a3a-a098-0af913fc39e7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "get title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "db4940d3-62dd-4187-aa90-708000cb450a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"pm.environment.set(\"poLIneIdForTitle\", compPoLine.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d49bb835-6700-4834-b22c-3a6b51ba4fe1",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let titles = pm.response.json();",
											"    pm.variables.set(\"titleId\", titles.titles[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{poLIneIdForTitle}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLIneIdForTitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check-in pieces without items in Inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ddd216eb-7335-463b-9cb9-86580d776712",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"",
											"utils.createPieceAndCheckInBody(compPoLine);",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a0cb1704-b104-45d3-8be9-08c5239eb43d",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece without items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d08e888-45ca-4f0a-ad44-d4d1ab6d401a",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4520dbe9-bafd-4eab-87f3-9eae2ad9aea3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece in the prior request to Expected status"
							},
							"response": []
						},
						{
							"name": "check-in the existing piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d41e741-eb63-4990-8bad-dde315248b6d",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "702b66cc-5a19-4c6a-b55b-c0cc2d6dfac0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Expected\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "Do not create a new piece, but the existing piece must be successfully checked in"
							},
							"response": []
						},
						{
							"name": "check-in pieces with items in inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c9167fe-88ba-4995-9df5-c2081dd7ac58",
										"exec": [
											"//get holdings record Id -> need instance id and location id",
											"//get loan type id",
											"//create item -> need material type, loan type and holdings Id",
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"",
											"utils.prepareCheckinBodyWithItems(compPoLine);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53cadb6b-3ccd-4856-8bff-070a560db853",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function() {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function() {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 1, \"In Process\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece with items in inventory and performs check-in. Tests to see if the piece status is changed and also the Po line status. The order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece with items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9426923-3a8b-4627-b142-271f05cbac5c",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_physical_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"     utils.validateInventoryItemsReceived(line, 1, \"On order\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b791bce6-365a-4228-859b-e7527e445888",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Physical and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece with items. The item status as well as the piece status must be modified"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f4cd99c7-1bf4-4f29-b936-5448a875eee7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc060f84-7d38-4c23-8248-526356a2ab8a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check Order  automatically changes workflowStatus",
					"item": [
						{
							"name": "Create Pending order, that should be automatically closed on transition to open",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e798e175-4f95-4ab7-9ba5-8f4f3f21da4e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(pendingOrder));",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											" ",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = pendingOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.globals.set(\"automatically_closed_order_content\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"            ",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da119844-08a1-47f2-9bbd-e39709b790e4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_closed_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{automatically_closed_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open, adding 2 more lines make all lines completed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5711990a-ecf4-420e-b380-41df890dde36",
										"exec": [
											"let pendingOrder = pm.globals.get(\"automatically_closed_order_content\");",
											"",
											"// Set Open status",
											"pendingOrder.workflowStatus = \"Open\";",
											"",
											"",
											"pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"pm.globals.unset(\"automatically_closed_order_content\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "37ca1b71-564b-49ec-9428-58c2ddf0bf0c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyClosedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        ",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyClosedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyClosedOrder}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Create Open order, that should be automatically closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3dde6d54-04b2-4d62-a557-f566a39e8462",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let openOrder = res.json();",
											"    openOrder.workflowStatus = \"Open\";",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(openOrder));",
											"    delete openOrder.poNumber;",
											"",
											" ",
											"    // add 2 new PO lines",
											"    openOrder.compositePoLines = openOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = openOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.variables.set(\"request_body\", JSON.stringify(utils.prepareOrder(openOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8fd0a1c3-139e-4b27-aabf-bc235e8aa29e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Order id exist\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOpenOrder\", jsonData.id);",
											"    pm.expect(jsonData.closeReason.reason).is.equal(\"Complete\");",
											"});",
											"",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Pending order, that should be automatically open in an attempt to close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c3129629-dfff-4855-92c3-4d0f16f1bf28",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											"    // Setting create inventory to false for PO Line with P/E Mix format",
											"    pendingOrder.compositePoLines[0].paymentStatus = \"Pending\";",
											"",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fa572f47-ab18-4b2c-a9db-199d04fd23da",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyOpenedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_opened_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "746a01a3-a8ca-46c5-aaeb-00bd15fa927b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"automatically_opened_order_content\");",
											"",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Closed\";",
											"    pendingOrder.closeReason = {",
											"        \"reason\": \"Complete\"",
											"    };",
											" ",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"automatically_opened_order_content\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ee60f61-7084-4da9-ad37-98c3f167cce7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyOpenedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyOpenedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyOpenedOrder}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78ef8177-330b-4a87-a0c4-5fdf09e27253",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b422b82a-f019-4349-aaa6-0552e7ee8ad7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check order without PO line",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f37fefcb-2718-4eba-815d-7c8078ce5fc1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"THIS IS TEST FOR ORDER WITHOUT POLINES\"];",
											"",
											"pm.variables.set(\"orderWithoutPoLinesBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7b441529-e8ec-4fb8-8191-4de5f9b4fa68",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(1);",
											"    });",
											"    ",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderWithoutPoLinesId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithoutPoLinesBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b55506ee-3b41-4638-bf0f-d58f5c2d813e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check orders without po-lines\", function () {",
											"    var jsonData = pm.response.json();",
											"    var purchaseOrders = jsonData.purchaseOrders;",
											"    ",
											"    pm.expect(purchaseOrders).to.have.lengthOf.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4631c8d0-1f24-4401-b6ea-2e69987ce83e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=notes=THIS IS TEST FOR ORDER WITHOUT POLINES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "notes=THIS IS TEST FOR ORDER WITHOUT POLINES"
										}
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "50a0df63-0b3b-4d14-be8d-8fb3fa8e4a4b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15e06974-59ec-4945-95d1-5a229b0035e0",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderWithoutPoLinesId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderWithoutPoLinesId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ISBN validation",
					"item": [
						{
							"name": "Create Order with duplicate ISBN numbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7ce1f53b-4af7-4c5e-b27f-7d8daba8ff93",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    order = utils.deletePoNumber(order);",
											"    order.compositePoLines.pop();",
											"    let preparedOrder = utils.prepareOrder(order);",
											"    preparedOrder.compositePoLines[0].details.productIds = [];",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"1-4028-9462-7\", null));",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"1-4028-9462-7\", \"(q1)\"));",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"9781402894626\", \"(q2)\"));",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"9781402894626\", null));",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(preparedOrder));",
											"})",
											"",
											"function buildProductId(isbn, qualifier) {",
											"    return {",
											"        \"productId\": isbn,",
											"        \"productIdType\": pm.environment.get(\"isbnIdentifierTypeId\"),",
											"        \"qualifier\": qualifier",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "416086a6-d8fb-42c3-98e8-5985b9661c95",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"isbnOrderId\", jsonData.id); ",
											"    pm.globals.set(\"isbn_Order_content\", jsonData);",
											"});",
											"",
											"pm.test(\"validate ISBN 13 is returned\", function () {",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds).to.have.lengthOf(2);",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[0].productId).to.equal(\"9781402894626\");",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[0].qualifier).to.equal(\"(q1)\");",
											"    ",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[1].productId).to.equal(\"9781402894626\");",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[1].qualifier).to.equal(\"(q2)\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						},
						{
							"name": "Update Order with ISBN10 - with hyphens",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2c2eeb15-b1b9-4598-8ce1-bb106217c2b3",
										"exec": [
											"     let pendingOrder = pm.globals.get(\"isbn_Order_content\");",
											"    ",
											"    //set ISBN10",
											"    pendingOrder.compositePoLines[0].details.productIds = [];",
											"    pendingOrder.compositePoLines[0].details.productIds.push(buildProductId(\"81-7525-766-0\", \"(q1)\"));",
											"    pendingOrder.compositePoLines[0].details.productIds.push(buildProductId(\"81-7525-766-0\", \"(q1)\"));",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(pendingOrder));",
											"    ",
											"    function buildProductId(isbn, qualifier) {",
											"    return {",
											"        \"productId\": isbn,",
											"        \"productIdType\": pm.environment.get(\"isbnIdentifierTypeId\"),",
											"        \"qualifier\": qualifier",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2c47d36d-0b5b-46e4-bdcb-08a469275ee9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.isbnOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.test(\"ISBN value is modified to ISBN 13\", function () {",
											"            pm.expect(order.compositePoLines[0].details.productIds).to.have.lengthOf(1);",
											"            pm.expect(order.compositePoLines[0].details.productIds[0].productId).to.equal(\"9788175257665\");",
											"            pm.expect(order.compositePoLines[0].details.productIds[0].qualifier).to.equal(\"(q1)\");",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{isbnOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{isbnOrderId}}"
									]
								},
								"description": "Update a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Templates",
					"item": [
						{
							"name": "Create order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b508d3db-d873-40c6-9c79-f5eb8e8844e7",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"pm.variables.set(\"orderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4e84eca2-0037-436f-ac0e-3bca2e77afca",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    var orderTemplate = pm.response.json();",
											"",
											"    pm.test(\"Verify order template\", () => {",
											"        pm.expect(orderTemplate.id).to.exist;",
											"        pm.expect(orderTemplate.templateCode).to.eql(expectedOrderTemplate.templateCode);",
											"        pm.expect(orderTemplate.templateDescription).to.eql(expectedOrderTemplate.templateDescription);",
											"        pm.expect(orderTemplate.templateName).to.eql(expectedOrderTemplate.templateName);",
											"        pm.expect(orderTemplate.acquisitionMethod).to.eql(expectedOrderTemplate.acquisitionMethod);",
											"        pm.expect(orderTemplate.approved).to.be.true;",
											"        pm.environment.set(\"orderTemplateId\", orderTemplate.id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order template by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73cd7f44-8b9b-4a12-a7c8-1ddc3ecd647e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "673d19c0-4a45-4089-9b63-4c37f415f77c",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var orderTemplate = pm.response.json();",
											"",
											"    pm.test(\"Verify order template\", () => {",
											"        pm.expect(orderTemplate.id).to.exist;",
											"        pm.expect(orderTemplate.templateCode).to.eql(expectedOrderTemplate.templateCode);",
											"        pm.expect(orderTemplate.templateDescription).to.eql(expectedOrderTemplate.templateDescription);",
											"        pm.expect(orderTemplate.templateName).to.eql(expectedOrderTemplate.templateName);",
											"        pm.expect(orderTemplate.acquisitionMethod).to.eql(expectedOrderTemplate.acquisitionMethod);",
											"        pm.expect(orderTemplate.approved).to.be.true;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4ca163a1-e95b-4fa7-9fa8-df73f17bedd5",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"body.templateCode = \"Amazon-LLL\";",
											"pm.variables.set(\"updatedTemplateCode\", body.templateCode);",
											"pm.variables.set(\"updatedOrderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5c0c7018-1b3f-4af1-bb5f-9cd4657d4937",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/order-templates/\" + pm.environment.get(\"orderTemplateId\"), (err, res) => {",
											"        pm.test(\"Order template is updated\", () => {",
											"            pm.expect(res.code).to.eql(200);",
											"            var orderTemplate = res.json();",
											"            pm.expect(orderTemplate.templateCode).to.eql(pm.variables.get(\"updatedTemplateCode\"));",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated order templates collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e933f274-94a0-4f7f-ae7a-a12e6789e181",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3e0fe63-274b-4d5c-a794-1cf9be75b51e",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var orderTemplatesCollection = pm.response.json();",
											"",
											"    pm.test(\"Verify order templates collection contains order templates\", () => {",
											"        orderTemplatesCollection.totalRecords > 0;",
											"        pm.expect(orderTemplatesCollection.orderTemplates.length).to.eql(orderTemplatesCollection.totalRecords);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9ac608d9-6e59-4cbd-adb9-e8376ad1cc49",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4db02e1a-cb24-45ee-a219-88ff8f8bb6dc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/order-templates/\" + pm.environment.get(\"orderTemplateId\"), (err, res) => {",
											"        pm.test(\"Order template is deleted\", () => {",
											"             pm.expect(res.code).to.eql(404);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check items status changes upon Closing/Reopening order",
					"item": [
						{
							"name": "Create Open order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "038099db-fa58-4d91-b8a5-7fee47d0437f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let order = res.json();",
											"",
											"    order.workflowStatus = \"Open\";",
											"    delete order.poNumber;",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = \"Fully Paid\";",
											"        lines[i].receiptStatus = \"Awaiting Receipt\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(utils.prepareOrder(order)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"            ",
											"        };",
											"    }",
											"    line.physical.createInventory = \"Instance, Holding, Item\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c5c70325-5f10-43d4-b537-d21e0b97aea0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"checkItemStatusOrderId\", jsonData.id);",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(jsonData));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order make all lines completed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d4f59fe7-3a00-4689-8e28-83cc007db786",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines.forEach(line => {",
											"    line.paymentStatus = \"Fully Paid\";",
											"    line.receiptStatus = \"Fully Received\";",
											"    delete line.instanceId;",
											"})",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "08294a85-e63f-4373-8a87-b80e11f72ae6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = {};",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"Order closed\"));",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Update order make lines uncompleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a512c008-3221-4a7c-8d37-085150830345",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines.forEach(line => {",
											"    line.paymentStatus = \"Partially Paid\";",
											"    delete line.instanceId;",
											"})",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aafaf394-0c38-4e82-a674-905d153d7e2a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = {};",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"On order\"));",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Update order without poLine with status Closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da275e01-91bc-46ba-a1ac-2d1e88a98be8",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines = [];",
											"order.workflowStatus = \"Closed\";",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "23dfe447-ca11-4582-bfe9-89eef1cb21a0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.test(\"Verify order updated with expected workflow status\", function () {",
											"        pm.expect(order.workflowStatus).is.equal(\"Closed\");",
											"    });",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"Order closed\"));",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Reopen order without poLine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9bff862a-d674-4780-9f84-b6172eb433c6",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines = [];",
											"order.workflowStatus = \"Open\";",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1699708e-86b5-4f93-ae90-9ab5db3af4df",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order = res.json();",
											"    ",
											"    pm.test(\"Verify order updated with expected workflow status\", function () {",
											"         pm.expect(order.workflowStatus).is.equal(\"Open\");",
											"    });",
											"   ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"On order\"));",
											"    ",
											"    pm.globals.unset(\"check_item_status_order_content\");",
											"    pm.globals.unset(\"checkItemStatusOrderId\");",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Reason for closure",
							"item": [
								{
									"name": "Create reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98862036-2393-4458-b225-b863d1a1d18e",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.source = \"System\";",
													"pm.variables.set(\"reasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "689f8afd-aa3b-443a-91e3-601ce0c2bfe3",
												"exec": [
													"let expectedReasonForClosure = globals.testData.reasonForClosure;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var reasonForClosure = pm.response.json();",
													"    ",
													"    pm.test(\"Verify reason for closure\", () => {",
													"        pm.expect(reasonForClosure.id).to.exist;",
													"        pm.expect(reasonForClosure.reason).to.eql(expectedReasonForClosure.reason);",
													"        pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"        pm.environment.set(\"reasonForClosureId\", reasonForClosure.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{reasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6f126ee6-7647-4d3e-92cd-1bb5277efc14",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7931544-9479-4439-b06a-d67c42a344d3",
												"exec": [
													"let expectedReasonForClosure = globals.testData.reasonForClosure;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var reasonForClosure = pm.response.json();",
													"",
													"    pm.test(\"Verify reason for closure\", () => {",
													"        pm.expect(reasonForClosure.id).to.exist;",
													"        pm.expect(reasonForClosure.reason).to.eql(expectedReasonForClosure.reason);",
													"        pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "507a5140-fae5-4291-b0c4-4d05a43d5475",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.reason = \"Updated reason\";",
													"body.source = \"System\";",
													"pm.variables.set(\"updatedReason\", body.reason);",
													"pm.variables.set(\"updatedReasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "682a0e97-9b95-4ba3-a1c7-2fad43cf557c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/reasons-for-closure/\" + pm.environment.get(\"reasonForClosureId\"), (err, res) => {",
													"        pm.test(\"Reason for closure is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var reasonForClosure = res.json();",
													"            pm.expect(reasonForClosure.reason).to.eql(pm.variables.get(\"updatedReason\"));",
													"            pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedReasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cdd66c64-71e7-43a9-8a5a-7a726cd43a22",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "36afb412-bba9-4ecf-b950-14b54e652a8c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var reasonForClosureCollection = pm.response.json();",
													"    pm.test(\"Verify reason for closure collection contains reasons for closure\", () => {",
													"        reasonForClosureCollection.totalRecords > 0;",
													"        pm.expect(reasonForClosureCollection.reasonsForClosure.length).to.eql(reasonForClosureCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "345db3c9-1267-44de-8d70-6446e76ea3c7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "94f37fb4-ed51-4b1d-9a31-c3c6c6757eb3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/reasons-for-closure/\" + pm.environment.get(\"reasonForClosureId\"), (err, res) => {",
													"        pm.test(\"Reason for closure is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prefix",
							"item": [
								{
									"name": "Create prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2d948f9d-51c0-44b1-8ad0-89bdcea97e0b",
												"exec": [
													"let body = globals.testData.prefix;",
													"pm.variables.set(\"prefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9721339b-340b-4f13-9d3f-ac6f086964f2",
												"exec": [
													"let expectedPrefix = globals.testData.prefix;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var prefix = pm.response.json();",
													"    ",
													"    pm.test(\"Verify prefix\", () => {",
													"        pm.expect(prefix.id).to.exist;",
													"        pm.expect(prefix.name).to.eql(expectedPrefix.name);",
													"        pm.expect(prefix.description).to.eql(expectedPrefix.description);",
													"        pm.environment.set(\"prefixId\", prefix.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{prefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "33f3882b-84a6-4211-8ea8-842b533523b3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f6daba21-3558-42e3-957b-a031bbeaae63",
												"exec": [
													"let expectedPrefix = globals.testData.prefix;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var prefix = pm.response.json();",
													"",
													"    pm.test(\"Verify prefix\", () => {",
													"        pm.expect(prefix.id).to.exist;",
													"        pm.expect(prefix.name).to.eql(expectedPrefix.name);",
													"        pm.expect(prefix.description).to.eql(expectedPrefix.description);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a21fe58e-dda4-4607-af48-d9dab80d6b38",
												"exec": [
													"let body = globals.testData.prefix;",
													"body.name = \"Updated name\";",
													"pm.variables.set(\"updatedName\", body.name);",
													"pm.variables.set(\"updatedPrefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b8150586-dfd0-4cc1-9bb2-48851ff5478b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var prefix = res.json();",
													"            pm.expect(prefix.name).to.eql(pm.variables.get(\"updatedName\"));",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPrefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "442536fc-4844-47a8-a938-0c7cd70bd289",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "906e8d21-8426-43b2-8449-9d618c979f96",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var prefixCollection = pm.response.json();",
													"    pm.test(\"Verify prefix collection contains prefixes\", () => {",
													"        prefixCollection.totalRecords > 0;",
													"        pm.expect(prefixCollection.prefixes.length).to.eql(prefixCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create order with prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "90a8c680-b607-403a-ad31-98396d332b32",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.poNumberPrefix = \"Updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "22888658-9f50-4a87-8dcc-b769ddc78c25",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.globals.set(\"prefixOrderId\", jsonData.id); ",
													"    pm.globals.set(\"prefixOrder\", jsonData);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete cannot delete used prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97d35401-3bfa-406e-bf64-ef102e10179f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "76908dfc-448d-491e-8dbf-665cb3693c0e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"prefixIsUsed\");",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is not deleted\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update order's prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1a2fe708-c0d7-46fd-ac2c-ae63e4b41789",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = pm.globals.get(\"prefixOrder\");",
													"order.poNumberPrefix = \"New updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "538902d6-dad4-4f8c-8675-85009173fed3",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{prefixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{prefixOrderId}}"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a8d8194e-5296-4207-9a7e-ba0476b18772",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5a731832-2508-44db-8f33-a06e9e0dbe45",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3326cc60-cc5e-4826-890d-3e30b3e78d5e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9e624290-5887-4947-9e6e-1f8b62769034",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.globals.unset(\"prefixOrderId\");",
													"    pm.globals.unset(\"prefixOrder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{prefixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{prefixOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Suffix",
							"item": [
								{
									"name": "Create suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "84b1702c-707b-4096-9024-01bf4985cad2",
												"exec": [
													"let body = globals.testData.suffix;",
													"pm.variables.set(\"suffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8aa18aaa-a528-4c9d-9be0-2d9381e03286",
												"exec": [
													"let expectedSuffix = globals.testData.suffix;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var suffix = pm.response.json();",
													"    ",
													"    pm.test(\"Verify suffix\", () => {",
													"        pm.expect(suffix.id).to.exist;",
													"        pm.expect(suffix.name).to.eql(expectedSuffix.name);",
													"        pm.expect(suffix.description).to.eql(expectedSuffix.description);",
													"        pm.environment.set(\"suffixId\", suffix.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{suffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0c2645c5-3859-4447-80c8-4284617aee01",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0392c058-f447-4dee-a6ff-2c34dcc6b3f5",
												"exec": [
													"let expectedSuffix = globals.testData.suffix;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var suffix = pm.response.json();",
													"",
													"    pm.test(\"Verify suffix\", () => {",
													"        pm.expect(suffix.id).to.exist;",
													"        pm.expect(suffix.name).to.eql(expectedSuffix.name);",
													"        pm.expect(suffix.description).to.eql(expectedSuffix.description);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97cb7e38-05d6-492b-9897-84051369b3e9",
												"exec": [
													"let body = globals.testData.suffix;",
													"body.name = \"Updated name\";",
													"pm.variables.set(\"updatedName\", body.name);",
													"pm.variables.set(\"updatedSuffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6763c1c8-cc52-44d7-9f0f-a1f15960d34d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var suffix = res.json();",
													"            pm.expect(suffix.name).to.eql(pm.variables.get(\"updatedName\"));",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedSuffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4623a4d7-aa36-49f6-ae54-fabce161517a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "416a80cd-86ec-42d3-bd3a-f46c0ef7b30a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var suffixCollection = pm.response.json();",
													"    pm.test(\"Verify suffix collection contains suffixes\", () => {",
													"        suffixCollection.totalRecords > 0;",
													"        pm.expect(suffixCollection.suffixes.length).to.eql(suffixCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create order with suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7ff5e412-ac53-4046-8f91-529666a7900c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.poNumberSuffix = \"Updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "48cb3087-3edb-4c88-935d-776b4988d6a7",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.globals.set(\"suffixOrderId\", jsonData.id); ",
													"     pm.globals.set(\"suffixOrder\", jsonData);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete cannot delete used suffx",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1eb3f4be-84dd-4e27-b069-bf80c242377f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e8710fed-4321-4c54-952c-a0362c70ca50",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"suffixIsUsed\");",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is not deleted\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update order's suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cd6d558e-e538-4685-8e8f-10653d0cd273",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = pm.globals.get(\"suffixOrder\");",
													"order.poNumberSuffix = \"New updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bd950844-5625-495a-8d6e-bdf0cecf1a83",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{suffixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{suffixOrderId}}"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7c015e17-780f-42b0-a5ea-64f60adddbae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "60e5a5cf-51ce-4691-aea2-de167ddae3b4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98cedb81-8c4a-4941-b5e9-be245f5c330a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c79dfdec-4990-4ac5-8f4c-4a3eb8588a2c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.globals.unset(\"suffixOrderId\");",
													"    pm.globals.unset(\"suffixOrder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{suffixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{suffixOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check holding creation upon receiving/chek-in",
					"item": [
						{
							"name": "Create Open order with P/E Mix",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44837cd2-8e59-4e92-8da6-432969f64c2f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    delete order.poNumber;",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines.pop();",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cbc84fb5-afd4-4685-ac8d-7d173e336f67",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"mixLineForCheckIn\", JSON.stringify(jsonData.compositePoLines[0]));",
											"    pm.environment.set(\"mixLineForCheckInId\", JSON.stringify(jsonData.compositePoLines[0].id));",
											"    pm.environment.set(\"instanceId\", jsonData.compositePoLines[0].instanceId);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Partially Paid\"));",
											"utils.verifyOrderCalculatedInfo(jsonData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create new location",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec9ac80f-cd35-4706-9e17-13a416244b24",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"checkinLocationId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "28fbdd26-1c96-4e2b-8cfe-974ff0eba1e3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"tes Loaction\",\n    \"code\": \"LOC_TEST\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get receiving history Order Line With Electronic format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2da0d76d-ffc0-4f25-833c-9daff447ac01",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "64609261-dffb-4fbb-aaf8-62bedce3e835",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let receivingHistory = pm.response.json().receivingHistory;",
											"    pm.expect(receivingHistory.length).to.be.above(0);",
											"    pm.environment.set(\"electronicResourceId\", receivingHistory[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{mixLineForCheckInId}} and pieceFormat==Electronic",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{mixLineForCheckInId}} and pieceFormat==Electronic"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in electronic piece, createInventory-\"instance\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "86adc6d4-7dd9-4e1e-81d4-d11d9feb8e5f",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = JSON.parse(pm.environment.get(\"mixLineForCheckIn\"));",
											"",
											"",
											"utils.prepareCheckinBody(compPoLine, pm.environment.get(\"electronicResourceId\"));",
											"let checkinBody = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"checkinBody.toBeCheckedIn[0].checkInPieces[0].locationId = pm.environment.get(\"checkinLocationId\");",
											"pm.variables.set(\"checkinBody\", JSON.stringify(checkinBody));",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "696b2d2b-b6c0-4306-9384-401b087d6a5c",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"mixLineForCheckInId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "Check that no holding for new location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b363c9e8-15ed-4ab9-a3cc-e57ea949c874",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "78a28eca-dbe6-4c12-abaa-ae8fdae044d5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let holdings = pm.response.json().holdingsRecords;",
											"    pm.expect(holdings).to.have.lengthOf(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history Order Line With Physical format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b357962d-5714-4ec6-8788-3f2a256a46a8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0b132de7-697c-485e-9fcd-bca4faeb771a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let receivingHistory = pm.response.json().receivingHistory;",
											"    pm.expect(receivingHistory.length).to.be.above(0);",
											"    pm.environment.set(\"physicalResourceId\", receivingHistory[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{mixLineForCheckInId}} and pieceFormat==Physical",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{mixLineForCheckInId}} and pieceFormat==Physical"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in physical piece, createInventory-\"instance, Holding\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ccd1a6e1-c0c9-4a70-93d8-613ddc153ec9",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = JSON.parse(pm.environment.get(\"mixLineForCheckIn\"));",
											"",
											"",
											"utils.prepareCheckinBody(compPoLine, pm.environment.get(\"physicalResourceId\"));",
											"let checkinBody = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"checkinBody.toBeCheckedIn[0].checkInPieces[0].locationId = pm.environment.get(\"checkinLocationId\");",
											"pm.variables.set(\"checkinBody\", JSON.stringify(checkinBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58ee8eb7-f05a-494f-b131-ab25a6c7b8bc",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"mixLineForCheckInId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "Check that holding created for new location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "303d3c01-70e1-4eb3-b620-c1d602c4e75a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d4249e37-9782-4bdf-8ed7-c3c44771c690",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let holdings = pm.response.json().holdingsRecords;",
											"    pm.expect(holdings).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify prefix and suffix within composite order",
					"item": [
						{
							"name": "create order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86f6dc4a-2086-4a01-9323-8d00a6c85c76",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix');",
											"});",
											"",
											"pm.environment.set(\"order_id\", jsonData.id);",
											"pm.environment.set(\"order_rs\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7dabeab-8323-443f-9f47-7f2c90bcf3a3",
										"exec": [
											"var poNumberNum = pm.environment.get(\"poNumberNum\");",
											"if (poNumberNum === null) {",
											"    pm.environment.set(\"poNumberNum\", 1);",
											"}else",
											"{",
											"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poNumber\": \"990001{{poNumberNum}}\",\n    \"poNumberPrefix\": \"pref\",\n    \"poNumberSuffix\": \"suf\",\n    \"orderType\": \"One-Time\",\n    \"vendor\": \"{{activeVendorId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "get order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "451b3008-ba00-4b81-8631-159d7136f172",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9df06c31-ea45-4078-97ac-5dce98731953",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "953ff89c-3bc5-42a9-85a8-83cade52aec0",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dac3c8e8-3683-4445-8996-3610638e99c0",
										"exec": [
											"var orderRs = pm.environment.get(\"order_rs\");",
											"orderRs.poNumberPrefix = \"pref1\";",
											"orderRs.poNumberSuffix = \"suf1\";",
											"pm.environment.set(\"order_open_rq\", JSON.stringify(orderRs));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_open_rq}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "order with prefix and suffix with updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67331034-f2ee-4c62-aeae-d8208d9f1f6c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix', 'pref1');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix', 'suf1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e60c0db-daa6-40f7-86a2-6a87cc08bc58",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receive piece with specified itemId when item wa deleted",
					"item": [
						{
							"name": "Create order with createInventory INSTANCE_HOLDING_ITEM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a9e45a0-823c-4045-bc7d-244ad945e97b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    delete order.poNumber;",
											"    order.compositePoLines.pop();",
											"    //set createInventory value",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines[0].locations.pop();",
											"    order.compositePoLines[0].locations[0].quantityPhysical = 1;",
											"    order.compositePoLines[0].cost.quantityPhysical = 1;",
											"    ",
											"    pm.variables.set(\"orderForReceiving\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f971bfb3-58dd-419e-80f1-30240f0fa756",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderForReceivingId\", order.id);",
											"    pm.globals.set(\"orderForReceiving\", order);",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForReceiving}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Close order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "24847f66-6ca4-4c12-9172-632dafcfa4c2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order =  pm.globals.get(\"orderForReceiving\");",
											"order.workflowStatus = \"Closed\";",
											"",
											"pm.variables.set(\"orderForReceiving\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c095400-bfdf-42a4-806d-b00029051fc3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForReceiving}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForReceivingId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForReceivingId}}"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Delete item from inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9b64b6a0-ff2b-4095-a0ba-692a5ddf9756",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"",
											"utils.sendGetRequest(\"/item-storage/items?limit=1&query=purchaseOrderLineIdentifier==\"+compPoLine.id, (err,res) => {",
											"    pm.variables.set(\"itemId\",  res.json().items[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e453b598-c683-4e1d-96c7-926614811604",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"item-storage",
										"items",
										"{{itemId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in the existing piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43016837-3aee-4a10-8d71-b39ae849d9d1",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(1);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(1);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, 1, 0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f61714bc-d6d8-4ca6-9181-fd91a240a74c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id, (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine, res.json().pieces[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "Do not create a new piece, but the existing piece must be successfully checked in"
							},
							"response": []
						},
						{
							"name": "Get pieces by poLineId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf04d914-8be5-444b-8b47-6365a320f605",
										"exec": [
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"pm.variables.set(\"poLineId\", compPoLine.id);",
											"",
											"pm.globals.unset(\"orderForReceiving\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d440c33-c710-4792-aebf-9357b29cc3e3",
										"exec": [
											"let piece = {};",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"",
											"    piece = pm.response.json().pieces[0];",
											"    pm.globals.set(\"pieceId\", piece.id);",
											"",
											"});",
											"",
											"pm.test(\"The reference to unexisting item was removed\", function() {",
											"    pm.expect(piece.itemId).to.be.an('undefined');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders-storage",
										"pieces"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLineId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7f7467a3-1a45-4c03-b5a0-a557f2ff7755",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "21a8c85b-7a4f-4d44-a7a6-304fed723d35",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.globals.unset(\"pieceId\");",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces and Location Consistency",
					"item": [
						{
							"name": "Create Instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df27eeb6-8ffc-49cc-85c9-151c85638239",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b82d0455-48d9-4408-94f7-e36cce6aeed3",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"_instanceId\", uuid.v4());",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"discoverySuppress\": false,\n    \"staffSuppress\": false,\n    \"previouslyHeld\": false,\n    \"source\": \"FOLIO\",\n    \"title\": \"test\",\n    \"instanceTypeId\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\n    \"precedingTitles\": [],\n    \"succeedingTitles\": [],\n    \"id\": \"{{_instanceId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Holding",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d530eace-ce36-4fca-81a1-91c297abc8f7",
										"exec": [
											"pm.environment.set(\"_holdingId\", pm.response.json().id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"permanentLocationId\" : \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n\t\"instanceId\" : \"{{_instanceId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}}%20and%20permanentLocationId==53cf956f-c1df-410b-8bea-27f712cca7c0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e286d122-20c7-4de1-a9bd-ec3d3ef5081e",
										"exec": [
											"pm.environment.set(\"_itemId\", pm.response.json().id);",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\" : \"{{_holdingId}}\",\n    \"barcode\": \"{{$guid}}\",\n    \"materialType\": {\n        \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0486ffa-9056-4191-919d-045f9a31b5e2",
										"exec": [
											"pm.environment.set(\"_requestId\", pm.response.json().id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"requestType\":\"Hold\",\n   \"fulfilmentPreference\":\"Hold Shelf\",\n   \"item\":{\n      \"barcode\":\"A14837334314\"\n   },\n   \"itemId\":\"{{_itemId}}\",\n   \"requester\":{\n      \"barcode\":\"236964750970123\"\n   },\n   \"status\": \"Open - Awaiting pickup\",\n   \"requesterId\":\"00000001-1111-5555-9999-999999999999\",\n   \"pickupServicePointId\":\"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n   \"requestDate\":\"2020-06-08T06:31:02Z\",\n   \"id\": \"489081f2-76de-4f22-8c0e-cdb7b91c5ffe\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"request-storage",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6645e57-b867-4190-83e3-2e4b7937820a",
										"exec": [
											"var id = pm.response.json().id",
											"pm.environment.set(\"_order_id\", id);",
											"pm.environment.set(\"_poNumber\", pm.response.json().poNumber);",
											"pm.environment.set(\"_poline_id\", pm.response.json().compositePoLines[0].id);",
											"pm.environment.set(\"_location_id\", pm.response.json().compositePoLines[0].locations[0].locationId);",
											"pm.environment.set(\"_purchaseOrder\", pm.response.json());",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0eb7e7c-2c7e-4486-8c0b-c36d4e95233a",
										"exec": [
											"var poNumberNum = pm.environment.get(\"poNumberNum\");",
											"if (poNumberNum === null) {",
											"    pm.environment.set(\"poNumberNum\", 1);",
											"    console.log('1');",
											"}else",
											"{",
											"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
											"    console.log('2');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"billTo\": \"5b608726-3ab6-4ea3-bdb2-b5106f45f5b3\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"poNumber\": \"99999{{poNumberNum}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"shipTo\": \"5b608726-3ab6-4ea3-bdb2-b5106f45f5b3\",\n  \"totalEstimatedPrice\": 101.16,\n  \"totalItems\": 4,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"checkinItems\": false,\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000+0000\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"6d6f642d-0005-1111-aaaa-6f7264657273\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": 24.99,\n        \"listUnitPriceElectronic\": 20.99,\n        \"currency\": \"USD\",\n        \"additionalCost\": 10.0,\n        \"discount\": 5.0,\n        \"discountType\": \"percentage\",\n        \"quantityPhysical\": 1,\n        \"quantityElectronic\": 1,\n        \"poLineEstimatedPrice\": 101.16\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"10000000155\",\n            \"productIdType\": \"6d6f642d-0010-1111-aaaa-6f7264657273\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000+0000\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000+0000\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"eresource\": {\n        \"activated\": false,\n        \"createInventory\": \"Instance, Holding, Item\",\n        \"trial\": false,\n        \"accessProvider\": \"{{activeVendorId}}\",\n        \"materialType\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n      },\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"{{fundId}}\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"{{fundId}}\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0\n        }\n      ],\n      \"isPackage\": false,\n      \"locations\": [\n        {\n          \"locationId\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n          \"quantity\": 2,\n          \"quantityElectronic\": 1,\n          \"quantityPhysical\": 1\n        }\n      ],\n      \"orderFormat\": \"P/E Mix\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"createInventory\": \"Instance, Holding, Item\",\n        \"materialType\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000+0000\",\n        \"volumes\": [\n          \"vol.1\"\n        ]\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"99999{{poNumberNum}}-1\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"purchaseOrderId\": \"4e743b7d-1852-4f04-8502-ab24e8adb918\",\n      \"receiptStatus\": \"Pending\",\n      \"reportingCodes\": [],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"tags\": {\n        \"tagList\": [\n          \"important\"\n        ]\n      },\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      },\n      \"metadata\": {\n        \"createdDate\": \"2020-06-07T17:37:12.481+0000\",\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\n        \"updatedDate\": \"2020-06-07T17:37:12.481+0000\",\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\n      }\n    }\n  ],\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-06-07T17:37:04.546+0000\",\n    \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\n    \"updatedDate\": \"2020-06-07T17:37:04.546+0000\",\n    \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c4d4be7-ffaa-475c-afa1-1854909423a0",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let title = pm.response.json().titles[0];",
											"    pm.expect(title.id).to.exist;",
											"    pm.environment.set(\"_title_id\", title.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "571918f3-2703-43c6-801a-71d29408be84",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{_poline_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{_poline_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c232b6dc-17a2-4546-8a93-9289e0ffa920",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"_first_piece_id\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1579dff9-9a92-43c3-bc22-4c85d1684d82",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Physical\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_itemId}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5dfd3d69-ff05-4b71-bea4-60de8a47bb5d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Electronic\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4133ca60-d2e7-430e-9582-c0010a50a195",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Electronic\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order - Pieces Need To Be Deleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d121dbd-10f6-4e20-9f57-e92589ecdd66",
										"exec": [
											"let updatedOrder = pm.environment.get(\"_purchaseOrder\");",
											"updatedOrder.workflowStatus = \"Open\";",
											"console.log(updatedOrder);",
											"pm.variables.set(\"updatedOrder\", JSON.stringify(updatedOrder));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da652bd4-48d5-4a72-98f9-666ef230a1c0",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.text()).to.include(\"piecesNeedToBeDeleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{_order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Piece #1 - There are Requests on Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae851975-e6f4-4402-8f0f-f1621e049e6b",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.text()).to.include(\"thereAreRequestsOnItem\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{_first_piece_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{_first_piece_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item - Item is not deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dc88c82-5d59-4cd2-aec7-8c108dad73d4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items",
										"{{_itemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93213365-5940-4d7f-89a2-bedea1f81915",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "text/plain"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests/{{_requestId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"request-storage",
										"requests",
										"{{_requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Piece - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3057b21e-d69c-4c41-af47-c7bbcc7765dd",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{_first_piece_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{_first_piece_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item - Item is deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07c5e075-f27a-4216-80b6-6ccc33a8e2cc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items",
										"{{_itemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "07957daa-7f2c-42ce-8456-ec5857c83ace",
										"exec": [
											"let updatedOrder = pm.environment.get(\"_purchaseOrder\");",
											"updatedOrder.workflowStatus = \"Open\";",
											"console.log(updatedOrder);",
											"pm.variables.set(\"updatedOrder\", JSON.stringify(updatedOrder));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "467fe8a1-a523-4e49-ad9d-8b383ca34951",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{_order_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e66ff717-cac2-4a6d-9a68-3c9428a2da26",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "249fab66-1695-4008-b056-72c0afb3a044",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "963ce97d-abba-411e-abc7-986ed58d394f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "94d974e8-c839-44d2-ab4c-f89be199a620",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create finances with restrictions",
					"item": [
						{
							"name": "Restricted Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "085ac0a1-aa27-4185-a83c-574dafc7d2a3",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedLedgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1f9cbfb-ae86-4bb8-af9a-624c88cad3c0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"ce353f9c-f089-4701-90d1-951d008348f2\",\r\n\t\"code\": \"RESTRICTED-LDGR\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Restricted ledger\",\r\n    \"fiscalYearOneId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n    \"restrictEncumbrance\": true,\r\n    \"restrictExpenditures\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Restricted Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b91232d2-8a13-4174-954d-9f46753bb45c",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedFundId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8602ace7-fabb-4efb-9ecd-934205903576",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"RESTRICTED-FND\",\r\n  \"description\": \"Fund for orders API Tests\",\r\n  \"externalAccountNo\": \"1111111111111111111111111\",\r\n  \"fundStatus\": \"Active\",\r\n  \"ledgerId\": \"{{restrictedLedgerId}}\",\r\n  \"name\": \"Fund for orders API Tests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Restricted Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d10d5dd-ac55-4e65-b72c-b93a0ba7dc2b",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedBudgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ec8e953b-cb72-4c09-bf21-316fb6248187",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Active\",\r\n  \"fundId\": \"{{restrictedFundId}}\",\r\n  \"name\": \"Restricted Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n  \"allowableEncumbrance\": 100.0,\r\n  \"allowableExpenditure\": 100.0,\r\n  \"allocated\": 25,\r\n  \"awaitingPayment\": 2.0,\r\n  \"available\": 3.0,\r\n  \"encumbered\": 4.0,\r\n  \"expenditures\": 5.0,\r\n  \"unavailable\": 14.0\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Order for tests",
					"item": [
						{
							"name": "Create Open order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48538e6b-8861-4ee2-b94b-ec4f2ed256bb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fea90a69-2e4e-4e72-9395-db6182f9ea2e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Open order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsOpenOrderId\", order.id);",
											"    pm.globals.set(\"negativeTestsOpenPOLineId\", order.compositePoLines[0].id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Open order with one electronic line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2cb97476-5897-4ee7-8547-9aca49785968",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildElectronicPoLineContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"line.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
											"",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderWithElectronicPOLBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c8e4b48e-17f9-4594-a6f2-fe50cad0d3c7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Open order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.environment.set(\"negativeTestsOpenElectronicOrderId\", order.id);",
											"    pm.environment.set(\"negativeTestsOpenElectronicOrderBody\", order);",
											"    pm.environment.set(\"negativeTestsOpenElectronicPOLineId\", order.compositePoLines[0].id);",
											"    pm.environment.set(\"negativeTestsOpenElectronicPOLineBody\", JSON.stringify(order.compositePoLines[0]));",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithElectronicPOLBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Closed order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8d62d15-31b2-4eb2-895b-0dc7e138148f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Closed\";",
											"order.notes = [\"Closed Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"line.paymentStatus = \"Fully Paid\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3adfbcd7-a235-4862-b96d-fff57af88e18",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Closed order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsClosedOrderId\", order.id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Pending order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e6893c5a-3fd1-45fa-ade3-8881a239b6ce",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"Pending Order for Negative API Tests\"];",
											"order.compositePoLines = [utils.buildPoLineWithMinContent(null)];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "16b5e219-4a9e-4565-8299-ae79d846c424",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Pending order created\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let order = pm.response.json();",
											"    pm.globals.set(\"negativeTestsPendingOrderId\", order.id);",
											"    pm.globals.set(\"negativeTestsPendingOrderContent\", JSON.stringify(order));",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Pending\");",
											"",
											"    pm.test(\"Validate that PO Line contains desired data\", function () {",
											"        utils.validatePoLines(order, 1);",
											"        pm.globals.set(\"poLineForNegativeTests\", JSON.stringify(order.compositePoLines[0]));",
											"        pm.globals.set(\"poLineForNegativeTestsId\", order.compositePoLines[0].id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "PUT order isPackage validation",
							"item": [
								{
									"name": "PUT order - package poline with instanceId - 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "84caf0ce-946c-463c-a68d-7c4b40575547",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var uuid = require(\"uuid\");",
													"",
													"let orderFor422 = JSON.parse(pm.globals.get(\"negativeTestsPendingOrderContent\"));",
													"orderFor422.compositePoLines[0].isPackage = true;",
													"orderFor422.compositePoLines[0].instanceId = uuid.v4();",
													"",
													"pm.variables.set(\"orderBody422\", JSON.stringify(orderFor422));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "70ede1ca-00fd-40b1-bad9-b37935428fe8",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"",
													"    pm.expect(pm.response.text()).to.include(\"InstanceIdNotAllowedForPackagePoLine\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody422}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1b92b46-2f54-4e91-8d5f-babbfed3be0a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2146baf1-3266-4ead-8dd2-dc4fbbcbca4e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST order - vendor validation",
							"item": [
								{
									"name": "Post order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b012bb43-24f8-4338-93fa-dcdb595dc1ce",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a852\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "569c0033-bb86-4655-a574-17978d7f6ffd",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1b602688-8b0a-4e5f-b1a2-734dcf000332",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1ab439e2-a0fe-49aa-be54-88db4b2a1068",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4a3f7746-94a9-47a1-bfc6-22f0211a4745",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "216355cf-df47-45b2-8011-fbd99b806cd4",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e1c8723b-3095-4428-a74d-0be50e1978aa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c8d0f122-56bc-4d52-9700-c906c55b6b7c",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5f3ce153-1869-4edc-90db-8d4e93902656",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77550a41-2fde-48bb-aa09-4381abf292db",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "67b210f5-ce16-415d-a56b-129ac8ba73f4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "53c37516-d996-4551-9156-ca50d6833fdd",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Put order - vendor validation",
							"item": [
								{
									"name": "Put order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8fd2f13-144b-4107-858c-0f3ea1682db8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7f7beff3-5dc1-48c2-ad8b-b93c13133b75",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1287024b-353e-4a7e-a681-47b2cc45d554",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5d3ced28-530b-4212-b36f-eaf32eb31d0d",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "74b0dfae-4619-4cda-b369-ad253fdd6f2b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "73d91341-9185-4ce6-9fcc-0e0e1abd87ce",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7029078b-e1e7-4a72-a97d-7510d370e18e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6d68279-e8f8-4826-b470-4371b18452a9",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5ded7c51-c798-4d84-a140-42f87ff2fffd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28dde414-ae3f-484c-b405-74c5432c8541",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1fdcb484-577d-4f68-95ec-c3b6656fcfa4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "77742f08-13b6-4db0-830e-b492812b585d",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify missing inventory enties errors",
							"item": [
								{
									"name": "Update pending order to open with missing contributorNameType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c3dc9899-09fc-4258-bca0-f350ed7cb2a4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"uuid = require('uuid')",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"contributorType\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"let contributor = {};",
													"let randomUUID = uuid.v4();",
													"contributor.contributor = \"Test\";",
													"contributor.contributorNameTypeId = randomUUID;",
													"line.contributors = [contributor];",
													"pm.variables.set(\"randomContributorNameTypeId\", randomUUID);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "804d47ca-4bb1-4d10-99e6-853e9bd470fd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingContributorNameType\");",
													"    pm.expect(error.parameters[0].value).to.equal(pm.variables.get(\"randomContributorNameTypeId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing instanceTypeCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8b2074b-6084-42b7-b89e-c277eb52b428",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceTypeCode\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ea84141-9bbc-4abf-a8f9-67e28bc65f00",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceTypeCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceTypeCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingInstanceType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "49081b8c-bcda-46bb-ab66-b48037e9309d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for missingInstanceType error test\"];",
													"",
													"let line = utils.buildPoLineWithMinContent(null);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3a334b80-c4b4-4627-a720-c919143ad496",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fba6f9cb-f05c-4425-83e8-8287dd7d62cf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceType\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38d759ff-1b43-491c-9a4b-00bb2d4bdc8e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceTypeCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing instanceStatusCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2de8d36-ada5-4916-b632-ebc06d1d317a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceStatusCode\";",
													"let value = \"missing-status\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a0ad047c-c484-474f-9b30-62ea241a9285",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceStatusCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceStatusCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingInstanceStatus error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d618182c-3e57-4502-9cf4-a5c2f57b32c4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for missingInstanceStatus error test\"];",
													"",
													"let line = utils.buildPoLineWithMinContent(null);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "566eb5a3-ae69-4af4-b684-6940dec2c97c",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceStatus\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-status\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceStatus error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "710ad620-7e74-4c44-a8bd-65b779ebc177",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceStatus\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "342ffb0b-9879-448c-877c-7aa404671846",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceStatus\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-status\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceStatusCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing loanTypeName config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a9f94b5-3c23-475f-8dde-3f2d5125792e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-loanTypeName\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "310b37a1-b186-4486-8818-1b0dccb5be47",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-loanTypeName",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-loanTypeName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingLoanType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "005b1eb0-ed5b-4a84-a046-ce38fbb472bf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const uuidv4 = require('uuid');",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"loanType1\";",
													"    ",
													"    //set createInventory value",
													"    order.compositePoLines[0].id = JSON.parse(globals.poLineForNegativeTests).id;",
													"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].titleOrPackage = \"Test title\";",
													"    order.compositePoLines[0].details.productIds[0].productIdType = uuid.v4();",
													"    ",
													"    pm.variables.set(\"orderBody\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "44ac737c-e382-4cba-a5b8-8be98dacafd6",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingLoanType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingLoanType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4fe2aa60-131f-4247-9959-58d9bd62d442",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const uuidv4 = require('uuid');",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order  = utils.prepareOrder(res.json());",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"loanType2\";",
													"    ",
													"    //set createInventory value",
													"    order.compositePoLines[0].id = JSON.parse(globals.poLineForNegativeTests).id;",
													"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].titleOrPackage = \"Test title\";",
													"    order.compositePoLines[0].details.productIds[0].productIdType = uuid.v4();",
													"    ",
													"    pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bebb89fc-c014-47ac-886b-8959d64e979e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingLoanType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-loanTypeName\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Encumbrance creation failure",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify protected fields modification",
							"item": [
								{
									"name": "Put Open order - Modify Purchase Order Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "042e6826-5af5-476a-bf27-847b04bb3e35",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.orderType = \"One-Time\";",
													"    json.approved = true;",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.manualPo = true;",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5173e1a9-d902-4fdb-aaf3-ffe3eb7b676f",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										},
										"description": "Verify that protected fields cannot be modified once order is \"Open\""
									},
									"response": []
								},
								{
									"name": "Put Open order - Modify Composite PO Line Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bab09374-3f16-477e-8663-2bda6f19e474",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let json;",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.globals.get(\"negativeTestsOpenOrderId\"), (err, res) => {",
													"    json = res.json();",
													"    json.compositePoLines[0].acquisitionMethod = \"Exchange\";",
													"    json.compositePoLines[0].rush = true;",
													"    json.compositePoLines[0].titleOrPackage = \"Changing Title\";",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "44fd02fc-8472-4ab6-b5ca-88dd638764ca",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										},
										"description": "Verify that protected fields in Purchase Order Line cannot be modified once order is \"Open\""
									},
									"response": []
								},
								{
									"name": "Put Open order - Modify PO Line Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a2203432-50bf-42ed-8164-c89bd63beb6d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let json;",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.globals.get(\"negativeTestsOpenPOLineId\"), (err, res) => {",
													"    json = res.json();",
													"    json.donor = \"Donor\";",
													"    json.checkinItems = true;",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a80a4c0c-cfa2-4856-8bbc-41595b9d2a07",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{negativeTestsOpenPOLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{negativeTestsOpenPOLineId}}"
											]
										},
										"description": "Verify that protected fields in Purchase Order Line cannot be modified once order is \"Open\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "586460d1-6ddb-41f2-98f8-443e038b2818",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "623c5b06-1c09-4324-b577-49e3a19dff6f",
										"exec": [
											"pm.test(\"Response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 400"
							},
							"response": []
						},
						{
							"name": "Create empty order with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b5de8364-fd20-47c0-b869-62013c7a670a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1eac36f5-d08b-4b05-9109-3469cdfa1a06",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Vendor and orderType is missing\", function () {",
											"     ",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"vendor\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"orderType\").parameters[0].value).to.equal(\"null\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Create Ongoing order with empty ongoing field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e330a736-e334-48c2-9391-7ae7fcf4965f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order = utils.buildOrderWithMinContent();",
											"order.orderType = \"Ongoing\";",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "03b61007-c845-4449-a898-702d057f647f",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Ongoing is missing\", function () {",
											"        pm.expect(jsonData.errors[0].code === \"missingOngoing\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Create One-Time order with ongoing field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29d84da8-6a56-4c1e-84e4-18ac1ed36f53",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order = utils.buildOrderWithMinContent();",
											"order.ongoing = {};",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7eedd7e7-d176-4688-835e-260421da6fd9",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Ongoing is missing\", function () {",
											"        pm.expect(jsonData.errors[0].code === \"ongoingNotAllowed\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Get order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "615f9c88-248f-42e3-b82c-9629b48d367b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc211abd-6d8b-477f-98f7-f4be9406c056",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Update order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "47ab96ea-5843-4969-b044-7f116130279f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d10a27e8-1747-4901-9880-f529b332227f",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Delete order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d83f6140-cc4e-4793-945e-86f439194368",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4e8d8170-9005-4462-adf2-05c97f4dc701",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Get order - valid token, invalid tenant - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be5da11d-fca9-4853-905b-5893fb0c3061",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fc0adc8c-28af-428c-94c6-4f3b72121398",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "fs12345678"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 400"
							},
							"response": []
						},
						{
							"name": "Get order - bad token format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4f97383b-778f-47eb-9556-4c10fd2db6b0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ea367348-fe48-45f5-b392-ef7afe1eb857",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "bad-token"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get order - invalid token - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fe4948b8-107c-4d3b-894a-2406a1224a79",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d0ac99e0-51df-433e-ad94-31ff08a854a3",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id request that return 401"
							},
							"response": []
						},
						{
							"name": "Get order - random order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35cd779b-e838-4b64-a9f2-a58b0d0d5990",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0ef436da-547f-483e-ba74-2828a06c9c93",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get order - empty order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "57c9e9f6-c9df-4cbf-bce2-be2cb6399a27",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ce5cab7e-d3b9-4737-9b95-fc1215a42b53",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										""
									]
								},
								"description": "GET /orders/composite-orders/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update order - empty poNumber - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "99342d02-d5f2-41e0-b9d2-93aaabe299d9",
										"exec": [
											"pm.variables.set(\"poLineId\", eval(globals.loadUtils).getLastPoLineId());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7cc41ff1-c66d-4e75-91a9-31ceee685430",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsPendingOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4c431379-3112-4f61-8f57-4ed841b6771b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsOpenOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d7ba9617-01db-4834-95fb-2bfb5a68fa4a",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Closed order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "19f2c481-4cd6-486c-a28a-43c3e3afbdce",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsClosedOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b018f62d-31d7-4c89-8e34-4830953e01b4",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsClosedOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsClosedOrderId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lines",
					"item": [
						{
							"name": "isPackageValidation",
							"item": [
								{
									"name": "PUT line - package with insanceId - 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b20866df-6f5e-471d-b8ca-af12017d30c7",
												"exec": [
													"var uuid = require(\"uuid\");",
													"",
													"let line = JSON.parse(pm.globals.get(\"poLineForNegativeTests\"));",
													"",
													"line.isPackage = true;",
													"line.instanceId = uuid.v4();",
													"pm.variables.set(\"po_line_isPackage422\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ea27662-dc14-477c-b347-2481074d2c2b",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"",
													"    pm.expect(pm.response.text()).to.include(\"InstanceIdNotAllowedForPackagePoLine\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_isPackage422}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineForNegativeTestsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineForNegativeTestsId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 422"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify PO Line required properties",
							"item": [
								{
									"name": "Create line - without required fields- 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "239aca75-d680-4d1d-bce1-90be0b15741d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
													"delete line.source;",
													"delete line.cost;",
													"delete line.titleOrPackage;",
													"delete line.orderFormat;",
													"delete line.acquisitionMethod;",
													"pm.variables.set(\"line_body\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e5734ade-50fa-42d2-a4ff-d0edf5e4256c",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    ",
													"});",
													"pm.test(\"5 validation errors\", function () {",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Quantity validation",
							"item": [
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "859a085e-02d2-4686-8860-c3124e8d274a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Physical Resource\";",
													"        line.cost.quantityElectronic = 5;",
													"        line.cost.quantityPhysical = 0;",
													"        line.cost.listUnitPrice = 10;",
													"        line.cost.listUnitPriceElectronic = 0;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"        var emptyLocation = {};",
													"        emptyLocation.locationId = line.locations[0].locationId;",
													"        emptyLocation.quantityElectronic = 0;",
													"        emptyLocation.quantityPhysical = 0;",
													"        ",
													"        line.locations.push(emptyLocation);",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "23787075-0229-4cf1-af1f-c5893d38a920",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"5 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a4dcffd2-3666-45af-8d15-f59584273374",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Electronic Resource\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        line.cost.listUnitPrice = 0;",
													"        line.cost.listUnitPriceElectronic = 10;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "11909c59-83fa-40bc-92ef-e49ea9ee5193",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"4 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify P/E Mix Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "82e679b4-1bb3-43bb-95d0-157758f2edb8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.id = JSON.parse(globals.poLineForNegativeTests).id;",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"P/E Mix\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"        pm.variables.set(\"lineId\", line.id);",
													"",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "629cb81f-0397-48c7-92c6-8d8c9c409106",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"3 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{lineId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cost Prices",
							"item": [
								{
									"name": "Verify P/E Mix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "503904d0-014a-4d8e-a20b-799ef55f211c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph_pe_mix.json\", (err, res) => {",
													"    let line = res.json().compositePoLines[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = -1;",
													"    // Zero price is allowed MODORDERS-197",
													"    line.cost.listUnitPriceElectronic = 0;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = 101;",
													"    line.cost.discountType = \"percentage\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "603cb0fa-cd51-41e8-a987-4106883b6705",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3d1f823d-bf7d-41a3-83f9-ecb2fb0976cf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Physical Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 0;",
													"    line.cost.listUnitPriceElectronic = 10;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "47a7f461-350b-4a1c-a149-f15ac976a98b",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e706e59e-ce33-441a-ac3f-a13b45875e75",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Electronic Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 10;",
													"    line.cost.listUnitPriceElectronic = -0.00000000001;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "44955e02-a058-459d-8a1f-417a3c219689",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order lines - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ac2d6b6-e495-465a-ac38-748ba5d6ec4f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66d5957a-f5af-4d9e-ad64-0d518b98778b",
										"exec": [
											"pm.test(\"PO line response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7a364bd1-785d-4780-9f33-a89f3e90375c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "55cba3a9-aaff-471e-a6a9-96046581a2ef",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a8eb49e3-64bf-4129-80e8-a3a3c3422812",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "086ae56e-6bb2-44c1-939d-89fcb16746d2",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get line - empty polineId - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cbe35524-f82b-426a-b5e3-1a434be33c3d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d9e07a4-8a1d-435b-be98-33b462b41c59",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										""
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - inactive accessProvider - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6bea6b8b-5316-4c2f-b961-60f673d980cf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + pm.environment.get(\"negativeTestsOpenElectronicPOLineId\"), (err, res) => {",
											"    let electr_line = res.json();",
											"",
											"    electr_line.eresource.accessProvider = pm.environment.get(\"inactiveVendorId\");",
											"",
											"    pm.variables.set(\"electr_line_body\", JSON.stringify(electr_line));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "940c2809-2176-4101-a730-f1a8032f2889",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{electr_line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{negativeTestsOpenElectronicPOLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{negativeTestsOpenElectronicPOLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dfe7a59c-3504-4e92-b742-429f5d4b35a8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eb76edea-ae81-4914-b1b3-fae83dcc47a9",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f9177104-186a-42de-b188-bf36937388b3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "abdb83bb-75b5-451a-b653-ef964382910d",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cec20ed5-229c-4199-a1b7-9115cc20acca",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1eeddcb4-548c-4d7b-bf4a-f507c84444aa",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e20190a-c6c4-4ed1-bd92-2828a7c4fd88",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "73445a9b-a186-417b-bd25-d1eac0ccd040",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Update line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8a5500fc-ba07-4737-aa48-fd9219aaf13c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f3607c93-7ed0-433d-99ef-4a28f52565ee",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Delete line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4885ead-14c2-4a8a-8d0b-df8c6bc09fdd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d35ffa9-fb34-4ee0-91aa-cc9cad54599c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line - invalid order Id in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f720890c-5c6d-4b92-9b3b-126887a4246c",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"line.purchaseOrderId = \"\";",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ce46f66-0f36-49a9-8f1b-a71d133a3064",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/order-lines/id requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line to Open order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f35c7f6a-81b5-40c8-8045-6d9d356c1aac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsOpenOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bde23d17-3e16-47bc-9c5d-2c0376568ce8",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add line to Closed order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2d916a53-e46d-4b8b-aa72-ee58d3d10afb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsClosedOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2970e846-e1c2-43d1-ae1a-066f4bab9feb",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate - existing PO Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c88db1b5-6a92-4696-9c5a-26f0ab1d3fde",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsPendingOrderId, function (err, res) {",
											"    pm.variables.set(\"existing_number\", res.json().poNumber);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79d0a30f-5ac1-4d42-a1b1-3bf0ff581e8b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : {{existing_number}}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 400 if an existing PO Number is supplied"
							},
							"response": []
						},
						{
							"name": "Validate - invalid PONumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a5c9ef9e-2b20-48fe-a2bb-c3e39cccd215",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c5aa4b86-14ba-49d1-a4fe-df6194c32efa",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"12-12-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 422 when an invalid PO Number is specified"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Attempt to receive already received pieces for physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee6c066b-ed07-4bd4-984d-279bbec378f8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/receiving-history?limit=10&query=receivingStatus==Received and purchaseOrderId=\" + globals.physElecOpenOrderId, (err, res) => {",
											"    let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory);",
											"    pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "93c9a4ba-7299-4843-8cd8-87da36197441",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"All items should be failed because already received before\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(10);",
											"    let processedWithError = 0;",
											"    for(let i = 0; i < jsonRs.receivingResults.length; i++) {",
											"        let result = jsonRs.receivingResults[i];",
											"        pm.expect(result.processedSuccessfully).to.equal(0);",
											"        processedWithError += result.processedWithError;",
											"        for(let j = 0; j < result.receivingItemResults.length; j++) {",
											"            pm.expect(result.receivingItemResults[j].processingStatus).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.type).to.equal(\"failure\");",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"        }",
											"    }",
											"    pm.expect(processedWithError).to.equal(jsonRs.totalRecords);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records created by previous request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "check-in already received piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d11a39e-a30c-4f2b-8074-121334b0a019",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 piece failed to process\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, 0, 1);",
											"    let receivingItemResults = jsonRs.receivingResults[0].receivingItemResults;",
											"     pm.expect(receivingItemResults[0].processingStatus).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.type).to.equal(\"failure\");",
											"     pm.expect(receivingItemResults[0].processingStatus.error).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74836bed-4363-46e4-a342-0cda3212cbbf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Title",
					"item": [
						{
							"name": "Create po line for title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "406f34ea-5f6a-4775-abfa-738c0a4c522e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d7f36519-094a-467c-83d7-5fc6a31c2ea4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    ",
											"    pm.environment.set(\"poLineIdForTitle\", jsonData.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/id/lines/id requests that return 201"
							},
							"response": []
						},
						{
							"name": "Create title with titleExist error",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "18a2df8f-7005-460c-b257-71fc31793648",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c8dda308-89af-4ffc-b872-8649f9366f90",
										"exec": [
											"pm.test(\"Title status code is 422\", function() {",
											"    pm.response.to.have.status(422);",
											"});",
											"pm.test(\"Response contains titleExist error code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"titleExist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Piece",
					"item": [
						{
							"name": "Update piece by id - bad id 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3012bece-ff5c-4a83-a8e6-2d1788abcff1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "deb2f41f-d923-44c3-99f0-6c2566933634",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Edit piece by id - bad format 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73bb4ffc-fb05-45c1-89d9-643c046960e6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2abb3a74-0cce-44e1-bc00-b6e3b0305e8d",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"bad-id-format\",\n    \"caption\": \"Tutorial Volume 5\",\n    \"comment\": \"Special Edition\",\n    \"format\": \"Physical\",\n    \"itemId\": \"522a501a-56b5-48d9-b28a-3a8f02482d97\",\n    \"locationId\": \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"poLineId\": \"7decd831-8295-4a9d-9247-320d165583bf\",\n    \"receivingStatus\": \"Expected\",\n    \"supplement\": true,\n    \"receivedDate\": \"2018-10-10T00:00:00.000+0000\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id-format"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id - bad format 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a7a73478-8d0e-4865-848e-3a0b27bfa445",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5ae24eb9-2119-4386-9aa7-33f2fa26bf57",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Create empty piece with missing required fields 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "761c9937-a37b-42d7-b89e-9347d5a8b11c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3e9d8af9-54b6-48e6-a9f3-3f0609fc525c",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"        requiredObj(errors, \"poLineId\");",
											"        requiredObj(errors, \"format\");",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											"",
											"function requiredArray(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"size must be between 1 and 2147483647\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"[]\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a piece with empty body"
							},
							"response": []
						},
						{
							"name": "get title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3d1db234-70c7-48a8-9388-341c13cb57d9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.environment.set(\"poLIneIdForTitle\", utils.getLastPoLineId());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "67791ea4-7bb2-4957-8280-ff69024cfcf8",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let titles = pm.response.json();",
											"    pm.variables.set(\"titleId\", titles.titles[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{poLIneIdForTitle}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLIneIdForTitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create piece with missing receiptDate 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c52eaf2a-de0e-4d77-98b3-b84883533063",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function(err, res) {",
											"    let piece = res.json();",
											"    delete piece.receiptDate;",
											"    piece.poLineId = pm.variables.get(\"poLineId\");",
											"    piece.titleId = pm.variables.get(\"titleId\");",
											"    pm.globals.set(\"pieceRecord\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "777be3b2-7aff-4620-b073-8c4879d18c30",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{pieceRecord}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a piece with empty body"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ISBN validation",
					"item": [
						{
							"name": "Create Order with invalid ISBN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1eac2948-b242-4a4f-9c6c-5cb12174769a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    order = utils.deletePoNumber(order);",
											"    order.compositePoLines.pop();",
											"    let preparedOrder = utils.prepareOrder(order);",
											"    ",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds[0].productId = \"1-4028-9462-7456\";",
											"    preparedOrder.compositePoLines[0].details.productIds[0].productIdType = pm.environment.get(\"isbnIdentifierTypeId\");",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(preparedOrder));",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e3708c43-f212-40a4-9096-7a8eb47a0d18",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"invalidISBN\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Approval",
					"item": [
						{
							"name": "Create order with \"approval required\" set to true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a7fd89c-7578-4202-adb5-f27ad54fe22c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/configurations/entries?query=module==ORDERS and configName==approvals\", (err, res) => {",
											"  let configName = \"approvals\";",
											"  let value = \"{\\\"isApprovalRequired\\\":true}\";",
											"",
											"  utils.updateOrCreateOrdersConfig(res.json().configs, configName, value);",
											"});",
											"",
											"    ",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_without_po_lines.json\", (err, res) => {",
											"    let order = utils.prepareOrder(res.json());",
											"    order.poNumber = \"TSTAPPROVAL\";",
											"    order.approved = false;",
											"    order.workflowStatus = \"Open\";",
											"    ",
											"    order.id = \"00000001-1111-5555-8888-888888888888\";",
											"",
											"    pm.globals.set(\"orderWithApprovalReqTrueId\", order.id); ",
											"    pm.variables.set(\"orderWithApprovalReqTrue\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "599ca5d1-566e-4e7f-91b9-4a3c35b916e5",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"Approval is required to open order\");",
											"    pm.expect(pm.response.text()).to.include(\"orderApprovalRequired\");",
											"    ",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithApprovalReqTrue}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved for it to be transitioned to be open status"
							},
							"response": []
						},
						{
							"name": "Create order with user not having approval permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "89fa0e48-bcc3-40d5-94f7-be92f693be77",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_without_po_lines.json\", (err, res) => {",
											"    let order = res.json();",
											"    order.poNumber = \"TST123APPROVAL1\";",
											"    order.approved = true;",
											"    ",
											"    pm.variables.set(\"orderWithNoApprovalPerms\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d3366894-8d2c-4d44-a405-329c82cfa4e7",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User does not have permissions to approve order - operation is restricted\");",
											"    pm.expect(pm.response.text()).to.include(\"userHasNoApprovalPermission\");",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-restricted}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithNoApprovalPerms}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Unopen",
					"item": [
						{
							"name": "Unopen order with user not having permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c819674b-1aa8-441e-b3e3-d772a950e951",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let orderForUnopen = pm.environment.get(\"negativeTestsOpenElectronicOrderBody\");",
											"",
											"orderForUnopen.workflowStatus = \"Pending\";",
											"",
											"pm.variables.set(\"orderUnopenBody\", JSON.stringify(orderForUnopen));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "658597c2-617c-4f0e-bbe8-e5687849e6f9",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User does not have permissions to move order from open to pending - operation is restricted\");",
											"    pm.expect(pm.response.text()).to.include(\"userHasNoOrderUnopenPermission\");",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-restricted}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderUnopenBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenElectronicOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenElectronicOrderId}}"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "24841782-4dff-451f-b28f-89182a02fa2e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9b6bc3bd-63dd-4219-8e0d-17cced9ba58b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Templates",
					"item": [
						{
							"name": "Get updated order templates collection - invalid query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bad6f0b1-b3dd-4708-9a59-f5d85c0ad809",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "43ceaa22-7e54-46d9-adfb-6e6c0ddfebf2",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates?query=invalid-query",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid-query"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order template - not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aa750d37-889b-41b2-8a2f-761e249fb492",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dd0ed80a-2b2e-49fa-b2f0-c48056e95975",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"configuration",
										"suffixes",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order template - id mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "563153cc-92f1-4e15-8143-df2d445c2b23",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
											"pm.variables.set(\"updatedOrderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "93614d97-fadb-4c16-b9ab-c67b6563b974",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order template - not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "992be684-0315-4d89-96e5-a6451a4f2b41",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0f0ecef6-3420-4107-aaec-5bb4547f337c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Encumbrance creation failure",
					"item": [
						{
							"name": "Create Open order with lines pointing to unexisting fund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "556afabd-9374-4e92-85f5-6587a95ee0f0",
										"exec": [
											"let utils = eval(globals.loadUtils);\t\r",
											"var uuid = require('uuid');\t\r",
											"\r",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {\t\r",
											"    let order  = utils.prepareOrder(res.json());\r",
											"    order.workflowStatus = \"Open\";\r",
											"    // Setting specific PO Number to delete this order in cleanup\"\r",
											"    order.poNumber = \"APIFAILENCUMB1\";\r",
											"    order.compositePoLines.forEach(poLine => {\r",
											"        poLine.receiptStatus = \"Receipt Not Required\";\r",
											"        // Setting random fund id\"\r",
											"        poLine.fundDistribution.forEach(distrib => distrib.fundId = uuid.v4());\r",
											"    });\r",
											"    pm.variables.set(\"order_with_unexisting_fund\", JSON.stringify(order));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fd5c9e42-eac9-4014-8e3a-ae7fdf6f574f",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\t\r",
											"pm.test(\"Server error is expected: encumbranceCreationFailure\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    let errors = pm.response.json().errors;\r",
											"    pm.expect(errors).to.have.lengthOf(1);\r",
											"    pm.expect(errors[0].code).to.equal(\"fundsNotFound\");\r",
											"});\r",
											"\t\r",
											"utils.sendGetRequest(\"/orders/order-lines?query=poNumber==APIFAILENCUMB1\", function (err, res) {\r",
											"    pm.expect(err).to.equal(null);\r",
											"\t\r",
											"    res.json().poLines.forEach(poLine => {\r",
											"        utils.validateEncumbranceRecords(poLine, \"Pending\");\r",
											"        pm.globals.set(\"negativeTestsFailedEncumbrances\", poLine.purchaseOrderId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_with_unexisting_fund}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Open order. Ledger is restricted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35ae1237-a0ff-4b25-aa0c-8a4c1603cb8f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let openOrder = utils.prepareOrder(res.json());",
											"    openOrder.workflowStatus = \"Open\";",
											"    delete openOrder.poNumber;",
											"",
											"    // Setting restricted fund id\"",
											"    openOrder.compositePoLines[0].fundDistribution[0].fundId = pm.environment.get(\"restrictedFundId\");",
											"",
											"    pm.variables.set(\"order_with_insufficient_funds\", JSON.stringify(openOrder));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "288c5266-ac53-412c-9e55-515ffa3a5c0c",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\t\r",
											"pm.test(\"Server error is expected: encumbranceCreationFailure\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    let errors = pm.response.json().errors;\r",
											"    pm.expect(errors).to.have.lengthOf(1);\r",
											"    pm.expect(errors[0].code).to.equal(\"fundCannotBePaid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_with_insufficient_funds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Reason for closure",
							"item": [
								{
									"name": "Get reason for closure collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "84613d70-befe-4f20-98a5-8e6e6ba86e9b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7c54403-d7b9-4dca-9e47-3743132ac3cb",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "791df6ff-d2fa-4d71-ac17-bfd0a755b8d4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "adb644fb-1d48-4e66-be84-160467bf22c8",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update reason for closure - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2ce6900a-23ed-4547-9e79-5d2d3b6ddf20",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedReasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7705e78-3e67-4cf5-a450-9108fa4175f2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedReasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete reason for closure - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0e58eec7-e9e5-448b-a0c8-4a0f803a5aa2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "64a4bf7e-e6e3-4d6f-8124-c61019a4e4c1",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prefix",
							"item": [
								{
									"name": "Get prefix collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4ca679d1-9154-45ef-bfea-163bc6aebfae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c2371679-81f4-459a-8b4d-d5836ef1ef56",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ab5c059e-aebb-4a34-909e-6ef4695dfcbf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b5278cd6-d244-48b5-a3dc-421d123704d1",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-templates",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update prefix - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aec7f8a6-6d37-4aaf-92bd-4e8214bad91b",
												"exec": [
													"let body = globals.testData.prefix;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedPrefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "93e5411f-b824-4dbd-ac68-dd0e079c3691",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPrefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete prefix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da370539-ae0e-415b-a1ce-1aee47775ca1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2c151cf0-0bfa-487b-b842-0373cc045b1b",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Suffix",
							"item": [
								{
									"name": "Get suffix collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "02bccae8-3e8b-4420-9781-c6f7d05226e2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92cc9389-ff44-4d29-94e7-5cbf24e62103",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "90a4ed4a-d217-49f0-ad37-919e9f190452",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1e7a964f-01c7-475b-aedf-2097f1664fd9",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update suffix - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7a719f11-3e19-4a46-a5d8-9c3dcf1f0a81",
												"exec": [
													"let body = globals.testData.suffix;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedSuffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ba4e20a6-8c14-498c-99ec-90fe7d1b1c60",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedSuffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete suffix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "48316fca-a51a-4e21-a93e-cf698099aaf7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1efaf164-c4e7-4fed-a214-e61f1f205c32",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create order in Pending status without material types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ecb3b35c-7358-45ae-9e59-17cfbfe52ce8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_po_line_without_material_type.json\", function (err, res) {",
											" let order  = res.json()//utils.buildOrderWithMinContent();",
											" order.compositePoLines[0].alerts = [];",
											" order.compositePoLines[0].reportingCodes = [];",
											"",
											" pm.environment.set(\"prepared_string_order_po_line_without_material_type\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a37728f-98dc-4b6b-904d-5fa853bf278f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.environment.set(\"orderIdWithoutMaterialType\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{prepared_string_order_po_line_without_material_type}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Get composite order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5e02e57-dfef-4eeb-91d1-9eb58902f31c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.environment.set(\"prepared_order_po_line_without_material_type_for_transfer\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "28fbc378-97f2-40dc-84e4-bbdcc1ecefe7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdWithoutMaterialType}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderIdWithoutMaterialType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failed transition from Pending to Open without material type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6642dd0c-2d8a-4464-9f3c-e213bf6c61d6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"  let originOrder  = pm.environment.get(\"prepared_order_po_line_without_material_type_for_transfer\");",
											"  console.log(originOrder)",
											"  let orderForPut = utils.buildOrderWithMinContent();",
											"  console.log(orderForPut)",
											"",
											"",
											"  orderForPut.id = originOrder.id;",
											"  orderForPut.poNumber = originOrder.poNumber;",
											"   orderForPut.reEncumber = originOrder.reEncumber;",
											"   orderForPut.totalEstimatedPrice = originOrder.totalEstimatedPrice",
											"   orderForPut.totalItems = originOrder.totalItems",
											"   orderForPut.vendor = originOrder.vendor",
											"  orderForPut.workflowStatus = \"Open\"",
											"   orderForPut.acqUnitIds = []",
											"   orderForPut.metadata = originOrder.metadata",
											"",
											"  pm.environment.set(\"orderForPut_without_material_type\", JSON.stringify(orderForPut));    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54610fe9-c009-483f-8546-c46438199c69",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForPut_without_material_type}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdWithoutMaterialType}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderIdWithoutMaterialType}}"
									]
								},
								"description": "Transition from Pending to Open without material type should be blocked\n[MODORDERS-176](https://issues.folio.org/browse/MODORDERS-176)"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9ea92f09-c423-4ff4-91f5-586f52b0e638",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74a6b641-2785-4697-9eee-89bf2bfe8ec6",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e26b0f2-d682-4549-ae00-20470990258a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d51be75c-c957-43b4-b69b-50a4f166515b",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "16c40f53-59f1-4b56-bd87-c62651675a06",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [",
					"            \"poLines-limit\",",
					"            \"inventory-instanceTypeCode\",",
					"            \"inventory-instanceStatusCode\",",
					"            \"inventory-loanTypeName\",",
					"            \"approvals\"",
					"        ],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    tenantConfig: {",
					"        configNames: [\"tenant.addresses\"],",
					"        bodyTemplate: {",
					"            \"module\": \"TENANT\",",
					"            \"code\": \"ADRESSES_123\",",
					"            \"configName\": \"Test TENANT Config\",",
					"            \"description\": \"Tenant config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Admin\",",
					"                    \"lastName\": \"Orders API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": []",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"User\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-user\",",
					"                \"password\": \"mod-orders-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\",",
					"                    \"orders.item.approve\",",
					"                    \"orders.item.unopen\",",
					"                    \"orders-storage.pieces.collection.get\",",
					"                    // To be removed when MODINV-120 is resolved",
					"                    \"inventory-storage.items.collection.get\",",
					"                    \"inventory-storage.items.item.get\",",
					"                    \"inventory-storage.instances.item.get\",",
					"                    \"inventory.items.item.get\"",
					"                ]",
					"            }",
					"        },",
					"        restricted: {",
					"            user: {",
					"                \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-restricted-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"User\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-restricted-user\",",
					"                \"password\": \"mod-orders-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\",",
					"                    \"orders-storage.pieces.collection.get\",",
					"                    // To be removed when MODINV-120 is resolved",
					"                    \"inventory-storage.items.collection.get\",",
					"                    \"inventory-storage.items.item.get\",",
					"                    // To be removed when",
					"                    \"inventory-storage.instances.item.get\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test orders tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    },",
					"    receiving: {",
					"        bodyTemplate: {",
					"            \"toBeReceived\": [{",
					"                \"poLineId\": \"\",",
					"                \"received\": 1,",
					"                \"receivedItems\": [{",
					"                    \"barcode\": \"11111111111\",",
					"                    \"callNumber\": \"BF2050 .M335 1999\",",
					"                    \"comment\": \"Very important note\",",
					"                    \"caption\": \"Vol. 1\",",
					"                    \"itemStatus\": \"In process\",",
					"                    \"locationId\": pm.variables.get(\"locationId2\"),",
					"                    \"pieceId\": \"\"",
					"                }]",
					"            }],",
					"            \"totalRecords\": 1",
					"        }",
					"    },",
					"    piece: {",
					"        bodyTemplate: {",
					"            \"caption\": \"Volume\",",
					"            \"comment\": \"creating Piece from API test\",",
					"            \"format\": \"\",",
					"            \"locationId\": \"\",",
					"            \"poLineId\": \"\",",
					"            \"receivingStatus\": \"Expected\",",
					"            \"supplement\": true",
					"        }",
					"    },",
					"    checkin: {",
					"        bodyTemplate: {",
					"            \"toBeCheckedIn\": [",
					"                {",
					"                    \"poLineId\": \"\",",
					"                    \"checkedIn\": \"\",",
					"                    \"checkInPieces\": [",
					"                        {",
					"                            \"id\": \"\",",
					"                            \"barcode\": Math.floor(Math.random() * 1000),",
					"                            \"callNumber\": \"BF2050 .M335 1999\",",
					"                            \"comment\": \"checkedin from API test\",",
					"                            \"caption\": \"Vol. 1\",",
					"                            \"createItem\": true,",
					"                            \"supplement\": false,",
					"                            \"locationId\": \"\",",
					"                            \"accessionNumber\": \"1956.1\",",
					"                            \"itemDescription\": \"This is the piece item checkin\",",
					"                            \"electronicBookplate\": \"This item is from API tests\"",
					"                        }]",
					"                }],",
					"            \"totalRecords\": 1",
					"        }",
					"    },",
					"    item: {",
					"        bodyTemplate: {",
					"            \"holdingsRecordId\": \"\",",
					"            \"permanentLoanTypeId\": pm.variables.get(\"loanTypeId\"),",
					"            \"materialTypeId\": pm.variables.get(\"materialTypeId\"),",
					"            \"status\": {",
					"                \"name\": \"On order\"",
					"            },",
					"            \"purchaseOrderLineIdentifier\": \"\"",
					"        }",
					"    },",
					"    orderTemplate: {",
					"        id: \"f5b6ad51-58a3-44cd-88e3-b612ea8ff15b\",",
					"        templateCode: \"Amazon-L\",",
					"        templateDescription: \"Use to create orders in FOLIO after they are placed on Amazon\",",
					"        templateName: \"Amazon orders\",",
					"        acquisitionMethod: \"Purchase At Vendor System\",",
					"        approved: true",
					"    },",
					"    reasonForClosure: {",
					"        reason: \"Test closure reason\",",
					"        source: \"User\"",
					"    },",
					"    prefix: {",
					"        name: \"Test prefix\",",
					"        description: \"Test prefix description\"",
					"    },",
					"    suffix: {",
					"        name: \"Test suffix\",",
					"        description: \"Test suffix description\"",
					"    },",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"orders_schema_\";",
					"",
					"    utils.validateReceivingHistory = function (history) {",
					"        pm.expect(history.id, \"Piece id expected\").to.exist;",
					"        pm.expect(history.dateOrdered, \"Order date expected\").to.exist;",
					"        pm.expect(history.checkin, \"Checkin expected\").to.exist;",
					"        pm.expect(history.poLineId, \"PO Line id expected\").to.exist;",
					"        pm.expect(history.poLineNumber, \"PO Line number expected\").to.exist;",
					"        pm.expect(history.pieceFormat, \"Piece format expected\").to.exist;",
					"        pm.expect(history.poLineReceiptStatus, \"Receipt status expected\").to.exist;",
					"        pm.expect(history.purchaseOrderId, \"Purchase order id expected\").to.exist;",
					"",
					"    };",
					"",
					"    utils.validatePiece = function (piece) {",
					"        pm.expect(piece.id, \"Piece id expected\").to.exist;",
					"        pm.expect(piece.format, \"Piece format expected\").to.exist;",
					"        pm.expect(piece.poLineId, \"Piece Po LineId expected\").to.exist;",
					"        pm.expect(piece.receivingStatus, \"Piece receiving status expected\").to.exist;",
					"    };",
					"",
					"    utils.validateEncumbrance = function (encumbrance, fundDistributions) {",
					"        pm.expect(encumbrance.id, \"Encumbrance id expected\").to.exist;",
					"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered, \"Amount encumbered expected\").to.exist;",
					"        pm.expect(encumbrance.fromFundId, \"Encumbrance fund id expected\").to.exist;",
					"        pm.expect(encumbrance.encumbrance.status, \"Encumbrance receiving status expected\").to.exist;",
					"        pm.expect(encumbrance.amount, \"Encumbrance amount is expected\").to.exist;",
					"",
					"        let filteredArray = fundDistributions.filter(fundDistribution => fundDistribution.encumbrance === encumbrance.id);",
					"        pm.expect(filteredArray).to.have.lengthOf(1);",
					"        let fundDistribution = filteredArray[0];",
					"        pm.expect(encumbrance.fromFundId).to.eql(fundDistribution.fundId);",
					"    };",
					"",
					"    /**",
					"     * Sends request with specified Method and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function (path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines for Fund Distribution.",
					"     */",
					"    utils.prepareOrderFundDistri = function (order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLineFundDistri(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data for Fund Distribution.",
					"     */",
					"    utils.preparePoLineFundDistri = function (poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function (order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLine(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function (poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"cost\")) {",
					"            delete poLine.cost.poLineEstimatedPrice;",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Sets new unique product ID.",
					"     */",
					"    utils.makeProductIdUnique = function (productId) {",
					"        let newProductId = pm.environment.has(\"uniqueProductId\") ? pm.environment.get(\"uniqueProductId\") : 10000000000;",
					"        pm.environment.set(\"uniqueProductId\", ++newProductId);",
					"",
					"        // Update productId with new values",
					"        productId.productId = newProductId;",
					"        productId.productIdType = pm.environment.get(\"identifierTypeId\");",
					"    };",
					"",
					"    /**",
					"     * Build Order with minimal required fields.",
					"     */",
					"    utils.buildOrderWithMinContent = function () {",
					"        return {",
					"            \"vendor\": pm.variables.get(\"activeVendorId\"),",
					"            \"orderType\": \"One-Time\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build PO line with minimal required fields.",
					"     */",
					"    utils.buildPoLineWithMinContent = function (orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": \"User\",",
					"            \"orderFormat\": \"Physical Resource\",",
					"            \"physical\": {",
					"                \"createInventory\": \"None\"",
					"            },",
					"            \"cost\": {",
					"                \"currency\": \"USD\",",
					"                \"listUnitPrice\": 1,",
					"                \"quantityPhysical\": 1",
					"            },",
					"            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					" * Build PO line with minimal required fields.",
					" */",
					"    utils.buildElectronicPoLineContent = function (orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": \"User\",",
					"            \"orderFormat\": \"Electronic Resource\",",
					"            \"eresource\": {",
					"                \"createInventory\": \"None\"",
					"            },",
					"            \"cost\": {",
					"                \"currency\": \"USD\",",
					"                \"listUnitPriceElectronic\": 1,",
					"                \"quantityElectronic\": 1",
					"            },",
					"            \"locations\": [",
					"                {",
					"                    \"locationId\": pm.environment.get(\"locationId1\"),",
					"                    \"quantity\": 1,",
					"                    \"quantityElectronic\": 1,",
					"                    \"quantityPhysical\": 0",
					"                }",
					"            ],",
					"            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Title with minimal required fields.",
					"     */",
					"    utils.buildTitleWithMinContent = function (lineId) {",
					"        return {",
					"            \"title\": \"Test Title\",",
					"            \"poLineId\": lineId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Order in status \"Open\" without PO Number.",
					"     */",
					"    utils.prepareOpenOrderWithoutPoNumber = function (order) {",
					"        let json = utils.prepareOrder(order);",
					"        json.workflowStatus = \"Open\";",
					"        utils.deletePoNumber(json);",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO lines of expected quantity and its sub-object elements",
					"     */",
					"    utils.validatePoLines = function (order, expectedCount) {",
					"        let checkInventory = order.workflowStatus !== \"Pending\";",
					"        pm.expect(order.compositePoLines).to.have.lengthOf(expectedCount);",
					"        order.compositePoLines.forEach(poLine => {",
					"            pm.test(\"Validating PO Line with number=\" + poLine.poLineNumber, function () {",
					"                utils.rememberPoLineId(poLine);",
					"                pm.expect(poLine.purchaseOrderId, \"Line has to have order id\").to.equal(order.id);",
					"                utils.validatePoLineAgainstSchema(poLine);",
					"                poLine.locations.forEach(location => utils.validateLocationQuantity(location));",
					"",
					"                if (checkInventory) {",
					"                    utils.validatePoLinesInventoryLinks(poLine);",
					"                } else {",
					"                    utils.verifyNoInventoryItemsExist(poLine);",
					"                }",
					"                // Validate that expected piece quantity created of expected format",
					"                utils.validatePieceRecords(poLine, checkInventory);",
					"                utils.validateEncumbranceRecords(poLine, order.workflowStatus);",
					"",
					"                if (poLine.cost) {",
					"                    pm.expect(poLine.cost.poLineEstimatedPrice).to.be.above(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates presence of links to Inventory entities (e.g. Instance) and that these links are correct",
					"     */",
					"    utils.validatePoLinesInventoryLinks = function (poLine) {",
					"        // Instance should created only",
					"        if (!utils.inventoryUpdateNotRequired(poLine)) {",
					"            utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + poLine.id, (err, res) => {",
					"                let title = res.json().titles[0];",
					"                utils.sendGetRequest(\"/instance-storage/instances/\" + title.instanceId, (err1, res1) => {",
					"                    pm.test(\"Instance Record exist for PO Line with number=\" + poLine.poLineNumber, () => {",
					"                        let instance = res1.json();",
					"                        pm.expect(instance).to.exist;",
					"",
					"                        //Check if holdings record is created",
					"                        utils.validateHoldingsRecord(poLine);",
					"                        // Now check items",
					"                        utils.validateInventoryItems(poLine);",
					"",
					"                        // Now validate expected instance's content",
					"                        utils.validateInstanceContent(instance, poLine);",
					"                    });",
					"                    pm.expect(title.instanceId, \"Instance id is expected\").to.exist;",
					"                });",
					"            });",
					"",
					"",
					"        } else {",
					"            utils.verifyNoInventoryItemsExist(poLine);",
					"        }",
					"    };",
					"",
					"    utils.validateInstanceContent = function (instance, poLine) {",
					"        pm.expect(instance.title, \"Instance's title is not the same as PO Line's\").to.equal(poLine.titleOrPackage);",
					"",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceStatusCode\") !== null) {",
					"            pm.expect(instance.statusId, \"Instance's status id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceStatusId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's status id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceStatusId\"));",
					"        }",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceTypeCode\") !== null) {",
					"            pm.expect(instance.instanceTypeId, \"Instance's type id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceTypeId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceTypeId\"));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.validateInventoryItems = function (line) {",
					"        let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"        utils.getItemsByPoLineId(line.id, expectedCount, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records exist for PO Line with number=\" + line.poLineNumber, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                let isCheckin = typeof line.checkinItems === \"undefined\" ? false : line.checkinItems;",
					"                //items are not created for checkin while opening the order, but can be created later",
					"                if (utils.isItemsUpdateRequired(line) && !isCheckin) {",
					"                    pm.expect(body.totalRecords, \"Quantity of items created for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                    body.items.forEach(item => utils.validateItemContent(item));",
					"                } else {",
					"                    pm.expect(body.totalRecords, \"Quantity of items should be zero\").to.equal(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.validateItemContent = function (item) {",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-loanTypeName\") !== null) {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id is not the same as created for API tests\").to.equal(pm.variables.get(\"loanTypeId\"));",
					"        } else {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"loanTypeId\"));",
					"        }",
					"",
					"        pm.expect(item.status.name, \"Item's status name is incorrect\").to.equal(\"On order\");",
					"        pm.expect(item.materialTypeId, \"Item's material type id is not the same as created for API tests\").to.equal(pm.variables.get(\"materialTypeId\"));",
					"    }",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.getItemsByPoLineId = function (id, limit, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=\" + limit + \"&query=purchaseOrderLineIdentifier==\" + id, handler);",
					"    };",
					"    /**",
					"     * Search items by holdingId",
					"     */",
					"    utils.getItemsByHoldingId = function (holdingId, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=999&query=holdingsRecordId==\" + holdingId, handler);",
					"    };",
					"",
					"    /**",
					"     * Validates that Holdings Record was created  in the inventory",
					"     */",
					"    utils.validateHoldingsRecord = function (poLine) {",
					"        let instanceId = poLine.instanceId;",
					"        pm.expect(instanceId).to.exist;",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=0&query=instanceId==\" + instanceId, (err, res) => {",
					"            let body = res.json();",
					"            if (utils.isHoldingsUpdateRequired(poLine)) {",
					"                pm.test(\"Holding Records exist for Created Instance=\" + instanceId, function () {",
					"                    pm.expect(body.totalRecords).to.be.above(0);",
					"                });",
					"            } else {",
					"                pm.test(\"Holding Records not exist for instance=\" + instanceId, function () {",
					"                    pm.expect(body.totalRecords).to.be.equal(0);",
					"                });",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that there is no any item associated with the PO Line",
					"     */",
					"    utils.verifyNoInventoryItemsExist = function (line, handler) {",
					"        utils.getItemsByPoLineId(line.id, 0, (err, res) => {",
					"            pm.test(\"No item records found for PO Line with number=\" + line.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords).to.eql(0);",
					"            });",
					"            if (typeof handler === \"function\") {",
					"                handler();",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that items has specified status",
					"     */",
					"    utils.verifyItemsStatus = function (line, itemStatus) {",
					"        utils.getItemsByPoLineId(line.id, 1000, (err, res) => {",
					"            let items = {};",
					"            pm.test(\"All item records for PO Line with number=\" + line.poLineNumber + \" retrieved\", function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                items = res.json().items;",
					"            });",
					"            pm.test(items.length + \" item records for PO Line with number=\" + line.poLineNumber + \" have status=\" + itemStatus, function () {",
					"                res.json().items.forEach(item => pm.expect(item.status.name).to.eql(itemStatus))",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate pieces for PoLine",
					"     */",
					"    utils.validatePieceRecords = function (poLine, arePiecesCreated) {",
					"        let expectedQuantity = arePiecesCreated ? utils.calculateExpectedPiecesQuantity(poLine) : 0;",
					"        utils.sendGetRequest(\"/orders-storage/pieces?limit=\" + expectedQuantity + \"&query=poLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" piece record(s) found for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created pieces does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    let pieces = res.json().pieces;",
					"                    pieces.forEach(piece => utils.validatePiece(piece));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Physical\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Physical\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Electronic\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Electronic\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Other\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Other\"));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate encumbrances for PO Line",
					"     */",
					"    utils.validateEncumbranceRecords = function (poLine, orderStatus) {",
					"        let expectedQuantity = orderStatus === \"Pending\" ? 0 : poLine.fundDistribution.length;",
					"        utils.sendGetRequest(\"/finance/transactions?limit=\" + expectedQuantity + \"&query=encumbrance.sourcePoLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" encumbrance record(s) found for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created encumbrances does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    res.json().transactions.forEach(encumbrance => utils.validateEncumbrance(encumbrance, poLine.fundDistribution));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's receipt status updated to expected,",
					"     * and incase of checkin the receipt date has to be validated",
					"     * if receipt status is partially received, as it is updated for first piece checkec-in",
					"     */",
					"    utils.validateReceiptStatus = function (poLine, receiptStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + receiptStatus + \" receipt status\", function () {",
					"            pm.expect(poLine.receiptStatus, \"Receipt status should be \" + receiptStatus).to.equal(receiptStatus);",
					"            if (\"Fully Received\" === receiptStatus || (poLine.checkinItems === true && \"Partially Received\" === receiptStatus)) {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be set\").to.not.be.empty;",
					"            } else {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be empty\").to.not.exist;",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's payment status updated to expected",
					"     */",
					"    utils.validatePaymentStatus = function (poLine, paymentStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + paymentStatus + \" payment status\", function () {",
					"            pm.expect(poLine.paymentStatus, \"Payment status should be \" + paymentStatus).to.equal(paymentStatus);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that items received in the inventory (MODORDERS-103)",
					"     */",
					"    utils.validateInventoryItemsReceived = function (poLine, expectedQuantity, itemStatus) {",
					"        let expectedCount = typeof expectedQuantity === \"undefined\" ? utils.calculateExpectedItemsQuantity(poLine) : expectedQuantity;",
					"        let status = typeof itemStatus === \"undefined\" ? \"In process\" : itemStatus;",
					"        utils.sendGetRequest(\"/item-storage/items?limit=100&query=status.name==\" + status + \" and purchaseOrderLineIdentifier==\" + poLine.id, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records marked as received for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                pm.expect(body.totalRecords, \"Quantity of items received for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                body.items.forEach(function (item) {",
					"                    pm.expect(item.barcode, \"Barcode should not be empty\").to.not.be.empty;",
					"                    pm.expect(item.itemLevelCallNumber, \"Item level call number should not be empty\").to.not.be.empty;",
					"                });",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that expected number of pieces received using receiving history endpoint (MODORDERS-103)",
					"     */",
					"    utils.validateReceivingHistoryNumberOfPiecesByStatus = function (poLine, expectedQuantity, receivingStatus) {",
					"        receivingStatus = typeof receivingStatus === \"undefined\" ? \"Expected\" : receivingStatus;",
					"        utils.sendGetRequest(\"/orders/receiving-history?limit=0&query=receivingStatus==\" + receivingStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"            pm.test(expectedQuantity + \" \" + receivingStatus + \" pieces for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.json().totalRecords).to.equal(expectedQuantity);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.verifyItemsReceivedIntoAppropriateHolding = function (line, receivingResult) {",
					"        for (i = 0; i < receivingResult.receivingItemResults.length; i++) {",
					"            utils.sendGetRequest(\"/orders-storage/pieces/\" + receivingResult.receivingItemResults[i].pieceId, (err, piece) => {",
					"                //check if piece has changed location",
					"                if (piece.json().locationId === pm.environment.get(\"locationId1\")) {",
					"                    utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + line.instanceId + \" and permanentLocationId==\" + piece.json().locationId, (err, holding) => {",
					"                        pm.test(\"created holding for location \" + piece.json().locationId, function () {",
					"                            pm.expect(holding.json().holdingsRecords.length).to.be.above(0);",
					"                        });",
					"",
					"                        if (utils.isItemsUpdateRequired(line)) {",
					"                            utils.sendGetRequest(\"/item-storage/items?limit=1&query=holdingsRecordId==\" + holding.json().holdingsRecords[0].id + \" and id==\" + piece.json().itemId, (err, items) => {",
					"                                pm.test(\"item \" + items.json().items[0].id + \" received into holding \" + holding.json().holdingsRecords[0].id, function () {",
					"                                    pm.expect(items.json().items.length).to.be.above(0);",
					"                                    // MODORDERS-315 itemStatus cannot be empty",
					"                                    pm.expect(items.json().items[0].status.name).to.not.be.empty;",
					"                                });",
					"                            });",
					"                        }",
					"                    });",
					"                }",
					"            });",
					"        }",
					"    };",
					"",
					"",
					"    utils.validateLocationQuantity = function (location) {",
					"        let physicalQuantity = location.hasOwnProperty(\"quantityPhysical\") ? location.quantityPhysical : 0;",
					"        let electronicQuantity = location.hasOwnProperty(\"quantityElectronic\") ? location.quantityElectronic : 0;",
					"        pm.expect(location.quantity).to.equal(physicalQuantity + electronicQuantity);",
					"    };",
					"",
					"    utils.inventoryUpdateNotRequired = function (compPOL) {",
					"        if (compPOL.isPackage === true) {",
					"            return true;",
					"        }",
					"",
					"        // in case of \"Other\" order format check Physical createInventory value only",
					"        if (compPOL.orderFormat === \"Other\") {",
					"            return compPOL.physical == null || compPOL.physical.createInventory === \"None\";",
					"        }",
					"        let physicalUpdateNotRequired = (compPOL.physical == null || compPOL.physical.createInventory === \"None\");",
					"        let eresourceUpdateNotRequired = (compPOL.eresource == null || compPOL.eresource.createInventory === \"None\");",
					"",
					"        return physicalUpdateNotRequired && eresourceUpdateNotRequired;",
					"    };",
					"",
					"    utils.isHoldingsUpdateRequired = function (compPOL) {",
					"        let updatesRequiredForEresource = false;",
					"        let updateRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            updatesRequiredForEresource = (compPOL.eresource.createInventory === \"Instance, Holding\" || compPOL.eresource.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        if (compPOL.physical != null) {",
					"            updateRequiredForPhysical = (compPOL.physical.createInventory === \"Instance, Holding\" || compPOL.physical.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        return updatesRequiredForEresource || updateRequiredForPhysical;",
					"    };",
					"",
					"    utils.isItemsUpdateRequired = function (compPOL) {",
					"        let itemsRequiredForEresource = false;",
					"        let itemsRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            itemsRequiredForEresource = compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        if (compPOL.physical != null) {",
					"            itemsRequiredForPhysical = compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        return itemsRequiredForEresource || itemsRequiredForPhysical;",
					"    };",
					"",
					"",
					"    /**",
					"     * Prepare receiving request body for all PO Lines of an order",
					"     * The function sets following variable:",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive one PO Line of the desired order format",
					"     * @param quantityToReceive number of pieces to receive. In case if not specified, all pieces will be received",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForOrder = function (orderId, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            pm.test(\"Preparing receiving request for entire order with id=\" + orderId, function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"            });",
					"",
					"            if (typeof quantityToReceive === \"undefined\") {",
					"                quantityToReceive = 1000;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and purchaseOrderId=\" + orderId, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForOrder = function (orderId, quantity) {",
					"        utils.prepareReceivingRequestForOrder(orderId, quantity, \"On order\");",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForPoLineOfFormat = function (orderId, orderFormat, quantity) {",
					"        utils.prepareReceivingRequestForPoLineOfFormat(orderId, orderFormat, quantity, \"On order\");",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body for PO Line of expected order format",
					"     * The function sets 2 variables:",
					"     * - `receivingPoLineId` the PO Line id receiving request is going to be sent",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive/revert pieces of the PO Line of the desired order format",
					"     * @param orderFormat the desired order format of the PO Line",
					"     * @param quantityToReceive number of pieces to receive/revert. In case if not specified, all pieces will be received/reverted",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForPoLineOfFormat = function (orderId, orderFormat, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            let poLine;",
					"            pm.test(\"One PO Line with \" + orderFormat + \" order format expected\", function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"                let lines = res.json().compositePoLines.filter(line => line.orderFormat === orderFormat);",
					"                pm.expect(lines.length).to.equal(1);",
					"                poLine = lines[0];",
					"            });",
					"",
					"            pm.variables.set(\"receivingPoLineId\", poLine.id);",
					"            let piecesQuantity = utils.calculateExpectedPiecesQuantity(poLine);",
					"            if (typeof quantityToReceive === \"undefined\" || quantityToReceive > piecesQuantity) {",
					"                quantityToReceive = piecesQuantity;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body based on receiving history array (MODORDERS-103)",
					"     */",
					"    utils.prepareReceivingRequest = function (receivingHistory, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let isRevertCase = itemStatus === \"On order\";",
					"",
					"        let totalQty = receivingHistory.length;",
					"        let piecesGroupedByPol = new Map();",
					"        for (let i = 0; i < totalQty; i++) {",
					"            let record = receivingHistory[i];",
					"            if (!piecesGroupedByPol.has(record.poLineId)) {",
					"                piecesGroupedByPol.set(record.poLineId, []);",
					"            }",
					"            piecesGroupedByPol.get(record.poLineId).push(record.id);",
					"        }",
					"",
					"        let receivingRq = globals.testData.receiving.bodyTemplate;",
					"        let toBeReceivedTemplate = receivingRq.toBeReceived.pop();",
					"        let receivedItemTemplate = toBeReceivedTemplate.receivedItems.pop();",
					"        receivedItemTemplate.itemStatus = itemStatus;",
					"",
					"        let barcode;",
					"        if (isRevertCase) {",
					"            delete receivedItemTemplate.barcode;",
					"            delete receivedItemTemplate.comment;",
					"            delete receivedItemTemplate.caption;",
					"            delete receivedItemTemplate.locationId;",
					"        } else {",
					"            barcode = parseInt(pm.environment.get(\"receivingItemBarcode\") ? pm.environment.get(\"receivingItemBarcode\") : receivedItemTemplate.barcode);",
					"        }",
					"",
					"        let total = 0;",
					"        for (var [polId, pieceIds] of piecesGroupedByPol) {",
					"            let toBeReceived = utils.copyJsonObj(toBeReceivedTemplate);",
					"            toBeReceived.poLineId = polId;",
					"            toBeReceived.received = pieceIds.length;",
					"            for (let i = 0; i < pieceIds.length; i++) {",
					"                let receivedItem = utils.copyJsonObj(receivedItemTemplate);",
					"                receivedItem.pieceId = pieceIds[i];",
					"                //set new location ids for the half of the pieces",
					"                if (i % 2 == 0) {",
					"                    receivedItem.locationId = pm.environment.get(\"locationId1\");",
					"                }",
					"",
					"                if (!isRevertCase) {",
					"                    // Inventory requires unique barcodes",
					"                    receivedItem.barcode = ++barcode;",
					"                }",
					"                toBeReceived.receivedItems.push(receivedItem);",
					"                total++;",
					"            }",
					"            receivingRq.toBeReceived.push(toBeReceived);",
					"        }",
					"        receivingRq.totalRecords = total;",
					"",
					"        if (!isRevertCase) {",
					"            pm.environment.set(\"receivingItemBarcode\", barcode);",
					"        }",
					"        return receivingRq;",
					"    };",
					"",
					"    /**",
					"     * Verify receiving response body",
					"     */",
					"    utils.verifyReceivingResponse = function (jsonRs, expectedSucceededQuantity, expectedFailedQuantity) {",
					"        pm.expect(jsonRs.totalRecords).to.be.above(0);",
					"        let processedSuccessfully = 0;",
					"        let processedWithError = 0;",
					"        jsonRs.receivingResults.forEach(result => {",
					"            processedSuccessfully += result.processedSuccessfully;",
					"            processedWithError += result.processedWithError;",
					"            let succeeded = 0;",
					"            let failed = 0;",
					"            result.receivingItemResults.forEach(receivingItemResult => {",
					"                pm.expect(receivingItemResult.pieceId).to.exist;",
					"                pm.expect(receivingItemResult.processingStatus).to.exist;",
					"                receivingItemResult.processingStatus.type === \"success\" ? succeeded++ : failed++;",
					"            });",
					"            pm.expect(succeeded).to.equal(result.processedSuccessfully);",
					"            pm.expect(failed).to.equal(result.processedWithError);",
					"        });",
					"        pm.expect(processedWithError).to.equal(expectedFailedQuantity);",
					"        pm.expect(processedSuccessfully).to.equal(expectedSucceededQuantity);",
					"        pm.expect(processedWithError + processedSuccessfully).to.equal(jsonRs.totalRecords);",
					"    };",
					"",
					"    utils.copyJsonObj = function (obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-178",
					"     */",
					"    utils.calculateExpectedItemsQuantity = function (poLine) {",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                let quantity = utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"                quantity += utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"                return quantity;",
					"            case \"Electronic Resource\":",
					"                return utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"            case \"Physical Resource\":",
					"            case \"Other\":",
					"                return utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-100, MODORDERS-194",
					"     */",
					"    utils.calculateExpectedPiecesQuantity = function (poLine, pieceFormat) {",
					"        if (poLine.receiptStatus === \"Receipt Not Required\" || poLine.checkinItems || poLine.isPackage) {",
					"            return 0;",
					"        }",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                if (typeof pieceFormat === \"undefined\") {",
					"                    return poLine.cost.quantityPhysical + poLine.cost.quantityElectronic;",
					"                } else if (pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else if (pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Physical Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Other\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Other\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Electronic Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of physical resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getPhysicalItemsQuantity = function (poLine) {",
					"        let total = 0;",
					"        let locations = poLine.locations;",
					"        if (locations) {",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityPhysical;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of electronic resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getElectronicItemsQuantity = function (poLine) {",
					"        let total = 0;",
					"        if (poLine.eresource && poLine.eresource.createInventory && poLine.locations) {",
					"            let locations = poLine.locations;",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityElectronic;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.verifyOrderCalculatedInfo = function (order, expectedTotalPrice) {",
					"        pm.test(\"Verify PO has calculated data: MODORDERS-181 and MODORDERS-193\", function () {",
					"            pm.expect(order.totalItems).to.exist;",
					"            pm.expect(order.totalItems).to.equal(utils.getTotalResourcesQuantity(order));",
					"            if (typeof expectedTotalPrice === \"undefined\") {",
					"                pm.expect(order.totalEstimatedPrice).to.be.above(0);",
					"            } else {",
					"                pm.expect(order.totalEstimatedPrice).to.equal(expectedTotalPrice);",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.getTotalResourcesQuantity = function (order) {",
					"        let total = 0;",
					"        order.compositePoLines.forEach(poLine => {",
					"            let cost = poLine.cost;",
					"            if (cost) {",
					"                total += (cost.quantityElectronic ? cost.quantityElectronic : 0);",
					"                total += (cost.quantityPhysical ? cost.quantityPhysical : 0)",
					"            }",
					"        });",
					"        return total;",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForEresource = function (compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.eresource != null && compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForPhysical = function (compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.physical != null && compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO line sub-object elements",
					"     */",
					"    utils.validatePoLineSubObjetcsPresence = function (poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote expected\").to.exist;",
					"        pm.expect(poLine.claims, \"claims expected\").to.exist;",
					"        pm.expect(poLine.contributors, \"contributors expected\").to.exist;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.cost.poLineEstimatedPrice, \"cost.poLineEstimatedPrice expected to be above 0\").to.be.above(0);",
					"        pm.expect(poLine.description, \"description expected\").to.exist;",
					"        pm.expect(poLine.donor, \"donor expected\").to.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution expected\").to.exist;",
					"        pm.expect(poLine.locations, \"locations expected\").to.exist;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus expected\").to.exist;",
					"        pm.expect(poLine.physical, \"physical expected\").to.exist;",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription expected\").to.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate expected\").to.exist;",
					"        pm.expect(poLine.publisher, \"publisher expected\").to.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus expected\").to.exist;",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes expected\").to.exist;",
					"        pm.expect(poLine.requester, \"requester expected\").to.exist;",
					"        pm.expect(poLine.rush, \"rush expected\").to.exist;",
					"        pm.expect(poLine.selector, \"selector expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.tags, \"tags expected\").to.exist;",
					"        pm.expect(poLine.titleOrPackage, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail expected\").to.exist;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line is empty except line and order ids",
					"     */",
					"    utils.validatePoLineWithMinimalContent = function (poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.purchaseOrderId, \"PO id expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction not expected\").to.not.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote not expected\").to.not.exist;",
					"        pm.expect(poLine.claims, \"claims should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.contributors, \"contributors should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.description, \"description not expected\").to.not.exist;",
					"        pm.expect(poLine.donor, \"donor not expected\").to.not.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.locations, \"locations should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus is Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription not expected\").to.not.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber is expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate not expected\").to.not.exist;",
					"        pm.expect(poLine.publisher, \"publisher not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptDate, \"receiptDate not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus must be Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.requester, \"requester not expected\").to.not.exist;",
					"        pm.expect(poLine.selector, \"selector not expected\").to.not.exist;",
					"        pm.expect(poLine.tags, \"tags should be empty\").to.not.exist;",
					"        pm.expect(poLine.titleOrPackage, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Updates each PO Line's payment status with provided one.",
					"     * If status is not provided, \"Fully Paid\" is used for even and \"Payment Not Required\" for odd ones.",
					"     */",
					"    utils.updatePoLinesPaymentStatus = function (order, status) {",
					"        // Update only payment status",
					"        let lines = order.compositePoLines;",
					"        for (let i = 0; i < lines.length; i++) {",
					"            let newStatus = status;",
					"            if (!newStatus) {",
					"                newStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
					"            }",
					"            // Send update line request with delay",
					"            setTimeout((function (newStatus) {",
					"                console.log(newStatus);",
					"                utils.updatePoLinePaymentStatus(lines[i], newStatus)",
					"            }).bind(null, newStatus), 500 * i);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Updates PO Line's payment status with provided one and sends PUT request.",
					"     */",
					"    utils.updatePoLinePaymentStatus = function (poLine, status) {",
					"        // Update only payment status",
					"        poLine.paymentStatus = status;",
					"        utils.sendPutRequest(\"/orders/order-lines/\" + poLine.id, poLine, (err, response) => {",
					"            pm.test(\"PO Line updated with number=\" + poLine.poLineNumber, () => pm.expect(response.code).to.eql(204));",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Adds PO line id to `completePolineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberPoLineId = function (poLine) {",
					"        if (poLine && poLine.id) {",
					"            let completePolineIds = pm.globals.get(\"completePolineIds\") ? JSON.parse(pm.globals.get(\"completePolineIds\")) : [];",
					"            completePolineIds.push(poLine.id);",
					"            pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completePolineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastPoLineId = function (withRemoval) {",
					"        let completePolineIds = globals.completePolineIds ? JSON.parse(globals.completePolineIds) : [];",
					"        if (completePolineIds.length > 0) {",
					"            let lineId = completePolineIds.pop();",
					"            if (withRemoval) {",
					"                pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line content against schemas",
					"     */",
					"    utils.validatePoLineAgainstSchema = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_po_line.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO content against schemas",
					"     */",
					"    utils.validateOrderAgainstSchema = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_purchase_order.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO Lines number",
					"     */",
					"    utils.validatePoLinesNumber = function (order) {",
					"        let poLineSuffix = \"(-[0-9]{1,3})\";",
					"        let regex = new RegExp(order.poNumber + poLineSuffix);",
					"        for (let i = 0; i < order.compositePoLines.length; i++) {",
					"            let poLineNumber = order.compositePoLines[i].poLineNumber;",
					"            let match = regex.exec(poLineNumber);",
					"            pm.expect(match).not.equal(null);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validate order workflowStatus",
					"     */",
					"    utils.validateWorkflowStatus = function (order) {",
					"        pm.test(\"Verify Order updated with expected workflow status\", function () {",
					"            if (order.workflowStatus != \"Pending\") {",
					"                if (utils.isCompletedAllPoLines(order.compositePoLines)) {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Closed\");",
					"                } else {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Open\");",
					"                }",
					"            }",
					"        });",
					"    };",
					"",
					"    utils.isCompletedAllPoLines = function (poLines) {",
					"        for (let i = 0; i < poLines.length; i++) {",
					"            let paymentStatus = poLines[i].paymentStatus;",
					"            let receiptStatus = poLines[i].receiptStatus;",
					"            if (!(paymentStatus === \"Payment Not Required\" || paymentStatus === \"Fully Paid\") || !(receiptStatus === \"Fully Received\" || receiptStatus === \"Receipt Not Required\")) {",
					"                return false;",
					"            }",
					"        }",
					"        return true;",
					"    };",
					"",
					"    utils.postRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * This method creates a piece and also calls the prepares the check-in body.",
					"     * If itemId is not provided the check-in flow just updates the piece record",
					"     */",
					"    utils.createPieceAndCheckInBody = function (compPoLine, itemId) {",
					"        let pieceTemplate = globals.testData.piece.bodyTemplate;",
					"        // set new location for checkin piece",
					"        pieceTemplate.locationId = compPoLine.locations[0].locationId;",
					"        pieceTemplate.poLineId = compPoLine.id;",
					"        if (compPoLine.orderFormat === \"Electronic Resource\") {",
					"            pieceTemplate.format = \"Electronic\";",
					"        } else {",
					"            pieceTemplate.format = \"Physical\";",
					"        }",
					"        if (typeof itemId === \"undefined\") {",
					"            delete pieceTemplate.itemId;",
					"        } else {",
					"            pieceTemplate.itemId = itemId;",
					"        }",
					"        pieceTemplate.titleId = pm.variables.get(\"titleId\");",
					"        pieceTemplate.receiptDate = new Date();",
					"        pm.variables.set(\"checkinPoLineId\", compPoLine.id);",
					"        utils.postRequest(\"/orders/pieces\", pieceTemplate, (err, res) => {",
					"            pm.test(\"creating piece for check-in \", function () {",
					"                pm.expect(res).to.have.property('code', 201);",
					"            });",
					"            utils.prepareCheckinBody(compPoLine, res.json().id);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * This method is used for both checking in a piece and also reverting it,",
					"     * If the checkinstatus is not provided by default it is set to check-in item",
					"     *",
					"     */",
					"    utils.prepareCheckinBody = function (compPoLine, pieceId, checkinStatus) {",
					"        let checkinRq = globals.testData.checkin.bodyTemplate;",
					"        let toBeCheckedInTemplate = checkinRq.toBeCheckedIn.pop();",
					"        let checkinPiecesTemplate = toBeCheckedInTemplate.checkInPieces.pop();",
					"        toBeCheckedInTemplate.poLineId = compPoLine.id;",
					"        toBeCheckedInTemplate.checkedIn = 1;",
					"        checkinPiecesTemplate.id = pieceId;",
					"        checkinPiecesTemplate.locationId = pm.environment.get(\"locationId1\");",
					"        if (typeof checkinStatus === \"undefined\") {",
					"            checkinPiecesTemplate.itemStatus = \"In process\";",
					"        } else {",
					"            checkinPiecesTemplate.itemStatus = checkinStatus;",
					"        }",
					"        toBeCheckedInTemplate.checkInPieces.push(checkinPiecesTemplate);",
					"        checkinRq.toBeCheckedIn.push(toBeCheckedInTemplate);",
					"        console.log(JSON.stringify(checkinRq));",
					"        pm.variables.set(\"checkinBody\", JSON.stringify(checkinRq));",
					"    };",
					"",
					"    /**",
					"     * Get the holding where the item needs to be created , create an item",
					"     * and then use the item id to create a piece",
					"     *",
					"     */",
					"    utils.prepareCheckinBodyWithItems = function (compPoLine) {",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + compPoLine.instanceId + \" and permanentLocationId==\" + compPoLine.locations[0].locationId, (err, res) => {",
					"            utils.createItem(compPoLine.id, res.json().holdingsRecords[0].id, (err, res) => {",
					"                pm.test(\"creating item for check-in\", function () {",
					"                    pm.expect(res).to.have.property('code', 201);",
					"                });",
					"                utils.createPieceAndCheckInBody(compPoLine, res.json().id);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.createItem = function (poLineId, holdingsRecordId, handler) {",
					"        let itemTemplate = globals.testData.item.bodyTemplate;",
					"        itemTemplate.holdingsRecordId = holdingsRecordId;",
					"        itemTemplate.purchaseOrderLineIdentifier = poLineId;",
					"        utils.postRequest(\"/item-storage/items\", itemTemplate, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function (path) {",
					"        return new Promise((resolve) => {",
					"            utils.sendDeleteRequest(path, (err, response) => {",
					"                resolve(response.code);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function (code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function () {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function (configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function (configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function (configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function (configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function (configs, configName, value) {",
					"        let bodyTemplate = globals.testData.configs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function (body) {",
					"        utils.postRequest(\"/configurations/entries\", body, function (err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function (body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function (id) {",
					"        const timerId = setTimeout(() => { }, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Delete titles by poLine id",
					"     *",
					"     */",
					"    utils.deleteTitlesByLineId = function (poLineId) {",
					"        utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + poLineId, (err, res) => {",
					"            let titles = res.json().titles;",
					"            titles.forEach(title => {",
					"                const timerId = setTimeout(() => { }, 60000);",
					"                utils.processDeleteRequest(\"/orders/titles/\" + title.id)",
					"                    .then(result => clearTimeout(timerId))",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on Items deletion:\", err);",
					"                        clearTimeout(timerId);",
					"                    });",
					"            });",
					"",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function (path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.globals.unset(\"emptyOrderWithoutPoLinesId\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"emptyOrderId\");",
					"        pm.globals.unset(\"isbnOrderId\");",
					"        pm.globals.unset(\"isbn_Order_content\");",
					"        pm.globals.unset(\"po_listed_print_monograph\");",
					"        pm.globals.unset(\"completePolineIds\");",
					"        pm.globals.unset(\"completeOrderId\");",
					"        pm.globals.unset(\"completeOrderPoNumber\");",
					"        pm.globals.unset(\"physElecOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsPendingOrderId\");",
					"        pm.globals.unset(\"negativeTestsOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsClosedOrderId\");",
					"        pm.globals.unset(\"negativeTestsFailedEncumbrances\");",
					"        pm.globals.unset(\"negativeTestsOpenPOLineId\");",
					"        pm.globals.unset(\"anotherCompleteOrderId\");",
					"        pm.globals.unset(\"completeOpenOrderId\");",
					"        pm.globals.unset(\"checkin_physical_poLine\");",
					"        pm.globals.unset(\"checkin_electronic_poLine\");",
					"        pm.globals.unset(\"poLineForNegativeTests\");",
					"        pm.globals.unset(\"randomUUId\");",
					"        pm.globals.unset(\"receivingHistoryPoId\");",
					"        pm.globals.unset(\"requestBodyPhysical\");",
					"        pm.globals.unset(\"requestBodyToBeUpdated\");",
					"        pm.globals.unset(\"poAllPoLineCheckin\");",
					"        pm.globals.unset(\"poLineIdPhysical\");",
					"        pm.globals.unset(\"poToCheckinItemsId\");",
					"        pm.globals.unset(\"orderIdPEMix\");",
					"        pm.globals.unset(\"orderWithApprovalReqTrueId\");",
					"        pm.globals.unset(\"orderWithReceiptNotRequiredId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId1\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId2\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId3\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNoneId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingItemId\");",
					"        pm.globals.unset(\"order_isbn_validation\");",
					"        pm.globals.unset(\"automaticallyClosedOrder\");",
					"        pm.globals.unset(\"automaticallyClosedOpenOrder\");",
					"        pm.globals.unset(\"automaticallyOpenedOrder\");",
					"        pm.globals.unset(\"newEmptyPoLine\");",
					"        pm.globals.unset(\"poNumber\");",
					"        pm.globals.unset(\"poLineIdPEMix\");",
					"        pm.globals.unset(\"poLine2IdPEMix\");",
					"        pm.globals.unset(\"loanType\");",
					"        pm.globals.unset(\"materialType\");",
					"        pm.globals.unset(\"testTenant\");",
					"        pm.globals.unset(\"testTenantActiveVendorId\");",
					"        pm.globals.unset(\"pieceIdToUpdate\");",
					"        pm.globals.unset(\"pieceRecord\");",
					"",
					"        pm.environment.unset(\"activeVendorId\");",
					"        pm.environment.unset(\"contributorNameTypeId\");",
					"        pm.environment.unset(\"current-orders-configs\");",
					"        pm.environment.unset(\"current-tenant-configs\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"budgetId\");",
					"        pm.environment.unset(\"identifierTypeId\");",
					"        pm.environment.unset(\"isbnIdentifierTypeId\");",
					"        pm.environment.unset(\"inactiveVendorId\");",
					"        pm.environment.unset(\"instanceTypeId\");",
					"        pm.environment.unset(\"instanceStatusId\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"loanTypeId\");",
					"        pm.environment.unset(\"locationId1\");",
					"        pm.environment.unset(\"locationId2\");",
					"        pm.environment.unset(\"locationId3\");",
					"        pm.environment.unset(\"materialTypeId\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"mod-tenant-configs\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"        pm.environment.unset(\"temp-orders-configs\");",
					"        pm.environment.unset(\"reasonForClosureId\");",
					"        pm.environment.unset(\"prefixId\");",
					"        pm.environment.unset(\"suffixId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"xokapitoken-restricted\");",
					"        pm.environment.unset(\"newLocationId\");",
					"        pm.environment.unset(\"orderTemplateId\");",
					"        pm.environment.unset(\"restrictedLedgerId\");",
					"        pm.environment.unset(\"restrictedFundId\");",
					"        pm.environment.unset(\"restrictedBudgetId\");",
					"        pm.environment.unset(\"uniqueProductId\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"        pm.environment.unset(\"mixLineForCheckIn\");",
					"        pm.environment.unset(\"mixLineForCheckInId\");",
					"        pm.environment.unset(\"instanceId\");",
					"        pm.environment.unset(\"checkinLocationId\");",
					"        pm.environment.unset(\"electronicResourceId\");",
					"        pm.environment.unset(\"physicalResourceId\");",
					"        pm.environment.unset(\"delOrderId201\");",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function (jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function (data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.deletePoNumber = function (order) {",
					"        delete order.poNumber;",
					"",
					"        return order;",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5232ac28-24f1-4ef7-afdc-c7ee6fce7745",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c79e2e59-a7c4-4a7f-a662-30b563816700",
			"key": "testTenant",
			"value": "orders_api_tests1",
			"type": "string"
		},
		{
			"id": "4e99b054-ef08-4c27-aa1d-d47b19265c69",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "6f92be73-136e-47dc-9d84-fffb9540fd97",
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		},
		{
			"id": "0a4f83f7-4842-4627-8e34-074625083fd9",
			"key": "inventory-identifierTypeName",
			"value": "ordersApiTestsIdentifierTypeName",
			"type": "string"
		},
		{
			"id": "5ca409e5-03db-40c3-b8e9-83cc61e8eead",
			"key": "inventory-instanceTypeCode",
			"value": "ordersApiTestsInstanceTypeCode",
			"type": "string"
		},
		{
			"id": "842621b5-4ca3-43ab-baee-b2d2102b1220",
			"key": "inventory-instanceStatusCode",
			"value": "ordersApiTestsInstanceStatusCode",
			"type": "string"
		},
		{
			"id": "41612e03-e5d1-494c-9f99-a04ace6ea32a",
			"key": "inventory-loanTypeName",
			"value": "ordersApiTestsLoanTypeName",
			"type": "string"
		},
		{
			"id": "eb10090b-2f20-44b2-9a8d-07509a44e6a2",
			"key": "tenant.addresses",
			"value": "{\n  \"address\": \"sample address\",\n  \"name\": \"sample name\"\n}\n",
			"type": "string"
		},
		{
			"id": "633d4893-b5dc-461a-9b20-e4d420766125",
			"key": "approvals",
			"value": "{\"isApprovalRequired\":false}",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}