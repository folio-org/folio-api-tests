{
	"info": {
		"_postman_id": "48878886-942d-482b-afd1-0e7df1cefe6c",
		"name": "mod-finance",
		"description": "Tests for mod-finance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b181b554-d122-403e-bdf2-51f15bda0375",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4638123f-1b5a-4987-a615-8c47d146ed4a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b8ab34c9-7cb3-48f4-849a-3870815d91b1",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "96be07a0-40a9-403e-8b46-5094d249e3fb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-finance\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"",
											"",
											"//remove after implementing mod-finance CRUD API",
											"utils.getModuleId(\"mod-finance-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"//",
											"",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a00b07cb-f5f6-4ffc-b0e2-bc3386f50b2a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "713d1bd3-2761-4b4c-8629-92b059b0b845",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "91846e0f-fcf9-4085-a454-05e7bae16b53",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54468663-1b19-4482-a76b-8ba01c0209cc",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "868720a8-04e2-4329-8270-3326940338ad",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1dbbedc-1d15-41c6-a70c-96bf4e949c78",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ccd004a0-3a03-4d51-8a80-74efcb93a196",
										"exec": [
											"eval(globals.loadUtils).sendGetRequest('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])', (err, res) => {",
											"        let userPermissions = globals.testData.users.admin.permissions;",
											"        userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"        userPermissions.permissions.push(\"finance.order-transaction-summaries.item.post\");",
											"        pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "639e4110-0453-499c-b3cb-0079ba31faac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bab48929-1798-42e1-a0bd-35d521b875d6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "946e9cf2-9cd0-405b-a155-44dd73d8e6a1",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae14bca4-af04-4d21-9cf4-8a6d38467ee5",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b49a0a4-e38a-4694-9f3c-81c5e06264ba",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"testConfigs.configNames.forEach(configName => utils.createFinanceConfig(configName));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "89d885e4-6002-433e-b2fc-534385fd22b9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==FINANCE",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==FINANCE"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1a848ed-2b78-444d-8cf8-3d1d31f3e929",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f63dec5e-839e-4c94-b6c5-10adba4ccd0a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load all schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32e25666-abcf-46ba-b95b-367b8282f5d7",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modFinanceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e88967f-3083-4145-8b3b-673ef2cf183b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moduleName = 'mod-finance';",
											"",
											"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(response.text()).to.include(moduleName);",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];",
											"        pm.variables.set('modFinanceId', moduleId);",
											"    });",
											"});",
											"",
											"",
											"function buildPmRequest1(path) {",
											"    return {",
											"        url: utils.buildOkapiUrl(path),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
											"        }",
											"    };",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modFinanceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc57e463-2c19-4804-aa8f-85f66f47adbc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5da5f9b3-5401-44e9-b0d6-7d298ae233ab",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "49f63fe9-a00b-420c-ab5d-e46d51d272f1",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "76b264ad-708f-431c-88b9-10e46c254166",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fc34f1f-dce6-4077-91bd-07fbf178d0b1",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "06d1f4e7-596f-49cb-86b5-8bb7f5bd59fc",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "683f1f91-29ca-494c-8358-a4b1bd845cee",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8e527b7-6da9-4b3d-82d4-e06f9e752a92",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39e5ec76-bc17-437f-a3b1-652694ef1099",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e89610d-b040-4e88-971d-f68ccdab6495",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create group - for Group Fund Fiscal Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b15c3314-e8c8-4993-b615-f3bd8b15b778",
										"exec": [
											"pm.test(\"Group is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df8a1d74-6948-4d6d-8930-77e8d7c67fdc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let group = utils.buildGroupMinContent(\"GROUP_GFFY\");",
											"group.name = \"Test group for GFFY\";",
											"",
											"pm.environment.set(\"groupContent\", JSON.stringify(group));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - for CRUD test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d805ce9-0ef6-4602-ac61-d4968754325b",
										"exec": [
											"pm.test(\"Group is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupForCrudId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2db73aa-200a-4668-9124-d581cbd265a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let group = utils.buildGroupMinContent(\"GROUP_GRUD\");",
											"",
											"pm.environment.set(\"groupContent\", JSON.stringify(group));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5c1f158-b242-47b3-a2de-dca55b406766",
										"exec": [
											"pm.test(\"Groups is retrieved\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().groups.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bc39eca8-a281-4227-8a8b-db30ed1d5867",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54e5dd68-9248-47fc-850d-e8b5ec462bc1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateGroup(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "57cb30c0-2b50-44e7-998d-de68c762fde6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3b030b0-78f2-4459-8754-f440b336ff90",
										"exec": [
											"pm.test(\"Group is updated\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6118d5cf-f5e8-42b0-b2d7-072848f15a5b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let groupForUpdate = JSON.parse(pm.environment.get(\"groupContent\"));",
											"",
											"groupForUpdate.name = \"newGroupName\";",
											"",
											"pm.variables.set(\"groupContent\", JSON.stringify(groupForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75ec8b9c-15a3-4637-8957-12e96558df72",
										"exec": [
											"pm.test(\"Group is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dbd6ce4a-12a5-447b-bf98-d3000700a041",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fiscal years",
					"item": [
						{
							"name": "Create fiscal year  - required for budgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5f8fbde-7963-47c0-9d93-1ef09c8e526d",
										"exec": [
											"pm.test(\"Fiscal Year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fiscalYearId\", pm.response.json().id);",
											"    // MODFIN-94 Add series field while creating/updating a FiscalYear",
											"    pm.expect(pm.response.json().series).to.exist;",
											"});",
											"",
											"pm.test(\"Fiscal Year contains Currenct\", () => {",
											"    pm.expect(pm.response.json().currency).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e729e9c8-9599-4cd9-9c7e-0165b1bf4b74",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fyContent\", JSON.stringify(utils.buildFiscalYearMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fiscal year  - required for budgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae148127-10e0-4ca1-960e-a8a1b1a3cbcf",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"secondFiscalYearId\", pm.response.json().id); ",
											"    // MODFIN-94 Add series field while creating/updating a FiscalYear",
											"    pm.expect(pm.response.json().series).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ea16da87-6b03-4367-9eca-0e6332f95a36",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fy = utils.buildFiscalYearMinContent(\"FY2020\");",
											"",
											"pm.environment.set(\"secondFyContent\", JSON.stringify(fy));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{secondFyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fiscal year list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a15c135-32b3-4989-8fa4-af303d980e39",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().fiscalYears.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c3fc4c2-4d3f-49c5-a156-0f6b7490fecc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1a753b5-6ca3-4643-89ba-948ac8284daf",
										"exec": [
											"pm.test(\"FiscalYear is updated is created\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d0d1f27-134d-4904-a2cf-3717f0d3a531",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let fyForUpdate = JSON.parse(pm.variables.get(\"secondFyContent\"));",
											"",
											"fyForUpdate.name = \"newFYName\";",
											"",
											"pm.variables.set(\"secondFyContent\", JSON.stringify(fyForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{secondFyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{secondFiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{secondFiscalYearId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fiscal year by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d00efc3c-f4fe-4938-a9e0-229de8ddb178",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fiscal year is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateFiscalYear(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "630c7209-99eb-4c8b-bc3a-6535abfcdd62",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{secondFiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{secondFiscalYearId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fiscal year for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b89305db-97ce-4202-b430-3ba3ab7252f9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Fiscal Year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fyForDeleteId\", pm.response.json().id); ",
											"});",
											"",
											"pm.test(\"Fiscal Year contains Currency from Config\", () => {",
											"    pm.expect(pm.response.json().currency).to.exist;",
											"     pm.expect(pm.response.json().currency).to.equal(\"USD\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b38a1a95-4d61-4747-b909-c63ae67fd0ff",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fy = utils.buildFiscalYearMinContent(\"THRD2020\");",
											"",
											"pm.variables.set(\"fyForDelete\", JSON.stringify(fy));",
											"",
											"let localeConfig = globals.testData.localeConfigs.bodyTemplate;",
											"localeConfig.value = \"{\\\"locale\\\":\\\"en-US\\\",\\\"timezone\\\":\\\"America/New_York\\\",\\\"currency\\\":\\\"USD\\\"}\";",
											"utils.createConfig(localeConfig);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyForDelete}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Test Fiscal Year picks currency from configuration while creating"
							},
							"response": []
						},
						{
							"name": "Delete fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cd6d502-696e-4075-bc1b-4906dffca6fc",
										"exec": [
											"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b658fb78-ac11-436d-bbe6-239fa7ec74b0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{fyForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{fyForDeleteId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ledgers",
					"item": [
						{
							"name": "Create first ledger - required for funds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f0eb14c-83f0-487b-beaf-edf0f00f6e3a",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c56f4cf-86ec-44a2-a736-10899a4ea21e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let ledger = utils.buildLedgerMinContent();",
											"ledger.fiscalYearOneId = pm.environment.get(\"fiscalYearId\");",
											"pm.environment.set(\"ledgerContent\", JSON.stringify(ledger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second ledger - for CRUD test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b94e4ee7-b04f-4357-8541-7f30a063e4bf",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"secondLedgerId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6034ada8-f5a4-4412-87c0-8bc0151247ed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let secondLedger = utils.buildLedgerMinContent();",
											"secondLedger.code = \"SCND-TST-LDGR-CODE\";",
											"secondLedger.name = \"Second Ledger Name\";",
											"secondLedger.fiscalYearOneId = pm.environment.get(\"secondFiscalYearId\");",
											"",
											"pm.environment.set(\"ledgerContent\", JSON.stringify(secondLedger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ledger list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9572dbc-858c-4f11-a2b0-c52d5d0eb74c",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().ledgers.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9668c541-fceb-4b9f-8392-8d84dcc23449",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ledger by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "996b4d6e-df04-4004-9852-3227bc0f6054",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Ledger is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateLedger(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b253e4d7-f5f5-4564-82d2-93c13ae9aba9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73030f5f-2b3a-470d-a7bb-e1b636b0fb3d",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f445390-3cb6-4e9d-84a1-91f30f87896a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let ledgerForUpdate = JSON.parse(pm.environment.get(\"ledgerContent\"));",
											"",
											"ledgerForUpdate.name = \"newLedgerName\";",
											"",
											"pm.variables.set(\"ledgerContent\", JSON.stringify(ledgerForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "134262fa-fbe0-48cc-a444-2c5993a171d6",
										"exec": [
											"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e67f913-e6e9-48f8-b4e5-e9157c696b7a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund types",
					"item": [
						{
							"name": "Create first type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "009c2e86-56b1-487f-a901-affd5ae13a7d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let type = {};",
											"",
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    type = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund type content is valid\", function() {",
											"    utils.validateFundType(type);",
											"    pm.environment.set(\"fundTypeId\", type.id);",
											"    pm.expect(type.name).to.eql(\"First\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4e051d00-ae60-4ddd-8292-acf518c9bdab",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"First\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "888b17f6-06a7-49d1-8283-e9bcf8429a1d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund type is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateFundType(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cec62dc4-88c3-49e1-a7cd-e8ed2e46dd4d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4e03490-b1fa-4273-affc-7b32fa8de4bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let type = {};",
											"",
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    type = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund type content is valid\", function() {",
											"    utils.validateFundType(type);",
											"    pm.environment.set(\"fundTypeId2\", type.id); ",
											"    pm.expect(type.name).to.eql(\"Second\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a5b56ab-43b2-4e2b-a331-991d0c53f90f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{$guid}}\",\n\t\"name\": \"Second\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records by query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f45e8fa7-799c-4e18-93c3-f172d04b0dbf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund type record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.fundTypes).to.have.lengthOf(1);",
											"    records.fundTypes.forEach(type => utils.validateFundType(type));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1b8ab10e-fb76-4b15-b6f7-94ab5eaed758",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=name==Second",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "name==Second"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b13d3a09-e7da-476f-8a03-13b6e2c0620c",
										"exec": [
											"pm.test(\"Fund type is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "284aca09-a43f-4ed9-bed4-386431761f45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Updated\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87088cf2-f4f4-4db1-bbc6-52bcb1168af8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund type is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let type = pm.response.json();",
											"    utils.validateFundType(type);",
											"    pm.expect(type.name).to.eql(\"Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d5159ba6-7675-44f4-a8c9-5a0085e99e7b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "374c7d11-b760-45be-82dd-03b7342d9017",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 fund type records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.fundTypes).to.have.lengthOf(2);",
											"    collection.fundTypes.forEach(type => utils.validateFundType(type));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7bad8b53-85d1-4e69-a569-17f95cac9635",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d746be1f-4f32-4d07-b96c-140b7bdd7b6c",
										"exec": [
											"pm.test(\"Fund type is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad517421-e529-4111-aae4-bea512a5bed8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd0582b6-eee5-4d36-ac80-f7238bc49249",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund type record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.fundTypes).to.have.lengthOf(1);",
											"    utils.validateFundType(collection.fundTypes[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd1d942f-f5fb-44d7-9985-4cbee4a0249e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Funds",
					"item": [
						{
							"name": "Create first fund - required for budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8746fed9-4326-4252-b1a9-7bb8be36e33c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"fundId\", record.fund.id); ",
											"    pm.expect(record.fund.code).to.eql(\"FRST-FND\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f319503-2471-4fda-941d-bc7e23d82dc2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"FRST-FND\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6624809-8b5e-4795-9fca-8a17611d5f9e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateCompositeFund(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d4b6526-59df-48cc-8804-80ef52b8cef0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f622ec77-9b40-4633-96ab-df62aa6dc416",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"fundId2\", record.fund.id);",
											"    pm.environment.set(\"fundContent2\", record);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f0e1f665-0ab9-4963-b966-b7ab2a769f1e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"SCND-FND\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records by query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9efd422f-927d-49ef-903a-da3058dfebc2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.funds).to.have.lengthOf(1);",
											"    utils.validateFund(records.funds[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4e7aeb98-4869-469b-83cf-7cfccd70071c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds?query=fundTypeId=\"\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "fundTypeId=\"\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52ace0f5-68f3-4cad-a1cf-61a3d2d24e42",
										"exec": [
											"pm.test(\"Fund is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "01b1ab24-0213-4aa9-8382-07a0b423db27",
										"exec": [
											"let record = pm.environment.get(\"fundContent2\");",
											"record.fund.name = \"Updated\";",
											"pm.variables.set(\"fundContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a88a1ac9-2ae1-4447-b15e-0da22cfc9839",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let record = pm.response.json();",
											"    utils.validateCompositeFund(record);",
											"    pm.expect(record.fund.name).to.eql(\"Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "381f2229-f02f-478f-b290-1a201f920571",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ab8183b-d505-4e3d-b6d9-c749277bb3e5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 fund records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.funds).to.have.lengthOf(2);",
											"    collection.funds.forEach(record => utils.validateFund(record));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae800604-845d-4b0e-aa38-f754418a90fd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc8704f0-2455-435f-a0f7-5a5f21d42dc0",
										"exec": [
											"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f56fac5-0f6d-435b-9a67-f63d52ac23bf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16873c0f-79ea-496f-a581-02066c2b1ef8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.funds).to.have.lengthOf(1);",
											"    utils.validateFund(collection.funds[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8fb4c4d-0423-4ad0-83cb-7956dade8963",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets",
					"item": [
						{
							"name": "Budget deletion without transaction",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f4369949-4e36-4974-833b-9817eae32450",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c64e882e-7f48-416d-badb-015ce6481dfb",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38bc10f3-4b25-455e-95db-5380b5d6e40f",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "84fb1fb3-d652-439e-bf21-321f7712502b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8140abee-8413-41d8-b902-6d56baefc2fb",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7b17301f-4288-4f09-a988-6a8c8809bb1b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let group = utils.buildGroupMinContent(\"GROUP_GRUD\");",
													"",
													"pm.environment.set(\"groupContent\", JSON.stringify(group));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "beb4159a-d4b1-4526-98b0-5b95016baeac",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51b2e375-d07c-487f-ae1f-e2015445a877",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")), [pm.environment.get(\"groupId\")])));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23ced49a-e6ef-4172-9714-7f6fd09eaca8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a290442d-46fd-42e4-a959-e35d410ec1d9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca5c9281-7f6e-408f-82cf-9b07324670d7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2ed69fd9-5ab3-4772-b671-07aa06e8bad1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ce46ff2-ef42-48d4-887a-eae396d6fafc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3b7da285-c130-4441-9ba8-1a7d96049471",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3df92192-4576-481b-ac7d-3579bcc9295f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ddc3897e-1472-4956-9f3a-325b8f7fd50b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get group fund fiscal year by budgetId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01a99574-c003-45c9-85ae-3f689dfdc01c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
													"    pm.expect(records.totalRecords).to.equal(1);",
													"    pm.environment.set(\"groupFundFYId\", records.groupFundFiscalYears[0].id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "abfe6937-e791-497f-a761-6e26ce407351",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=budgetId=={{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"group-fund-fiscal-years"
											],
											"query": [
												{
													"key": "query",
													"value": "budgetId=={{allocBudgetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27d7d124-4146-4a0f-aa0f-4cc14dadd218",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "45e685df-c16e-4c13-a717-105f90450691",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec8651fd-4b46-40a7-a5d0-0175a231632d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ea72ce33-2c5d-420d-bf09-af4f3f18bad7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b17d058-65de-4995-94c5-e915dfb464fa",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aa780ec0-bf3f-438f-af01-6dc08b276a85",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c022bc72-d20d-4623-9f02-05ec76e08cb3",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3160b907-39d7-4391-9af4-1fe715d25a39",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get group fund fiscal year by budgetId after budget deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad82a3b3-31f3-4a8e-9296-2eef6a0f1862",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
													"    pm.response.to.be.ok;",
													"    let record = pm.response.json();",
													"    pm.expect(record).not.empty;",
													"    pm.expect(record).to.not.have.property('budgetId');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "935ad5d8-1cae-4720-9e9a-1cacd3cb4b8d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/group-fund-fiscal-years/{{groupFundFYId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"group-fund-fiscal-years",
												"{{groupFundFYId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44f38819-26d4-48bb-a9bb-bbdeb7378d53",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ef1ff7f-d5b3-4067-9054-bdcaf6dc8a92",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a7aae1f-5a53-49be-973a-ce37fe0343f9",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0eea5536-87b6-48cd-85e2-a33fe514c53c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c42aedc-f00e-4935-923e-1389dcf5311e",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e5cca1a7-5e16-4bbf-89f7-bc1fbbeee385",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Budget deletion without transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b0fe9519-0d1e-4605-a45d-6bd07b295f26",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12e1b5c1-6eaf-4a4e-853e-73f53325d364",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create first budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10d1e956-b3b3-4f89-b33b-6e0d19aa034b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Budget content is valid\", function() {",
											"    utils.validateBudget(record);",
											"    pm.environment.set(\"budgetId\", record.id); ",
											"    pm.expect(record.name).to.eql(\"FRST-BDGT\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f795763-dd6f-4af8-9dcc-0fdc7b561ddb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"FRST-BDGT\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebdb5029-c654-4b77-885a-47a72bab1fdc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Budget is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateBudget(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f996c882-01b0-4f31-90c9-dc5e3b7bc19c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "686001d0-a37c-46db-a19b-72336487a5cd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Budget content is valid\", function() {",
											"    utils.validateBudget(record);",
											"    pm.environment.set(\"budgetId2\", record.id);",
											"    pm.environment.set(\"budgetContent2\", record);",
											"    pm.expect(record.budgetStatus).to.eql(\"Planned\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0e60d31-975c-437c-b174-a6daf10f1c82",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let budget = utils.buildBudgetMinContent(\"SCND-BDGT\");",
											"budget.budgetStatus = \"Planned\";",
											"budget.fiscalYearId = pm.environment.get(\"secondFiscalYearId\");",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(budget));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records by complex query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fd20a02-702b-45d1-9e79-5c27ee3af100",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One budget record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.budgets).to.have.lengthOf(1);",
											"    utils.validateBudget(records.budgets[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "291c4b1c-90fc-4f58-a45f-98c1388793bc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=budgetStatus==Planned and fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "budgetStatus==Planned and fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acfedddf-c1d9-4e98-9ae0-94dee692ed74",
										"exec": [
											"pm.test(\"Budget is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0c819c2-58b6-4f33-8ec2-d9ec7a2db8ca",
										"exec": [
											"let record = pm.environment.get(\"budgetContent2\");",
											"record.budgetStatus = \"Frozen\";",
											"pm.variables.set(\"budgetContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "459d69ae-b287-441c-8b4c-c8f386548e93",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Budget is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let record = pm.response.json();",
											"    utils.validateBudget(record);",
											"    pm.expect(record.budgetStatus).to.eql(\"Frozen\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fc23313-fa27-437d-9ad7-ba7bbd9579a2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records by complex query- 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee460d78-fb10-40cf-a45a-31e7eb1ad171",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 budget records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.budgets).to.have.lengthOf(2);",
											"    collection.budgets.forEach(record => utils.validateBudget(record));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e89598e9-23b1-4285-8248-b6ac2767ea24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "838a45e0-19eb-4805-ba0e-6f6ea1b2d8fd",
										"exec": [
											"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b7e04fa-4af5-49e9-aa5e-7603a068f779",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records without query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ad2e08f-8588-4619-ac87-23e41a2f31fa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One budget record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.budgets).to.have.lengthOf(1);",
											"    utils.validateBudget(collection.budgets[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1b6af463-6b20-4f12-b0b1-b85a70966d87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group Fund Fiscal Years",
					"item": [
						{
							"name": "Create group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bda79895-599e-46a3-bd45-d3ee9a8e7ddd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Group fund fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"    pm.environment.set(\"groupFundFiscalYearForCrudId\", record.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d6e6050-7397-4239-8804-a2d6642df790",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupFundFiscalYearContent\", ",
											"JSON.stringify(utils.buildGroupFundFiscalYearMinContent(pm.environment.get(\"groupId\"), pm.environment.get(\"fundId\"), pm.environment.get(\"fiscalYearId\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupFundFiscalYearContent}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify created group fund fiscal years",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "820be0f1-f52e-4a91-a1e6-a3d56a3e3fd1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fund fiscal year founded\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e299816-5de9-49e9-b5f7-3df5d2911873",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=id={{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "id={{groupFundFiscalYearForCrudId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88279d41-f89d-43f9-b67a-505c53e366fe",
										"exec": [
											"pm.test(\"Group fund fiscal year type is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a564954e-ef79-4aa0-a447-c37930e65b7f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years/{{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years",
										"{{groupFundFiscalYearForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c78c8957-0200-49b5-a2c4-8a7679657992",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(0);",
											"    pm.expect(records.totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26d924aa-8b48-47b5-97e3-a6d9118ce5d5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=id=={{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{groupFundFiscalYearForCrudId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assign funds to groups",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create group 1 - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ad66104-9dc6-4ef8-b966-ed633916a187",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3903adf-4581-4b04-8a63-2177e6dcd252",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group 2 - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "419e2740-8746-45ac-b11e-d254166a1440",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId2\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "07d1a85f-bf78-4a2c-b8c3-475d45bfbcff",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let group = utils.buildGroupMinContent();",
													"group.code = \"tst-grp-2\";",
													"group.name = \"Test group 2\";",
													"pm.variables.set(\"groupContent\", JSON.stringify(group));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fiscal year one - test current fy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b7b5b47-5969-4e19-baf9-90a7ba507030",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testCurrentFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a66cf871-6a2c-445e-8877-a8bcfff107fe",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').subtract(2, 'year');",
													"var end = moment().endOf('year').subtract(2, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTCURRENT\";",
													"fiscalYear.code = \"TESTCURRENT2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fiscal year one - test next fy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13a938b8-f36f-4cbb-8440-edb75eff3cee",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testNextFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "da925d35-f24b-4290-a400-4221d5a30812",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').subtract(2, 'year');",
													"var end = moment().endOf('year').subtract(2, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEXT\";",
													"fiscalYear.code = \"TESTNEXT2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create current fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db3d9326-be14-42e8-b94d-4ef423aebaec",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"currentFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7e7024e6-70cd-4cda-a4e3-b9958eb32764",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year');",
													"var end = moment().endOf('year');",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTCURRENT\";",
													"fiscalYear.code = \"TESTCURRENT2019\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create next fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0913fa47-9120-4d50-8260-7c7474ce8415",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"nextFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6f8ede16-e386-489d-bdad-21f9aa78bb7b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').add(1, 'year');",
													"var end = moment().endOf('year').add(1, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEXT\";",
													"fiscalYear.code = \"TESTNEXT2020\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger current",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "084d5be5-0c9e-41f3-af86-e1081418aff4",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"currentFyLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c1305405-93e1-40e5-a932-e562109cc1de",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testCurrentFiscalYearOneId\");",
													"ledger.name = \"Current\";",
													"ledger.code = \"TEST_CURRENT\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger next",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb1f1916-85ce-4aaa-a977-f83bbc9c571d",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"nextFyLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d9d94cc7-1638-4198-b3d1-18ee84cffe64",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testNextFiscalYearOneId\");",
													"ledger.name = \"Next\";",
													"ledger.code = \"TEST_NEXT\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create fund with groups - current fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a3654f9-2479-4129-b49c-30243221ee75",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4e7e1a4b-0a6b-4649-a53a-0051b30edf44",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_CURRENT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"currentFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund with groups - current fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a541b743-7490-47a9-b790-7002ab4fe953",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.have.status(200);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.groupIds).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "20c348cd-b03e-4e07-b3dc-97e40f2b9d09",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{currentFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{currentFyFundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query - current FY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20c97c0d-dd48-424d-9e26-cb2b3a1e048d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {}; ",
											"",
											"pm.test(\"Group fund fiscal years founded\", function () {",
											"    pm.response.to.be.ok;",
											"    records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});",
											"",
											"pm.test(\"Group fund fiscal years contain expected year id\", function () {",
											"    records.groupFundFiscalYears.forEach(gffy => {",
											"        pm.expect(gffy.fiscalYearId).to.equal(pm.environment.get(\"currentFiscalYearId\"));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be61bf51-47be-48d0-9260-3a0e9cf365e5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=fundId={{currentFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "fundId={{currentFyFundId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e268a0a4-1fe5-4d6d-b633-bb3c649e1881",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"nextFyFundId\", record.fund.id);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb4b598b-74df-44ec-b7c0-931d1fb40d1b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_NEXT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"nextFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4dd1385-d9b2-438a-b75e-85305a14db06",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.have.status(200);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.groupIds).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0762f6e2-116e-4401-a821-b0cd01dcac0e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query - next FY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8085762-0b85-46d4-a620-94df85dc6b90",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {}; ",
											"",
											"pm.test(\"Group fund fiscal years founded\", function () {",
											"    pm.response.to.be.ok;",
											"    records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});",
											"",
											"pm.test(\"Group fund fiscal years contain expected year id\", function () {",
											"    records.groupFundFiscalYears.forEach(gffy => {",
											"        pm.expect(gffy.fiscalYearId).to.equal(pm.environment.get(\"nextFiscalYearId\"));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51c99623-a8fc-4743-8460-7488b18e600c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=fundId={{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "fundId={{nextFyFundId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "054eccca-d0cf-4db7-a6d9-0d617dec3291",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {};",
											"",
											"pm.test(\"Composite Fund is updated\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"utils.sendGetRequest('/finance/group-fund-fiscal-years?query=fundId=' + pm.environment.get(\"nextFyFundId\"), (err, res) => {",
											"        pm.test(\"Group fund fiscal year deleted\", function () {",
											"            pm.expect(res).to.be.ok;",
											"             records = res.json();",
											"             pm.expect(records.totalRecords).to.equal(1);",
											"             pm.expect(records.groupFundFiscalYears[0].groupId).to.equal(pm.environment.get(\"groupId2\"));",
											"        });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3715d149-a0c2-464a-b599-f594ae689f32",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_UPDATE_NEXT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"nextFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId2\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Restrictions",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4561037d-3db5-44cf-9375-0677fc6a87ac",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34de302e-a6df-44db-b148-4e3ab8522521",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e35a8c27-59b6-4682-9816-a76f454cfe4b",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d93d80e5-74e5-4c2f-b093-62ab27c8b54b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56d402ae-ab4d-407e-888b-2d0240b8e4d3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"histFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"HIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0178ec9f-1917-4fc8-bb14-8dc09ef158d0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"History\",\n\t  \"code\": \"HIST\",\n\t  \"externalAccountNo\": \"276507594438808\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"subdivided by geographic regions, to match individual selectors\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da69eb9b-c973-438a-ae3f-023f0cd2dc3e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"canhistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"CANHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b06e4abc-cc4d-4675-aa15-2cb8adcbd1b6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Canadian History\",\n\t  \"code\": \"CANHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL; use for Canada once CANLATHIST is inactivated\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\",\n\t  \"allocatedFromIds\": [\"{{histFundId}}\"]\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7b271aa-4737-4bcc-a968-e7f051c1796b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"lathistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"LATHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19f6ebcb-55de-4bdc-adc7-6dede53743de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Latin America History\",\n\t  \"code\": \"LATHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update HIST fund - add allocatedToIds set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "961f31cd-c0d1-47fd-8ae8-c466740723b4",
												"exec": [
													"pm.test(\"Fund is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f95bb51b-7e98-45a7-9028-98c2d803fa49",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/finance/funds/\" + pm.environment.get(\"histFundId\"), function (err, res) {",
													"    let histFund = res.json();",
													"    histFund.fund.allocatedToIds = new Array(pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"));",
													"",
													"    pm.environment.set(\"histFundContent\", JSON.stringify(histFund));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdb6762d-875b-47ec-9df8-e636b064f150",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"histBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"HIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b2eecd6c-c743-4c57-affc-d4bd294e8dae",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"histBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"HIST-BDGT\", pm.environment.get(\"histFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d85d20a-7a95-465b-ae3d-716de60c709b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"canhistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"CANHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d09accb8-9e7b-4929-90c4-79a8bba4eafd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"canhistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"CANHIST-BDGT\", pm.environment.get(\"canhistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{canhistBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e52a2c2b-7ecc-4ae8-8aeb-56942b152629",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"lathistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"LATHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9fd9a702-7b89-4be4-a617-5a0db41094da",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"lathistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"LATHIST-BDGT\", pm.environment.get(\"lathistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lathistBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create external allocation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb90ec0e-6fe8-476a-b345-e4c0efaaaa39",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "602da731-46ee-4dfa-b600-45ed6680c0d8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ac186f2-d9da-43fb-94c0-a10f60128afe",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4d371c97-03a3-40e6-8d03-5f33e8ac59f9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation matching allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19bc9b10-4c74-4ee8-ab6e-dfc270b1dd55",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "25aaf641-1167-4b6e-87ba-08aa871fd986",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"canhistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d9c0831-539b-4ed0-bbdf-93e273596d87",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6dcd6a13-3597-4b75-b687-a7c726e16475",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer matching allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b78ab46-7567-42c8-9429-80a845a57877",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e1353a7-a071-49ad-8ed6-9abdc81f1ac5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"canhistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0db470e3-5712-4f67-a4f5-462471bf93db",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32362823-3362-421f-87e8-27b4c9dd66c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with empty allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ea08417-aaec-4173-a8d6-553264fb7cea",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e8262ffd-bb4e-432f-a546-a9e3bb55faca",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1652f15f-ed8e-4dbf-a3c1-9e21db3cbef4",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "df7ffc86-cc3c-403d-bbc6-6dad233cb8fb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with empty allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86fab524-3f37-418f-ba78-22a0a1508257",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "81551119-4f2a-404a-a87b-559c1912b4d8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f8c63bf-daab-476c-80b3-fb61b6406125",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cdd38a5b-1412-4ed5-ba26-95586fdcb2d9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with empty allocatedFromIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7696d6a0-e3c3-4ba5-97eb-70212489dc1c",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "33947b8c-fa22-4026-b6f3-8ac6813fa988",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"lathistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31ba07c1-a56d-4d83-af1a-2513ebb91f8e",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7b3e518-ce25-4812-9e16-921b6bd96f51",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with empty allocatedFromIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6d1bc9f-2734-48b6-b4a2-d969b234b15c",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcb6a886-3e55-4541-a913-eab89f636b19",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"lathistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5195d95-9ee3-4299-a2d0-318c70f4b01a",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e2cf2284-640f-416a-9e63-73d015fce0a8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcabcaaf-e47c-43a5-921c-e730e1831430",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "04325dd0-177b-4614-b5a4-c416e5b2f847",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{histBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{histBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "868b908f-f4bd-4d59-be1d-369a5be13a6f",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5b39906a-dcfb-4846-8b4a-5c485d745ee7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{canhistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{canhistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14ce8c20-661e-4b00-a597-416417aea3e9",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "31679023-190e-4a69-803a-11e4aadaeff0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{lathistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{lathistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad1df68b-8792-42fa-8a5e-b1936a1de065",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6c48340e-959e-4cba-9f3e-b9c59bc2aa4d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{lathistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{lathistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b77083ab-cb13-4e2c-80f9-76e4c7d0d589",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23717e6d-791e-4ee4-8b3e-c40bf53ea01b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{canhistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{canhistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0086e82f-96d4-4ef3-a0b7-1740abb70c6a",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "839f3e9d-01df-4d67-8541-59f8ecd14b8c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "defc164e-78af-4650-a118-7dc8ab6795a4",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38660728-ff0c-4048-9ef2-b34b7a8a120e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ee43d4f-c5e4-4e8b-b308-49d40292e6cf",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "15e4d49e-75c0-4641-9ed7-cb8694e8a2ab",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Allocations",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "efcb98e1-f5a5-4aa5-8c0a-5b2a18a6c6c1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fb26760c-a6aa-45c2-bdf7-9b4b62fe5331",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9c1ae0f-2050-4a96-ace2-9da8e722e835",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "847a0e51-6ffb-40b3-ac3b-e9dfb2b253ae",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f9ab613-4ca8-46f8-954a-f8f0cd80caa7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0ead4192-3944-48fc-a0d8-77270efe5112",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d20636a-641d-4fe0-ab4d-111d9e53c28f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2b0a1437-e1d5-4448-a6c0-f1a139323c16",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ebc338f-4cfb-4917-b076-0206cdf2a63d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "961ba9f9-31d7-4e94-996b-f312858929e1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be2335c2-4061-4df4-b4d6-588cc62328e1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7bb9e35f-d83a-4dd4-a2b6-aaabcd7fdd21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d57b8220-5e2a-4244-acce-940772ad658c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a6af8d0b-03ce-425d-a2f4-c2955120f4ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf0f433e-fa45-4c1e-b7c6-a3ddb9e72c54",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "41620ddc-26bc-404b-9d4f-a250b53963d6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d019b67-f1c2-479f-ae07-1f68b37a8b78",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2bdfee3d-a166-4450-b6bc-dc91d9af60a9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7358971-f07b-4723-9e14-3829a45c60dc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "777d320a-37e7-467f-8d2a-4b96f702e721",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{transactionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger record with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e04048d-e77c-4fda-86c3-e0f018cec60d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledger is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json();",
													"    utils.validateLedger(ledger);",
													"    let allocation = JSON.parse(pm.environment.get(\"allocationContent\"));",
													"    pm.expect(ledger.allocated).to.equal(allocation.amount);",
													"    pm.expect(ledger.available).to.equal(allocation.amount);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d7e658ba-6f97-4377-841b-6e43d63ccdd8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}?fiscalYear={{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{allocFiscalYearId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger records by fiscalYear with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "996958a6-3c59-41cc-bb7d-d8ee755c359d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledgers are retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json().ledgers[0];",
													"    utils.validateLedger(ledger);",
													"    let allocation = JSON.parse(pm.environment.get(\"allocationContent\"));",
													"    pm.expect(ledger.allocated).to.equal(allocation.amount);",
													"    pm.expect(ledger.available).to.equal(allocation.amount);",
													"    pm.environment.unset(\"allocationContent\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "004a1a15-14ed-4a23-8eb5-2e37cc2f5e1a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers?fiscalYear={{allocFiscalYearId}}&query=id=={{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{allocFiscalYearId}}"
												},
												{
													"key": "query",
													"value": "id=={{allocLedgerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d37aecea-2240-4057-86df-e9fd22b470e9",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7026beae-ae6e-4069-b3dc-29850dae77e3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35c4552e-1172-4539-ad50-01e17925853a",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa92a1b0-a065-4289-abc7-ea2cca15bbd1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bd17af9-aa56-48d5-940e-5375e006e249",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eb8b1fd1-6f0c-496e-b0fa-64eec154783a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adaa56cd-14e5-4c7d-8604-e6e84853e505",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dd100f99-0a7d-47ae-b567-a0ed37d0b110",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "169cb6c4-d4c6-4fcc-b37c-ccef2b08687f",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "412d017d-fe77-4c5b-8299-7b93f198d9ec",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Encumbrances",
							"item": [
								{
									"name": "Prepare data for encumbrances",
									"item": [
										{
											"name": "Create order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "92e786dd-5130-4db0-8279-82f761781d6d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "faba28a9-b80b-4638-b959-37558fa7fde6",
														"exec": [
															"pm.test(\"Order transaction summary is created\", () => {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"e5ae4afd-3fa9-494e-a972-f541df9b877e\",\r\n  \"numTransactions\": 1\r\n}\r\n"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fiscal year  - required for budgets Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "19b57b4a-0c2f-4346-92ee-010cd1a4841e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ENCFY2019\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2262c144-b0d9-4eae-a273-fbb1bf2f0b0d",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encFiscalYearId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encFyContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ledger - required for funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76c0a1e9-e19f-4d70-99e4-cb527ff2583d",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encLedgerId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "08b96a0c-3fb0-4f63-a75c-f1890079a3f4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let ledger = utils.buildLedgerMinContent(\"ENC-LDGR\", \"Test encumbrance ledger\");",
															"ledger.fiscalYearOneId = pm.environment.get(\"encFiscalYearId\");",
															"pm.variables.set(\"encLedgerContent\", JSON.stringify(ledger));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encLedgerContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fromFund - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "056973c7-06bc-4186-b214-7e021293f42c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Encumbrance Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Encumbrance Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFundId\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"ENC-FND\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fd2fb426-9f24-437e-ab1d-9e8810d9144a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ENC-FND\", pm.environment.get(\"encLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encFundContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create toFund - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "971c4c37-0bd5-484a-941f-ee7b59d7c3ca",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Encumbrance Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Encumbrance Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"toFundId\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"ENC-FND2\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4d65eb83-3ec4-4aae-be12-869229e5f246",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encFundContent2\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ENC-FND2\", pm.environment.get(\"encLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encFundContent2}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db78c3a5-837c-4951-b740-001661cd8ee3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"encBudgetId\", record.id); ",
															"    pm.expect(record.name).to.eql(\"ENC-BDGT\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "563aca09-360e-4d11-9e0c-468dea43cc7b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ENC-BDGT\", pm.environment.get(\"fromFundId\"), pm.environment.get(\"encFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encBudgetContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get fiscal year by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "14a4e169-6312-40ac-8a08-71477decbbf9",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Fiscal year is retrieved\", function() {",
															"    pm.response.to.be.ok;",
															"    utils.validateFiscalYear(pm.response.json());",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6188e5c6-6198-4b99-ae55-13e0743a7835",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{encFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years",
														"{{encFiscalYearId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get fund record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "45366f9f-d84c-40ad-8892-06e4c366fdab",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Fund is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateCompositeFund(pm.response.json());",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "63f2ef3e-6dcb-471f-ae8e-1985464d7434",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{toFundId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Allocate money for budget",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "00394d61-d93e-4565-bc08-6389996e2bd5",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8ec17506-30af-46c1-a180-8dac12aece89",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(2500, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "076b1547-0c06-4288-bda6-52a323799c8e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d5202067-6472-48b9-bd67-086dbbcda9f7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudgetId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudgetId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Test Encumbrance Restrictions",
									"item": [
										{
											"name": "Create encumbrance with insufficient funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "01c28948-46e5-4f9d-93eb-44d4c816f5dd",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is not created\", () => {",
															"    pm.response.to.have.status(400);",
															"    response = pm.response.json();",
															"    pm.expect(response.errors[0].message).to.equal(\"Fund cannot be paid due to restrictions\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "048ac794-4cbc-4f31-9466-790ae30ba04c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let encumbranceRemainingAmount = 2501;",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(encumbranceRemainingAmount, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Encumbrance\");",
															"",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fromFundId\");",
															"pm.environment.set(\"restrictedEncumbranceContent\", JSON.stringify(transactionEncumbrance));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{restrictedEncumbranceContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ab7b60f1-47be-4843-ab01-fe2cf561955c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a7d523c3-8ff5-4b93-a3f1-79d96995dc28",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create order transaction summaries to release",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2327106d-c3d0-456a-b051-f8c186cafa04",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0963457b-51d9-4846-b712-c9965ad6bc29",
												"exec": [
													"pm.test(\"Order transaction summary is created\", () => {",
													"    pm.environment.set(\"orderTransactionIdToRelease\", pm.response.json().id);",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"e5ae4afd-3fa9-494e-a972-f541df9b8771\",\r\n  \"numTransactions\": 1\r\n}\r\n"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"order-transaction-summaries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice transaction summary to release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e631041-99c0-4c3c-8cd8-14009e358d80",
												"exec": [
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.environment.set(\"invoiceTransactionSummaryIdToRelease\", pm.response.json().id);",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "822f2420-db19-41ef-9271-dc7c38dec5f2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"187c7e6f-782a-4bd0-a04e-7174d4da2429\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"invoice-transaction-summaries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create encumbrances to release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7fb7013-b33a-4813-a495-bf4392c7edf3",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction encumbrance is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"encumbranceIdToRelease\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "479a67f1-559a-4aa7-9bdb-2d453cb5a07c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var uuid = require(\"uuid\");",
													"",
													"",
													"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
													"let transactionEncumbrance = utils.buildTransactionMinContent(25, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Encumbrance\");",
													"",
													"transactionEncumbrance.encumbrance = encumbranceMinContent;",
													"",
													"transactionEncumbrance.encumbrance.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionIdToRelease\");",
													"transactionEncumbrance.sourceInvoiceId = pm.environment.get(\"invoiceTransactionSummaryIdToRelease\");",
													"transactionEncumbrance.fromFundId = pm.environment.get(\"fromFundId\");",
													"",
													"",
													"pm.environment.set(\"encumbranceContent\", JSON.stringify(transactionEncumbrance));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{encumbranceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"encumbrances"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger record with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acde8613-f959-43e0-b494-3d27bde979f4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledger is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json();",
													"    utils.validateLedger(ledger);",
													"    let encumbrance = JSON.parse(pm.environment.get(\"encumbranceContent\"));",
													"    pm.expect(ledger.available).to.equal(2500 - encumbrance.amount);",
													"    pm.expect(ledger.unavailable).to.equal(encumbrance.amount);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3aeea98a-f477-447e-918a-d2c23f0dcc14",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}?fiscalYear={{encFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{encLedgerId}}"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{encFiscalYearId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Release encumbrance request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b3cd313-cbe8-440f-b672-9006ac025942",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Encumbrance successfully released\", () => {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"utils.sendGetRequest(\"/finance/budgets/\" + pm.environment.get(\"encBudgetId\"), (err, res) => {",
													"    let budget = res.json();",
													"    pm.test(\"Budget updated\", () => {",
													"        pm.expect(budget.encumbered).to.equal(0);",
													"        pm.expect(budget.available).to.equal(2500);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0cbbdec9-1f8c-404f-a56a-5ec04579c7e8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/release-encumbrance/{{encumbranceIdToRelease}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"release-encumbrance",
												"{{encumbranceIdToRelease}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create encumbrances",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "163c52f9-f3cd-4b1c-ad09-1cfdf861bd89",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction encumbrance is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"encumbranceId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3fa4749-b483-48a6-b990-2b826a23a62c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var uuid = require(\"uuid\");",
													"",
													"",
													"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
													"let transactionEncumbrance = utils.buildTransactionMinContent(25, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Encumbrance\");",
													"",
													"transactionEncumbrance.encumbrance = encumbranceMinContent;",
													"transactionEncumbrance.fromFundId = pm.environment.get(\"fromFundId\");",
													"",
													"pm.environment.set(\"encumbranceContent\", JSON.stringify(transactionEncumbrance));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{encumbranceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"encumbrances"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "187794ab-1079-4531-9276-5bb4a86e6e83",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b658c29b-5355-4a13-88f7-264f7eb891b2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{encumbranceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{encumbranceId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice transaction summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "614c83b7-4baf-4675-a255-85e349ca9a8e",
												"exec": [
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6abfb86c-1e02-4fb3-9514-991f1626eae8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"187c7e6f-782a-4bd0-a04e-7174d4da2428\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"invoice-transaction-summaries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Awayting payment request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35aedb32-21d8-4167-8207-eb761aa0904f",
												"exec": [
													"let record = {};",
													"pm.test(\"Money were moved to awaitng payment\", () => {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a41c6d8b-09a2-4966-a75c-89cdfcf11584",
												"exec": [
													"var uuid = require(\"uuid\");",
													"",
													"pm.environment.set(\"awaitingPaymentContent\", JSON.stringify({",
													"    \"encumbranceId\": \"{{encumbranceId}}\",",
													"    \"amountAwaitingPayment\": \"18.44\",",
													"    \"releaseEncumbrance\": \"false\",",
													"    \"invoiceId\": \"187c7e6f-782a-4bd0-a04e-7174d4da2428\",",
													"    \"invoiceLineId\": uuid.v4()",
													"}));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{awaitingPaymentContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/awaiting-payment",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"awaiting-payment"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "535d8786-5ab6-4613-8301-595984991565",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction encumbrance is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});",
													"",
													"",
													"pm.test(\"Verify money were moved to awating payment\", function() {",
													"    pm.response.to.be.ok;",
													"    let previousAmountValue = JSON.parse(pm.environment.get(\"encumbranceContent\")).encumbrance.amountAwaitingPayment || 0;",
													"    let awatingPaymentAmount = JSON.parse(pm.environment.get(\"awaitingPaymentContent\")).amountAwaitingPayment;",
													"    console.log(awatingPaymentAmount);",
													"",
													"    let newAmount = pm.response.json().encumbrance.amountAwaitingPayment;",
													"    pm.expect(newAmount).to.eql(+previousAmountValue + +awatingPaymentAmount);",
													"",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "31e39057-7c26-417e-832a-a790ecc954ed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{encumbranceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{encumbranceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bed23b7-1f94-457c-b192-f6db407b4e74",
												"exec": [
													"pm.test(\"Encumbrance is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa0214ac-a646-4005-990a-cd08520be20f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbranceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{encumbranceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction to release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31733436-ffbb-463b-b00a-a1595f92d21d",
												"exec": [
													"pm.test(\"Encumbrance is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a7e50358-f6bc-4124-99d4-424b9692a322",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbranceIdToRelease}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{encumbranceIdToRelease}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete allocation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cee5b057-4506-4b54-b218-ba2ef00062fe",
												"exec": [
													"pm.test(\"Allocation is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "21d56048-c28e-473a-9683-f4bb6c3faf61",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07d1cb14-46c9-452c-9938-5b43a0008d01",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "59572b37-24cb-49b6-998a-6c6369e96812",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{encBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fromFund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c64e79c-aacb-4397-9a91-ef3c49277521",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "54d0723e-c1a4-4b99-b1d6-0c00f4cf0493",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{fromFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete toFund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45765f8e-835e-4ada-addc-2e1af50d4b28",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fe9c11cc-c46a-4bb6-85a0-6bc5b8bc4669",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "981050eb-86f9-4f23-b33c-e92dc53559e9",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "173272a6-5d6a-4c06-86a7-d25128167c42",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{encLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99ab9291-cb4a-460f-96cc-80ae37d989d2",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "438bbcd4-f454-44fe-8de9-12efe44f6bf0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{encFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{encFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction encumbrances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "580ba120-3d35-4733-82c5-cd053ad66492",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "962cd812-4e07-49ff-98bf-f40dd772b7b4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pending payments",
							"item": [
								{
									"name": "Prepare data",
									"item": [
										{
											"name": "Create fiscal year  - required for budgets",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e315b3e1-9571-4a79-ba79-c58a71945234",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"PCFY2020\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "868fa325-a286-42f5-a2c3-9b676890c2ef",
														"exec": [
															"pm.test(\"Fisscal Year is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcFiscalYearId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFyContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ledger - required for funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6443d8ba-7708-4a43-a0d5-584c205df48d",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcLedgerId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8713ac27-3585-4edb-9329-ab86bfb1b699",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let ledger = utils.buildLedgerMinContent(\"PC-LDGR\", \"Test transaction ledger\");",
															"ledger.fiscalYearOneId = pm.environment.get(\"pcFiscalYearId\");",
															"pm.environment.set(\"pcLedgerContent\", JSON.stringify(ledger));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcLedgerContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fund 1 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cbaad044-ddf8-4cb3-939d-8b746682cfa9",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFund1Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"PP-FND1\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "51f5853e-2eda-485e-8682-8795184963b3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"PP-FND1\", pm.environment.get(\"pcLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFundContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fund 2 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "04bfca85-114e-4d80-af62-127844bd3e43",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFund2Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"PP-FND2\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3a7868ea-1f64-432e-afd4-0ce7af23f8d7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"PP-FND2\", pm.environment.get(\"pcLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFundContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9a56af8f-1c77-4e96-8fcc-80d4bcef986c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"PP-BDGT\", pm.environment.get(\"fromFund1Id\"), pm.environment.get(\"pcFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a825f845-04bc-4689-9943-4cb345292370",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"allocBudget1Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"PP-BDGT\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcBudgetContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "52f04475-e5aa-461a-81bb-fc04f11ec752",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"PP-BDGT2\", pm.environment.get(\"fromFund2Id\"), pm.environment.get(\"pcFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5574e4a4-f8b0-48c6-9efc-ad081b8154d4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"allocBudget2Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"PP-BDGT2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcBudgetContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create allocations to Budget 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "22e77a9a-1dc7-4c09-96f3-63906dade5ed",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(1000, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund1Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "97e574b8-8f22-4cf7-b92e-90ad3d9f4d07",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"allocTransaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create allocations to Budget 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4aded748-9ea5-42f4-b5f3-31c9154938d1",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(2000, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund2Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5b1b9e62-afbf-4784-a8c4-366b67a19f86",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"allocTransaction2Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4c874e3f-6aa4-4574-a79f-ad40645cd53c",
														"exec": [
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9a1fb971-8b42-47c3-96e8-613a1b0a7164",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 2,\n  \"numPaymentsCredits\": 2\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"invoice-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2df7638b-e6cd-4d1d-9bf9-bd5b29c531a1",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d749ac2c-7189-4e4c-8233-29c1ab70de15",
														"exec": [
															"pm.test(\"Order transaction summary is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"ordersTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{$guid}}\",\r\n  \"numTransactions\": 1\r\n}\r\n"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ebb6c455-dc27-4761-a8d7-e8d151a05ac3",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"    pm.environment.set(\"encumbranceId\", record.id);",
															"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7a71eaf0-e77f-457e-8338-72bbfc282058",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"var uuid = require(\"uuid\");",
															"",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(125, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund1Id\"), \"Encumbrance\");",
															"encumbranceMinContent.initialAmountEncumbered = 125;",
															"encumbranceMinContent.sourcePurchaseOrderId = pm.environment.get(\"ordersTransactionSummaryId\");",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fromFund1Id\");",
															"pm.environment.set(\"encumbranceContent\", JSON.stringify(transactionEncumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbranceContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe10ad11-e4c6-4ef3-a418-4296c4a1e5e2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9d39abc5-7683-4c01-9458-057bce314ed3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Test API",
									"item": [
										{
											"name": "Get ledger record with summary before",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f0c94692-1b4c-4601-95bd-c52185da7028",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"",
															"    pm.expect(ledger.available).to.equal(3000 - 125);",
															"    pm.expect(ledger.unavailable).to.equal(125);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fcaaa5a5-4557-4ff1-a833-e44cb0e971a3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}?fiscalYear={{pcFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{pcLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{pcFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record before 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0e8ad8b0-1034-4e19-a17c-149820ab4afe",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().allocated).to.eql(1000.0);",
															"    pm.expect(pm.response.json().available).to.eql(875.0);",
															"     pm.expect(pm.response.json().unavailable).to.eql(125.0);",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(0.0);",
															"    // 100 = 0.0 - 100(pending payment)",
															"    pm.expect(pm.response.json().encumbered).to.eql(125.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "069bab55-b282-4631-8604-8f4b64ecc54e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record before 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a401af2a-8b90-4bba-ad44-740100969916",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().allocated).to.eql(2000.0);",
															"    pm.expect(pm.response.json().available).to.eql(2000.0);",
															"    pm.expect(pm.response.json().unavailable).to.eql(0.0);",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(0.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3649df10-aece-4297-b606-873a36552c4d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create positive pending payments, encumbrance linked, encumbrance is going to be released",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0506d5c5-da6a-4648-a73b-ce6d5568a755",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pendingPaymentTransaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e16fb476-e318-445b-b9be-854d1aac4e2d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let pendingPayment = utils.buildPaymentTransactionMinContent(100.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund1Id\"), \"Pending payment\");",
															"pendingPayment.awaitingPayment = {};",
															"pendingPayment.awaitingPayment.encumbranceId = pm.environment.get(\"encumbranceId\");",
															"pendingPayment.awaitingPayment.releaseEncumbrance = true;",
															"pendingPayment.sourceInvoiceId = pm.environment.get(\"invoiceTransactionSummaryId\");",
															"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(pendingPayment));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pendingPaymentContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create negative pending payments, encumbrance not linked",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5a488fb4-1d3f-465e-8d93-5b830c792147",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pendingPaymentTransaction2Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0b3d0e1d-7cb8-4b41-ad34-c3ce97b7c95c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let pendingPayment = utils.buildPaymentTransactionMinContent(-50.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund2Id\"), \"Pending payment\");",
															"pendingPayment.sourceInvoiceId = pm.environment.get(\"invoiceTransactionSummaryId\");",
															"pendingPayment.amount=-50;",
															"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(pendingPayment));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pendingPaymentContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrance is updated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "13eb4197-9eed-4bbb-ae3d-2ae5fe428015",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Verify transaction released\", function() {",
															"    pm.response.to.be.ok;",
															"    let encumbrance = pm.response.json();",
															"    pm.expect(encumbrance.amount).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Released\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4011bee3-3571-48ed-a821-d6c73206ef09",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{encumbranceId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{encumbranceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 1 record after pending payments",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "60368bf2-61e8-4714-b4a2-13dc8ba23c74",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(100.0);",
															"    // 100 = 0.0 - 100(pending payment)",
															"    pm.expect(pm.response.json().encumbered).to.eql(0.0);",
															"    pm.expect(pm.response.json().available).to.eql(900.0);",
															"    pm.expect(pm.response.json().unavailable).to.eql(100.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d91ebf9a-fcd1-4b51-8711-a49edacdf678",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 2 record after pending payments",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "acfedf15-0f67-4764-9d83-43c425131e6d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(-50.0);",
															"    pm.expect(pm.response.json().encumbered).to.eql(0.0);",
															"    pm.expect(pm.response.json().available).to.eql(2050.0);",
															"    pm.expect(pm.response.json().unavailable).to.eql(0.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "18a6e7c1-bde5-49b5-9d69-5156db5f4927",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ledger record with summary after",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1c94216f-0387-4c76-94b9-0ee08b40c419",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"",
															"    pm.expect(ledger.available).to.equal(3000 - 100 + 50);",
															"    pm.expect(ledger.unavailable).to.equal(100);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0275dec8-6ffa-4a89-9a90-abe7c0643915",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}?fiscalYear={{pcFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{pcLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{pcFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check tinvoice transaction summary is processed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6f236a37-5163-4a1e-a381-b703af8924f9",
														"exec": [
															"pm.test(\"Transaction sumary is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.expect(pm.response.json().numPendingPayments).to.eql(-2);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8eb1b559-4c13-4aeb-8edf-505d593b5dd1",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/invoice-transaction-summaries/{{invoiceTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"invoice-transaction-summaries",
														"{{invoiceTransactionSummaryId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Clean-up",
									"item": [
										{
											"name": "Delete order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "79617880-8f02-4a12-b597-2d40d2c1f869",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3c4155d8-b46b-4135-837c-7979939f55bf",
														"exec": [
															"pm.test(\"Order transaction summary is deleted\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/order-transaction-summaries/{{ordersTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"order-transaction-summaries",
														"{{ordersTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "21b1d3e5-4c91-414b-8e52-df973bce0631",
														"exec": [
															"pm.test(\"Trasaction allocation is deleted\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "09d2075f-7277-4075-b498-48bed3b0874b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/invoice-transaction-summaries/{{invoiceTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"invoice-transaction-summaries",
														"{{invoiceTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation transaction 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b8f7dd44-b256-4b16-888b-b5e8bcac8ee1",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "107bf8f0-de5c-4f30-9e6c-d589c43b654c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{allocTransaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{allocTransaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation transaction 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "109cb46e-a3df-41eb-bd0e-8131ed7607aa",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b482d076-7d93-498c-9d6f-fbb2ec61e4e3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{allocTransaction2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{allocTransaction2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete pending payment 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c17e24b8-a1d8-413c-8af9-9918eaa7b9ff",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fc955bfd-ce2a-467f-bf4d-b3b32975d48e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{pendingPaymentTransaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{pendingPaymentTransaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete pending payment 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0e64392b-d6c2-4c10-994c-2757e425c7c3",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "445b1e88-7127-4f1b-955e-2d86594d8087",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{pendingPaymentTransaction2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{pendingPaymentTransaction2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete encumbrance transaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "caa48a1d-2731-4354-84b9-cd235fc1f2cd",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "234852b2-2b43-4196-8624-82e1ab080064",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbranceId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbranceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fc57ff88-4869-4327-8ea0-14b13d837bed",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e85c4973-d164-4ed6-a138-28304c7d1add",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1fa5c3da-449d-449a-bc87-f8c09a0968e0",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9aeaaa00-2b8d-4b56-bce0-fb08fed69443",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fund record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e96d6240-1a4b-42ea-ad09-f06adc3809d8",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7169114c-9b10-4f6a-b7bc-88393b744325",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFund1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fromFund1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fund 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b07e3d31-ad4a-49a1-b623-b682e49eaf02",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "333ce888-e57f-4edf-ae2c-7ece13485e1a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFund2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fromFund2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Ledger",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e5d8ed3-92c5-4ac2-a961-82080f973a2f",
														"exec": [
															"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8ac2a9c9-9be4-4fc1-a91f-0eeedbb23c95",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{pcLedgerId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fiscal year",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06166ad8-4854-417e-b8cc-cd4ce7fce380",
														"exec": [
															"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4de3583d-bbb8-4937-9aea-301ae053a34b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{pcFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years",
														"{{pcFiscalYearId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transfers",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5bc3d165-9bfc-453a-9d95-6c9b6da044ba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"TRANSFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ef40fd99-3f41-4814-bfee-3548b13e627d",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ee65a76-83a2-493f-9a1e-603a3b5e6e0f",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ca6a8e3d-3766-4a1f-bad2-0c12b7293bae",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"TRANS-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"transFiscalYearId\");",
													"pm.variables.set(\"transLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transLedgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create from fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8861e1b7-1cf7-4db8-acd5-8c7966b5b624",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function () {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"fromFundId\", record.fund.id);",
													"    pm.expect(record.fund.code).to.eql(\"FROM-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "89d1e72c-0c77-49f0-ab8c-b4f487311738",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"FROM-FND\", pm.environment.get(\"transLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create to fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef7e112c-d702-4ee5-9288-2ad1318268c8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function () {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id);",
													"    pm.expect(record.fund.code).to.eql(\"TO-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "727f68e5-e74b-430a-b48f-09da88adf2d9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TO-FND\", pm.environment.get(\"transLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create from budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3c6cfd2-d9da-4d0b-88d8-48b7a93db586",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"fromBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"FROM-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d5d7a448-5c1c-4a98-b2d9-5c5d982a26f8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"FROM-BDGT\", pm.environment.get(\"fromFundId\"), pm.environment.get(\"transFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create to budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e91776d0-ac91-49b0-bfb2-a04bde4c240c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"toBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"TO-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8861356a-d724-4c1a-8bde-ae3cdde8955b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TO-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"transFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "710251c7-7a1a-4d49-8ec8-cb0ba0915e48",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc4f4b16-c8d3-475b-80ff-ec8c89562de8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{transFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c8fad9f-c18e-412a-ab84-63e4af6225de",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8addf94e-ae12-42cf-b095-c0cc6a42886a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get from budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "281c37f1-76c4-4589-9008-18d9efa47eb5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "87708407-eda7-485f-ab79-86913e4f4a15",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{fromBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{fromBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get to budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1432b13f-141d-40cb-9b13-a283c21c2439",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fed08f7c-b117-4e22-83e6-f0f3c0863ff3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{toBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{toBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2703b31b-9c34-4230-bd7b-c607ad18b060",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transferId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "789ad7a4-eccc-4d41-b89c-0e1dada7362e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"transferContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"transFiscalYearId\"), pm.environment.get(\"fromFundId\"), pm.environment.get(\"toFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger record with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6def3fd2-e19f-4e80-baee-48b840309384",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledger is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json();",
													"    utils.validateLedger(ledger);",
													"    let allocation = JSON.parse(pm.environment.get(\"transferContent\"));",
													"    pm.expect(ledger.available).to.equal(0);",
													"    pm.environment.unset(\"transferContent\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6909e158-55d6-4e64-ae60-188326c00601",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{transLedgerId}}?fiscalYear={{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{transLedgerId}}"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{transFiscalYearId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f179f3aa-6c8f-4d53-bc24-5b285fdf6ded",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction transfer is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d9b4fc99-d535-4782-bbdf-e11bfa933f24",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f43f74b-80cd-4ee9-b1fd-7e088451691a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bee2fb29-c3fc-42ef-8278-7dfc70585b05",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{transferId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d24ff17a-fee9-4225-bd6e-127f8550dca9",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac3b5099-427c-487f-9581-54747883cade",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete from budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfcfe243-6ac9-4f2b-a81e-6f210c9b243a",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32d29789-f394-46d8-8141-7f0fc050aaa5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{fromBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{fromBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete to budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d21b3893-034e-478b-b435-4a01b819c8b7",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "64d5ee4d-f8bc-4d43-a2a7-d9ad85b251bb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{toBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{toBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete from fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0dd453ed-249a-4fb6-abf0-6a0864b084be",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2ceb52a2-402b-43fa-aef5-93be463ba6c0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{fromFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete to fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9a66091-0869-4af0-9d37-ea237df93e96",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a534021b-f9a7-4589-8d52-e680ad606894",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "831fd2ca-0483-48ff-b8fa-ab2430dd714c",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "02c53efe-0ec9-4aff-9437-da8130375623",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{transLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{transLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec6d5657-e55b-40f7-a404-d7eaf52a0115",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3e2d5db4-c318-469b-b952-3ba09de9fcd8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{transFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payments Credits",
							"item": [
								{
									"name": "Prepare data for Payments and Credits",
									"item": [
										{
											"name": "Create fiscal year  - required for budgets",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "291eccbd-4de0-4de0-a4a8-626d752ebc15",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"PCFY2020\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "587c74a3-b752-4d1b-8031-ae44817a252b",
														"exec": [
															"pm.test(\"Fisscal Year is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcFiscalYearId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFyContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ledger - required for funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c7d3ceeb-9a8a-43ae-9ef1-656b4af3b932",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcLedgerId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0e56595f-b90d-4086-9ddd-f6a360d3ce36",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let ledger = utils.buildLedgerMinContent(\"PC-LDGR\", \"Test transaction ledger\");",
															"ledger.fiscalYearOneId = pm.environment.get(\"pcFiscalYearId\");",
															"pm.environment.set(\"pcLedgerContent\", JSON.stringify(ledger));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcLedgerContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fund - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7b9e43d0-8762-4ed1-af5e-780bb4ed78f1",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFundId\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"PC-FND\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "64464a2e-ce3d-4ca6-b95a-02893cf9b58c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"PC-FND\", pm.environment.get(\"pcLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFundContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget first",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9d209377-eb86-41fd-b1f2-ed628b42c000",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"PC-BDGT\", pm.environment.get(\"fromFundId\"), pm.environment.get(\"pcFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "32f7bb1e-ce8a-401f-9419-28d723afc56b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"allocBudgetId\", record.id); ",
															"    pm.expect(record.name).to.eql(\"PC-BDGT\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcBudgetContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create allocations to Budget",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "302092fe-7c6e-45e1-83a9-28f6fca7d4ca",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(1000, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1f34a84a-e83f-4b16-b0fd-92444bca6e45",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"allocTransactionId\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record before",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "25e4c5b3-92bd-4dfa-b66c-2bd903e3b909",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().allocated).to.eql(1000.0);",
															"    pm.expect(pm.response.json().available).to.eql(1000.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9b2c269f-fc54-4a18-ba17-aa4e89394413",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudgetId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b3be5a91-8d6b-4726-9766-a4c62db0cb75",
														"exec": [
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "62f0ea98-4fe1-4eba-b217-960fca1ebda5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"invoice-transaction-summaries"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create pending payments for payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fb49bb9-9871-4aba-89ef-1e2346919797",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction payment is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pendingPaymentTransaction1Id\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3878ed3d-12b3-4d9d-af65-a8ac0cce39ce",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(100.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Pending payment\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pendingPaymentContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create payments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c015f5e3-e621-4d22-a5fc-724aa6739423",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction payment is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"paymentTransactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "76d90563-297f-49d9-be11-2abac2bf6f63",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"paymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(100.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Payment\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{paymentContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice transaction summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98b40c33-ced7-456d-9189-3376d7c7568d",
												"exec": [
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "756fcbed-8cf2-4a92-b20b-79250ca51e76",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"invoice-transaction-summaries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create pending payments for credit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1d2f03f-8076-4051-a2a1-e61d6490c644",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction payment is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pendingPaymentTransaction2Id\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d46d224b-548e-4428-8ec5-c2998ef3fd9b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(-20.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Pending payment\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pendingPaymentContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d3d92d0-2c54-4e7b-9a98-fa732975b68e",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction credits is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"creditTransactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Credit\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f9b506ea-cc76-4b94-8fa3-359cb2ea2247",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"creditContent\", JSON.stringify(utils.buildCreditTransactionMinContent(20.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Credit\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{creditContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"credits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record after payments and credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e7ad25c-9b9f-45a5-8b60-46318e3ad225",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"    // 0.0 = 80 - 100(payment) + 20(credit)",
													"    pm.expect(pm.response.json().awaitingPayment).to.eql(0.0);",
													"    // 80.0 = 0 + 100(payment) - 20(credit)",
													"    pm.expect(pm.response.json().expenditures).to.eql(80.0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b464a3ce-c8a1-485c-84b0-7fe57615abd1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get and verify payment transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "623076e9-4672-4648-b6d1-f62b0acf7ab7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction payment is retrieved and validated\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"    pm.expect(pm.response.json().amount).to.eql(100.0);",
													"    pm.expect(pm.response.json().transactionType).to.eql(\"Payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eef7e705-0893-482d-9c68-86311d142688",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{paymentTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{paymentTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get and verify credit transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "951c8fd3-7f50-4b3a-93d3-2b3e1c6d79bc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction credit is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"    pm.expect(pm.response.json().amount).to.eql(20.0);",
													"    pm.expect(pm.response.json().transactionType).to.eql(\"Credit\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "14860056-f61c-4174-873f-23c86061e4da",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{creditTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{creditTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check pending payment 1 deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b656277f-5231-4d48-8ca3-0c86bbd25c08",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(404));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4e30b5d-4f75-4ff0-a950-a8a23ba3e653",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{pendingPaymentTransaction1Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{pendingPaymentTransaction1Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check pending payment 1 deleted Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21f08530-6c29-4b25-a11d-438cd6a000df",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(404));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f45a18d7-13b1-46d0-a292-67d4670e8b1f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{pendingPaymentTransaction2Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{pendingPaymentTransaction2Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete allocation transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e378de85-e5a2-4d79-bb4a-86b743aaf9a1",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3f637eab-8dc5-4e93-9c22-087bfaf0672b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{allocTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{allocTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete payment transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edcb414c-022d-4008-ba24-f505da092b5b",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5fd5336c-156c-4ae2-9f85-6aad3150d40d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{paymentTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{paymentTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete credit transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "245f41fc-a683-47a1-b111-95c46ad7b163",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e5eb96c-4e2a-4efe-8942-ebca7807f85a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{creditTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{creditTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bfca4825-9e1c-44db-8804-929863f08675",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d8961330-d543-4240-8429-06c850e3d70d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445fb8bd-ff45-4195-a47d-4605c2bb5be6",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "55500b14-3bc8-4ffc-b9a1-3b68706e7898",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{fromFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4387ee9-d0ae-4389-a266-80c78da035a9",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "730206b1-8680-49fc-acfe-eb86421118b0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{pcLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13e5a886-878a-4615-a3f2-d19c5bfff59a",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3919d1a7-dcb4-4045-89de-d1ff69c9ba09",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{pcFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{pcFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Current fiscal year",
					"item": [
						{
							"name": "Create current fiscal year for ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "920f79ec-157d-49d0-b4ed-9d75cd0370cf",
										"exec": [
											"pm.test(\"Current fiscal year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"currentFiscalYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ccfbea8-3c5a-475c-a203-d7578d4a3543",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moment = require('moment');",
											"",
											"let currentFiscalYear = utils.buildFiscalYearMinContent();",
											"var start = moment().startOf('year');",
											"var end = moment().endOf('year');",
											"",
											"currentFiscalYear.periodStart = start.format('YYYY-MM-DD');",
											"currentFiscalYear.periodEnd = end.format('YYYY-MM-DD');",
											"",
											"currentFiscalYear.name = \"CurrentFY\";",
											"currentFiscalYear.code = \"CF1111\";",
											"currentFiscalYear.series = \"CFYSERIES\";",
											"",
											"pm.variables.set(\"fyContent\", JSON.stringify(currentFiscalYear));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create next fiscal year for ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4567e680-deec-4b69-8a8e-3b4d7b84ffb8",
										"exec": [
											"pm.test(\"Next fiscal year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"nextFiscalYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0f1c8f4-9aa5-4c86-abc0-76b7d16bcb64",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moment = require('moment');",
											"",
											"let nextFiscalYear = utils.buildFiscalYearMinContent();",
											"var start = moment().startOf('year').add(1, 'year');",
											"var end = moment().endOf('year').add(1, 'year');",
											"",
											"nextFiscalYear.periodStart = start.format('YYYY-MM-DD');",
											"nextFiscalYear.periodEnd = end.format('YYYY-MM-DD');",
											"",
											"nextFiscalYear.name = \"NextFY\";",
											"nextFiscalYear.code = \"CF2222\";",
											"nextFiscalYear.series = \"CFYSERIES\";",
											"",
											"pm.variables.set(\"fyContent\", JSON.stringify(nextFiscalYear));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ledger with next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a002bdf-73dd-4fd7-9317-860441510c1a",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ledgerForCurrentFiscalYearId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b3f4bf3-8841-4bcb-81a9-f0487864853b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let ledger = utils.buildLedgerMinContent(\"n-lgr\", \"Next FY ledger\");",
											"ledger.fiscalYearOneId = pm.environment.get(\"nextFiscalYearId\");",
											"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get current fiscal year by ledger id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a531ff9a-827d-42a0-ba3f-4e507324e323",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Current fiscal year is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    let ledger = pm.response.json();",
											"    pm.expect(ledger.id).to.equal(pm.environment.get(\"currentFiscalYearId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b20d58d-806b-4a2a-b208-dc26998e0a38",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{ledgerForCurrentFiscalYearId}}/current-fiscal-year",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{ledgerForCurrentFiscalYearId}}",
										"current-fiscal-year"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group FiscalYear Summary",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create group fund fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc637634-6e26-48b7-9050-6afd6bd43bb1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Group fund fiscal year is created\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0606fedb-20f7-413f-8f00-d12016e4099a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"groupFundFiscalYearContent\", ",
													"JSON.stringify(utils.buildGroupFundFiscalYearMinContent(pm.environment.get(\"groupId\"), pm.environment.get(\"fundId\"), pm.environment.get(\"fiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupFundFiscalYearContent}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"group-fund-fiscal-years"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get group fiscal year summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3a411f4-b89e-4485-a352-a8770a395576",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fiscal year summary is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    let summaries = pm.response.json().groupFiscalYearSummaries;",
											"    pm.expect(summaries.length).to.equal(1);",
											"    utils.validateGroupFiscalYearSummaries(summaries[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04003c55-f95c-435f-9c29-b0dab9b388b8",
										"exec": [
											"// let utils = eval(globals.loadUtils);",
											"",
											"// let fiscalYear = utils.buildFiscalYearMinContent(\"DD1259\");",
											"// let group = utils.buildGroupMinContent();",
											"",
											"// // Create fiscal year",
											"// pm.test(\"Fiscal year is created\", function() {",
											"//     utils.sendPostRequest('/finance/fiscal-years', fiscalYear, (err, res) => {",
											"//         pm.expect(res).to.have.status(201);",
											"//         pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//             // Create group",
											"//             pm.test(\"Group is created\", function() {",
											"//                 utils.sendPostRequest('/finance/groups', group, (err, res) => {",
											"//                 pm.expect(res).to.have.status(201);",
											"//                 pm.variables.set(\"groupId\", res.json().id);",
											"//                 pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//                 // Create fund",
											"//                 pm.test(\"Fund is created\", function() {",
											"//                     utils.sendPostRequest('/finance/funds', group, (err, res) => {",
											"//                     pm.expect(res).to.have.status(201);",
											"//                     pm.variables.set(\"fundIdId\", res.json().id);",
											"//                     });",
											"//                 });",
											"//             });",
											"//         });",
											"//     });",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fiscal-year-summaries?query=groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{fiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fiscal-year-summaries"
									],
									"query": [
										{
											"key": "query",
											"value": "groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{fiscalYearId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Exchange rate",
					"item": [
						{
							"name": "Get exchange rate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cf8995c-40d0-47de-9299-c90208ee861b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Exchange rate is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateExchangeRate(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19c586cf-f4b8-48eb-bacb-eaaf46e33ca8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=EUR",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "EUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate for same currencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b76aca7-3b0e-4427-8f2a-6caa211869cb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Exchange rate for equal currencies is 1.0\", function () {",
											"    pm.response.to.be.ok;",
											"    let exchangeRate = pm.response.json();",
											"    pm.expect(exchangeRate.exchangeRate).to.eql(1.0);",
											"    utils.validateExchangeRate(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0c914d5-548c-4496-a01a-ad30a9b8dea1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=USD",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c7afb59e-baa4-4bfc-996c-f96157db8766",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1304eb23-a402-4520-af50-56be7fea7546",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Ledgers",
					"item": [
						{
							"name": "Get ledger by id, with summary ledgerFY not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b18fe93f-3d89-45ac-89a8-950d6e4f1706",
										"exec": [
											"pm.test(\"Fund cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"ledgerFYNotFound\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d45f34b7-96b0-4385-895e-70c58d65ebf0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{ledgerId}}?fiscalYear={{fyForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{ledgerId}}"
									],
									"query": [
										{
											"key": "fiscalYear",
											"value": "{{fyForDeleteId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund types",
					"item": [
						{
							"name": "Create first type for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06a64aab-e76c-4322-8ab2-e468c8f152c5",
										"exec": [
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8c561d3-cc14-45d0-8852-5250a1cb7d60",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second type for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2954d68c-7b43-43dc-91c5-c7e560c330ef",
										"exec": [
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundTypeId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4a859a4-a06c-4d8a-93ab-5a57703a6634",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative2\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create type without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5642848b-b93c-40d0-8691-cb7618678ccc",
										"exec": [
											"pm.test(\"Fund type is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"name\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8d30eed-985b-4ff9-8940-397ed2b88367",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create type - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "362bb540-11f1-4385-a4e1-e979584f5f59",
										"exec": [
											"pm.test(\"Fund type is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "266098c3-717a-4f3a-868d-a567924c35f8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update type - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "462bb5f0-c544-474d-a02a-2f80c08344b6",
										"exec": [
											"pm.test(\"Fund type is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56832131-679b-4f49-bad5-125792f447d9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for types by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc2aa04c-f9ae-4a3a-9a82-94015e9cb4a0",
										"exec": [
											"pm.test(\"Fund types cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a501061-d451-4a5a-8f2a-374163b3b699",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Funds",
					"item": [
						{
							"name": "Create first fund for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0fe3b42e-36fd-4410-97c6-5f46544d6347",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundId\", pm.response.json().fund.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83e37ec0-256e-4dc9-baba-36abcafab43c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fund for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81c11a55-a2b9-4068-bde8-c79e058042f4",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let record = pm.response.json();",
											"    pm.environment.set(\"fundId2\", record.fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "78b52020-0d84-4b08-8f35-91cec817b6d9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST2\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "943539b2-687f-40d6-9555-3efaa821d9fd",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "82bba390-e2d2-4d6e-8f0f-6f91e0ad8083",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c42326e0-70f3-422f-b181-9c21e9e07c9c",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26990234-05d5-40f2-b133-fd2fd1460d4e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - non existent ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae6a0bc5-945e-4d27-8ddd-5cefc7c3c19c",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"ledgerid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fbe0f42e-2ecb-40ec-a2c0-91f2a93feea5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST3\", uuid.v4()))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - non existent fund type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "919a5b07-7402-407b-b23e-45c22db2b99d",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fundtypeid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fbd18608-c23b-4c3e-947e-06a928b1ce9a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"let record = utils.buildCompositeFund(utils.buildFundMinContent(\"TST3\"));",
											"record.fund.fundTypeId = uuid.v4();",
											"pm.variables.set(\"fundContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "465309ee-8ca0-4e32-a58c-a7e456c195bc",
										"exec": [
											"pm.test(\"Fund is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5414bfac-600b-46ae-8924-dee1c0d802e0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for funds by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4eb66147-8497-45a3-8017-12b960d3ce96",
										"exec": [
											"pm.test(\"Fund cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d3e6c44-cc17-4cee-b46a-08f35366b8bc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create first group for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5fd01fa8-3fd8-49a6-a0f6-73d34190ba8b",
										"exec": [
											"pm.test(\"Group is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1cf16cd0-5bc5-42d1-8424-6354be4758cf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST1\", \"NEGATIVE_TEST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second group for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "433f8235-dabc-4a8e-ba2e-b0cbcda22472",
										"exec": [
											"pm.test(\"Group is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c796a4b-4e5c-44fc-a64e-000825048acb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST2\", \"NEGATIVE_TEST2\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc4bc62d-0620-433d-84ba-2554c6a76846",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ac9f343b-5e3e-40e7-b140-7213b4b4a039",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48727398-bdcc-4977-bab5-23d971aabaaa",
										"exec": [
											"pm.test(\"Group is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b74d99e4-ff6a-4fde-98ea-251bf80ecb78",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST3\", \"NEGATIVE_TEST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2b421d2-5dd0-44bb-b617-6c20b4b994f8",
										"exec": [
											"pm.test(\"Group is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "534811b5-9865-4e9e-96ec-0446ba2c1ae7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST1\", \"NEGATIVE_TEST3\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4378638b-62ab-45c0-9301-9bcd9efef1ad",
										"exec": [
											"pm.test(\"Group is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2414b3b3-00c5-429a-b6f4-d2bcfe88ce51",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST3\",  \"NEGATIVE_TEST2\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupId1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c6a39fd-62b4-443d-ac26-559463a6df76",
										"exec": [
											"pm.test(\"Group is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a60af479-a69f-40b3-a5e1-50adc2813627",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST2\",  \"NEGATIVE_TEST3\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupId1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for groups by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dca2424-5857-4774-8ca3-ff2b71bf1074",
										"exec": [
											"pm.test(\"Groups cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "598b6878-b528-479f-9e92-a9bebe70eed4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets",
					"item": [
						{
							"name": "Budget deletion with existing transaction",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fc6d5ac5-62c8-40f3-b165-3c6b953d56ae",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c8ec9ed-e3db-4a14-b418-957f9ebcaa43",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "645631f6-765f-455e-b8c1-d6a303ec5020",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39596a4d-08c5-42af-9ac6-ec578a4dc5a2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53374870-c249-465c-9d22-58b83d75b321",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6c5c462b-8979-4278-8a01-f4bff057316d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a4df053-3cf0-4c6f-940d-ec9b3fd1387c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "07a7a45f-7864-449a-be72-8e67f5678898",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab6031ff-aa39-4738-9c45-c618547df610",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90a4bfa2-5067-4383-9b14-fdec0d01275f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5535077-ceb9-4099-9d62-37686a6f2698",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4d9d023e-4e8f-428e-884a-090244c4ad32",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e857a6b5-5ade-4983-8456-eb86ccb6b4ba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "70d493e7-7ee2-4898-80e2-fd06400d1e71",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "581fb789-15c7-4497-bc44-ba1dd3c82a0e",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2ed68298-5ec5-48f2-9c1e-f9fa02ff8a97",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5c1bf5b-dd78-42a3-a1db-1c99fe15466c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac26d3b2-b113-49a8-b549-2f22c9a10f38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e430601-e5aa-4046-a4af-2d75e76032a5",
												"exec": [
													"pm.test(\"Budget deletion is failed\", function () {",
													"    pm.response.to.have.status(400).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].code).to.contain(\"transactionIsPresentBudgetDeleteError\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90ab9091-8213-4198-ad77-5139f94375f2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9627b5ca-5734-4139-8fad-9473d56c153b",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "68890c2a-ba19-4e2f-9b6e-fbf1c6a18a6a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record after transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69f3acca-11fb-437a-bed7-8dc78487cad6",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "03de11f2-425c-4dcc-acf5-b1e379d43ef5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f92659c6-e3f6-45a9-a36b-f15792d0438b",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "01e1f6b4-44bc-4694-aeda-4a0393b54afc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd1441a5-2f1b-4b96-8371-55320cf72771",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "500df449-8b1c-497d-b774-9fd5c509794a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a270a348-d357-4c18-b1f4-9466f37ee46e",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3475f0af-bf16-40f1-9122-000702cadf4e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Delete budget with existing transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8df40394-d1b8-4513-8285-f56b7f2e290f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2efb675e-2182-481c-b87c-d93cfe6c25b0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create first budget for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdc5cb34-a96f-45d2-b96c-ea732718c62c",
										"exec": [
											"pm.test(\"Budget is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0b12086c-0a58-42ea-bb99-256d7d87e943",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));",
											"pm.environment.set(\"firstBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second budget for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c391f635-fe46-41a4-bb00-475d17db1921",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let record = pm.response.json();",
											"    pm.environment.set(\"budgetId2\", record.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "611e4873-f365-4fc0-869e-0f5aaff1a322",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let scndBudget = utils.buildBudgetMinContent(\"TST2\");",
											"scndBudget.fundId = pm.environment.get(\"fundId2\");",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(scndBudget));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d65a83a6-87a8-4d41-84c9-5b9e044516e6",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67b72791-34a0-483b-a33d-7272e1346be5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ab71c12-fb4e-44ef-901d-41790aa04f49",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc1c6664-1d20-4c93-aacd-0bd887ed7475",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - non existent fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf7ef04b-8a75-4033-b0c0-10d27e33a0fb",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fundid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "026eb4c3-6d4a-4568-9e30-910239e2ef7e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST3\", uuid.v4())));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - non existent fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6eafa20-c724-424e-a30e-5f616e8c0d04",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fiscalyearid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c8d0ee3-3459-4e23-a018-89587bc94061",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"let record = utils.buildBudgetMinContent(\"TST3\");",
											"record.fiscalYearId = uuid.v4();",
											"pm.variables.set(\"budgetContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73e976b8-d63c-45cf-94de-9c2845c8dc92",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e251824-115f-434f-a22e-dc2643d49581",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for budgets by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13727a75-a1f6-4b80-9d80-0b1414036ab6",
										"exec": [
											"pm.test(\"Budgets cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76e86513-71ea-4f86-849c-864b92f02230",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets Restrictions",
					"item": [
						{
							"name": "Allocate money for budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15364ce4-9413-47a4-895f-39294455d382",
										"exec": [
											"let record = {};",
											"pm.test(\"Trasaction allocation is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
											"    record = pm.response.json();",
											"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5166b114-2590-4f1e-b36f-848057a65fee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(90, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Allocation\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{allocationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order transaction summaries",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ed72bfea-cf9e-4ca7-9324-846d547f9980",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2f82e6af-712f-4ac6-9f65-edf95917b36e",
										"exec": [
											"pm.test(\"Order transaction summary is created\", () => {",
											"    pm.environment.set(\"orderTransactionIdBudget\", pm.response.json().id);",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"e5ae4afd-3fa9-494e-a972-f541df9b8772\",\r\n  \"numTransactions\": 1\r\n}\r\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"order-transaction-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice transaction summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b336336-6400-41f4-b67e-f30d05d89106",
										"exec": [
											"pm.test(\"Trasaction allocation is created\", () => {",
											"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id);",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dedf8445-fc20-4246-b5ce-48f6d9f508f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"187c7e6f-782a-4bd0-a04e-7174d4da2415\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"invoice-transaction-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create encumbrances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b484399-ef9c-4ea5-b15c-b7cf213a612a",
										"exec": [
											"let record = {};",
											"pm.test(\"Trasaction encumbrance is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"encumbranceId\", pm.response.json().id);",
											"    record = pm.response.json();",
											"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e872a84-328c-44a6-8045-54d36fb826eb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
											"let transactionEncumbrance = utils.buildTransactionMinContent(25, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Encumbrance\");",
											"",
											"transactionEncumbrance.encumbrance = encumbranceMinContent;",
											"transactionEncumbrance.encumbrance.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionIdBudget\");",
											"transactionEncumbrance.fromFundId = pm.environment.get(\"fundId\");",
											"pm.environment.set(\"encumbranceContent\", JSON.stringify(transactionEncumbrance));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{encumbranceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create pending payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5896b767-a17e-462a-be9b-4c3e10ccddae",
										"exec": [
											"pm.test(\"Trasaction pending payment is created\", () => {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83d48a65-4273-401b-8dd8-e63f85c3bae3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pendingPayment = utils.buildPaymentTransactionMinContent(30, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Pending payment\");",
											"pm.environment.set(\"paymentContent\", JSON.stringify(pendingPayment));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{paymentContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5616985e-caee-4d0c-b58a-ec0c5d2bd7ee",
										"exec": [
											"pm.test(\"Trasaction payment is created\", () => {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d01aa62-51c0-4b59-a994-ff085e9d8bd1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.environment.set(\"paymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(30, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Payment\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{paymentContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95f6c973-e916-4313-b13f-7b2b2e884fb3",
										"exec": [
											"pm.test(\"Get Budget\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"firstBudgetContent\", JSON.stringify(pm.response.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b159495e-2c94-4a20-b608-3299d32e8f84",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget allowableEncumbrance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3451c7dd-4b4c-4e51-8f62-12303f44a5f5",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"allowableEncumbranceLimitExceeded\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e91d683-a2fc-4847-9f28-f9ce26ed1608",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let budgetForUpdate = JSON.parse(pm.environment.get(\"firstBudgetContent\"));",
											"",
											"budgetForUpdate.allowableEncumbrance = 1;",
											"budgetForUpdate.allowableExpenditure = 100;",
											"",
											"",
											"pm.variables.set(\"firstBudgetContent\", JSON.stringify(budgetForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{firstBudgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated budget Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "493058ee-8599-4a5b-a64d-e8a411bfefce",
										"exec": [
											"pm.test(\"Get Budget\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e17abfb-2b6e-412d-ac2b-574fd82ac958",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget allowableExpenditures",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d8ecb1b-5309-4c28-b382-2aa746876322",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"allowableExpenditureLimitExceeded\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d7ceb1da-ed87-4da2-b878-8b16657b9cf9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let budgetForUpdate = JSON.parse(pm.variables.get(\"firstBudgetContent\"));",
											"",
											"budgetForUpdate.allowableEncumbrance = 100;",
											"budgetForUpdate.allowableExpenditure = 1;",
											"",
											"pm.variables.set(\"firstBudgetContent\", JSON.stringify(budgetForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{firstBudgetContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1840bbfa-00f0-4a54-9a20-b0db02816522",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96d47660-1779-4205-81a9-19f8832cca13",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group fund fiscal year",
					"item": [
						{
							"name": "Create group fund fiscal year without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a11c7e3-ce32-433f-8712-60c543a4b930",
										"exec": [
											"pm.test(\"Group fund fiscal year is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"groupId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79ae9cac-a78b-488a-afaa-08f3499db45c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"78872d8a-bf16-420b-829f-206da38f6c10\",\r\n  \"fiscalYearId\": \"684b5dc5-92f6-4db7-b996-b549d88f5e4e\",\r\n  \"fundId\": \"68872d8a-bf16-420b-829f-206da38f6c10\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "784ea3f2-56e5-443e-b6c4-d414812ec8a1",
										"exec": [
											"pm.test(\"Group fund fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd09c394-7663-4a16-951f-1c4965990d81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"a8bf1036-502c-42e4-8783-00a60beeae24\",\r\n  \"groupId\": \"{{groupId}}\",\r\n  \"fiscalYearId\": \"{{fiscalYearId}}\",\r\n  \"fundId\": \"{{fundId}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group fund fiscal year - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de7d6f51-c32e-488b-95c5-e5c859245812",
										"exec": [
											"pm.test(\"Group fund fiscal year is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68f24248-90a3-42ba-8328-c59fec8e040e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"a8bf1036-502c-42e4-8783-00a60beeae24\",\r\n  \"groupId\": \"{{groupId}}\",\r\n  \"fiscalYearId\": \"{{fiscalYearId}}\",\r\n  \"fundId\": \"{{fundId}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group fund fiscal year - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f7f955a-94a2-4285-8140-e345ddd2d173",
										"exec": [
											"pm.test(\"Group fund fiscal year is not deleted\", function () {",
											"    pm.response.to.have.status(404).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9990b69-bb15-45a9-880d-3637a426f55e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years/d65969c5-1887-4801-8024-486502bd2a1b",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years",
										"d65969c5-1887-4801-8024-486502bd2a1b"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for group fund fiscal year by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "511fe68c-8eb5-4dc2-8557-1aa5b81761b3",
										"exec": [
											"pm.test(\"Fund types cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f089f1e-800f-4375-aa14-4a4f5dc64c74",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assign funds to groups",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create fiscal year one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d0dc687-f236-4411-858c-df54409e422a",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testNegativeFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcdb301f-bb6c-41e6-987e-746ebc483623",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"const today = moment.utc();",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = today.startOf('year').subtract(1, 'years');",
													"var end = today.endOf('year').subtract(1, 'years');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEGATIVE\";",
													"fiscalYear.code = \"TESTNEGATIVE2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  after next fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f3abff0-a3b3-45cc-92a7-f7cf93177614",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"afterNextFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "626dcc17-2e6e-410d-8648-276203bce3ab",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"const today = moment.utc();",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = today.startOf('year').add(2, 'years');",
													"var end = today.endOf('year').add(2, 'years');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEGATIVE\";",
													"fiscalYear.code = \"TESTNEGATIVE2021\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57a66639-f334-43b6-a54f-55c90a706a59",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"negativeLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1a3dfcd2-6e1a-47e0-b74d-7a93be4160a0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testNegativeFiscalYearOneId\");",
													"ledger.name = \"Negative\";",
													"ledger.code = \"TESTNEGATIVE\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create fund with groups - current fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e82555b1-980b-476d-8290-b68a73a2409a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88f6a5ca-3d68-48cc-a55a-f6e81e262439",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TESTNEGATIVE\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"negativeFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund with groups - current fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9168284c-53c2-4004-8ff0-cd0651b43e5d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is not updated\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d815784d-d503-444a-9b75-90e6377c8aed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TESTNEGATIVE\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"negativeFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId2\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Restrictions",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "026f7914-0a0d-4c76-a085-3997d87fb41b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bb12bac9-aea4-4ac5-8ef2-b2b93a4fa51f",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c0412fd-3f0b-46c4-b203-206e0677f2ad",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "749edb58-a874-4ba3-9a4e-f14f2a68717e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fc998f7-75b0-4223-b421-9dbd0f4635ff",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"histFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"HIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "baaa2b6f-f281-46ce-88fa-d1cacd81b75a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"History\",\n\t  \"code\": \"HIST\",\n\t  \"externalAccountNo\": \"276507594438808\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"subdivided by geographic regions, to match individual selectors\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "045ef119-1273-46fa-8866-f7f8a4912a3c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"canhistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"CANHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0b2680f8-77fb-4ace-b6e2-79d7b4e4e100",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Canadian History\",\n\t  \"code\": \"CANHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL; use for Canada once CANLATHIST is inactivated\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\",\n\t  \"allocatedFromIds\": [\"{{histFundId}}\"]\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92ab6866-c636-4ac3-a1fd-77bd7487faaa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"lathistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"LATHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8e05703f-ad70-401b-bff2-16a4d871f9b1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Latin America History\",\n\t  \"code\": \"LATHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update HIST fund - add allocatedToIds set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7664f11d-0c1e-4c32-8224-92a3e25e2971",
												"exec": [
													"pm.test(\"Fund is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5fd725da-d162-45e5-9fee-e0a276b8d196",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/finance/funds/\" + pm.environment.get(\"histFundId\"), function (err, res) {",
													"    let histFund = res.json();",
													"    histFund.fund.allocatedToIds = new Array(pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"));",
													"    ",
													"    pm.environment.set(\"histFundContent\", JSON.stringify(histFund));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histFundContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ASIAHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "120cee2e-7c03-471e-8673-682515b5433f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"asiahistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ASIAHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "244a90d8-972e-4a01-828d-958b022ea353",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Asian History\",\n\t  \"code\": \"ASIAHIST\",\n\t  \"externalAccountNo\": \"94508839006119\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"use for East, Central, and South Asia\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\",\n\t  \"allocatedToIds\": [\"{{histFundId}}\"],\n\t  \"allocatedFromIds\": [\"cf23adf0-61ba-4887-bf82-956c4aae2260\"]\n\t}\n}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34abe420-cc9c-40c3-bf12-666d1baa18df",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"histBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"HIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3af2d51-8f31-4f91-8b46-3d895c33cd76",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"histBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"HIST-BDGT\", pm.environment.get(\"histFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48d6c0b7-f39e-4f12-a776-75320ec8ade1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"canhistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"CANHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e5743c90-54ac-46ec-8c0f-fec3718f0937",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"canhistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"CANHIST-BDGT\", pm.environment.get(\"canhistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{canhistBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f39b431-814d-4b45-9f9b-aedb060a946a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"lathistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"LATHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d2c614d8-eff5-4d07-9aa5-2d108074a42b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"lathistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"LATHIST-BDGT\", pm.environment.get(\"lathistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lathistBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ASIAHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20e4069e-ec68-49f9-873b-0383f18a4947",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"asiahistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"ASIAHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39cf67b7-7c21-498c-b25f-89a5c35aab32",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"asiahistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ASIAHIST-BDGT\", pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{asiahistBudgetContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with allocated ids mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b3d64f8-1771-471a-a7b9-be5516db0463",
												"exec": [
													"pm.test(\"Allocation is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4517afba-62ea-4254-b1d8-6a6adbef6225",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"canhistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with allocated ids mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "baddc5b8-1d87-48a9-bf2e-b156f75d9d67",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e7f01ff-a1a1-4249-9d55-546bbd6f2032",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"canhistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with allocatedFromIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9958dad7-0ac2-470d-adca-0bbd2e19e89f",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce40cac5-1738-40ea-ba0a-48da140ea73b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"lathistFundId\"), pm.environment.get(\"canhistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with allocatedFromIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a049551-4468-4665-8d44-dab518754788",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79ebd5dc-da83-4828-a52b-6457f3e3ac3f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"lathistFundId\"), pm.environment.get(\"canhistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with allocatedToIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b877a6b4-0592-4bd6-8533-8b653b07fa5f",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8322c5fb-cef1-4639-8056-6bf056c90228",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"lathistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with allocatedToIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "011868cc-5137-4049-833c-19794f65efb8",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0c7f43c0-3d2e-42cb-b014-0ee34a67f3fc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"lathistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87e8e45e-03cc-4bb4-8061-7d760a5f2c3f",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d374056-4670-4822-bc53-9a89464150cf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{histBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{histBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f45dae00-1e4e-4a12-969f-c1c8ba8eb293",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3cca6ad-2c24-4cdf-b98c-5925f73c08d4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{canhistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{canhistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "806d3166-3945-4461-9a16-6c8686d3d77f",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "067682f7-02bb-46d6-9757-21935c25864a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{lathistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{lathistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ASIAHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5f1d613-87bf-4ee0-8179-08fdadf715d5",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "95b40c31-17ba-4374-928a-d931d427f6ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{asiahistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{asiahistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ASIAHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "760edb17-7ec4-400d-bf2e-eabf8dddf3d5",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "603a19f8-0a4a-4425-a18b-b95ebbe3a507",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{asiahistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{asiahistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d41a2243-6673-439c-8430-d4e744a0ade6",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "00e388cc-7255-4e71-a0c6-b98431a449ed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{lathistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{lathistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df7eb65e-e6b5-4218-87c0-bd8e754cf3bb",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "56081a5b-a366-4d66-b124-0ddc28924acc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{canhistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{canhistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e158d70e-b752-4e25-904a-75b1581ec713",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97c54b37-a88c-4241-8bbc-b2a0f882e905",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a1c1b29-7678-4ea2-baba-c4863f5d7b7a",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d2a467f-1aac-41ff-a5e1-bc9cd034bd9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efe49349-4c6a-4d65-a6a0-17fc662b7a98",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "306f119c-0669-498c-8254-8888efd0e540",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create transaction Transfer without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf6149da-8918-4347-8e2d-d13a682b6f84",
										"exec": [
											"pm.test(\"Transfers is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52234dbf-9c2d-4b9a-8e6c-8911a799f3ae",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df756d43-7eab-426e-9adb-5969204c0c7d",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"currency\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d5e7a390-5ff8-4f23-971e-403a1f3b1284",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation without toFundId and fromFundId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6b3fd98-afd3-4c98-ae11-6c10129730a2",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.be.eql(\"Missing to/from fund id\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bf060d0-b291-417e-9e8a-6c298c441cb5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"transactionType\": \"Allocation\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer without fromFundId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e46c8c1-ad64-43c9-973b-234249d786db",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.be.eql(\"Missing to/from fund id\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c787216-e277-4cc1-8c18-1625621ac697",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer without toFundId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce4897c8-25bb-4a97-b0a6-6c73f90b9621",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.be.eql(\"Missing to/from fund id\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4739bc22-2894-4938-8e68-f43afe02b4a3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"fromFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Encumbrance without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3686f02-6084-4fce-b2be-08608e537d88",
										"exec": [
											"pm.test(\"Encumbrance is not created - missing transactionType field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"transactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8c6c99bc-1aed-41ba-b823-ab50ae2b2530",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Payment without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "727cf0e8-f61b-42d2-875e-497c40f51d7d",
										"exec": [
											"pm.test(\"Payments is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f5a0121-4d43-404f-9a7a-20fcdf9a6c50",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Payment\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Credit without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0044d68-1b8b-4ccb-83b7-6925885c2484",
										"exec": [
											"pm.test(\"Credits is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b16941c-cd7e-4359-bfe2-02334910aa73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Credit\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"credits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transaction by id - wrong id, not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26f1367c-d9de-48f3-acd9-3ef5bde3db84",
										"exec": [
											"pm.test(\"Encumbrance not found - wrong id\", function () {",
											"    pm.response.to.have.status(404).and.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e4096a7-77e8-4606-98e1-beaa9c43e718",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"randomId\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{randomId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transactions",
										"{{randomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6781f5cd-86bb-4f10-94fd-c2b09bab3d72",
										"exec": [
											"pm.test(\"Allocations is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a2b7ec0-e185-4add-a039-7b255f8ed40f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f0d4d69-7d7d-4f17-8f85-109b7db88569",
										"exec": [
											"pm.test(\"Transfers is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b54b1942-e795-4f1a-8dd6-4f6022789718",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Payment with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8f95464-dc36-4f70-8746-621e3cac1b85",
										"exec": [
											"pm.test(\"Payments is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b14984a-54be-4aa7-9a69-a5f2220fbb5d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Credit with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40afbfdc-373f-4617-9860-e45cfb8af66c",
										"exec": [
											"pm.test(\"Credits is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ab3843f4-c7e0-412e-babc-47fac1d4cba7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"credits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Encumbrance with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f9b5798-686b-426a-a307-cb8da466e169",
										"exec": [
											"pm.test(\"Encumbrances is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95eb99d9-f130-481b-abda-c637b98adaa1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Current fiscal year",
					"item": [
						{
							"name": "Get current fiscal year for non-existed ledger id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b2286a7-d650-4ba4-93df-d05d4b9f2f04",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Current fiscal year isn't retrieved\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "57cc594a-6c72-4c83-90a7-b48979fdd0d6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{$guid}}/current-fiscal-year",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{$guid}}",
										"current-fiscal-year"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group fiscal year summary",
					"item": [
						{
							"name": "Get group fiscal year summary - fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "735ddd70-5e02-4599-84d9-1b241596b2eb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fiscal year summary is empty\", function() {",
											"    pm.response.to.be.ok;",
											"    let summaries = pm.response.json().groupFiscalYearSummaries;",
											"    pm.expect(summaries.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1d815c77-e7e4-4ab0-b81a-3f7fa84cf961",
										"exec": [
											"// let utils = eval(globals.loadUtils);",
											"",
											"// let fiscalYear = utils.buildFiscalYearMinContent(\"DD1259\");",
											"// let group = utils.buildGroupMinContent();",
											"",
											"// // Create fiscal year",
											"// pm.test(\"Fiscal year is created\", function() {",
											"//     utils.sendPostRequest('/finance/fiscal-years', fiscalYear, (err, res) => {",
											"//         pm.expect(res).to.have.status(201);",
											"//         pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//             // Create group",
											"//             pm.test(\"Group is created\", function() {",
											"//                 utils.sendPostRequest('/finance/groups', group, (err, res) => {",
											"//                 pm.expect(res).to.have.status(201);",
											"//                 pm.variables.set(\"groupId\", res.json().id);",
											"//                 pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//                 // Create fund",
											"//                 pm.test(\"Fund is created\", function() {",
											"//                     utils.sendPostRequest('/finance/funds', group, (err, res) => {",
											"//                     pm.expect(res).to.have.status(201);",
											"//                     pm.variables.set(\"fundIdId\", res.json().id);",
											"//                     });",
											"//                 });",
											"//             });",
											"//         });",
											"//     });",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fiscal-year-summaries?query=groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fiscal-year-summaries"
									],
									"query": [
										{
											"key": "query",
											"value": "groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{$guid}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Exchange rate",
					"item": [
						{
							"name": "Get exchange rate missing request parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "838156ea-3480-414b-b961-a39ba32b2464",
										"exec": [
											"pm.test(\"Get exchange rate missing request parameters: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2618660-c563-4618-8c03-e3eb0748a98f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate missing from parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce570bcf-3644-4691-a1cb-cfc83145715f",
										"exec": [
											"pm.test(\"Get exchange rate missing from parameter: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5269bfe7-a1f9-44a9-ad77-44028c9bd25f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?to=USD",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "to",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate missing to parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ada61256-a898-45ee-86d8-549a1b79b3af",
										"exec": [
											"pm.test(\"Get exchange rate missing to parameter: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ae3c984e-b976-47f6-a643-dfca6a2c1849",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate for invalid currency code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c516116e-acb2-4f53-981e-d1bbbef92928",
										"exec": [
											"pm.test(\"Get exchange rate for invalid currency code: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13e32d5b-7415-4bf0-9c62-f70be6773836",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=EU",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "EU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate for non-existent currency code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4a9931a-2dc9-4e5f-aa1e-992c2950843d",
										"exec": [
											"pm.test(\"Get exchange rate for non-existent currency code: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d8715ded-cf3b-47da-9f74-d7e79c8fb1f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=ABC",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "ABC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ad3daca-1266-4a2e-bc82-228c617403f5",
										"exec": [
											"pm.test(\"Get not availible exchange rate: NOT_FOUND\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2994684f-0cb1-4a1b-b677-1da14d311641",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=ALL",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "ALL"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11145965-5549-44fd-add9-6ffeaba3361b",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16251239-dc47-407b-8c0d-6281799c54bb",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3fe0eaef-7d78-4536-b353-aa7594513947",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "46ecfb08-12f3-43b7-8999-05e2ba399723",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4a99782b-2381-46c5-b6ed-71716eb521d4",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [],",
					"        bodyTemplate: {",
					"            \"module\": \"FINANCE\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    localeConfigs: {",
					"        configNames: [],",
					"        bodyTemplate: {",
					"            \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"            \"module\": \"ORG\",",
					"            \"configName\": \"localeSettings\",",
					"            \"description\": \"locale Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"{\\\"locale\\\":\\\"en-US\\\",\\\"timezone\\\":\\\"America/New_York\\\",\\\"currency\\\":\\\"USD\\\"}\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Finance API - Admin\",",
					"                    \"lastName\": \"Finance Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [\"finance-storage.transactions.item.delete\", \"finance.order-transaction-summaries.item.post\"]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"regular-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Limited user\",",
					"                    \"lastName\": \"Finance Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"regular-user\",",
					"                \"password\": \"regular-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"finance.all\",",
					"                    \"finance.order-transaction-summaries.item.post\",",
					"                    \"finance-storage.transactions.item.delete\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test finance tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"finances_schema_\";",
					"",
					"    /**",
					"     * Builds Postman Request base data",
					"     */",
					"    utils.buildPmRequest = function (path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    utils.sendPostRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function (path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"",
					"    utils.copyJsonObj = function (obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function (configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function (configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function (configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.createFinanceConfig = function (configName) {",
					"        let body = utils.copyJsonObj(globals.testData.configs.bodyTemplate);",
					"        body.configName = configName;",
					"        body.value = pm.variables.get(configName);",
					"        utils.createConfig(body);",
					"    };",
					"",
					"    utils.createConfig = function (body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function (err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function (body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function (id) {",
					"        const timerId = setTimeout(() => { }, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Build group record with minimal required fields.",
					"     */",
					"    utils.buildGroupMinContent = function (code, name) {",
					"        return {",
					"            \"code\": code || \"TST-GRP\",",
					"            \"status\": \"Active\",",
					"            \"name\": name || \"Test group\"",
					"        };",
					"",
					"    };",
					"    /**",
					"     * Build ledger record with minimal required fields.",
					"     */",
					"    utils.buildLedgerMinContent = function (code, name) {",
					"        return {",
					"            \"code\": code || \"TST-LDGR\",",
					"            \"ledgerStatus\": \"Active\",",
					"            \"name\": name || \"Test ledger\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build fiscal year record with minimal required fields.",
					"     */",
					"    utils.buildFiscalYearMinContent = function (code) {",
					"        return {",
					"            \"code\": code || \"FY2019\",",
					"            \"name\": \"Test fiscal year\",",
					"            \"periodStart\": \"2019-01-01T00:00:00Z\",",
					"            \"periodEnd\": \"2025-12-30T23:59:59Z\",",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build group fund fiscal year record with minimal required fields.",
					"     */",
					"    utils.buildGroupFundFiscalYearMinContent = function (groupId, fundId, fiscalYearId) {",
					"        return {",
					"            \"groupId\": groupId,",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"fundId\": fundId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Fund record with minimal required fields.",
					"     */",
					"    utils.buildFundMinContent = function (code, ledgerId) {",
					"        return {",
					"            \"code\": code || \"TST-FND\",",
					"            \"fundStatus\": \"Active\",",
					"            \"ledgerId\": ledgerId || pm.variables.get(\"ledgerId\"),",
					"            \"name\": \"Test fund\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Composite Fund record.",
					"     */",
					"    utils.buildCompositeFund = function (fund, groupIds) {",
					"        return {",
					"            \"fund\": fund || buildFundMinContent(),",
					"            \"groupIds\": groupIds || []",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build budget record with minimal required fields.",
					"     */",
					"    utils.buildBudgetMinContent = function (name, fundId, fiscalYearId) {",
					"        return {",
					"            \"allocated\": 0,",
					"            \"name\": name || \"TST-BDGT\",",
					"            \"budgetStatus\": \"Active\",",
					"            \"fundId\": fundId || pm.variables.get(\"fundId\"),",
					"            \"fiscalYearId\": fiscalYearId || pm.variables.get(\"fiscalYearId\"),",
					"            \"allowableEncumbrance\": 100,",
					"            \"allowableExpenditure\": 100",
					"        };",
					"    };",
					"",
					"    var uuid = require('uuid');",
					"    /**",
					"     * Build encumbrance record with minimal required fields.",
					"     */",
					"    utils.buildEncumbranceMinContent = function () {",
					"        return {",
					"            \"initialAmountEncumbered\": 25,",
					"            \"status\": \"Unreleased\",",
					"            \"orderType\": \"One-Time\",",
					"            \"subscription\": false,",
					"            \"reEncumber\": false,",
					"            \"sourcePurchaseOrderId\": \"e5ae4afd-3fa9-494e-a972-f541df9b877e\",",
					"            \"sourcePoLineId\": uuid.v4()",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build transaction record with minimal required fields.",
					"     */",
					"    utils.buildTransactionMinContent = function (amount, fiscalYearId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build transaction between funds record with minimal required fields.",
					"     */",
					"    utils.buildTransactionBetweenFunds = function (amount, fiscalYearId, fromFundId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"fromFundId\": fromFundId,",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build payments transaction record with minimal required fields.",
					"     */",
					"    utils.buildPaymentTransactionMinContent = function (amount, fiscalYearId, fromFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"fromFundId\": fromFundId || pm.environment.get(\"fromFundId\"),",
					"            \"sourceInvoiceId\": pm.environment.get(\"invoiceTransactionSummaryId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build credits transaction record with minimal required fields.",
					"     */",
					"    utils.buildCreditTransactionMinContent = function (amount, fiscalYearId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"sourceInvoiceId\": pm.environment.get(\"invoiceTransactionSummaryId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates the content of the fund type record",
					"     */",
					"    utils.validateFundType = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fund_type.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the fund record",
					"     */",
					"    utils.validateFund = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.fundStatus).to.exist;",
					"        pm.expect(jsonData.ledgerId).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fund.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the composite fund record",
					"     */",
					"    utils.validateCompositeFund = function (jsonData) {",
					"        pm.expect(jsonData.fund).to.exist;",
					"        utils.validateFund(jsonData.fund);",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_fund.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the budget record",
					"     */",
					"    utils.validateBudget = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.allocated).to.exist;",
					"        pm.expect(jsonData.budgetStatus).to.exist;",
					"        pm.expect(jsonData.fundId).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"budget.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the transaction record",
					"     */",
					"    utils.validateTransaction = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.amount).to.exist;",
					"        pm.expect(jsonData.currency).to.exist;",
					"        pm.expect(jsonData.source).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.transactionType).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"transaction.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the content of the ledger record",
					"    */",
					"    utils.validateLedger = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.ledgerStatus).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"ledger.json\")));",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates the content of the group record",
					"     */",
					"    utils.validateGroup = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.status).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"group.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the content of the fiscal year record",
					"    */",
					"    utils.validateFiscalYear = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.periodStart).to.exist;",
					"        pm.expect(jsonData.periodEnd).to.exist;",
					"        pm.expect(jsonData.series).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fiscal_year.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the content of the group fiscal year summary record",
					"    */",
					"    utils.validateGroupFiscalYearSummaries = function (jsonData) {",
					"        pm.expect(jsonData.groupId).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.allocated).to.exist;",
					"        pm.expect(jsonData.available).to.exist;",
					"        pm.expect(jsonData.unavailable).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"group_fiscal_year_summary.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the exchange rate",
					"    */",
					"    utils.validateExchangeRate = function (jsonData) {",
					"        pm.expect(jsonData.from).to.exist;",
					"        pm.expect(jsonData.to).to.exist;",
					"        pm.expect(jsonData.exchangeRate).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"exchange_rate.json\")));",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"budgetId\");",
					"        pm.environment.unset(\"budgetId2\");",
					"        pm.environment.unset(\"budgetContent2\");",
					"        pm.environment.unset(\"fiscalYearId\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"fundId2\");",
					"        pm.environment.unset(\"fundContent2\");",
					"        pm.environment.unset(\"fundTypeId\");",
					"        pm.environment.unset(\"fundTypeId2\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"xokapitoken-limitedUesr\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"gffyGroupId\");",
					"        pm.environment.unset(\"gffyLedgerId\");",
					"        pm.environment.unset(\"gffyFiscalYearId\");",
					"        pm.environment.unset(\"gffyFundTypeId\");",
					"        pm.environment.unset(\"gffyFundId\");",
					"        pm.environment.unset(\"groupFundFiscalYearId\");",
					"        pm.environment.unset(\"groupId\");",
					"        pm.environment.unset(\"testCurrentFiscalYearOneId\");",
					"        pm.environment.unset(\"testNextFiscalYearOneId\");",
					"        pm.environment.unset(\"currentFiscalYearId\");",
					"        pm.environment.unset(\"nextFiscalYearId\");",
					"        pm.environment.unset(\"currentFyLedgerId\");",
					"        pm.environment.unset(\"nextFyLedgerId\");",
					"        pm.environment.unset(\"currentFyFundId\");",
					"        pm.environment.unset(\"nextFyFundId\");",
					"        pm.environment.unset(\"testNegativeFiscalYearOneId\");",
					"        pm.environment.unset(\"afterNextFiscalYearId\");",
					"        pm.environment.unset(\"negativeLedgerId\");",
					"        pm.environment.unset(\"groupForCrudId\");",
					"        pm.environment.unset(\"groupId1\");",
					"        pm.environment.unset(\"groupId2\");",
					"        pm.environment.unset(\"allocFiscalYearId\");",
					"        pm.environment.unset(\"allocLedgerId\");",
					"        pm.environment.unset(\"toFundId\");",
					"        pm.environment.unset(\"allocBudgetId\");",
					"        pm.environment.unset(\"transactionId\");",
					"        pm.environment.unset(\"encFiscalYearId\");",
					"        pm.environment.unset(\"encLedgerId\");",
					"        pm.environment.unset(\"fromFundId\");",
					"        pm.environment.unset(\"encBudgetId\");",
					"        pm.environment.unset(\"encumbranceId\");",
					"        pm.environment.unset(\"transFiscalYearId\");",
					"        pm.environment.unset(\"transLedgerId\");",
					"        pm.environment.unset(\"transBudgetId\");",
					"        pm.environment.unset(\"transferId\");",
					"        pm.environment.unset(\"currentFiscalYearId\");",
					"        pm.environment.unset(\"nextFiscalYearId\");",
					"        pm.environment.unset(\"ledgerForCurrentFiscalYearId\");",
					"        pm.environment.unset(\"pcFiscalYearId\");",
					"        pm.environment.unset(\"pcLedgerId\");",
					"        pm.environment.unset(\"fromFundId\");",
					"        pm.environment.unset(\"allocBudgetId\");",
					"        pm.environment.unset(\"allocTransactionId\");",
					"        pm.environment.unset(\"invoiceTransactionSummaryId\");",
					"        pm.environment.unset(\"paymentTransactionId\");",
					"        pm.environment.unset(\"creditTransactionId\");",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function (jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "35391dc1-b312-41ff-91e2-9beccf0db463",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9e70e252-cf41-4d79-8887-677324fc674c",
			"key": "mod-financeResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-finance/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "8edf85bb-aa07-4ba9-9cf6-707f31075730",
			"key": "testTenant",
			"value": "finance_api_tests",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}