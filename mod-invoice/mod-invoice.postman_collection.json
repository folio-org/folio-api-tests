{
	"info": {
		"_postman_id": "56764627-081f-46c0-b4a5-9b0512eb0efd",
		"name": "mod-invoice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Login by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify required modules enabled",
					"item": [
						{
							"name": "mod-invoices is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-invoice",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-invoice"
										}
									]
								},
								"description": "Check if mod-invoices is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						},
						{
							"name": "mod-configuration is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-configuration",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-configuration"
										}
									]
								},
								"description": "Check if mod-configuration is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + configs);",
											"    pm.environment.set(\"mod-invoices-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"let bodyTemplate = testConfigs.bodyTemplate;",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    let existingConfig = utils.getConfigByName(configs, configName);",
											"    if (existingConfig) {",
											"        existingConfig.value = value;",
											"        utils.updateConfig(existingConfig);",
											"    } else {",
											"        bodyTemplate.configName = configName;",
											"        bodyTemplate.value = value;",
											"        utils.createConfig(bodyTemplate);",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICES"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f0c2518-826f-44fb-ab7e-11157f1e7187",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82ea9c5-8f62-4a16-bf56-907e3dcb4662",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f930ca9d-df31-4572-90c8-63f5243ae30e",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => clearTimeout(timerId))\r",
											"        .catch((err, req) => {\r",
											"            clearTimeout(timerId);\r",
											"            console.log(err);\r",
											"            console.log(req);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            pm.test(\"Schema content loaded: \" + path, () => pm.expect(err).to.equal(null));\r",
											"\r",
											"            if (!err) {\r",
											"                let content = replaceResponseRefWithName(response.text());\r",
											"                let name = extractName(path);\r",
											"                setEnvironmentVariable(name, content);\r",
											"                resolve();\r",
											"            } else {\r",
											"                reject(err, getRequest);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modInvoiceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "789cccc8-2479-48c7-ac26-5e35328874bd",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-invoice';\r",
											"\r",
											"utils.sendGetRequest('/_/proxy/tenants/' + pm.variables.get(\"xokapitenant\") + '/interfaces/_jsonSchemas', (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function () {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"    \tpm.variables.set('modInvoiceId', moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modInvoiceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b589a48-d3fa-4985-85c4-8b7dcda638a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b882afd4-d85f-4006-9746-08bea97bbdf5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create user",
					"item": [
						{
							"name": "Create new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/users/\" + globals.testData.user.id, (err, res) => {",
											"    pm.test(\"Check if user for API Tests already exists\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res.code).to.be.oneOf([200, 404]);",
											"        // If user already exists, check if this is for API Tests and delete it",
											"        if (res.code === 200 && res.json().username) {",
											"            utils.sendDeleteRequest(\"/users/\" + globals.testData.user.id, (err, res) => {",
											"                pm.test(\"User '\" + globals.testData.user.username + \"' deleted\", () => {",
											"                    pm.expect(res.code).to.eql(204);",
											"                });",
											"            });",
											"        }",
											"    });",
											"});",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/authn/credentials?query=userId=\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has credentials and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        utils.sendDeleteRequest(\"/authn/credentials/\" + res.json().credentials[0].id, (err, res) => {",
											"            pm.test(globals.testData.user.username + \" user's credentials deleted\", () => {",
											"                pm.expect(res.code).to.eql(204);",
											"            });",
											"        });",
											"    }",
											"});",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add only mod-invoice permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/perms/users?query=userId==\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has permissions and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        utils.sendDeleteRequest(\"/perms/users/\" + res.json().permissionUsers[0].id, (err, res) => {",
											"            pm.test(globals.testData.user.username + \" user's permissions deleted\", () => {",
											"                pm.expect(res.code).to.eql(204);",
											"            });",
											"        });",
											"    }",
											"});",
											"",
											"pm.variables.set(\"orgsUserPermissions\", JSON.stringify(globals.testData.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orgsUserPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"modInvoiceUserCreds\", JSON.stringify(globals.testData.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modInvoiceUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Min content invoice",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"minInvoiceId\", invoice.id);",
													"    pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    ",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get invoice by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice;",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // Validate fields",
													"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"minInvoiceId\"));",
													"   pm.response.to.have.jsonBody(\"folioInvoiceNo\", pm.environment.get(\"folioInvoiceNo\"));",
													"   // validate against schema",
													"   utils.validateInvoice(invoice);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Filter invoices",
							"item": [
								{
									"name": "Create another invoice for filtering",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"filterInvoiceId\", invoice.id);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
													"    let invoice = res.json().invoices[1];",
													"",
													"    delete invoice.id;",
													"    delete invoice.folioInvoiceNo;",
													"    invoice.note = \"Invoice to test filtering\";",
													"",
													"    pm.variables.set(\"invoiceToFilterContent\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceToFilterContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
													"    invoices = pm.response.json().invoices;",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices filter by query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
													"    invoices = pm.response.json().invoices;",
													"    console.log(invoices[0].note);",
													"    pm.expect(invoices[0].note).to.include('API Test');",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=1&query=note=\"API Test\"",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "query",
													"value": "note=\"API Test\""
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Invoice content is valid\", function() {",
											"    pm.expect(invoice.id).to.exist;",
											"    pm.expect(invoice.folioInvoiceNo).to.exist;",
											"    pm.environment.set(\"invoiceId\", invoice.id); ",
											"",
											"    utils.validateInvoice(invoice);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoice.json\", function (err, res) {",
											"    let invoice = res.json();",
											"",
											"    delete invoice.id;",
											"    delete invoice.folioInvoiceNo;",
											"    invoice.note = \"Invoice for API Test\";",
											"",
											"    pm.variables.set(\"invoiceContent\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete  invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Get invoice by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create empty invoice with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"     ",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"currency\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"invoiceDate\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"paymentMethod\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"approvalDate\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"status\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"source\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"totalAmount\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"vendorInvoiceNo\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"voucherNumber\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"paymentId\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"vendorId\").parameters[0].value).to.equal(\"null\");",
											"        ",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Delete invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete already deleted invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete invoices for positive tests",
					"item": [
						{
							"name": "Delete  invoice with minimal content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{minInvoiceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete  filter by invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{filterInvoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{filterInvoiceId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3576b999-c386-481e-8364-6f3c0b5523f2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83dafb48-cc84-4d0b-abdb-8c5457beba28",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete invoices for negative tests",
					"item": [],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aab5a49c-aca9-49a0-9d82-a849ee144f9f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd78a8af-536b-403b-8dda-d1f2a64c70c7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete user with mod-invoice permissions only",
					"item": [
						{
							"name": "Login by admin to delete test user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user's credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d4e68cd5-eca2-4427-ba8b-6f059a5fc130",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/authn/credentials?query=userId=\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has credentials and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        pm.variables.set(\"credentialsId\", res.json().credentials[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ff89363-4db6-40bc-a848-e7532b2a7bc0",
										"exec": [
											"let testFunc = pm.variables.get(\"credentialsId\") ? pm.test : pm.test.skip;",
											"testFunc(\"Credentials deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{credentialsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{credentialsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user's permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "234a882a-edd7-4bac-8bc2-7f89c8a7a713",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/perms/users?query=userId==\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has permissions and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        pm.variables.set(\"permissionsId\", res.json().permissionUsers[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f74eb5c8-1652-480c-9fac-356b3a3ffc56",
										"exec": [
											"let testFunc = pm.variables.get(\"permissionsId\") ? pm.test : pm.test.skip;",
											"testFunc(\"Permissions deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{permissionsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{permissionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "123459a0-b737-4767-a32c-1c5692b8d920",
										"exec": [
											"pm.variables.set(\"userId\", pm.globals.get(\"testData\").user.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac493f0c-3e8c-4c07-94d2-6105617f0384",
										"exec": [
											"pm.test(\"User deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{userId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "51550a77-35a8-45ab-bf74-f093a8202d42",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0decf5ff-c87f-4041-a8cd-ef1a9f2003bd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Revert configs",
					"item": [
						{
							"name": "Get configs and revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let currentConfigs;",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    currentConfigs = pm.response.json().configs;",
											"    console.log(\"Current configs: \", currentConfigs);",
											"});",
											"",
											"let configsToProcess = globals.testData.configs.configNames;",
											"let originalConfigs = pm.environment.get(\"mod-invoices-configs\") ? JSON.parse(pm.environment.get(\"mod-invoices-configs\")) : [];",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configName = configsToProcess[i];",
											"    let originalConfig = utils.getConfigByName(originalConfigs, configName);",
											"    if (originalConfig) {",
											"        utils.updateConfig(originalConfig);",
											"    } else if (currentConfigs.length > 0) {",
											"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
											"        utils.deleteConfig(configId);",
											"    } else {",
											"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
											"    }",
											"}",
											"",
											"// Remove all created variables",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICES"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e07ce59d-212b-4673-9fd7-346a4ca947e2",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [\"invoiceLines-limit\"],",
					"        bodyTemplate: {",
					"            \"module\": \"INVOICES\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    user: {",
					"        \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"        \"username\": \"mod-invoice-user\",",
					"        \"active\": true,",
					"        \"personal\": {",
					"            \"firstName\": \"Invoice First Name\",",
					"            \"lastName\": \"Invoice Last Name\"",
					"        }",
					"    },",
					"    credentials: {",
					"        \"username\": \"mod-invoice-user\",",
					"        \"password\": \"mod-invoice-user-password\"",
					"    },",
					"    permissions: {",
					"        \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"        \"permissions\": [\"invoice.all\"]",
					"    }",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.schemaPrefix = \"invoices_schema_\";",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function(path) {",
					"        return new Promise((resolve) => {",
					"            pm.sendRequest({",
					"                url: utils.buildOkapiUrl(path),",
					"                method: \"DELETE\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\")",
					"                }",
					"            }, function(err, response) {",
					"                resolve(response.code);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function(code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function() {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigByName = function(configs, configName) {",
					"        let config = configs.filter(value => value.configName === configName);",
					"        return config.length > 0 ? config[0] : null;",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/configurations/entries\"),",
					"            method: \"POST\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function(err, response) {",
					"            pm.test(\"Config created\", function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/configurations/entries/\" + body.id),",
					"            method: \"PUT\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function(err, response) {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest({",
					"                url: utils.buildOkapiUrl(path),",
					"                method: \"GET\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"                }",
					"            },",
					"            handler",
					"        );",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(",
					"            {",
					"                url: utils.buildOkapiUrl(path),",
					"                method: \"DELETE\",",
					"                header: {",
					"                    \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                    \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"                }",
					"            },",
					"            handler",
					"        );",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.environment.unset(\"invoiceId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"mod-invoices-configs\");",
					"",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        console.log(\"Starting validating against schemas\");",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils.validateInvoice = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice.json\")));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice is empty except required fields, invoice id and folioInvoiceNo",
					"     */",
					"    utils.validateInvoiceWithMinimalContent = function(invoice) {",
					"        pm.expect(invoice.id, \"Invoice id expected\").to.exist;",
					"        pm.expect(invoice.currency, \"Invoice currency expected\").to.exist;",
					"        pm.expect(invoice.invoiceDate, \"invoiceDate expected\").to.exist;",
					"        pm.expect(invoice.paymentMethod, \"paymentMethod expected\").to.exist;",
					"        pm.expect(invoice.approvalDate, \"approvalDate expected\").to.exist;",
					"        pm.expect(invoice.status, \"status expected\").to.exist;",
					"        pm.expect(invoice.folioInvoiceNo, \"folioInvoiceNo expected\").to.exist;",
					"        pm.expect(invoice.source, \"source expected\").to.exist;",
					"        pm.expect(invoice.totalAmount, \"totalAmount expected\").to.exist;",
					"        pm.expect(invoice.vendorInvoiceNo, \"vendorInvoiceNo expected\").to.exist;",
					"        pm.expect(invoice.voucherNumber, \"voucherNumber expected\").to.exist;",
					"        pm.expect(invoice.paymentId, \"paymentId expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"vendorId expected\").to.exist;",
					"        pm.expect(invoice.approvedBy, \"approvedBy not expected\").to.not.exist;",
					"        pm.expect(invoice.chkSubscriptionOverlap, \"chkSubscriptionOverlap should be empty\").to.not.exist;",
					"        pm.expect(invoice.note, \"note not expected\").to.exist;",
					"        pm.expect(invoice.owner, \"owner not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentDue, \"paymentDue not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentTerms, \"paymentTerms not expected\").to.not.exist;",
					"        pm.expect(invoice.prorata, \"prorata is true\").to.be.true;",
					"        pm.expect(invoice.disbursementNumber, \"disbursementNumber not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementDate, \"disbursementDate not expected\").to.not.exist;",
					"        pm.expect(invoice.poNumbers, \"poNumbers should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(invoice.manualPayment, \"manualPayment not exist\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Build invoice with minimal required fields.",
					"     */",
					"    utils.buildInvoiceWithMinContent = function() {",
					"        return {",
					"            \"approvalDate\": \"2018-07-29T00:00:00.000+0000\",",
					"            \"currency\": \"USD\",",
					"            \"invoiceDate\": \"2018-07-20T00:00:00.000+0000\",",
					"            \"note\": \"Invoice for API Test\",",
					"            \"paymentMethod\": \"EFT\",",
					"            \"status\": \"Open\",",
					"            \"source\": \"024b6f41-c5c6-4280-858e-33fba452a334\",",
					"            \"totalAmount\": 5,",
					"            \"vendorInvoiceNo\": \"YK75851\",",
					"            \"voucherNumber\": \"478\",",
					"            \"paymentId\": \"a5065f0d-fb88-4d23-b0c1-57e754fba40e\",",
					"            \"vendorId\": \"168f8a63-d612-406e-813f-c7527f241ac3\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "55006f90-5989-4448-9d61-ff39c3e3191b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "6d892cb1-4ddc-4efb-a716-2a4fea4e603d",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-invoice/master/src/test/resources",
			"type": "string"
		}
	]
}