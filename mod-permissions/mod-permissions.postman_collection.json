{
	"info": {
		"_postman_id": "85ef3d93-0fbe-46b7-b36a-026697f59f48",
		"name": "mod-permissions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "authentication",
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "permissions",
			"item": [
				{
					"name": "/perms/permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1db826d-81af-42fd-864b-84846153c00e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionListObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b352a58d-2367-4544-becf-61bae69e4f71",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions?length=50",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							],
							"query": [
								{
									"key": "length",
									"value": "50"
								}
							]
						},
						"description": "Get List of permissions the are avaialable in the FOLIO system."
					},
					"response": []
				},
				{
					"name": "/perms/permissions sub perm one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf0116b-a6d0-417d-827a-49419279c251",
								"exec": [
									"",
									"const response = JSON.parse(responseBody);",
									"",
									"//Set subPermssionID so we can use in other tests ",
									"pm.environment.set(\"currentSubPermissionId1\", response.id);",
									"",
									"pm.test(\"New permission was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"",
									"});",
									"",
									"//verify schema",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(response, pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing.length).to.equal(0);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d46a3ee-3860-4ccc-af74-a9e88e6089fc",
								"exec": [
									"/*This pre request script is doing following steps",
									"    1.Set envirnoment variable currentSubPermissionName1",
									"    2.Get the list of permissions with value set above in this case \"fake.sub.permission.one\"",
									"    3.Delete the existing permissions so the rest of the rests wont fail.",
									"",
									"*/",
									"const permissionName = 'fake.sub.permission.one'",
									"pm.environment.set(\"currentSubPermissionName1\", permissionName);",
									"",
									"const uuid = require('uuid');",
									"",
									"const permGetRequest = {",
									"    url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}/perms/permissions?query=(permissionName==\"${permissionName}\")` ,",
									"    method: 'GET',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"    }",
									"}",
									"",
									"const permDeleteRequest = (id) => {",
									"    return {",
									"    url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}//perms/permissions/${id}` ,",
									"    method: 'DELETE',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"        }",
									"    }",
									"}",
									"",
									" pm.sendRequest(permGetRequest,  (err, res) => {",
									"    if(err){",
									"        throw err;",
									"    }",
									"    if(res.code !== 200){",
									"       return;",
									"    }",
									"    if(res.json().totalRecords ===0){",
									"        console.log('no Permissions to delete ');",
									"        return;",
									"    }",
									"    pm.sendRequest(permDeleteRequest(res.json().permissions[0].id),  (err, res)=> {",
									"        if(err){",
									"            throw err;",
									"        }",
									"        if(res.code !== 204){",
									"           console.log('Error deleting the existing permission');",
									"        }",
									"       ",
									"      })",
									" })",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"permissionName\":\"{{currentSubPermissionName1}}\",\n  \"displayName\": \"fake sub perm one\",\n  \"description\": \"fake sub permission one\",\n  \"visible\": true,\n  \"mutable\" : true,\n  \"tags\": [\n    \"tag1\",\n    \"tag2\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							]
						},
						"description": "Creating the first sub permission."
					},
					"response": []
				},
				{
					"name": "/perms/permissions sub perm two",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ebc50c5-4d7c-4063-b4ea-cbc7c899d3a3",
								"exec": [
									"",
									"const response = JSON.parse(responseBody);",
									"//Set subPermssionID so we can use in other tests ",
									"pm.environment.set(\"currentSubPermissionId2\", response.id);",
									"",
									"pm.test(\"New permission was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"",
									"});",
									"//verify schema",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(response, pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing.length).to.equal(0);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "940cb7ea-4889-43cb-8d3e-fe6edbcdd30d",
								"exec": [
									"/*This pre request script is doing following steps",
									"    1.Set envirnoment variable currentSubPermissionName2",
									"    2.Get the list of permissions with value set above in this case \"fake.sub.permission.two\"",
									"    3.Delete the existing permissions so the rest of the rests wont fail.",
									"",
									"*/",
									"",
									"const permissionName = 'fake.sub.permission.two';",
									"pm.environment.set(\"currentSubPermissionName2\", permissionName);",
									"",
									"const uuid = require('uuid');",
									"const permGetRequest = {",
									"    url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}/perms/permissions?query=(permissionName==\"${permissionName}\")` ,",
									"    method: 'GET',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"    }",
									"};",
									"",
									"const permDeleteRequest = (id) => {",
									"    return {",
									"    url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}//perms/permissions/${id}` ,",
									"    method: 'DELETE',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"        }",
									"    };",
									"};",
									" pm.sendRequest(permGetRequest,  (err, res) =>{",
									"    if(err){",
									"        throw err;",
									"    }",
									"    if(res.code !== 200){",
									"       return;",
									"    }",
									"    if(res.json().totalRecords ===0){",
									"        console.log('no Permissions to delete ');",
									"        return;",
									"    }",
									"    pm.sendRequest(permDeleteRequest(res.json().permissions[0].id),  (err, res)=> {",
									"        if(err){",
									"            throw err;",
									"        }",
									"        if(res.code !== 204){",
									"           console.log('Error deleting the existing permission');",
									"        }",
									"       ",
									"      });",
									" });",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"permissionName\":\"{{currentSubPermissionName2}}\",\n  \"displayName\": \"fake sub perm two\",\n  \"description\": \"fake sub permission two\",\n  \"visible\": true,\n  \"mutable\" : true,\n  \"tags\": [\n    \"tag1\",\n    \"tag2\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions perm1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dd77109-aa6e-4e5e-8891-a3dfd4c1699a",
								"exec": [
									"",
									"const response = JSON.parse(responseBody);",
									"pm.environment.set(\"currentPermissionId\", response.id);",
									"",
									"//",
									"pm.test(\"New permission was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"     pm.expect(response.description).to.eql(\"fake permission with fake sub permissions\");",
									"",
									"});",
									"",
									"//verify schema",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(response, pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing.length).to.equal(0);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72bd147f-5546-49ce-9ba0-c9480004ca71",
								"exec": [
									"",
									"/*This pre request script is doing following steps",
									"    1.Set envirnoment variable currentPermissionName",
									"    2.Get the list of permissions with value set above in this case \"fake.permission.one\"",
									"    3.Delete the existing permissions so the rest of the rests wont fail.",
									"",
									"*/",
									"const permissionName = 'fake.permission.one'",
									"pm.environment.set(\"currentPermissionName\", permissionName);",
									"",
									"const uuid = require('uuid');",
									"const permGetRequest = {",
									"    url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}/perms/permissions?query=(permissionName==\"${permissionName}\")` ,",
									"    method: 'GET',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"    }",
									"}",
									"",
									"const permDeleteRequest = (id) => {",
									"    return {",
									"    url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}/perms/permissions/${id}` ,",
									"    method: 'DELETE',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"        }",
									"    }",
									"}",
									"",
									" pm.sendRequest(permGetRequest,  (err, res) => {",
									"    if(err){",
									"        throw err;",
									"    }",
									"    if(res.code !== 200){",
									"       return;",
									"    }",
									"    if(res.json().totalRecords ===0){",
									"        console.log('no Permissions to delete ');",
									"        return;",
									"    }",
									"    pm.sendRequest(permDeleteRequest(res.json().permissions[0].id),  (err, res)=> {",
									"        if(err){",
									"            throw err;",
									"        }",
									"        if(res.code !== 204){",
									"           console.log('Error deleting the existing permission');",
									"        }",
									"       ",
									"      });",
									" });",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"permissionName\":\"{{currentPermissionName}}\",\n  \"displayName\": \"fake perm one\",\n  \"description\": \"fake permission with fake sub permissions\",\n  \"visible\": true,\n  \"mutable\" : true,\n  \"subPermissions\":[\n  \t\"{{currentSubPermissionName1}}\",\n  \t\"{{currentSubPermissionName2}}\"\n  \t],\n  \"tags\": [\n    \"tag1\",\n    \"tag2\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							]
						},
						"description": "Create a permission with sub permission one and sub permission two."
					},
					"response": []
				},
				{
					"name": "/perms/permissions perm2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b535076-7b7a-458c-b3ae-260ef7d78f6f",
								"exec": [
									"",
									"//returns status 201 when it is not adding the permission is not created",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"currentPermissionId2\", response.id);",
									"//",
									"pm.test(\"New permission was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"     pm.expect(response.description).to.eql(\"fake permission with fake sub permissions\");",
									"",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(response, pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing.length).to.equal(0);",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "91796b2e-a77c-4039-b282-8c6662279bb4",
								"exec": [
									"/*This pre request script is doing following steps",
									"    1.Set envirnoment variable currentPermissionName2",
									"    2.Get the list of permissions with value set above in this case \"fake.permission.two\"",
									"    3.Delete the existing permissions so the rest of the rests wont fail.",
									"*/",
									"",
									"const permissionName = 'fake.permission.two'",
									"pm.environment.set(\"currentPermissionName2\", permissionName);",
									"",
									"const uuid = require('uuid');",
									"const permGetRequest = {",
									"    url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}/perms/permissions?query=(permissionName==\"${permissionName}\")` ,",
									"    method: 'GET',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"    }",
									"}",
									"",
									"const permDeleteRequest = (id) => {",
									"    return {",
									"    url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}/perms/permissions/${id}` ,",
									"    method: 'DELETE',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"        }",
									"    }",
									"}",
									"",
									" pm.sendRequest(permGetRequest,  (err, res)=> {",
									"    if(err){",
									"        throw err;",
									"    }",
									"    if(res.code !== 200){",
									"       return;",
									"    }",
									"    if(res.json().totalRecords ===0){",
									"        console.log('no Permissions to delete ');",
									"        return;",
									"    }",
									"    pm.sendRequest(permDeleteRequest(res.json().permissions[0].id),  (err, res) =>{",
									"        if(err){",
									"            throw err;",
									"        }",
									"        if(res.code !== 204){",
									"           console.log('Error deleting the existing user');",
									"        }",
									"       ",
									"      });",
									" });",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"permissionName\":\"{{currentPermissionName2}}\",\n  \"displayName\": \"fake perm two\",\n  \"description\": \"fake permission with fake sub permissions\",\n  \"visible\": true,\n  \"mutable\" : true,\n  \"subPermissions\":[\n  \t\"{{currentSubPermissionName2}}\"\n  \t],\n  \"tags\": [\n    \"tag1\",\n    \"tag2\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							]
						},
						"description": "Create a permission with sub permission two."
					},
					"response": []
				},
				{
					"name": "/perms/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4d5bd2c-4f7b-4719-bbee-09b48fe4478c",
								"exec": [
									"",
									"const response = JSON.parse(responseBody);",
									"//set data",
									"pm.environment.set(\"newpermissionuserid\", response.id);",
									"",
									"pm.test(\"New permission for the user was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"//verify schema",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionUser.schema\"))).to.be.true;",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a37e343-8ff8-4c0a-9b8b-47900e4081cd",
								"exec": [
									"/*This pre request script is doing following steps",
									"    1.Get the list of patrongroups available",
									"    2.Get the user with username \"permUser\"",
									"        1.If Exists delete the user and create a new user.",
									"        1.If does not Exists create a new user.",
									"*/",
									"",
									"const uuid = require('uuid');",
									"const username = 'permUser'",
									"const userGetRequest = {",
									"    url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}/users?query=(username==\"${username}\")` ,",
									"    method: 'GET',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"    }",
									"}",
									"",
									"const createUser = () => pm.sendRequest(usersPostRequest,  (err, res)=> {",
									"            if(err){",
									"                throw err;",
									"            }",
									"            if(res.code !== 201){",
									"               console.log('error creating the user')",
									"            }",
									"            pm.environment.set('testUserid', res.json().id)",
									"         })",
									"",
									"",
									"const userDeleteRequest = (id) => {",
									"    return {",
									"        url: `${pm.environment.get('protocol')}://${pm.environment.get('url')}:${pm.environment.get('okapiport')}/users/${id}` ,",
									"        method: 'DELETE',",
									"        header: {",
									"            'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"            'x-okapi-token': pm.environment.get('xokapitoken')",
									"        }",
									"    };",
									"};",
									"",
									"",
									"const usersPostRequest = {",
									"  url: pm.environment.get('protocol') + '://' + pm.environment.get('url') + ':' + pm.environment.get('okapiport') + '/users',",
									"  method: 'POST',",
									"  header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken'),",
									"        'Content-type':'application/json'",
									"    },",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({",
									"          username: username,",
									"          id: uuid.v4(),",
									"          active: true,",
									"          type: \"patron\",",
									"          patronGroup:pm.environment.get('newusergroupid'),",
									"          personal: {",
									"            lastName: \"user\",",
									"            firstName: \"PermissionsTest\",",
									"            email: \"test@gmail.com\"",
									"          }",
									"        })",
									"     }",
									"};",
									"",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get('protocol') + '://' + pm.environment.get('url') + ':' + pm.environment.get('okapiport') + '/groups' ,",
									"    method: 'GET',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"    }",
									"},  (err, res)=> {",
									"    if(res.json().usergroups.length >0){",
									"        pm.environment.set('newusergroupid', res.json().usergroups[0].id);",
									"         pm.sendRequest(userGetRequest,  (err, res)=> {",
									"            if(err){",
									"                throw err;",
									"            }",
									"            if(res.code !== 200){",
									"               return;",
									"            }",
									"            if(res.json().totalRecords ===0){",
									"                console.log('no user to delete ');",
									"                createUser();",
									"                return;",
									"            }",
									"            pm.sendRequest(userDeleteRequest(res.json().users[0].id),  (err, res)=> {",
									"                if(err){",
									"                    throw err;",
									"                }",
									"                if(res.code !== 204){",
									"                   console.log('Error deleting the existing user');",
									"                }",
									"                createUser();",
									"              });",
									"         });",
									"     ",
									"    }",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\":\"{{testUserid}}\",\r\n  \"permissions\":[\"{{currentPermissionName}}\"]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users"
							]
						},
						"description": "Assign permissions and permission sets for a specific user."
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions query:expanded=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea4ca1c8-2956-484e-b582-fab272091af2",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"permissionNameObject.json\", pm.variables.get(\"permissionNameObject.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionNameListObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate expanded false query\", function () {",
									"    pm.expect(pm.response.json().totalRecords).to.be.equal(1);",
									"});",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{newpermissionuserid}}/permissions?expanded=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{newpermissionuserid}}",
								"permissions"
							],
							"query": [
								{
									"key": "expanded",
									"value": "false"
								}
							]
						},
						"description": "Get list of permissionNames with only the parent permissions"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions query expanded true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa394d7c-a556-4b36-9f7d-df3009c16c53",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate expanded true query\", function () {",
									"    pm.expect(pm.response.json().totalRecords).to.be.equal(3);",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"permissionNameObject.json\", pm.variables.get(\"permissionNameObject.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionNameListObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "893de7f1-74de-448b-9093-31ccd5de39ea",
								"exec": [
									"// pause to allow perms cache to expire (30s)",
									"setTimeout(function(){}, 35000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{newpermissionuserid}}/permissions?expanded=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{newpermissionuserid}}",
								"permissions"
							],
							"query": [
								{
									"key": "expanded",
									"value": "true"
								}
							]
						},
						"description": "Get list of permissionNames including all the parent and child/sub permissions"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions query:full=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a3f841f-d88a-4431-9ac3-884dcbc05ac4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{newpermissionuserid}}/permissions?full=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{newpermissionuserid}}",
								"permissions"
							],
							"query": [
								{
									"key": "full",
									"value": "true"
								}
							]
						},
						"description": "Get list of permissionNames in breif"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions query(indexfield=userid)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06a74661-95ce-47d1-b9ae-c1711f42a836",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{testUserid}}/permissions?indexField=userId&full=false",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{testUserid}}",
								"permissions"
							],
							"query": [
								{
									"key": "indexField",
									"value": "userId"
								},
								{
									"key": "full",
									"value": "false"
								}
							]
						},
						"description": "Get list of permissionNames as list of string names with a query filter on indexfield=userid"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bcd4672-a47b-46e0-98cd-790845b792ad",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"permissionName\": \"{{currentPermissionName2}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{newpermissionuserid}}/permissions?indexField=id",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{newpermissionuserid}}",
								"permissions"
							],
							"query": [
								{
									"key": "indexField",
									"value": "id"
								}
							]
						},
						"description": "Add fake.permission.two to the user"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3eb07c72-9221-475a-91df-11012bd1c426",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"//verify header",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"permissionName\": \"{{currentPermissionName2}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{testUserid}}/permissions?indexField=userId",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{testUserid}}",
								"permissions"
							],
							"query": [
								{
									"key": "indexField",
									"value": "userId"
								}
							]
						},
						"description": "Add already existing permission fake.permission.two to the user"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "549c84cf-86e1-46f4-9cab-cd263c7c264b",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"//verify header",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"permissionName\": \"{{currentPermissionName2}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{testUserid}}/permissions?indexField=id",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{testUserid}}",
								"permissions"
							],
							"query": [
								{
									"key": "indexField",
									"value": "id"
								}
							]
						},
						"description": "POST user with ID that doesnot exist"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions (400 - invalid user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f9e17d4-efb0-40a3-b983-4948a715b2ef",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//verify header",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"permissionName\": \"{{currentPermissionName2}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/234/permissions?indexField=id",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"234",
								"permissions"
							],
							"query": [
								{
									"key": "indexField",
									"value": "id"
								}
							]
						},
						"description": "Add permissions with invalid userID 234"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions/permissionname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1e8d42c-aed0-4009-a91f-4e7617358bad",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"permissionName\": \"{{currentPermissionName2}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{newpermissionuserid}}/permissions/{{currentPermissionName2}}?indexField=id",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{newpermissionuserid}}",
								"permissions",
								"{{currentPermissionName2}}"
							],
							"query": [
								{
									"key": "indexField",
									"value": "id"
								}
							]
						},
						"description": "Delete fake.permission.two permission from the user"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}/permissions/permissionname 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d86e3532-a3fe-4d4a-be62-f3266678022f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response does not have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     ",
									"});",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"permissionName\": \"{{currentPermissionName2}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{newpermissionuserid}}/permissions/{{currentPermissionName2}}?indexField=id",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{newpermissionuserid}}",
								"permissions",
								"{{currentPermissionName2}}"
							],
							"query": [
								{
									"key": "indexField",
									"value": "id"
								}
							]
						},
						"description": "Delete the Permission from the user which does not contain fake.permission.two"
					},
					"response": []
				},
				{
					"name": "/perms/permissions 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35a28e28-7915-4102-8607-3ffd0ca25c7d",
								"type": "text/javascript",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.have.status(\"Unprocessable Entity\");",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0cdc6eb1-05d8-42b2-bc42-895b4e2cfcc6",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"permissionName\":\"{{currentPermissionName}}\",\n  \"displayName\": \"fake perm one\",\n  \"description\": \"fake permission with fake sub permissions\",\n  \"visible\": true,\n  \"mutable\" : false,\n  \"subPermissions\": [\n    \"foo1\",\n    \"foo2\",\n    \"foo3\",\n    \"foo4\"\n  ],\n  \"tags\": [\n    \"tag1\",\n    \"tag2\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							]
						},
						"description": "POST Permission with name fake.permission.one that already exists"
					},
					"response": []
				},
				{
					"name": "/perms/permissions 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9de367b5-8d2f-42ff-be1b-f1fa7e3fecf6",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"",
									"//verify header",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72f66721-8915-489c-9a83-ea28025093e3",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"permissionName\":\"fake.permission.two\",\n  \"displayName\": \"fake perm two\",\n  \"description\": \"fake permission with fake sub permissions\",\n  \"visible\": true,\n  \"mutable\" : true\n  \"subPermissions\": [\n    \"foo1\",\n    \"foo2\",\n    \"foo3\",\n    \"foo4\"\n  ],\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							]
						},
						"description": "Malformated JSON body"
					},
					"response": []
				},
				{
					"name": "/perms/permissions 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03643f5f-4ff8-4530-9278-36ef8d4cac0a",
								"type": "text/javascript",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.have.status(\"Unprocessable Entity\");",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "85d13baf-34ea-45f3-9055-4a1db80ec266",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"permissionName\":\"fake.permission.three\",\n  \"displayName\": \"fake perm one\",\n  \"description\": \"fake permission with fake sub permissions\",\n  \"visible\": true,\n  \"mutable\" : true,\n  \"subPermissions\": [\n    \"foo1\",\n    \"foo2\",\n    \"foo3\",\n    \"foo4\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							]
						},
						"description": "Attempting to add non-existent permissions as sub-permisisons"
					},
					"response": []
				},
				{
					"name": "/perms/permissions 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93e24686-2e9d-4151-84e2-7a8fd2c6a0f3",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"",
									"//verify header",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c9f12b9a-068e-476d-9f65-2f0b5d541f27",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \"description\": \"fake permission with fake sub permissions\",\n  \"visible\": true,\n  \"mutable\" : \"dsfdf\",\n  \"subPermissions\": [\n    \"foo1\",\n    \"foo2\",\n    \"foo3\",\n    \"foo4\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							]
						},
						"description": "POST request with mutable attribute as string rather than boolean"
					},
					"response": []
				},
				{
					"name": "/perms/permissions 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56887426-af97-43c5-bb0f-b9ce4fed3604",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"",
									"//verify header",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c9f12b9a-068e-476d-9f65-2f0b5d541f27",
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n  \n  \"description\": \"fake permission with fake sub permissions\",\n  \"visible\": \"dfdfdf\",\n  \"mutable\" : true,\n  \"subPermissions\": [\n    \"foo1\",\n    \"foo2\",\n    \"foo3\",\n    \"foo4\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							]
						},
						"description": "POST request with visible attribute as string rather than boolean"
					},
					"response": []
				},
				{
					"name": "/perms/users 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bbca7f5-4a12-485b-b2f5-d011d2f78285",
								"type": "text/javascript",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.have.status(\"Unprocessable Entity\");",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":\"{{newpermissionuserid}}\",\r\n  \"userId\": \"{{testUserid}}\",\r\n  \"permissions\":[\"{{currentSubPermissionId2}}\"]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users"
							]
						},
						"description": "POST with same existing userid and permissionuserid"
					},
					"response": []
				},
				{
					"name": "/perms/users (missing id 422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "557dbbf7-5ed6-4460-9fd6-de4e6062374c",
								"exec": [
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"",
									"//verify header",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\":true,\r\n  \"permissions\":[\"{{currentPermissionName}}\"]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users"
							]
						},
						"description": "POST with invalid userID"
					},
					"response": []
				},
				{
					"name": "/perms/users 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09ad835b-5703-46c2-aea6-72bf8cd9b928",
								"type": "text/javascript",
								"exec": [
									"",
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response must have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"mypermsuserid\",\r\n  \"userId\": \"fakeuserid\"\r\n  \"permissions\":[]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users"
							]
						},
						"description": "malformed json"
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentPermissionId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5a7c612-6a2c-4c82-a655-9bea6a0a985d",
								"exec": [
									"pm.test(\"Permission was successfully updated. Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing.length).to.equal(0);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "63a45850-2a30-412a-bbe8-bbc9beb0ea2e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{currentPermissionId}}\",\n  \"permissionName\": \"{{currentPermissionName}}\",\n  \"displayName\": \"fake sub perm one\",\n  \"description\": \"fake permission with fake sub permissions updated\",\n  \"visible\": true,\n  \"mutable\":false,\n  \"subPermissions\": [\n   \"{{currentSubPermissionName2}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentPermissionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentPermissionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentPermissionId}} 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10deff65-3818-4a17-9130-eec2e3c1427d",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"",
									"//verify header",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d61d747a-8788-4447-8973-d04443980588",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"permissionName\": \"{{currentPermissionName}}\",\n  \"description\": \"fake permission with fake sub permissions updated\",\n  \"visible\": true,\n  \"mutable\":false,\n  \"subPermissions\": [\n   \"{{currentSubPermissionName2}}\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentPermissionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentPermissionId}}"
							]
						},
						"description": "POST with no no id attribute in request"
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentPermissionId}} 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8a4b2f5-299e-4a17-9df0-28ef7781fc49",
								"type": "text/javascript",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.have.status(\"Unprocessable Entity\");",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "12f99351-b931-4b40-b0b2-4008404bc6f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{currentPermissionId}}\",\n  \"permissionName\": \"{{currentPermissionName}}\",\n  \"description\": \"fake permission with fake sub permissions updated\",\n  \"visible\": true,\n  \"mutable\":true,\n  \"subPermissions\": [\n    \"foo1\",\n    \"foo2\",\n    \"foo3\",\n    \"foo4\",\n    \"foo5\",\n    \"foo7\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentPermissionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentPermissionId}}"
							]
						},
						"description": "PUT with non existing sub/child permissions"
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentPermissionId}} 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bdc050b-a36a-4a0c-86ab-45eef07536b4",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"",
									"//verify header",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "12f99351-b931-4b40-b0b2-4008404bc6f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{currentPermissionId}}\",\n  \"permissionName\": \"fake.permission.two\",\n  \"description\": \"fake permission with fake sub permissions updated\",\n  \"visible\": true,\n  \"mutable\":true\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentPermissionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentPermissionId}}"
							]
						},
						"description": "PUT to update permission name since that property cannot change"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dfe9bf6-9d6e-4c16-9e09-0e87054cde5e",
								"type": "text/javascript",
								"exec": [
									"",
									"// so we can add fake user  without  permissions???",
									"",
									"var response = JSON.parse(responseBody);",
									"//pm.environment.set(\"newpermissionuserid\", response.id);",
									"",
									"//",
									"pm.test(\" Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"    });",
									"    ",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionUser.schema\"))).to.be.true;",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":\"{{newpermissionuserid}}\",\r\n  \"userId\": \"{{testUserid}}\",\r\n  \"permissions\":[\"{{currentSubPermissionName2}}\"]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{newpermissionuserid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{newpermissionuserid}}"
							]
						},
						"description": "Update user permissions set"
					},
					"response": []
				},
				{
					"name": "/perms/permissions /{{currentPermissionId}} ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b52432f4-e66c-4c8c-bfa3-0ac4c1b16f46",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing.length).to.equal(0);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "caee0913-98cf-4a61-8fc1-5e9b6365c382",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentPermissionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentPermissionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions /{{currentSubPermissionId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f38cf3ca-8f4f-4695-acec-13d36fb8898b",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"//verify body",
									"",
									"pm.test(\"Response must be valid childOf and grantedto\", function () {",
									"    pm.expect(pm.environment.get(\"currentPermissionName\")).to.be.equal(response.childOf[0]);",
									"    pm.expect(pm.environment.get(\"newpermissionuserid\")).to.be.equal(response.grantedTo[0]);",
									"});",
									"",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing.length).to.equal(0);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentSubPermissionId2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentSubPermissionId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions - query description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87235fac-e803-4c64-bf4e-624868cda7bb",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing.length).to.equal(0);",
									"});",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions?length=100&query=(description=fake permission with fake sub permissions)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							],
							"query": [
								{
									"key": "length",
									"value": "100"
								},
								{
									"key": "query",
									"value": "(description=fake permission with fake sub permissions)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions - query:expandSubs=false",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82d751d3-c8bd-48b0-8854-c35f38ba4e09",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body with subpermissions empty\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate expand sub permission false\", function () {",
									"    pm.expect(response.permissions[0].subPermissions[0]).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing.length).to.equal(0);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions?expandSubs=false&query=(description=fake permission with fake sub permissions)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							],
							"query": [
								{
									"key": "expandSubs",
									"value": "false"
								},
								{
									"key": "query",
									"value": "(description=fake permission with fake sub permissions)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions -  query:expandSubs=true",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f7053fe-4256-41fc-8383-6d21cf668008",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body with subpermissions empty\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate expand sub permission true\", function () {",
									"    pm.expect(response.permissions[0].subPermissions[0]).to.be.a('object');",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionNameObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions?expandSubs=true&query=(description=fake permission with fake sub permissions)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							],
							"query": [
								{
									"key": "expandSubs",
									"value": "true"
								},
								{
									"key": "query",
									"value": "(description=fake permission with fake sub permissions)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users query:hasPermissions NOT WORKING",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ece72c1-b508-420a-a87e-0353c7f3990e",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    tv4.addSchema(\"permissionUser.json\", pm.variables.get(\"permissionUser.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionUserListObject.schema\"))).to.be.true;",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users?length=50&hasPermissions={{currentSubPermissionName2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users"
							],
							"query": [
								{
									"key": "length",
									"value": "50"
								},
								{
									"key": "hasPermissions",
									"value": "{{currentSubPermissionName2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users 500 Malformated Query start=0",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f394e508-5c3b-49db-a51b-8a771f414b43",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"    pm.response.to.have.status(\"Internal Server Error\");",
									"});",
									"",
									"",
									"//verify header",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users?start=0",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users"
							],
							"query": [
								{
									"key": "start",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}} hasPermissions Query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01adbcf7-c272-491d-b42e-fce29bcac41a",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionUser.schema\"))).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"validate hasPermissions query\", function () {",
									"    pm.expect(response.permissions.length).to.be.equal(1);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{newpermissionuserid}}?hasPermissions=\"{{currentPermissionName}}\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{newpermissionuserid}}"
							],
							"query": [
								{
									"key": "hasPermissions",
									"value": "\"{{currentPermissionName}}\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}} Indexfield query",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f71210a9-b661-46ac-a21b-ad196212b54c",
								"exec": [
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"../metadata.schema\", pm.variables.get(\"metadata.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionUser.schema\"))).to.be.true;",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{testUserid}}?indexField=userId",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{testUserid}}"
							],
							"query": [
								{
									"key": "indexField",
									"value": "userId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}} 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "497556d9-c353-4b45-b0ee-39b0c4c49d94",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"    pm.response.to.have.status(\"Internal Server Error\");",
									"});",
									"",
									"",
									"//verify header",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"    ",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{testUserid}}?indexField=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{testUserid}}"
							],
							"query": [
								{
									"key": "indexField",
									"value": "true"
								}
							]
						},
						"description": "GET query invalid value true for indexField"
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "541734fa-7a0c-4eaa-b2c6-a83f0b6516e1",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.have.status(\"Not Found\");",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
									"",
									"});",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentSubPermissionId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cae53e02-d5f1-4810-b619-c6654a355e10",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									"pm.environment.unset('currentSubPermissionName2')",
									"pm.environment.unset('currentSubPermissionId2')"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentSubPermissionId2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentSubPermissionId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentSubPermissionId1}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dceda716-e11e-47c0-88bf-38455422a69e",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									"pm.environment.unset('currentSubPermissionName1')",
									"pm.environment.unset('currentSubPermissionId1')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentSubPermissionId1}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentSubPermissionId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentPermissionId}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37913832-04f6-42f9-947a-d07cd8d24ca0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									"pm.environment.unset('currentPermissionName')"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentPermissionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentPermissionId}}"
							]
						},
						"description": "NOTE Delete sub permissions first"
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentPermissionId2}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5f927f1-6314-4c6a-8f2e-cc0b7bd1d5fe",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									"pm.environment.unset('currentPermissionName2')",
									"pm.environment.unset('currentPermissionId2')"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentPermissionId2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentPermissionId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/users/{{newpermissionuserid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "777aae6e-45c8-45d5-86a0-137bee110177",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"",
									"pm.environment.unset('newpermissionuserid')"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "87a973f7-26d9-4a9f-b97e-61622c0ce8bf",
								"type": "text/javascript",
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get('protocol') + '://' + pm.environment.get('url') + ':' + pm.environment.get('okapiport') + '/users/'+pm.environment.get('testUserid') ,",
									"    method: 'DELETE',",
									"    header: {",
									"        'x-okapi-tenant': pm.environment.get('xokapitenant'),",
									"        'x-okapi-token': pm.environment.get('xokapitoken')",
									"    }",
									"}, function (err, res) {",
									"   if(err){",
									"       console.log('error deleting the user in'+err);",
									"       return;",
									"   }",
									"    pm.environment.unset('newusergroupid');",
									"    pm.environment.unset('testUserid');",
									"});",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{newpermissionuserid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"users",
								"{{newpermissionuserid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentPermissionId}} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76d25132-ff48-4cfd-b60f-c04672ff4e27",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response does not have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     ",
									"});",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									"",
									"pm.environment.unset('currentPermissionName')"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentPermissionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentPermissionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentSubPermissionId2}} invalid string id 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce85510-ae20-41e6-a152-f8ff44ac4875",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//verify header",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									"",
									"",
									"pm.environment.unset('currentSubPermissionName1')",
									"pm.environment.unset('currentSubPermissionId2')"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/invalidstring",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"invalidstring"
							]
						},
						"description": "Invalid id in the permissions with a string values in the id"
					},
					"response": []
				},
				{
					"name": "/perms/permissions/{{currentPermissionId}} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9cf6e18f-d5d2-4c6d-b765-86b349d0a56a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response does not have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     ",
									"});",
									"",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.negative();",
									"",
									"pm.environment.unset('currentPermissionId')",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e5592e62-9f13-4b27-a6db-f2986cd359ed",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"{{currentPermissionId}}\",\n  \"permissionName\": \"{{currentPermissionName}}\",\n  \"description\": \"fake permission with fake sub permissions updated\",\n  \"visible\": true,\n  \"subPermissions\": [\n    \"foo1\",\n    \"foo2\",\n    \"foo3\",\n    \"foo4\",\n    \"foo5\",\n    \"foo7\"\n  ]\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions/{{currentPermissionId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions",
								"{{currentPermissionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/perms/permissions - Test for clean up",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d4c76fb-232e-4884-9cf0-da10c17f4b6b",
								"type": "text/javascript",
								"exec": [
									"const response = JSON.parse(responseBody);",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"    pm.expect(response.totalRecords).to.eql(0);",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"permission.json\", pm.variables.get(\"permission.schema\"));",
									"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"permissionListObject.schema\"))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"    ",
									"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
									"",
									"let commonHeaderTests = eval(str);",
									"commonHeaderTests.positive();",
									"pm.environment.unset(\"currentPermissionId\");",
									"pm.environment.unset(\"currentPermissionName\");",
									"//",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions?length=1000&query=(permissionName=fake*)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"perms",
								"permissions"
							],
							"query": [
								{
									"key": "length",
									"value": "1000"
								},
								{
									"key": "query",
									"value": "(permissionName=fake*)"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "843d4029-e4ee-418a-8e89-6d4d54138137",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d00cfa7c-ff21-406d-a78c-e3f955cf498c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6d72ee41-f25e-45d0-ad8b-e1c609bade90",
				"type": "text/javascript",
				"exec": [
					" let str =`new ${pm.variables.get(\"retrieveSchemaFunction\").toString()}()`;",
					"",
					"let schema = eval(str);",
					"",
					"if (pm.variables.has(\"permission.schema\") === false) {",
					"    schema.retrieveRAMLUtilsSchema(\"mod-permissions/permission.json\", (res)=> {",
					"        pm.variables.set(\"permission.schema\", res)",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"permissionListObject.schema\") === false) {",
					"    schema.retrieveRAMLUtilsSchema(\"mod-permissions/permissionListObject.json\", ((res)=>pm.variables.set(\"permissionListObject.schema\", res)))",
					"}",
					"",
					"if (pm.variables.has(\"permissionNameListObject.schema\") === false) {",
					"    schema.retrieveRAMLUtilsSchema(\"mod-permissions/permissionNameListObject.json\", ((res)=>pm.variables.set(\"permissionNameListObject.schema\", res))",
					"    );",
					"}",
					"",
					"if (pm.variables.has(\"permissionNameObject.schema\") === false) {",
					"    schema.retrieveRAMLUtilsSchema(\"mod-permissions/permissionNameObject.json\", ((res)=>pm.variables.set(\"permissionNameObject.schema\", res))",
					"    );",
					"}",
					"",
					"if (pm.variables.has(\"permissionUpload.schema\") === false) {",
					"    schema.retrieveRAMLUtilsSchema(\"mod-permissions/permissionUpload.json\",  ((res)=>pm.variables.set(\"permissionUpload.schema\", res))",
					"    );",
					"}",
					"",
					"if (pm.variables.has(\"permissionUser.schema\") === false) {",
					"    schema.retrieveRAMLUtilsSchema(\"mod-permissions/permissionUser.json\",  (res)=>pm.variables.set(\"permissionUser.schema\", res)",
					"    );",
					"}",
					"",
					"if (pm.variables.has(\"permissionUserListObject.schema\") === false) {",
					"    schema.retrieveRAMLUtilsSchema(\"mod-permissions/permissionUserListObject.json\", ((res)=>pm.variables.set(\"permissionUserListObject.schema\", res))",
					"    );",
					"}",
					"",
					"if (pm.variables.has(\"metadata.schema\") === false) {",
					"    schema.retrieveRAMLUtilsSchema(\"metadata.schema\", ((res)=>pm.variables.set(\"metadata.schema\", res))",
					"    );",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c5459542-c9fd-4938-8da0-a84255cdae7b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f57b79e5-6d1e-4723-ae2d-ce309568c0b3",
			"key": "retrieveSchemaFunction",
			"value": "class Schemas {\n    retrieveRAMLUtilsSchema(schemaName, done) {\n        pm.sendRequest({\n            url: \"https://raw.githubusercontent.com/folio-org/raml/\" + pm.variables.get(\"raml-utils_version\") + \"/schemas/\" + schemaName,\n            method: 'GET',\n        }, (err, res) => {\n            if (err !== null) {\n                console.log(\"Schema retrieval error: \" + err);\n                done(null);\n                return;\n            }\n            if (res.code === 200) {\n                    done(res.json());\n                    return\n                } \n              console.log(\"Schema retrieval falied: \" + res.reason());\n                done(null);\n                }\n        );\n    };\n}",
			"type": "string"
		},
		{
			"id": "e7c2a684-0d62-4280-ab06-6ad529ced925",
			"key": "raml-utils_version",
			"value": "d771225d6adba30f54145332f093e9a3362be3ae",
			"type": "string"
		},
		{
			"id": "e9772d60-38a0-47e5-93cb-d54ec1a92e93",
			"key": "commonTests",
			"value": "class Header {\n    positive() {\n         pm.test(\"'X-Okapi-Trace' header is present\", function () {\n        pm.response.to.have.header(\"X-Okapi-Trace\");\n    });\n    \n    pm.test(\"'accept' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"accept\");\n        pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); \n    });\n    \n    pm.test(\"'accept-encoding' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"accept-encoding\");\n        pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");\n    });\n    \n    \n    pm.test(\"'connection' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"connection\");\n        pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");\n    });\n    \n    pm.test(\"'host' header is present\", function () {\n        pm.response.to.have.header(\"host\");\n    });\n    \n    pm.test(\"'x-okapi-request-id' header is present\", function () {\n        pm.response.to.have.header(\"x-okapi-request-id\");\n    });\n    \n    pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"x-okapi-tenant\");\n        pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));\n    });\n    \n    pm.test(\"'x-okapi-token' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"x-okapi-token\");\n        pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));\n    });\n    \n    pm.test(\"'x-okapi-url' header is present\", function () {\n        pm.response.to.have.header(\"x-okapi-url\");\n    });\n    \n    pm.test(\"'x-okapi-user-id' header is present\", function () {\n        pm.response.to.have.header(\"x-okapi-user-id\");\n    });\n}\n\nnegative(){\n    pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {\n        pm.response.to.have.header(\"Transfer-Encoding\");\n        pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");\n    });\n    \n    pm.test(\"'X-Okapi-Trace' header is present\", function () {\n        pm.response.to.have.header(\"X-Okapi-Trace\");\n    });\n}\n\n}",
			"type": "string"
		}
	]
}