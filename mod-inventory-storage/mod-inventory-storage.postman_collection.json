{
	"info": {
		"_postman_id": "7104fe61-aede-473d-9f74-ea656b17be37",
		"name": "mod-inventory-storage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"item": [
				{
					"name": "classification-types.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b690c993-26ff-41e5-aad7-7c6fb82e705a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"classification-types.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{classification-types.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{classification-types.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "classification-type.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49886a49-0f8a-445a-b6c6-2a0a589830a7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"classification-type.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{classification-type.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{classification-type.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "item.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "918d7f46-a975-4239-a47b-79d31fc5420b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"item.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{item.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{item.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "items.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c0d45ab-955d-498f-a87f-91b1befcbebb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"items.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{items.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{items.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "holdingsrecord.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd336c34-f4c6-45ef-af25-7e7c369608f0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"holdingsrecord.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{holdingsrecord.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{holdingsrecord.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "holdingsrecords.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aeb94048-606c-486e-9436-f88ba2ccc106",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"holdingsrecords.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{holdingsrecords.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{holdingsrecords.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instances.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "123bc36b-9654-416f-add8-ead90c748fef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"instances.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instances.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{instances.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instance.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cc5c237-cf3b-4a88-a574-dc5455064133",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"instance.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instance.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{instance.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instancefromats.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83edc361-dd78-4805-8a4e-f0f090f1bb9e",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"instanceformats.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instanceformats.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{instanceformats.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instancefromat.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b811a694-db3e-46c4-8f95-06f7e47525f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"instanceformat.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instanceformat.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{instanceformat.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instancetypes.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08ab660d-3aab-46da-a372-dc564cb2586c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"instancetypes.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instancetypes.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{instancetypes.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "instancetype.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3f7cf86-5803-486f-a1f4-9cae80254065",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"instancetype.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{instancetype.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{instancetype.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "materialtypes.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19885be0-6621-45d9-878d-0a10034014ec",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"materialtypes.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{materialtypes.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{materialtypes.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "materialtype.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6a1ae5a-4676-4c6d-aa69-85e70c0c790b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"materialtype.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{materialtype.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{materialtype.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loantypes.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef401ea6-77c3-41b0-bd6b-7793279ddd87",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"loantypes.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{loantypes.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{loantypes.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "loantype.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3c67472-fb76-4584-8a44-f9ac3b7b36a5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"loantype.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{loantype.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{loantype.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "errors.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d355d5cc-6da9-4d25-8114-dcdc01472cad",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"errors.schema\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{errors.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{errors.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "error.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45205ec0-6221-4fef-b498-68187c56caa0",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"error.schema\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{error.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{error.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "parameters.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "891279fe-08c5-4eba-9a0e-2a78470f6ca7",
								"exec": [
									"pm.test(\"GET schema_parameters OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_parameters has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"parameters.schema\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{parameters.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{parameters.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "metadata.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05891d96-1ee4-487e-a6b9-83f8c1f2ab1c",
								"exec": [
									"pm.test(\"GET schema_metadata OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_metadata has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"metadata.schema\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/raml/{{schema_commit}}/schemas/{{schema_metadatafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"raml",
								"{{schema_commit}}",
								"schemas",
								"{{schema_metadatafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "servicepoints.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bec004c-5efd-45f0-bafc-afd1cc3e9f8f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"servicepoints.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{servicepoints.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{servicepoints.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "servicepoint.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef862b99-7f64-4c31-ba0b-a445759efe74",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"servicepoint.schema\", responseBody);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{servicepoint.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{servicepoint.schemafile}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "time-period.schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef862b99-7f64-4c31-ba0b-a445759efe74",
								"exec": [
									"pm.test(\"Response OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Response has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"time-period.schema\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/ramls/{{time-period.schemafile}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"ramls",
								"{{time-period.schemafile}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc368b0e-c77a-443f-898a-662ba1a3366f",
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\");",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									"",
									"pm.test(\"'connection' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"connection\");",
									"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
									"});",
									"",
									"pm.test(\"'host' header is present\", function () {",
									"    pm.response.to.have.header(\"host\");",
									"   // var hostHeaderValue = pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\");",
									"   // pm.expect(pm.response.headers.get(\"host\")).to.be.equal(hostHeaderValue);",
									"});",
									"",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"'x-okapi-request-id' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-request-id\");",
									"});",
									"",
									"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-tenant\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"x-okapi-token\");",
									"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
									"});",
									"",
									"pm.test(\"'x-okapi-url' header is present\", function () {",
									"    pm.response.to.have.header(\"x-okapi-url\");",
									"});",
									"",
									"// pm.test(\"'x-okapi-user-id' header is present\", function () {",
									"//     pm.response.to.have.header(\"x-okapi-user-id\");",
									"// });",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "holdings-storage",
			"item": [
				{
					"name": "holdings-storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32401118-e44b-4e63-8ebb-9bede023c19a",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(response.holdingsRecords.length >0) {",
									"    pm.environment.set(\"existingInstanceId\", response.holdingsRecords[0].instanceId);",
									"}",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   tv4.addSchema(\"holdingsrecord.json\", JSON.parse(pm.variables.get(\"holdingsrecord.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"holdingsrecords.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings"
							]
						}
					},
					"response": []
				},
				{
					"name": "holdings-storage/holdings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "775e3669-b55e-4c30-9bdd-409415c3a312",
								"type": "text/javascript",
								"exec": [
									"",
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newholdingstorage\", response.id);",
									"",
									"//",
									"pm.test(\"New holding storage was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"holdingsrecord.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"pm.test(\"'Location'header is present\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"instanceId\": \"{{existingInstanceId}}\"\r\n  \r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings/{{newholdingstorage}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "886fdb89-72e3-4a86-a99a-3d1b5782315e",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain instanceId of the new holding storage\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newholdingstorage\")); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"holdingsrecord.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{newholdingstorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings",
								"{{newholdingstorage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings/{{newholdingstorage}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eb6244f-5e56-423e-8264-8e8f5d4d515f",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\" : \"{{newholdingstorage}}\",\r\n  \"instanceId\" : \"{{existingInstanceId}}\",\r\n  \"holdingsStatements\" :  [ \r\n\t{\"statement\":\"my first holdings statement\", \r\n\t \"note\":\"first holding statement note line\" }]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{newholdingstorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings",
								"{{newholdingstorage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings/{{newholdingstorage}} - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce4263b4-3217-41de-9b85-ade1faf38abc",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must instanceId of the new holding storage\", function () {",
									"      pm.expect(response.id).to.be.equal(pm.environment.get(\"newholdingstorage\")); ",
									"    pm.expect(response.holdingsStatements[0].statement).to.be.equal(\"my first holdings statement\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"holdingsrecord.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{newholdingstorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings",
								"{{newholdingstorage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/holdings-storage/holdings/{{newholdingstorage}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6037b2af-0887-4306-ae76-cad8785b1a63",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{newholdingstorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"holdings-storage",
								"holdings",
								"{{newholdingstorage}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "467a344f-7da8-4611-bf2e-dabc0a958f75",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f09c1a28-4014-4e09-84ae-ac2d9bfe228c",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "instance-storage",
			"item": [
				{
					"name": "/instance-storage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4846df7-5ffd-4096-844c-c5e85fa60e8c",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"  //tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"  tv4.addSchema(\"instance.json\", JSON.parse(pm.variables.get(\"instance.schema\")));",
									"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instances.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"  pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "555a84ed-e66f-4717-8fa0-5a198fb9ee47",
								"exec": [
									"",
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newinstancestorage\", response.id);",
									"",
									"//",
									"pm.test(\"New instance storage was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instance.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'Location'header is present\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
								"exec": [
									"let endpointInstanceTypes = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/instance-types\";",
									" let tenant = pm.environment.get(\"xokapitenant\");",
									" let token = pm.environment.get(\"xokapitoken\");",
									"",
									"//get alternative title type",
									"pm.sendRequest({",
									"    url: endpointInstanceTypes,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().instanceTypes.length>0){",
									"       // console.log(res.json());",
									"     pm.environment.set(\"instancetype\",  res.json().instanceTypes[0].id);",
									"    }",
									" }",
									");",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"source\": \"MARC\",\r\n  \"title\": \"Handbuch deutscher historishen Buchbestände\",\r\n  \"instanceTypeId\": \"{{instancetype}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances/{{newinstancestorage}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f436bc8-e774-4b0f-93f6-e8f879357d1e",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain  the new instance storage\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancestorage\")); ",
									"    pm.expect(response.title).to.be.equal(\"Handbuch deutscher historishen Buchbestände\"); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instance.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{newinstancestorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{newinstancestorage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances - query title",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe392234-1ee4-4052-a3d9-dbdf895cd88e",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain  the new instance storage\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"newinstancestorage\")); ",
									"    pm.expect(response.instances[0].title).to.be.equal(\"Handbuch deutscher historishen Buchbestände\"); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"  tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"  tv4.addSchema(\"instance.json\", JSON.parse(pm.variables.get(\"instance.schema\")));",
									"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instances.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"  pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances?query=title=\"Handbuch deutscher historishen Buchbestände\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances"
							],
							"query": [
								{
									"key": "query",
									"value": "title=\"Handbuch deutscher historishen Buchbestände\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances/{{newinstancestorage}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9cd582c-c336-44ed-b54d-199394490038",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a3b9768e-10ff-4cbf-9b76-48b44cab81d9",
								"exec": [
									"let endpointAlternativeTitle = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/alternative-title-types\";",
									" let tenant = pm.environment.get(\"xokapitenant\");",
									" let token = pm.environment.get(\"xokapitoken\");",
									"",
									"//get alternative title type",
									"pm.sendRequest({",
									"    url: endpointAlternativeTitle,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().alternativeTitleTypes.length>0){",
									"      //  console.log(res.json().alternativeTitleTypes[0].id);",
									"     pm.environment.set(\"alternativetitletype\",  res.json().alternativeTitleTypes[0].id);",
									"    }",
									" }",
									");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": \"{{newinstancestorage}}\",\r\n  \"source\": \"Local: MARC\",\r\n  \"title\": \"Handbuch deutscher historishen Buchbestände\",\r\n  \"instanceTypeId\": \"2b94c631-fca9-a892-c730-03ee529ffe2c\", \r\n  \"alternativeTitles\":[{\r\n  \t\"alternativeTitleTypeId\":\"{{alternativetitletype}}\",\r\n  \t\"alternativeTitle\":\"Handbuch der historishen Buchbestände\"}]\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{newinstancestorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{newinstancestorage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances/{{newinstancestorage}} - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "005c6723-b361-4d7b-ac3e-0a893ad007e3",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the updated instance storage\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancestorage\")); ",
									"    pm.expect(response.title).to.be.equal(\"Handbuch deutscher historishen Buchbestände\"); ",
									"    pm.expect(response.alternativeTitles[0].alternativeTitle).to.be.equal(\"Handbuch der historishen Buchbestände\"); ",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instance.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{newinstancestorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{newinstancestorage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances/{{newinstancestorage}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba70b394-6962-470a-84db-0b408ceeb652",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-storage/instances/{{newinstancestorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-storage",
								"instances",
								"{{newinstancestorage}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4f0c45ce-cbc6-43a3-a0bb-5f3579f3a804",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d3adf17a-339b-49bd-9e3d-dc37014e85b2",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "instance-formats",
			"item": [
				{
					"name": "/instance-formats",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bb8a8ea-c3ec-4db5-bca5-a445e3cae759",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"  tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"  tv4.addSchema(\"instanceformat.json\", JSON.parse(pm.variables.get(\"instanceformat.schema\")));",
									"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformats.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"  pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-formats"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-formats",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b41276e5-3c92-43dd-9de7-cc419a80189c",
								"type": "text/javascript",
								"exec": [
									"",
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newinstanceformat\", response.id);",
									"",
									"//",
									"pm.test(\"New instance format was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformat.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									"// //verify headers",
									"",
									"pm.test(\"'Location'header is present\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"maps\",\r\n  \"code\": \"mp\",\r\n  \"source\": \"schneider\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-formats"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-formats/{{newinstanceformat}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b9ebedc-6966-479d-b67d-1215d14d7871",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain  the new instance format\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstanceformat\")); ",
									"    pm.expect(response.name).to.be.equal(\"maps\"); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformat.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats/{{newinstanceformat}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-formats",
								"{{newinstanceformat}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-formats - query name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0185c3ea-cd92-4557-a9ca-abbf1e63bc1e",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain  the new instance format\", function () {",
									"    pm.expect(response.instanceFormats[0].id).to.be.equal(pm.environment.get(\"newinstanceformat\")); ",
									"    pm.expect(response.instanceFormats[0].name).to.be.equal(\"maps\"); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   tv4.addSchema(\"instanceformat.json\", JSON.parse(pm.variables.get(\"instanceformat.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformats.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats?query=name=maps",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-formats"
							],
							"query": [
								{
									"key": "query",
									"value": "name=maps"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-formats/{{newinstanceformat}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3dbc8a9-9a62-4302-8040-dd37edbe8768",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": \"{{newinstanceformat}}\",\r\n  \"name\":\"geological maps\",\r\n  \"code\": \"gm\",\r\n  \"source\": \"schneider\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats/{{newinstanceformat}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-formats",
								"{{newinstanceformat}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-formats/{{newinstanceformat}} -updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "382ab0ab-9061-41d5-a621-9779e7aab228",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain  the updated instance format\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstanceformat\")); ",
									"    pm.expect(response.name).to.be.equal(\"geological maps\"); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instanceformat.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats/{{newinstanceformat}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-formats",
								"{{newinstanceformat}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-formats/{{newinstanceformat}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5358bb95-dfda-4608-8c4d-e46b68fa746b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-formats/{{newinstanceformat}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-formats",
								"{{newinstanceformat}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "12185ede-ab97-4edd-ad84-556a7f7f8ec3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aebca9a3-1798-4e62-adb6-4b6f1b409dc7",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "instance-types",
			"item": [
				{
					"name": "/instance-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "942eccf3-abfd-49e1-a503-c656fed689c9",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"  tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"  tv4.addSchema(\"instancetype.json\", JSON.parse(pm.variables.get(\"instancetype.schema\")));",
									"  pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetypes.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"  pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-types - 'Books'",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8a6753d-0748-40af-bb9b-8d3c84084d1b",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"///US403931  - dbpopulate need to include missing source, code and metadata",
									"// pm.test(\"Validate schema\", function () {",
									"//   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"//   tv4.addSchema(\"instancetype.json\", JSON.parse(pm.variables.get(\"instancetype.schema\")));",
									"//   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetypes.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"//   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"// });",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types?query=(name=Books)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-types"
							],
							"query": [
								{
									"key": "query",
									"value": "(name=Books)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68852aef-eaa1-4ad5-983d-1701f27384f7",
								"type": "text/javascript",
								"exec": [
									"",
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newinstancetype\", response.id);",
									"",
									"//",
									"pm.test(\"New instance type was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetype.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"// //verify headers",
									"",
									"pm.test(\"'Location'header is present\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"journal article\",\r\n  \"code\": \"ja\",\r\n  \"source\": \"towarzystwo naukowe\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-types/{{newinstancetype}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed595df6-faa7-4d12-baf4-d33d3f1e3d67",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain  the new instance type\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancetype\")); ",
									"    pm.expect(response.name).to.be.equal(\"journal article\"); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetype.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types/{{newinstancetype}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-types",
								"{{newinstancetype}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-types - query name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cffc8aa-c24f-4754-9a58-649327bd5338",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the new instance type\", function () {",
									"    pm.expect(response.instanceTypes[0].id).to.be.equal(pm.environment.get(\"newinstancetype\")); ",
									"    pm.expect(response.instanceTypes[0].name).to.be.equal(\"journal article\"); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   tv4.addSchema(\"instancetype.json\", JSON.parse(pm.variables.get(\"instancetype.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetypes.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types?query=name=\"journal article\"",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-types"
							],
							"query": [
								{
									"key": "query",
									"value": "name=\"journal article\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-types/{{newinstancetype}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "464ab70f-0c9d-4486-9e85-c8d87d557b29",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\": \"{{newinstancetype}}\",\r\n  \"name\":\"journal and newspaper article\",\r\n  \"code\":\"jna\",\r\n  \"source\":\"towarzystwo naukowe krakowskie\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types/{{newinstancetype}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-types",
								"{{newinstancetype}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-types/{{newinstancetype}} - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9273208-88d7-4c46-bf28-31984168b078",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the updated instance type\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newinstancetype\")); ",
									"    pm.expect(response.name).to.be.equal(\"journal and newspaper article\"); ",
									"    pm.expect(response.code).to.be.equal(\"jna\"); ",
									"    pm.expect(response.source).to.be.equal(\"towarzystwo naukowe krakowskie\"); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"   pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"instancetype.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"   pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types/{{newinstancetype}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-types",
								"{{newinstancetype}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-types/{{newinstancetype}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "726cdf1c-d8dd-4463-9879-8559c68f207a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types/{{newinstancetype}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"instance-types",
								"{{newinstancetype}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "284338b3-7875-435c-bf32-dd18514c3780",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "05ffafe7-0f51-44ab-8cde-fdb0fb0f1238",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "item-storage",
			"item": [
				{
					"name": "/item-storage/items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cf4ae0a-7f7d-4743-9c47-bfc5104c6bae",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"if(response.items.length>0){",
									"    pm.environment.set(\"existingHoldingsRecordId\", response.items[0].holdingsRecordId);",
									"}",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(response.items.length>0){",
									"    pm.environment.set(\"testpermanentloantypeid\", response.items[0].permanentLoanTypeId);",
									"}",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    console.log(\"metadata\" + pm.environment.get(\"metadata.schema\"))",
									"    console.log (\"item\" + pm.environment.get(\"item.schema\") )",
									"    console.log(\"items\" + pm.environment.get(\"items.schema\"))",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.environment.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"item.json\", JSON.parse(pm.environment.get(\"item.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"items.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"    ",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item-storage/items Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cf4ae0a-7f7d-4743-9c47-bfc5104c6bae",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"if(response.items.length>0){",
									"    pm.environment.set(\"existingHoldingsRecordId\", response.items[0].holdingsRecordId);",
									"}",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(response.items.length>0){",
									"    pm.environment.set(\"testpermanentloantypeid\", response.items[0].permanentLoanTypeId);",
									"}",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    console.log(\"metadata\" + pm.environment.get(\"metadata.schema\"))",
									"    console.log (\"item\" + pm.environment.get(\"item.schema\") )",
									"    console.log(\"items\" + pm.environment.get(\"items.schema\"))",
									"    ",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.environment.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"item.json\", JSON.parse(pm.environment.get(\"item.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.environment.get(\"items.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error));",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"    ",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item-storage/items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6286b3b-f9ce-4515-9202-ef3c4a3f074d",
								"exec": [
									"",
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newitemstorage\", response.id);",
									"",
									"//",
									"pm.test(\"New item storage was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"item.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									" //verify headers",
									"pm.test(\"'Location'header is present\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
								"exec": [
									"let endpointBook = pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\")+ \":\" + pm.environment.get(\"okapiport\") + \"/material-types?query=(name=book)\";",
									"",
									"let tenant = pm.environment.get(\"xokapitenant\");",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"//get material type",
									"pm.sendRequest({",
									"    url: endpointBook,",
									"    method: \"GET\",",
									"    header: {",
									"         \"x-okapi-tenant\":tenant,",
									"         \"x-okapi-token\":token",
									"    }",
									" },",
									" function (err, res) {",
									"    if(res.json().mtypes.length>0){",
									"     pm.environment.set(\"materialtypeid\",  res.json().mtypes[0].id);",
									"    }",
									" }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"holdingsRecordId\": \"{{existingHoldingsRecordId}}\",\r\n  \"materialTypeId\": \"1a54b431-2e4f-452d-9cae-9cee66c9a892\",\r\n  \"permanentLoanTypeId\": \"{{testpermanentloantypeid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item-storage/items/{{newitemstorage}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1330b14-58ab-412e-8c8f-4e6be901a04f",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain  the new item storage\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newitemstorage\")); ",
									"   });",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"item.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{newitemstorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items",
								"{{newitemstorage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/items-storage/items/{{newitemstorage}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88f9d1e0-1ad7-4207-a39a-86fcf3eb4081",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "001f7cca-393d-4222-842c-01340bf2397a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{newitemstorage}}\",\n    \"holdingsRecordId\": \"{{existingHoldingsRecordId}}\",\n    \"notes\": [\n    \t{\"noteType\":\"Check in\",\n    \t \"note\":\"here are my notes\",\n    \t  \"staffOnly\":false}\n    \t  ],\n    \"materialTypeId\": \"{{materialtypeid}}\",\n    \"permanentLoanTypeId\": \"{{testpermanentloantypeid}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{newitemstorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items",
								"{{newitemstorage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/item-storage/items/{{newitemstorage}} - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11f869d6-399f-47ed-853c-9745efa9a906",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the updated item storage\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newitemstorage\")); ",
									"    pm.expect(response.notes[0].note).to.be.equal(\"here are my notes\"); ",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"item.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{newitemstorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items",
								"{{newitemstorage}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/instance-storage/instances/{{newinstancestorage}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b557d1d5-55e3-4e4c-8d49-599e91774f9f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{newitemstorage}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"item-storage",
								"items",
								"{{newitemstorage}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a6e69d6d-aba8-4a4e-b49d-63e7406629cd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "47b403a4-6b8c-41d3-afad-c8076ca5ef91",
						"type": "text/javascript",
						"exec": [
							"// //verify headers",
							"",
							"// pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"//     pm.response.to.have.header(\"X-Okapi-Trace\");",
							"// });",
							"",
							"// pm.test(\"'accept' header is present and has correct value\", function () {",
							"//     pm.response.to.have.header(\"accept\");",
							"//     pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"// });",
							"",
							"// pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"//     pm.response.to.have.header(\"accept-encoding\");",
							"//     pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"// });",
							"",
							"",
							"// pm.test(\"'connection' header is present and has correct value\", function () {",
							"//     pm.response.to.have.header(\"connection\");",
							"//     pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"// });",
							"",
							"// pm.test(\"'host' header is present\", function () {",
							"//     pm.response.to.have.header(\"host\");",
							"// });",
							"",
							"",
							"// pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"//     pm.response.to.have.header(\"X-Okapi-Trace\");",
							"// });",
							"",
							"",
							"// pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"//     pm.response.to.have.header(\"x-okapi-request-id\");",
							"// });",
							"",
							"// pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"//     pm.response.to.have.header(\"x-okapi-tenant\");",
							"//     pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"// });",
							"",
							"// pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"//     pm.response.to.have.header(\"x-okapi-token\");",
							"//     pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"// });",
							"",
							"// pm.test(\"'x-okapi-url' header is present\", function () {",
							"//     pm.response.to.have.header(\"x-okapi-url\");",
							"// });",
							"",
							"// pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"//     pm.response.to.have.header(\"x-okapi-user-id\");",
							"// });"
						]
					}
				}
			]
		},
		{
			"name": "material-type",
			"item": [
				{
					"name": "/material-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7791fe74-0b3b-4c98-9e7e-4d4ee96431bc",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"materialtype.json\", JSON.parse(pm.variables.get(\"materialtype.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"materialtypes.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"material-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/material-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d193af17-7fde-482e-9a50-06c44533e20f",
								"type": "text/javascript",
								"exec": [
									"",
									"var response = JSON.parse(responseBody);",
									"pm.environment.set(\"newmaterialtype\", response.id);",
									"",
									"//",
									"pm.test(\"New inventory item was created. Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"materialtype.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"// //verify headers",
									"",
									"pm.test(\"'Location'header is present\", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b93b69c5-a9b4-4495-9df0-1a5ccb4fe1b6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"name\": \"serial\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"material-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/material-types -duplicate entry - expect error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0caa17d-9054-4a2e-83d5-8c4a5f4fa482",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"New inventory item was created. Status is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must contain correct error message\", function () {",
									"    pm.expect(response.errors[0].message).to.be.equal(\"Material Type exists\");",
									"    pm.expect(response.errors[0].parameters[0].key).to.be.equal(\"name\");",
									"    pm.expect(response.errors[0].parameters[0].value).to.be.equal(\"serial\");",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"error.schema\")));",
									"    tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"parameters.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"errors.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"});",
									"",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "380bb799-8760-4b99-a8fc-dca301d987a6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"name\": \"serial\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"material-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/material-types/{{newmaterialtype}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86e4a0cb-41ec-4dee-9d00-bd429edefa39",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain serial material type\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newmaterialtype\")); ",
									"    pm.expect(response.name).to.be.equal(\"serial\");",
									"});",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"materialtype.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types/{{newmaterialtype}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"material-types",
								"{{newmaterialtype}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/material-types/{{newmaterialtype}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5c4765e-37fe-4ea3-bb38-4d6ac3b9904b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\t\"name\": \"serial -updated\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types/{{newmaterialtype}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"material-types",
								"{{newmaterialtype}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/material-types/{{newmaterialtype}} - updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4588c8fc-3672-47af-8699-94b7aeb07c9c",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain serial material type\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"newmaterialtype\")); ",
									"    pm.expect(response.name).to.be.equal(\"serial -updated\");",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"materialtype.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types/{{newmaterialtype}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"material-types",
								"{{newmaterialtype}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/material-types/{{newmaterialtype}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c995536c-0892-4d30-bca9-b6ac5a3c6ba4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"//verify headers",
									"",
									"pm.test(\"'accept' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept\");",
									"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
									"});",
									"",
									"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
									"    pm.response.to.have.header(\"accept-encoding\");",
									"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types/{{newmaterialtype}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"material-types",
								"{{newmaterialtype}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4b5b7205-80d2-410e-9a58-cc4148750cce",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2db96571-79f9-43ed-be18-cf86246924e4",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "classification-types",
			"item": [
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5528883a-93fc-48db-a357-8bcadc5af8f9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"classificationtype.json\", JSON.parse(pm.variables.get(\"classification-type.schema\")));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-types.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "Test listing classification types"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bbeea6bb-1b38-4707-aeed-50cdd8d4113b",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-classification-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f3bf31cf-c9d7-4bdc-a82b-5f9417a46c3c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "Check for auth token not set"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc5542cb-7aad-4058-8c2e-a2d39e9e4eff",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "830f505f-dd4f-405e-8a1b-537c545d2215",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "List classification types with a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/classification-types?limit=-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95363aa7-4c73-4cc8-a75e-f034de8f4f98",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - negative limit\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						},
						"description": "400 test for negative limit"
					},
					"response": []
				},
				{
					"name": "/classification-types?offset=-1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "03492b68-4c19-42a0-ac92-4d6c112b6a58",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - negative offset\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						},
						"description": "400 test for negative limit"
					},
					"response": []
				},
				{
					"name": "/classification-types?limit=-2147483649",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8655569-ed51-4a38-9cdb-ef4ac0400bc5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "-2147483649"
								}
							]
						},
						"description": "400 test for limit less than Integer.MIN_VALUE (-2147483648)"
					},
					"response": []
				},
				{
					"name": "/classification-types?offset=-2147483649",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1dabb328-cff3-4a56-8ac6-706f16c2d47b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?offset=-2147483649",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "offset",
									"value": "-2147483649"
								}
							]
						},
						"description": "400 test for limit less than Integer.MIN_VALUE (-2147483648)"
					},
					"response": []
				},
				{
					"name": "/classification-types?limit=2147483648",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "627d92ac-5472-4cf3-91d1-2397e1403143",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - limit greater than Integer.MAX_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "2147483648"
								}
							]
						},
						"description": "400 test for limit greater than Integer.MAX_VALUE (2147483647)"
					},
					"response": []
				},
				{
					"name": "/classification-types?offset=2147483648",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ce75e96-36a7-4e71-9bb0-5c52d7253abb",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - offset greater than Integer.MAX_VALUE\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?offset=2147483648",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "offset",
									"value": "2147483648"
								}
							]
						},
						"description": "400 test for limit greater than Integer.MAX_VALUE (2147483647)"
					},
					"response": []
				},
				{
					"name": "/classification-types?query=",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a110c8d-d863-417a-a859-ec88dbb5d782",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad CQL\", function() {",
									"    pm.response.to.have.status(400); ",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?query=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						},
						"description": "400 test for some weird query. Note: this test will fail until [MODINVSTOR-67](https://issues.folio.org/projects/MODINVSTOR/issues/MODINVSTOR-67) is fixed."
					},
					"response": []
				},
				{
					"name": "/classification-types?lang=",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f71cf43-1400-41f5-b08c-25fa010e4143",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - empty lang\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?lang=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "lang",
									"value": ""
								}
							]
						},
						"description": "400 test for no lang"
					},
					"response": []
				},
				{
					"name": "/classification-types?lang=A1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d73570-1a70-4f17-95e0-06576e7ae4aa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64184f81-0134-4c68-954d-fd24207f80ca",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang regex\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "400 test for lang regex"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8005bea-2ab4-4ccb-a3a2-695d6a11b6d4",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set('classificationTypeUUID', uuid.v4());"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "21514626-d38e-4800-8c25-a6b8b13a7dd3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-type.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"classificationTypeUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test classification type: \" + pm.environment.get(\"classificationTypeUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "Create a new classification type"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5f1e2d3-f9a8-49cb-87d0-91569e9fa80a",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-classification-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0789b8d7-9eef-4408-bd72-9f560d40a02d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "Create a new classification type with an invalid token"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "413418be-3cf5-45df-baf4-e7847901d570",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1b5c32aa-5f40-43ae-aa84-1803fad08ae8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "Create a new classification type with a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1b3f727-1f7e-427d-b053-6fa876285c31",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd13fdfa-1a62-44b0-8133-2d316e79c1df",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"422 test\", function() {",
									"    pm.response.to.have.status(422);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"error.schema\", JSON.parse(pm.variables.get(\"error.schema\")));",
									"    tv4.addSchema(\"parameters.schema\", JSON.parse(pm.variables.get(\"parameters.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"errors.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "Create a new classification type with an empty body"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "69886924-2ba1-40d2-99a9-25878557c868",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "accb4c86-5b9e-4d08-9be2-4f6c50cb02c8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad JSON\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "Create a new classification type with a bad JSON body"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5d4a0bf-220b-4c47-a46b-56586901f94d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - bad lang\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Create a new classification type with a bad lang query argument"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06ad118b-553f-498a-bffe-8f2b1e9de596",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - ID already exists\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "Create a new classification type with an ID that already exists"
					},
					"response": []
				},
				{
					"name": "/classification-types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "559cb620-16bf-4de0-8748-94d46d1393bc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7fe3af58-ac52-476c-81b9-ef17f2c43ccf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - ID in not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"12345\",\n\t\"name\": \"Test classification type: 12345\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							]
						},
						"description": "Create a new classification type with an invalid ID"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98087a59-484b-4b8d-b85e-70522edfd5f3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-type.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"classificationTypeUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test classification type: \" + pm.environment.get(\"classificationTypeUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Return an existing classification type"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "951da1ac-e479-4d56-9048-2103010d39ca",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-classification-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "879c0e66-09fc-4e02-8108-011004498ac1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Return an existing classification type using an invalid token"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b380a4fd-896b-4b02-96fd-bc2be5c228d2",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cc0a7073-1888-4d5d-b4c1-0939a5060ce7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Return an existing classification type using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/classification-types/12345",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9d1eacfb-14e4-4fcf-9e4a-9448448716c3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d73eae7b-75aa-4fe0-bbe6-2ad2212dc3d6",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(404); // Should be 400!",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"12345"
							]
						},
						"description": "Return an existing classification type using an invalid UUID on the URL. I posit that the response status code should be consistent with PUT and DELETE, returning 400. Currently, this returns 404. See [MODINVSTOR-69](https://issues.folio.org/browse/MODINVSTOR-69)."
					},
					"response": []
				},
				{
					"name": "/classification-types?limit=100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c569ad59-27fe-4d3f-aa2e-0229bd7db5c8",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"classificationtype.json\", JSON.parse(pm.variables.get(\"classification-type.schema\")));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-types.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for added classification type\", function() {",
									"   pm.expect(pm.response.json().classificationTypes).to.be.an('array');",
									"   var response = JSON.parse(responseBody);",
									"   var found = false;",
									"   for (var i = 0; i < response.classificationTypes.length; i++) {",
									"      var obj = response.classificationTypes[i];",
									"      if (obj.id == pm.environment.get(\"classificationTypeUUID\") && obj.name == \"Test classification type: \" + pm.environment.get(\"classificationTypeUUID\")) {",
									"         found = true;",
									"         break;",
									"      }",
									"   }",
									"   pm.expect(found).equals(true);   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing classification types to ensure added item is in the list. Need a higher limit than 10 in case there are more than 10 classification types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db1038d9-9112-4488-a5c7-2c309bf3a65b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Update an existing classification type"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "015fbdf5-c700-4a29-a050-eb4eb65d5c56",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-classification-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9cc6cbee-df33-4110-b371-bfd1b1591be1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Update an existing classification type using an invalid token"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fa220898-e45b-414c-b28b-483014ea9722",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3c50b1d0-0f7c-4879-94fe-d6b2022b76c4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Update an existing classification type using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fca7874a-6688-427f-9fcb-05a87a42266a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - IDs don't match\", function() {",
									"    pm.response.to.have.status(204); // Should be 400!",
									"    //pm.response.to.have.body(); // no body with a 204 :(",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{$guid}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Update an existing classification type with a different UUID. This should probably be a 400 error. Right now, it is accepted and the UUID is changed in the JSON in the DB, but not the DB ID, so it is inconsistent. See [MODINVSTOR-68](https://issues.folio.org/browse/MODINVSTOR-68)."
					},
					"response": []
				},
				{
					"name": "/classification-types/12345",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "58b51bb7-9d03-42cf-a598-a9f0fa8558a7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"12345"
							]
						},
						"description": "Update an existing classification type with an invalid UUID"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}?lang=A1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96b65564-f7b2-4318-92a8-cf232790b679",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Update an existing classification type with a different UUID. This should probably be a 400 error. Right now, it is accepted and the UUID is changed in the JSON in the DB, but not the DB ID, so it is inconsistent. See [MODINVSTOR-68](https://issues.folio.org/browse/MODINVSTOR-68)."
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e17e68cc-ddd3-499f-b6b9-a1e39854fb19",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-type.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Validate fields\", function() {",
									"   pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"classificationTypeUUID\"));",
									"   pm.response.to.have.jsonBody(\"name\", \"Test classification type - modified: \" + pm.environment.get(\"classificationTypeUUID\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Return an existing classification type"
					},
					"response": []
				},
				{
					"name": "/classification-types?limit=100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a107b8a-1bcc-4bdb-9fc4-6074526c81b6",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"classificationtype.json\", JSON.parse(pm.variables.get(\"classification-type.schema\")));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-types.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for deleted classification type\", function() {",
									"   pm.expect(pm.response.json().classificationTypes).to.be.an('array');",
									"   var response = JSON.parse(responseBody);",
									"   var found = false;",
									"   for (var i = 0; i < response.classificationTypes.length; i++) {",
									"      var obj = response.classificationTypes[i];",
									"      if (obj.id == pm.environment.get(\"classificationTypeUUID\") && obj.name == \"Test classification type - modified: \" + pm.environment.get(\"classificationTypeUUID\")) {",
									"         found = true;",
									"         break;",
									"      }",
									"   }",
									"   pm.expect(found).equals(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing classification types to ensure modified item is in the list. Need a higher limit than 10 in case there are more than 10 classification types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9de69792-028e-4c29-a837-e32af804f7de",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.have.status(204);",
									"    pm.response.to.not.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Delete an existing classification type"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49915d8b-d64d-4dbb-a70d-1160fdb15a9f",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset('xokapitoken-classification-types');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6bab3d4c-891f-457d-999f-a5cc7205a1cf",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"401 test\", function() {",
									"    pm.response.to.have.status(401);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Delete an existing classification type using an invalid token"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "18a21d0d-2ce6-4708-970b-3d4f9d53480d",
								"type": "text/javascript",
								"exec": [
									"var uuid = require('uuid');",
									"",
									"pm.environment.set('test_user_id', uuid.v4());",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users\",",
									"    method: 'POST',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), active:true})",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user creation error: \" + err);",
									"    } else {",
									"        if (res.code === 201) {",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials\",",
									"                method: 'POST',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                },",
									"                body: {",
									"                    mode: 'raw',",
									"                    raw : JSON.stringify({ username: 'test_user', id: pm.environment.get('test_user_id'), password: 'test_user'})",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential creation error: \" + err);",
									"                } else {",
									"                    if (res.code === 201) {",
									"                        pm.environment.set('test_user_credId', res.json().id);",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users\",",
									"                            method: 'POST',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            },",
									"                            body: {",
									"                                mode: 'raw',",
									"                                raw : JSON.stringify({ userId: pm.environment.get('test_user_id'), permissions: []})",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"permissions creation error: \" + err);",
									"                            } else {",
									"                                if (res.code === 201) {",
									"                                    pm.environment.set('test_user_permsId', res.json().id);",
									"                                    pm.sendRequest({",
									"                                        url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
									"                                        method: 'POST',",
									"                                        header: {",
									"                                            'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                            'Content-Type': 'application/json'",
									"                                        },",
									"                                        body: {",
									"                                            mode: 'raw',",
									"                                            raw : JSON.stringify({ username: 'test_user', password: 'test_user'})",
									"                                        }",
									"                                    }, function(err, res) {",
									"                                        if (err !== null) {",
									"                                            console.log(\"Test user login error: \" + err);",
									"                                        } else {",
									"                                            if (res.code === 201) {",
									"                                                pm.environment.set('test_user_token', res.headers.get(\"X-Okapi-Token\"));",
									"                                            } else {",
									"                                                console.log(\"Test user login failed: \" + res.reason());",
									"                                            }",
									"                                        }",
									"                                    });",
									"                                } else {",
									"                                    console.log(\"permissions creation failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Auth creation failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User creation failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d9f567c-303c-4237-b2f9-7596b9238cac",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"403 test\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"let token = pm.environment.get(\"xokapitoken\");",
									"",
									"pm.environment.unset('test_user_token');",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/users/\" + pm.environment.get('test_user_id'),",
									"    method: 'DELETE',",
									"    header: {",
									"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"        'X-Okapi-Token': token,",
									"        'Content-Type': 'application/json'",
									"    }",
									"}, function(err, res) {",
									"    if (err !== null) {",
									"        console.log(\"user deletion error: \" + err);",
									"    } else {",
									"        if (res.code === 204) {",
									"            pm.environment.unset('test_user_id');",
									"            pm.sendRequest({",
									"                url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/credentials/\" + pm.environment.get('test_user_credId'),",
									"                method: 'DELETE',",
									"                header: {",
									"                    'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                    'X-Okapi-Token': token,",
									"                    'Content-Type': 'application/json'",
									"                }",
									"            }, function(err, res) {",
									"                if (err !== null) {",
									"                    console.log(\"Credential deletion error: \" + err);",
									"                } else {",
									"                    if (res.code === 204) {",
									"                        pm.environment.unset('test_user_credId');",
									"                        pm.sendRequest({",
									"                            url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/perms/users/\" + pm.environment.get('test_user_permsId'),",
									"                            method: 'DELETE',",
									"                            header: {",
									"                                'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
									"                                'X-Okapi-Token': token,",
									"                                'Content-Type': 'application/json'",
									"                            }",
									"                        }, function(err, res) {",
									"                            if (err !== null) {",
									"                                console.log(\"Permissions deletion error: \" + err);",
									"                            } else {",
									"                                if (res.code === 204) {",
									"                                    pm.environment.unset('test_user_permsId');",
									"                                } else {",
									"                                    console.log(\"Permissions deletion failed: \" + res.reason());",
									"                                }",
									"                            }",
									"                        });",
									"                    } else {",
									"                        console.log(\"Credential deletion failed: \" + res.reason());",
									"                    }",
									"                }",
									"            });",
									"        } else {",
									"            console.log(\"User deletion failed: \" + res.reason());",
									"        }",
									"    }",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{test_user_token}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Delete an existing classification type using a user that does not have access"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c172ea20-479d-4aea-b1ee-5ac8e6b02c90",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Delete a classification type using an already deleted classification type ID"
					},
					"response": []
				},
				{
					"name": "/classification-types/12345",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3effed9c-428e-460e-885a-69cd51515229",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - invalid UUID on URL\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"12345"
							]
						},
						"description": "Delete a classification type using an invalid UUID"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d3d292b-333b-4b50-8142-d0d2535d6b47",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - id is not a uuid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/12345",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"12345"
							]
						},
						"description": "Delete a classification type using a non-uuid classification type ID"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06388416-a482-4293-8df8-bd685b2663b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"400 test - lang is not valid\", function() {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.body();",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}?lang=A1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							],
							"query": [
								{
									"key": "lang",
									"value": "A1"
								}
							]
						},
						"description": "Delete a classification type passing an invalid lang query paramater"
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e7305f2-4a6f-41fc-9b79-f06be199e868",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Return a deleted classification type"
					},
					"response": []
				},
				{
					"name": "/classification-types?limit=100",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29bd906e-3983-480d-bea6-11ad35f3bbde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8b5946a3-f009-4022-8210-555718d31cde",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"success test\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"classificationtype.json\", JSON.parse(pm.variables.get(\"classification-type.schema\")));",
									"",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"classification-types.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Test list for deleted classification type\", function() {",
									"   pm.expect(pm.response.json().classificationTypes).to.be.an('array').to.not.include.deep.members([{id: pm.environment.get(\"classificationTypeUUID\"), name: \"Test classification type - modified: \" + pm.environment.get(\"classificationTypeUUID\")}]);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types?limit=100",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "Test listing classification types to ensure deleted item is not in the list. Need a higher limit than 10 in case there are more than 10 classification types already. Ideally, use Integer.MAX_VALUE when it is supported by the API."
					},
					"response": []
				},
				{
					"name": "/classification-types/{classificationTypeId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61fe1666-4bde-4483-b8fd-9b3f56a83140",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e46b7f39-f6bf-4e8c-b3fc-500c28eb8b0b",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"404 test\", function() {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-classification-types}}"
							},
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"{{classificationTypeUUID}}\",\n\t\"name\": \"Test classification type - modified: {{classificationTypeUUID}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/classification-types/{{classificationTypeUUID}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"classification-types",
								"{{classificationTypeUUID}}"
							]
						},
						"description": "Update a deleted classification type"
					},
					"response": []
				}
			],
			"description": "Tests for the /classification-types end point.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba793329-ca4b-48d2-a9fb-55d83711649c",
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"    url: pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + \"/authn/login\",",
							"    method: 'POST',",
							"    header: {",
							"        'X-Okapi-Tenant': pm.environment.get(\"xokapitenant\"),",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw : JSON.stringify({ username: pm.environment.get(\"username\"), password: pm.environment.get(\"password\")})",
							"    }",
							"}, function(err, res) {",
							"    if (err !== null) {",
							"        console.log(\"Login error: \" + err);",
							"    } else {",
							"        if (res.code === 201) {",
							"            pm.environment.set(\"xokapitoken-classification-types\", res.headers.get(\"X-Okapi-Token\"));",
							"        } else {",
							"            console.log(\"Login failed: \" + res.reason());",
							"        }",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2235883-a279-492e-94a1-65ef7d482e16",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "loan-type",
			"item": [
				{
					"name": "/loan-types",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4319759-62b1-437f-9511-608803fd2232",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"loantype.json\", JSON.parse(pm.variables.get(\"loantype.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"loantypes.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									"});",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "/loan-types - 'can circulate'",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5fa375b2-9458-4bce-ab40-aa26bd4ee0a3",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.ok; ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"validate schema\", function() {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"loantype.json\", JSON.parse(pm.variables.get(\"loantype.schema\")));",
									"    pm.expect(tv4.validate(pm.response.json(), JSON.parse(pm.variables.get(\"loantypes.schema\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"",
									"//verify headers",
									"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
									"",
									" });",
									"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
									"    pm.response.to.have.header(\"Transfer-Encoding\");",
									"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
									"",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types?query=(name=can circulate)",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"loan-types"
							],
							"query": [
								{
									"key": "query",
									"value": "(name=can circulate)"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a640290b-0753-4880-bea4-ee1faeca050d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "62984544-61b4-478d-af6a-c3d77266ed6c",
						"type": "text/javascript",
						"exec": [
							"//verify headers",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'accept' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept\");",
							"    pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); ",
							"});",
							"",
							"pm.test(\"'accept-encoding' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"accept-encoding\");",
							"    pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");",
							"});",
							"",
							"",
							"pm.test(\"'connection' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"connection\");",
							"    pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");",
							"});",
							"",
							"pm.test(\"'host' header is present\", function () {",
							"    pm.response.to.have.header(\"host\");",
							"});",
							"",
							"",
							"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
							"    pm.response.to.have.header(\"X-Okapi-Trace\");",
							"});",
							"",
							"pm.test(\"'x-okapi-request-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-request-id\");",
							"});",
							"",
							"pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-tenant\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-token' header is present and has correct value\", function () {",
							"    pm.response.to.have.header(\"x-okapi-token\");",
							"    pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));",
							"});",
							"",
							"pm.test(\"'x-okapi-url' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-url\");",
							"});",
							"",
							"pm.test(\"'x-okapi-user-id' header is present\", function () {",
							"    pm.response.to.have.header(\"x-okapi-user-id\");",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "service-point",
			"item": [
				{
					"name": "/service-points - create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6daa767d-5b77-4fe1-98a5-cbc27271952c",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 201 - service-point created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the service point object created\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"svcptId\"));",
									"    pm.expect(response.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\")); ",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"servicepoint.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ee239b2-d9ea-45d1-95eb-246f049e3900",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - get - verify setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09574444-b304-4d11-b048-1254f088e046",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200 - service-points returned\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must contain the service point object created\", function () {",
									"    ",
									"    var matchingSvcptFound = false;",
									"    ",
									"    response.servicepoints.forEach( el => {",
									"        if (el.id == pm.environment.get(\"svcptId\")){",
									"            pm.expect(el.id).to.be.equal(pm.environment.get(\"svcptId\"));",
									"            pm.expect(el.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\"));",
									"            pm.expect(el.name).to.be.equal(pm.environment.get(\"svptName\"));",
									"            matchingSvcptFound = true;",
									"        }",
									"    })",
									"    ",
									"    if (!matchingSvcptFound){",
									"        pm.expect.fail(matchingSvptFound, true, \"could not find expected service point in list\");",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"time-period.json\", JSON.parse(pm.variables.get(\"time-period.schema\")));",
									"    tv4.addSchema(\"servicepoint.json\", JSON.parse(pm.variables.get(\"servicepoint.schema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"servicepoints.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6af1659f-8362-4979-bb88-a74a94cdcf4a",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - create - service point existed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75b29970-ebed-4825-8fd1-9099ca523b05",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 422 - service-point existed\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain an error message\", function () {",
									"    pm.expect(response.errors[0].message).to.equal(\"Service Point Exists\");",
									"    response.errors[0].parameters.forEach( element => {",
									"        if (element.key === \"name\"){",
									"            pm.expect(element.value == pm.environment.get(\"svptName\"));",
									"            return false;",
									"        }",
									"    } )",
									"});",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/errors.schema\", JSON.parse(pm.variables.get(\"errors.schema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"errors.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "340daf8d-1f06-4c36-b7fd-adea3c6f8e83",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - create - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fb58109-3a31-4cf4-9c83-3d3040e86d8d",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400 - malformed request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6c5ef8c5-f816-4757-95e1-9420216a4051",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\"\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - create - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6756ecdc-d478-4e98-a647-b53a3c52432d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 403 - no x-okapi-token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.expect(responseBody.includes(\"Access requires permission\")).to.be.true; ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ede2c287-252f-43c8-aee2-07b041d29583",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - create - 422",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f42c381c-bba5-44f7-a308-b0fd5d314e9b",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 422 - missing code, id\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must have error message\", function () {",
									"    pm.expect(response.errors).to.have.lengthOf(1);",
									"    pm.expect(response.errors[0].parameters[0].key).to.equal(\"code\");",
									"    pm.expect(response.errors[0].message).to.equal(\"may not be null\");",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/errors.schema\", JSON.parse(pm.variables.get(\"errors.schema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"errors.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "439ceff8-af89-495a-b04c-ce582aa23944",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4644\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways4\");",
									"pm.environment.set(\"svptName\", \"Circ desk 24\");",
									"pm.environment.set(\"svcptCode\", \"cd4\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\" : \"{{svptName}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - create - 422 - unknown property",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "564efadc-0482-4510-b799-498a97549fef",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 422 - fictitious property\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain an error message\", function () {",
									"    pm.expect(response.errors[0].message.toLowerCase().includes(\"unrecognized field\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"   tv4.addSchema(\"raml-util/schemas/errors.schema\", JSON.parse(pm.variables.get(\"errors.schema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"errors.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a641cc95-be73-43c6-9221-9774cf458202",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"fictiousProperty\" : \"blabla\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - create - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bcbe36b-f0d4-449d-8235-0a47b5e1cda3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 500 - bad id\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"/* JIRA: MODINVSTOR-197 */",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.expect(responseBody.toLowerCase().includes(\"errormessage\")).to.be.true; ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b9b66c76-782c-449d-9853-441bfa2d48e8",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways3\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"abacdefakfaskhsdfiaksf asdfkadfka;d jad adajksdasdf sd; jadk faksf asdfj a;sdfk ajsdfkl jasd; fja;sdfjka\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - get - Query string",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e50636a-bdfe-4990-a5c0-87dc50232dcf",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200 - service-points returned\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response must contain the service point object created\", function () {",
									"    ",
									"    var matchingSvcptFound = false;",
									"    ",
									"    response.servicepoints.forEach( el => {",
									"        if (el.id == pm.environment.get(\"svcptId\")){",
									"            pm.expect(el.id).to.be.equal(pm.environment.get(\"svcptId\"));",
									"            pm.expect(el.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\"));",
									"            pm.expect(el.name).to.be.equal(pm.environment.get(\"svptName\"));",
									"            pm.expect(el.code).to.be.equal(pm.environment.get(\"svcptCode\"));",
									"            ",
									"            matchingSvcptFound = true;",
									"        }",
									"    })",
									"    ",
									"    if (!matchingSvcptFound){",
									"        pm.expect.fail(matchingSvptFound, true, \"could not find expected service point in list\");",
									"    }",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"time-period.json\", JSON.parse(pm.variables.get(\"time-period.schema\")));",
									"    tv4.addSchema(\"servicepoint.json\", JSON.parse(pm.variables.get(\"servicepoint.schema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"servicepoints.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3c4bf182-ffff-41e6-81cc-2cc4ce1cc863",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points?query=name=={{svptName}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							],
							"query": [
								{
									"key": "query",
									"value": "name=={{svptName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - get - lang=en",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3455e8b0-7bfc-402f-ac07-819c6962b577",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200 - service-points returned\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"/* the lang query string parameter doesn't do anything. See MODINVSTOR-198. Will add assertions once the behavior is defined. */",
									"",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"time-period.json\", JSON.parse(pm.variables.get(\"time-period.schema\")));",
									"    tv4.addSchema(\"servicepoint.json\", JSON.parse(pm.variables.get(\"servicepoint.schema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"servicepoints.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "73418c45-e98e-4c8b-8ca4-a945af885dec",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points?lang=balblabal",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							],
							"query": [
								{
									"key": "lang",
									"value": "balblabal"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - 400 - limit=-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e6f0e29-2d64-4834-8898-c70f05ea56fb",
								"type": "text/javascript",
								"exec": [
									"/* JIRA: MODINVSTOR-199*/",
									"//var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 500 - limit =-1\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "77b39cf6-8ae8-4d8e-9487-8369224d3919",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points?limit=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							],
							"query": [
								{
									"key": "limit",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - 400 - offset=-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b9034d5-2622-4492-867c-53c122581a9f",
								"type": "text/javascript",
								"exec": [
									"/* JIRA: MODINVSTOR-199*/",
									"",
									"//var response = JSON.parse(responseBody);",
									"pm.test(\"Status is 500 - offset = -1\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "913eb019-b567-4058-9a0c-d905163ce34b",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points?offset=-1",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							],
							"query": [
								{
									"key": "offset",
									"value": "-1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1098479b-225c-43a6-8f95-e8e32602d830",
								"type": "text/javascript",
								"exec": [
									"var response = responseBody;",
									"",
									"pm.test(\"Status is 403 - no x-okapi-token\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.expect(response.includes(\"Access requires permission\")).to.be.true;",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b8e3b3c-a52f-4bf3-bb2f-4a5172e02e9b",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b48affbd-47af-4790-b796-36da3cbeba1d",
								"exec": [
									"pm.test(\"Status is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"/* JIRA: MODINVSTOR-197 */",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.expect(responseBody.toLowerCase().includes(\"cqlparseexception\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "edf46ac3-90fb-46cd-86f5-5cf9d6df7dd0",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points?query=",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							],
							"query": [
								{
									"key": "query",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - get/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c634a7c-7564-434e-8cff-a8b1d09bf2bb",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200 - service-point found\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the service point object being looked up\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"svcptId\"));",
									"    pm.expect(response.discoveryDisplayName).to.be.equal(pm.environment.get(\"discoveryDisplayName\"));",
									"    pm.expect(response.name).to.be.equal(pm.environment.get(\"svptName\"));",
									"    pm.expect(response.code).to.be.equal(pm.environment.get(\"svcptCode\"));",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"time-period.json\", JSON.parse(pm.variables.get(\"time-period.schema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"servicepoint.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e85a0473-daf5-4088-bc6e-5147fea2ebec",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"API Test - Hallways6\");",
									"pm.environment.set(\"svcptCode\", \"cd9\");",
									"pm.environment.set(\"svptName\", \"Circ desk 28\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - get/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eecf77c-9191-4b3f-b0bc-d89c2ee5c8ca",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 404 - Id not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response must contain an error message\", function () {",
									"    pm.expect(responseBody.toLowerCase().includes(\"no service point exists\")).to.be.true;",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7b2cfe26-1fe1-4e06-9c08-0f5b9d0862b8",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf14ba442c78b2a?566b259eeee\")"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - get/{id} 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef53980b-2480-4bbf-81df-dea358ba9e96",
								"exec": [
									"pm.test(\"Status is 404 - bad id\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "43f81c12-b910-4870-94c9-22b8aa97623b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{$randomInt}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{$randomInt}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - put/{id} - modify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca270fbc-5802-4a20-bd1f-ee910020770f",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 204 - service-point updated\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4da6427c-47b4-4eac-8dc1-ecc0c75f3c6a",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"modified-API Test - Hallways3\");",
									"pm.environment.set(\"svcptCode\", \"modified-cd6\");",
									"pm.environment.set(\"svptName\", \"modified-Circ desk 28\");",
									"pm.environment.set(\"locationId\", \"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\");"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - put/{id} - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "486f48f1-a171-4be3-9bef-0e776545cf9e",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400 - bad request - malformed JSON\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ca6ab0f5-cdbd-4a33-ada6-022350e9fa7e",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"modified-API Test - Hallways3\");",
									"pm.environment.set(\"svcptCode\", \"modified-cd6\");",
									"pm.environment.set(\"svptName\", \"modified-Circ desk 28\");",
									"pm.environment.set(\"locationId\", \"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : {{svcptCode,\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - put/{id} - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b563296-1f7f-43c5-9d67-ca8be24e1014",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404 - Id not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response must contain an error message\", function () {",
									"    pm.expect(responseBody.toLowerCase().includes(\"not found\")).to.be.true;",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "acf58a4c-1b56-4e8e-89ce-dd96a1626765",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259s692\")",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"{{svcptId}}\",\n\t\"name\" : \"{{svptName}}\",\n\t\"code\" : \"{{svcptCode}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - put/{id} - 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab3fa3f5-eab0-410e-8420-95b6dc3555be",
								"exec": [
									"",
									"pm.test(\"Status is 404 - bad Id\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.body();",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e0b33a-517d-4714-8846-9a864bfe67a6",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\" : \"xYz1810 923 18-443 2ed92tfag\",\n\t\"name\" : \"{{svcptId}}\",\n\t\"code\" : \"{{discoveryDisplayName}}\",\n\t\"discoveryDisplayName\" : \"{{discoveryDisplayName}}\"\n\t\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{$randomInt}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{$randomInt}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - get/{id} - post PUT verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "349842eb-4b82-4e2d-8aad-d5143016161d",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status is 200 - service-point found\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response must be valid and have a body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"Response must contain the service point object being looked up\", function () {",
									"    pm.expect(response.id).to.be.equal(pm.environment.get(\"svcptId\"));",
									"    pm.expect(response.discoveryDisplayName.includes(\"modified\")).to.be.true;",
									"    pm.expect(response.name.includes(\"modified\")).to.be.true;",
									"    pm.expect(response.code.includes(\"modified\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Validate schema\", function () {",
									"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", JSON.parse(pm.variables.get(\"metadata.schema\")));",
									"    tv4.addSchema(\"time-period.json\", JSON.parse(pm.variables.get(\"time-period.schema\")));",
									"    pm.expect(tv4.validate(response, JSON.parse(pm.environment.get(\"servicepoint.schema\")))).to.equal(true, \"Schema validation error: \" + JSON.stringify(tv4.error)); ",
									"    pm.expect(tv4.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(tv4.missing));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a3fe977-d5e5-4b2a-8d79-a2fb71180ea3",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"pm.environment.set(\"discoveryDisplayName\", \"modified-API Test - Hallways3\");",
									"pm.environment.set(\"svcptCode\", \"modified-cd6\");",
									"pm.environment.set(\"svptName\", \"modified-Circ desk 28\");",
									"pm.environment.set(\"locationId\", \"d9cd0bed-1b49-4b5e-a7bd-064b8d177231\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - delete/{id}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66979349-33e8-4e2c-b814-c3552b9b3e32",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204 - service-point deleted\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b7ec5ea5-c2e2-47b2-8e17-b07f8aa8b445",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - delete/{id} - 404 - post DELETE verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e74091f-a553-46ed-89b9-73b96b608b7c",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404 - service-point cannot deleted because service point ID not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Expect error message from deleting ID not existed\", function(){",
									"   pm.expect(responseBody.toLowerCase()).to.equal(\"not found\") ;",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4b4e9728-9886-4c30-abba-b62f27255348",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - delete/{id} - 500",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37b16ab8-e2d0-491e-9a36-573b49bafb21",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 500 - bad id\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"/* JIRA: MODINVSTOR-197 */",
									"pm.test(\"Response must be valid and includes an error message\", function () {",
									"    pm.expect(responseBody.toLowerCase().includes(\"errormessage\") ||  responseBody.toLowerCase().includes(\"internal server error\") ).to.be.true; ",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1baeb271-0448-493a-bc67-8aa2e514a031",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4692\")",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - get/{id} - post DELETE verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f8c8dcc-9143-4826-85d0-7b6407b885b1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 404 - service-point cannot be found because service point ID DNE\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Expect error message from deleting ID not existed\", function(){",
									"    var errorString = \"no service point exists\";",
									"   pm.expect(responseBody.toLowerCase().includes(errorString)).to.be.true;",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "37577fcc-4419-4135-af4b-6710e3cff64e",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"svcptId\", \"79faacf1-4ba4-42c7-8b2a-566b259e4683\")"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points/{{svcptId}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points",
								"{{svcptId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/service-points - get -- unset environment variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a98232f-8c27-4eef-bc85-641b4f45b658",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1f6ccee2-8ac8-4e0c-9b7e-43892af3f35d",
								"type": "text/javascript",
								"exec": [
									"pm.environment.unset(\"svcptId\");",
									"pm.environment.unset(\"discoveryDisplayName\");",
									"pm.environment.unset(\"svcptCode\");",
									"pm.environment.unset(\"svptName\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"service-points"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0c7330ca-93e6-4362-aca9-67f141953e8c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b57648c1-84e3-40fe-9757-ac018aea5ca8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f0d0c692-e732-4fb6-a311-f027acfd5213",
			"key": "mod_name",
			"value": "mod-inventory-storage",
			"type": "string"
		},
		{
			"id": "daa2313b-ba21-4fd4-a40a-e4a14c423d7d",
			"key": "mod_version",
			"value": "master",
			"type": "string"
		},
		{
			"id": "04462280-b178-46ea-bb93-81637e99f4c6",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "ba80d6f9-6c70-4a77-8aff-20ac06859750",
			"key": "errors.schemafile",
			"value": "errors.schema",
			"type": "string"
		},
		{
			"id": "0427e799-3487-4553-971b-b9728a0c540e",
			"key": "error.schemafile",
			"value": "error.schema",
			"type": "string"
		},
		{
			"id": "6eca2dc5-fcd8-4013-b137-c985a77fa02d",
			"key": "parameters.schemafile",
			"value": "parameters.schema",
			"type": "string"
		},
		{
			"id": "3e8885dc-83bc-497d-81fb-f45ce7f8cc09",
			"key": "schema_metadatafile",
			"value": "metadata.schema",
			"type": "string"
		},
		{
			"id": "72071d19-c7ac-40df-87a8-c178acbe7226",
			"key": "classification-types.schemafile",
			"value": "classificationtypes.json",
			"type": "string"
		},
		{
			"id": "8c9c1660-ed08-46f8-8445-4a5fd0d3c3c2",
			"key": "classification-type.schemafile",
			"value": "classificationtype.json",
			"type": "string"
		},
		{
			"id": "3295cffe-8d94-491f-93aa-8e16afe7ea34",
			"key": "item.schemafile",
			"value": "item.json",
			"type": "string"
		},
		{
			"id": "3320139f-8beb-4172-ac83-0533868bc6c5",
			"key": "items.schemafile",
			"value": "items.json",
			"type": "string"
		},
		{
			"id": "3ef2f4a7-8dc9-41d5-adc4-150459e867e3",
			"key": "holdingsrecord.schemafile",
			"value": "holdingsrecord.json",
			"type": "string"
		},
		{
			"id": "9064926b-92a4-4f41-9321-43ba73d60f79",
			"key": "holdingsrecords.schemafile",
			"value": "holdingsrecords.json",
			"type": "string"
		},
		{
			"id": "48307d2a-dda6-4d05-83f9-393c4a666f31",
			"key": "instance.schemafile",
			"value": "instance.json",
			"type": "string"
		},
		{
			"id": "d6cd947e-d9a3-4440-bf6b-c48a6d8d8fdf",
			"key": "instances.schemafile",
			"value": "instances.json",
			"type": "string"
		},
		{
			"id": "6a898beb-620c-46ee-8453-870e6df24e84",
			"key": "instanceformat.schemafile",
			"value": "instanceformat.json",
			"type": "string"
		},
		{
			"id": "3d5cd7e3-d611-48a3-aad6-eb0ab3e29a51",
			"key": "instanceformats.schemafile",
			"value": "instanceformats.json",
			"type": "string"
		},
		{
			"id": "196c7ff8-1084-4dec-b8c9-72255a819675",
			"key": "instancetype.schemafile",
			"value": "instancetype.json",
			"type": "string"
		},
		{
			"id": "df6313be-4f69-4931-888d-ddbec2943b6c",
			"key": "instancetypes.schemafile",
			"value": "instancetypes.json",
			"type": "string"
		},
		{
			"id": "784dd901-a4a6-49b3-a4f4-f63c4deee38e",
			"key": "materialtype.schemafile",
			"value": "materialtype.json",
			"type": "string"
		},
		{
			"id": "cb33ebd9-fee8-4ad6-9300-2bbf9cce0705",
			"key": "materialtypes.schemafile",
			"value": "materialtypes.json",
			"type": "string"
		},
		{
			"id": "f23c5751-04a3-48cd-8b81-4dbbd757f4c8",
			"key": "loantype.schemafile",
			"value": "loantype.json",
			"type": "string"
		},
		{
			"id": "bdca5fae-5d6e-4d9a-b088-7ea02c1793ff",
			"key": "loantypes.schemafile",
			"value": "loantypes.json",
			"type": "string"
		},
		{
			"id": "2019d215-1720-4ef8-ae7f-2e04761bd024",
			"key": "servicepoints.schemafile",
			"value": "servicepoints.json",
			"type": "string"
		},
		{
			"id": "d15439b4-623f-48d8-91dc-ec21a83f3709",
			"key": "servicepoint.schemafile",
			"value": "servicepoint.json",
			"type": "string"
		},
		{
			"id": "97c21e51-b942-4cf9-90a4-ded60a0a59b1",
			"key": "schema_commit",
			"value": "bf5b23978b71776c59eca1fd6b33c7fb315b0f2a",
			"type": "string"
		},
		{
			"id": "4cc12154-683b-49a5-9936-aa74b49cb2b6",
			"key": "time-period.schemafile",
			"value": "time-period.json",
			"type": "string"
		}
	]
}