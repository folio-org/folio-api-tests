{
	"info": {
		"_postman_id": "e4ed0d32-35e0-4683-bf38-ec5d597903ff",
		"name": "mod-finance",
		"description": "Tests for mod-finance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ac526e6-884c-48a0-8c1a-1eee1a8b2ac4",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "85385942-4282-46c6-9f3a-dffc51f37f23",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ca6b3f6-2bf1-4150-8ddc-cc07d2130c56",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30919eb4-3046-42d4-9680-d09456fd346e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-finance\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"",
											"",
											"//remove after implementing mod-finance CRUD API",
											"utils.getModuleId(\"mod-finance-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"//",
											"",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15ab2d51-78a9-44b0-9098-036a2681cb3e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3106ac67-7da2-4ef8-aeba-84403beefb8f",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dd6ff493-c4a2-4701-a742-f4fb3f160647",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b03f9ba2-8b75-41a4-aec7-b096173b245f",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9137a266-5120-4641-b5f8-5fa09b1e513f",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e3d23f0-64cf-492f-8b04-d3e1329123a5",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f711048b-ac39-4d45-bfed-1984807e9c5f",
										"exec": [
											"eval(globals.loadUtils).sendGetRequest('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])', (err, res) => {",
											"        let userPermissions = globals.testData.users.admin.permissions;",
											"        userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"        userPermissions.permissions.push(\"finance.order-transaction-summaries.item.post\");",
											"        pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "25ed14c7-e6ea-45ab-b079-0ff2ee58f533",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0b04de52-d7a2-40bf-a7d1-9cc3793d0935",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88d7dd0e-1300-48f6-824d-ec9b5d8bce94",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce01fb9a-745c-45ba-aa08-17af62e0b200",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0eae0887-e34b-449f-b805-ead548cbf0d5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"testConfigs.configNames.forEach(configName => utils.createFinanceConfig(configName));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cdb68f6a-eb4a-4e77-b7de-259518f5b328",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==FINANCE",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==FINANCE"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "548ffa6f-7630-43db-bd57-5feb91a2af6d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d3967bb6-f824-4de7-b462-1339fc6a1ffe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load all schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b29a5ee-5503-4d4b-9e32-08c9abbb2ff3",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modFinanceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8daafada-7737-48aa-a972-362111dee4e0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moduleName = 'mod-finance';",
											"",
											"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(response.text()).to.include(moduleName);",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];",
											"        pm.variables.set('modFinanceId', moduleId);",
											"    });",
											"});",
											"",
											"",
											"function buildPmRequest1(path) {",
											"    return {",
											"        url: utils.buildOkapiUrl(path),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
											"        }",
											"    };",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modFinanceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "409d7ec5-52ec-4d6e-bb45-d76b699abe4e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e2473d2-a813-44d1-8f1c-99e4425e08e2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a92c4e6-d74e-4264-b7d3-3f78b9760396",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9d55dba2-2823-496e-a0ac-d81740a16ee3",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c476b54-f588-4309-9717-4f34dca7b72b",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9c163b03-2791-44a1-acdf-73a38a0e11c9",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "feb5eec5-0cad-4e2d-b2fc-fa38e78a8893",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b466135e-e56f-48e2-857c-62b1e0207fe9",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31598896-4dbc-44da-ab71-7e7500fb22af",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d22bd0e-05f1-4359-b232-640f15daf17a",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create group - for Group Fund Fiscal Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "164131cc-f5ca-417c-ad8d-4a5cdf7ef542",
										"exec": [
											"pm.test(\"Group is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "70c0c312-ddf7-4835-924a-6739884f3b70",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let group = utils.buildGroupMinContent(\"GROUP_GFFY\");",
											"group.name = \"Test group for GFFY\";",
											"",
											"pm.environment.set(\"groupContent\", JSON.stringify(group));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - for CRUD test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "300343bf-d44d-4744-9847-ab3d3284e30e",
										"exec": [
											"pm.test(\"Group is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupForCrudId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a2f6e88c-5899-4bd2-8a43-84625533ca29",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let group = utils.buildGroupMinContent(\"GROUP_GRUD\");",
											"",
											"pm.environment.set(\"groupContent\", JSON.stringify(group));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "421151c1-b183-4d72-8c32-236548711f56",
										"exec": [
											"pm.test(\"Groups is retrieved\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().groups.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68a50894-4f2d-40c3-b3ae-fff8d029f745",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f07ed83a-11c3-4f34-8572-e19203e327d7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateGroup(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26e761f1-4243-419f-adc4-acf64c47ef2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31eaa2f8-1de5-414d-a708-67aa2509c330",
										"exec": [
											"pm.test(\"Group is updated\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "893f5b0c-ae4a-47be-9002-9216991d5bb7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let groupForUpdate = JSON.parse(pm.environment.get(\"groupContent\"));",
											"",
											"groupForUpdate.name = \"newGroupName\";",
											"",
											"pm.variables.set(\"groupContent\", JSON.stringify(groupForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9eacffab-0f3e-4593-9b1a-a86258a10081",
										"exec": [
											"pm.test(\"Group is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0cdc2726-6092-4642-b05d-38b0338edd07",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupForCrudId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fiscal years",
					"item": [
						{
							"name": "Create fiscal year  - required for budgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "171b3223-5614-4afa-bf8a-30faaf184bf8",
										"exec": [
											"pm.test(\"Fiscal Year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fiscalYearId\", pm.response.json().id);",
											"    // MODFIN-94 Add series field while creating/updating a FiscalYear",
											"    pm.expect(pm.response.json().series).to.exist;",
											"});",
											"",
											"pm.test(\"Fiscal Year contains Currenct\", () => {",
											"    pm.expect(pm.response.json().currency).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2967fc6-4320-4129-926a-b654272b7b1b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fyContent\", JSON.stringify(utils.buildFiscalYearMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fiscal year  - required for budgets",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "098a0718-d640-4f47-b6f2-1b9571742b4f",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"secondFiscalYearId\", pm.response.json().id); ",
											"    // MODFIN-94 Add series field while creating/updating a FiscalYear",
											"    pm.expect(pm.response.json().series).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "46ca3949-20ae-4fc4-b210-6403df35fc1c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fy = utils.buildFiscalYearMinContent(\"FY2020\");",
											"",
											"pm.environment.set(\"secondFyContent\", JSON.stringify(fy));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{secondFyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fiscal year list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "460ab87e-cc2e-4773-9bbd-99f7bd265d8f",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().fiscalYears.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "68b44cb2-0691-46d2-a443-59ec3eb86935",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ad61554-154d-4986-854b-0c586a0d5835",
										"exec": [
											"pm.test(\"FiscalYear is updated is created\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b901866f-78ad-4790-8a86-c0c0ccf5b8bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let fyForUpdate = JSON.parse(pm.variables.get(\"secondFyContent\"));",
											"",
											"fyForUpdate.name = \"newFYName\";",
											"",
											"pm.variables.set(\"secondFyContent\", JSON.stringify(fyForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{secondFyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{secondFiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{secondFiscalYearId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fiscal year by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24abe174-5028-461b-a09d-4200c20df5da",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fiscal year is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateFiscalYear(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7966caea-dea6-40d1-85f9-c36c7d0ed19c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{secondFiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{secondFiscalYearId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fiscal year for delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e45fcee3-edfe-4afa-9aef-df2f7cfb00a8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Fiscal Year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fyForDeleteId\", pm.response.json().id); ",
											"});",
											"",
											"pm.test(\"Fiscal Year contains Currency from Config\", () => {",
											"    pm.expect(pm.response.json().currency).to.exist;",
											"     pm.expect(pm.response.json().currency).to.equal(\"USD\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e9e253f1-e0a0-44d6-8830-64549c52168d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fy = utils.buildFiscalYearMinContent(\"THRD2020\");",
											"",
											"pm.variables.set(\"fyForDelete\", JSON.stringify(fy));",
											"",
											"let localeConfig = globals.testData.localeConfigs.bodyTemplate;",
											"localeConfig.value = \"{\\\"locale\\\":\\\"en-US\\\",\\\"timezone\\\":\\\"America/New_York\\\",\\\"currency\\\":\\\"USD\\\"}\";",
											"utils.createConfig(localeConfig);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyForDelete}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Test Fiscal Year picks currency from configuration while creating"
							},
							"response": []
						},
						{
							"name": "Delete fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "326797cc-cee3-47d5-ae77-aaa378312cda",
										"exec": [
											"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2853ef3e-6930-40de-9a4d-0af5e7926e4b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{fyForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years",
										"{{fyForDeleteId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ledgers",
					"item": [
						{
							"name": "Create first ledger - required for funds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c4d413e-420d-43b5-9dd1-4c60debcef28",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af773993-ed25-485b-b143-1b7fa3408424",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let ledger = utils.buildLedgerMinContent();",
											"ledger.fiscalYearOneId = pm.environment.get(\"fiscalYearId\");",
											"pm.environment.set(\"ledgerContent\", JSON.stringify(ledger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second ledger - for CRUD test",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8b355df-0b64-46dd-913f-16d6b86611d9",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"secondLedgerId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "118c7c4e-8f8f-4980-8f5d-022a1f4aab9f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let secondLedger = utils.buildLedgerMinContent();",
											"secondLedger.code = \"SCND-TST-LDGR-CODE\";",
											"secondLedger.name = \"Second Ledger Name\";",
											"secondLedger.fiscalYearOneId = pm.environment.get(\"secondFiscalYearId\");",
											"",
											"pm.environment.set(\"ledgerContent\", JSON.stringify(secondLedger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ledger list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec1c26a1-c342-48a6-a0a7-04aa7766e7b2",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().ledgers.length).to.be.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6791e58e-3bdc-4e97-ac58-9e6509d7b751",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ledger by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de80cb94-8674-4dce-b722-53f9280cc2ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Ledger is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    utils.validateLedger(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1709b2e-5bc7-4316-af1f-303cc986fd60",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7b983f7-5cdd-494d-b503-de35aca1d28f",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c4f472f-5c89-4e0f-888b-1ea6d61891a2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let ledgerForUpdate = JSON.parse(pm.environment.get(\"ledgerContent\"));",
											"",
											"ledgerForUpdate.name = \"newLedgerName\";",
											"",
											"pm.variables.set(\"ledgerContent\", JSON.stringify(ledgerForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df21ed06-add3-4d38-8ea7-c15a23d40d68",
										"exec": [
											"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d867d67b-f983-41a1-994c-d49b21d49a80",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{secondLedgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{secondLedgerId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund types",
					"item": [
						{
							"name": "Create first type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37f943b4-e755-4e1b-abd7-d95df991c228",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let type = {};",
											"",
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    type = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund type content is valid\", function() {",
											"    utils.validateFundType(type);",
											"    pm.environment.set(\"fundTypeId\", type.id);",
											"    pm.expect(type.name).to.eql(\"First\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "754f7346-799c-4940-b675-bc2c368271c9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"First\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4c106d5-d148-427f-b6ac-a83dd7ed05bb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund type is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateFundType(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e246b01a-58d9-4f06-955e-1016d27c6c97",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d0a2da5-4c3c-4b5c-8d51-2c47e16b1fa9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let type = {};",
											"",
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    type = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund type content is valid\", function() {",
											"    utils.validateFundType(type);",
											"    pm.environment.set(\"fundTypeId2\", type.id); ",
											"    pm.expect(type.name).to.eql(\"Second\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90ae8a8d-6b3b-4e47-8652-730896f6ef92",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"{{$guid}}\",\n\t\"name\": \"Second\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records by query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c72ac129-7cc8-407e-9492-425eadc5fa57",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund type record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.fundTypes).to.have.lengthOf(1);",
											"    records.fundTypes.forEach(type => utils.validateFundType(type));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f1b9f8a-a571-47fd-beba-2d649268e13c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=name==Second",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "name==Second"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b181744-b3f2-40ae-9dd9-5579b62e61af",
										"exec": [
											"pm.test(\"Fund type is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8644d21-2731-4bf8-a5c6-8f605e3d0a39",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Updated\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4789234c-17f3-4949-9646-6686251f52c1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund type is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let type = pm.response.json();",
											"    utils.validateFundType(type);",
											"    pm.expect(type.name).to.eql(\"Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b12ce49-4a45-432b-8d08-2a797b2d7d9e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa88e17f-710a-41a2-ad14-7b5b886a8f8c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 fund type records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.fundTypes).to.have.lengthOf(2);",
											"    collection.fundTypes.forEach(type => utils.validateFundType(type));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1abf2618-d18f-455b-820c-56d4327986e1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second type record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "830cc159-02aa-4b9c-a7a9-1330c3d46769",
										"exec": [
											"pm.test(\"Fund type is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63db0463-0fb8-4949-bbef-b728a19f452f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get type records - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d909d2f-f3f6-4885-8a7a-d6c6d05e9eb3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund type record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.fundTypes).to.have.lengthOf(1);",
											"    utils.validateFundType(collection.fundTypes[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c527b078-76f7-40d5-82ce-1a0dc4fb2d19",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Funds",
					"item": [
						{
							"name": "Create first fund - required for budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34fb38b7-0395-4a9b-9981-5ed29b4a8008",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"fundId\", record.fund.id); ",
											"    pm.expect(record.fund.code).to.eql(\"FRST-FND\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35f52dae-81d4-4488-8f58-162a50d19d69",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"FRST-FND\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c0d3071-a578-4042-8f26-7507b24f13ea",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateCompositeFund(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7c925ce5-9288-41cf-a212-068abe38d1e3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f0691e6-e165-4ced-a795-36ba13612cfb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"fundId2\", record.fund.id);",
											"    pm.environment.set(\"fundContent2\", record);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbb11462-cef2-4d06-a50c-9ce396f91018",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"SCND-FND\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records by query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa1132f9-ca75-4a72-87bb-ecf7d118a4c8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.funds).to.have.lengthOf(1);",
											"    utils.validateFund(records.funds[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a77c72aa-da0c-49f4-b237-eace7500a49a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds?query=fundTypeId=\"\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "fundTypeId=\"\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b744a60-e010-4623-8b96-836a2fe3f839",
										"exec": [
											"pm.test(\"Fund is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d4dd3e-28cc-46fb-ba8d-95d96269d08a",
										"exec": [
											"let record = pm.environment.get(\"fundContent2\");",
											"record.fund.name = \"Updated\";",
											"pm.variables.set(\"fundContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a291caf-fd09-472e-be83-e6b426d4f9f8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let record = pm.response.json();",
											"    utils.validateCompositeFund(record);",
											"    pm.expect(record.fund.name).to.eql(\"Updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3c718858-2312-45d0-ace7-6401c96ef00c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "898078a1-e393-45ed-bf36-48152cc97739",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 fund records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.funds).to.have.lengthOf(2);",
											"    collection.funds.forEach(record => utils.validateFund(record));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0403deb0-e390-4ccd-82d0-049277c9c29a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second fund record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f701c0c-f2e5-4098-b7b5-fa72992d4c05",
										"exec": [
											"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e04721c2-90fc-4765-bab5-617caaeeb638",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund records - 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de656e68-efc3-4237-9e20-0efd7d6bed97",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One fund record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.funds).to.have.lengthOf(1);",
											"    utils.validateFund(collection.funds[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "354919a1-9604-47d0-90de-22266560123b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets",
					"item": [
						{
							"name": "Budget deletion without transaction",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c46ce5d4-7024-4e0f-a3ad-2a28cdd8d3fb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "251ed663-213a-43ea-abca-770aecb801ca",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f6770c1-9607-4912-882c-1a800f1dbe1e",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d7da0cd9-27a7-49cf-82c4-8ec6eef98068",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e48a5f2-a985-434e-8e3f-b9553693f704",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "321d753f-9edd-4de5-acfa-87f5aa8388a6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let group = utils.buildGroupMinContent(\"GROUP_GRUD\");",
													"",
													"pm.environment.set(\"groupContent\", JSON.stringify(group));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29be94ce-1444-433e-b042-166bf3585047",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7eb24b93-4b2c-4ce2-a97a-1a78d8717279",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")), [pm.environment.get(\"groupId\")])));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62764734-2ba1-490a-a462-15766a02f6ce",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fdb15d15-ed57-458f-82b3-c9e0da8ea556",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f34cb49-796a-4942-9d2d-7e625268a5d5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38eeea74-1983-4f37-a12a-c7bef3eed3a1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cf93f90-0e71-492d-8e9a-ca73359a1c00",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "89d03791-af9a-4bb7-aa81-865cc3324fb8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d7fc5e1-9ee8-4296-b495-9c5ff6ba073f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "512bdc4b-03ec-4e28-baca-9d067bdc5f6a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get group fund fiscal year by budgetId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85c96cd4-c79a-4aec-ae21-deaebeaf47d6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
													"    pm.expect(records.totalRecords).to.equal(1);",
													"    pm.environment.set(\"groupFundFYId\", records.groupFundFiscalYears[0].id)",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "77e9f4ee-e5b0-480a-9ac7-9f8130822839",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=budgetId=={{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"group-fund-fiscal-years"
											],
											"query": [
												{
													"key": "query",
													"value": "budgetId=={{allocBudgetId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa317879-8c03-43d0-aa29-be9d57ccb21a",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "08d14a8f-a9c6-464c-aed8-284c2a6e0602",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3467c18-b24b-4baf-a4ea-497f4005af7d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "714b6238-b075-4c90-a63a-d7aab87c51c4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db1f51ae-6ebf-482a-ab2c-d79b170bafbd",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "93b68371-e443-405c-a66d-6b082ad7812b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2beb961-4ffd-47d0-8de0-495ee2d16644",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fb6740d8-e11b-4295-8137-312546e2e07f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get group fund fiscal year by budgetId after budget deletion",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c20207b-35c9-477d-b484-42b33a35378b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
													"    pm.response.to.be.ok;",
													"    let record = pm.response.json();",
													"    pm.expect(record).not.empty;",
													"    pm.expect(record).to.not.have.property('budgetId');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "42527709-a034-449a-b6e4-dac0be94611f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/group-fund-fiscal-years/{{groupFundFYId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"group-fund-fiscal-years",
												"{{groupFundFYId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete group fund fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e83530d2-8c5f-4333-9b0f-f5200c2c48c6",
												"exec": [
													"pm.test(\"Group fund fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e44760f3-2bda-4455-85da-ef7870d063c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/group-fund-fiscal-years/{{groupFundFYId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"group-fund-fiscal-years",
												"{{groupFundFYId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a3f642-28a1-4e03-aa2a-2194788cfac1",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "249f67be-5d0f-48af-896b-5606c05513cc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e484ae24-b663-435b-80dd-4b3d7dda492f",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79c6bc35-0976-4e30-89d0-a0775d10721b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "565c15e2-c431-440e-b824-d85f6dda5d8a",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b50ef56d-4a7b-41fe-b7ba-0b869e996c00",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Budget deletion without transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f471f4d3-352e-4de8-ab57-e98a60c32117",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c29993f3-867d-442e-9617-f474b729a7d2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create first budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02021716-b13a-4e6e-b083-e73a5876fd7b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Budget content is valid\", function() {",
											"    utils.validateBudget(record);",
											"    pm.environment.set(\"budgetId\", record.id); ",
											"    pm.expect(record.name).to.eql(\"FRST-BDGT\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e32e8659-277d-4b4d-80b6-20ff128157fe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"FRST-BDGT\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7b0ee80-b039-4d48-a8c6-b2c83af23a4c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Budget is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateBudget(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "23f1986d-4f29-4c62-8622-e42886fb2798",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bc5d524-ece7-43e9-821d-63bcf983df85",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Budget content is valid\", function() {",
											"    utils.validateBudget(record);",
											"    pm.environment.set(\"budgetId2\", record.id);",
											"    pm.environment.set(\"budgetContent2\", record);",
											"    pm.expect(record.budgetStatus).to.eql(\"Planned\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a875ca4f-438c-40ba-bf2e-59311d9827df",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let budget = utils.buildBudgetMinContent(\"SCND-BDGT\");",
											"budget.budgetStatus = \"Planned\";",
											"budget.fiscalYearId = pm.environment.get(\"secondFiscalYearId\");",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(budget));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records by complex query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "007c52a1-0bbe-4407-b1c2-ac2220df9610",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One budget record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.budgets).to.have.lengthOf(1);",
											"    utils.validateBudget(records.budgets[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ae7155d-32aa-47d3-b8d1-4528ce7e6632",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=budgetStatus==Planned and fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "budgetStatus==Planned and fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update second budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7810441f-3e91-4bca-b647-638cd056eb74",
										"exec": [
											"pm.test(\"Budget is updated\", () => pm.response.to.have.status(204));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52adf775-50b2-4021-89d8-d8a5084a76a5",
										"exec": [
											"let record = pm.environment.get(\"budgetContent2\");",
											"record.budgetStatus = \"Frozen\";",
											"pm.variables.set(\"budgetContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get second budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c1e073c-70d4-44ca-9aff-80faa2393009",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Budget is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    let record = pm.response.json();",
											"    utils.validateBudget(record);",
											"    pm.expect(record.budgetStatus).to.eql(\"Frozen\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7c0ba595-4b21-4fba-a5dc-4b636a36e538",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records by complex query- 2 records",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c093bfd5-bed8-4402-9cb0-9754a94a9e6a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"2 budget records are found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.budgets).to.have.lengthOf(2);",
											"    collection.budgets.forEach(record => utils.validateBudget(record));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbf2e961-a85d-475c-abaf-2d566d1efd8e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "fund.fundStatus==Active and ledger.name=test and fiscalYear.periodEnd > 2019-12-12"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete second budget record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa328aea-ad7d-4ccf-99c2-dda25c20ff24",
										"exec": [
											"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "91ccc592-87ec-45a9-b527-3159b66a1849",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get budget records without query - 1 record",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6d030a3-13d2-439e-a546-ef4ae1a9158f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"One budget record is found\", function () {",
											"    pm.response.to.be.ok;",
											"    let collection = pm.response.json();",
											"    pm.expect(collection.budgets).to.have.lengthOf(1);",
											"    utils.validateBudget(collection.budgets[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "01aebbb0-490d-4f24-ac0b-49208b79c82a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group Fund Fiscal Years",
					"item": [
						{
							"name": "Create group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2b72e2a-d730-453f-b833-60d1bbafdffc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Group fund fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"    pm.environment.set(\"groupFundFiscalYearForCrudId\", record.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc66f77f-0210-470d-8643-40a3e5e46298",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupFundFiscalYearContent\", ",
											"JSON.stringify(utils.buildGroupFundFiscalYearMinContent(pm.environment.get(\"groupId\"), pm.environment.get(\"fundId\"), pm.environment.get(\"fiscalYearId\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupFundFiscalYearContent}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify created group fund fiscal years",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13a10531-144d-4252-b4d4-1402b9f15553",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fund fiscal year founded\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5cfe66d-7fe4-4cce-80cb-d489811d65d1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=id={{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "id={{groupFundFiscalYearForCrudId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "674cdbc7-08c5-4584-aabc-a4c0d1366ee3",
										"exec": [
											"pm.test(\"Group fund fiscal year type is deleted\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3d67821-77f6-4790-a391-4e4c5c52629c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years/{{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years",
										"{{groupFundFiscalYearForCrudId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "593a358d-abf3-4763-acd5-36cb65ed437c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fund fiscal year founded - deleted\", function () {",
											"    pm.response.to.be.ok;",
											"    let records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(0);",
											"    pm.expect(records.totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "249e7ba4-b73d-4f33-b5e0-c1e1c6f44a9a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=id=={{groupFundFiscalYearForCrudId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "id=={{groupFundFiscalYearForCrudId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assign funds to groups",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create group 1 - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "397c8d02-1f0b-458a-a915-e06833539757",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "15060f06-4c91-4652-921e-9b67fbc16ac1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent()));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create group 2 - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1187e0fe-29f4-44ee-afd9-9eacb40593ba",
												"exec": [
													"pm.test(\"Group is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"groupId2\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9b239482-3acb-49ef-9c0c-b218297325f0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let group = utils.buildGroupMinContent();",
													"group.code = \"tst-grp-2\";",
													"group.name = \"Test group 2\";",
													"pm.variables.set(\"groupContent\", JSON.stringify(group));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fiscal year one - test current fy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1975de25-8542-4bf7-8fcf-2b3178541349",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testCurrentFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "370c1beb-987d-42b5-af0d-5f7448e5352f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').subtract(2, 'year');",
													"var end = moment().endOf('year').subtract(2, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTCURRENT\";",
													"fiscalYear.code = \"TESTCURRENT2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fiscal year one - test next fy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22bed930-3543-404d-8455-42a73fa0eb15",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testNextFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4cb52115-adea-4038-bf38-fb58bbd752d9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').subtract(2, 'year');",
													"var end = moment().endOf('year').subtract(2, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEXT\";",
													"fiscalYear.code = \"TESTNEXT2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create current fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b2d67a2-2a02-4519-ba9b-e0a703569100",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"currentFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0854c11d-6db4-450e-8537-1a6e6c1bf09f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year');",
													"var end = moment().endOf('year');",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTCURRENT\";",
													"fiscalYear.code = \"TESTCURRENT2019\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create next fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c01d497d-06a5-476b-a9dc-b6dbfc154b1d",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"nextFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3eaa64e4-a010-47f5-8791-e15803e3c840",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = moment().startOf('year').add(1, 'year');",
													"var end = moment().endOf('year').add(1, 'year');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEXT\";",
													"fiscalYear.code = \"TESTNEXT2020\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger current",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9fe58d3-f7d1-4ef1-b30d-3cea21dccfe6",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"currentFyLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "67ad3889-e3cc-4b4d-bf7e-357593d42cbf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testCurrentFiscalYearOneId\");",
													"ledger.name = \"Current\";",
													"ledger.code = \"TEST_CURRENT\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger next",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bf38e93-9835-45a6-b96f-568417daf7e0",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"nextFyLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c85b2bd9-34cd-4e89-b650-27f7a880ac88",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testNextFiscalYearOneId\");",
													"ledger.name = \"Next\";",
													"ledger.code = \"TEST_NEXT\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create fund with groups - current fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "299fcb6b-1467-4413-a0ad-53c8b5cd771c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fc7cb1ad-e039-4cd7-b351-8c70776730ae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_CURRENT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"currentFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund with groups - current fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ee59cd3-cb70-4ada-8f85-a4e755ce6f69",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.have.status(200);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.groupIds).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7db1682-4ba6-418e-8780-dee533ccc465",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{currentFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{currentFyFundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query - current FY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17602b45-039d-460a-ab68-f046aeb54973",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {}; ",
											"",
											"pm.test(\"Group fund fiscal years founded\", function () {",
											"    pm.response.to.be.ok;",
											"    records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});",
											"",
											"pm.test(\"Group fund fiscal years contain expected year id\", function () {",
											"    records.groupFundFiscalYears.forEach(gffy => {",
											"        pm.expect(gffy.fiscalYearId).to.equal(pm.environment.get(\"currentFiscalYearId\"));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67c05ebd-6cd4-4aaf-b150-b0c9e57d6326",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=fundId={{currentFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "fundId={{currentFyFundId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74a21064-1062-491c-b0a0-a85bc05cb3e8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"nextFyFundId\", record.fund.id);",
											"    pm.expect(record.fund.fundTypeId).to.eql(pm.variables.get(\"fundTypeId\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4f5c9f73-9319-41bf-a8aa-b6633dd027aa",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_NEXT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"nextFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb17a7a0-49eb-4f6b-b1c3-0d2d25964735",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is retrieved\", function () {",
											"    pm.response.to.have.status(200);",
											"    record = pm.response.json();",
											"});",
											"",
											"pm.test(\"Fund content is valid\", function() {",
											"    utils.validateCompositeFund(record);",
											"    pm.environment.set(\"currentFyFundId\", record.fund.id);",
											"    pm.expect(record.groupIds).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f6a1798-0767-45ca-8d47-505624045ad0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get group fund fiscal year by query - next FY",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a6f5fbd-8a69-44fe-8ac7-0b445b2e42ed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {}; ",
											"",
											"pm.test(\"Group fund fiscal years founded\", function () {",
											"    pm.response.to.be.ok;",
											"    records = pm.response.json();",
											"    pm.expect(records.groupFundFiscalYears).to.have.lengthOf(1);",
											"    pm.expect(records.totalRecords).to.equal(1);",
											"});",
											"",
											"pm.test(\"Group fund fiscal years contain expected year id\", function () {",
											"    records.groupFundFiscalYears.forEach(gffy => {",
											"        pm.expect(gffy.fiscalYearId).to.equal(pm.environment.get(\"nextFiscalYearId\"));",
											"    });",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2cc22b5-1ef0-4edc-a0dd-b66317cf1f0d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years?query=fundId={{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									],
									"query": [
										{
											"key": "query",
											"value": "fundId={{nextFyFundId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund with groups - next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15d42eea-5f3f-4269-b5ab-93b0b7ba0f74",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let records = {};",
											"",
											"pm.test(\"Composite Fund is updated\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"utils.sendGetRequest('/finance/group-fund-fiscal-years?query=fundId=' + pm.environment.get(\"nextFyFundId\"), (err, res) => {",
											"        pm.test(\"Group fund fiscal year deleted\", function () {",
											"            pm.expect(res).to.be.ok;",
											"             records = res.json();",
											"             pm.expect(records.totalRecords).to.equal(1);",
											"             pm.expect(records.groupFundFiscalYears[0].groupId).to.equal(pm.environment.get(\"groupId2\"));",
											"        });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f87bdfc-5ea0-406e-8cac-7d88b2ae80b6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TEST_UPDATE_NEXT\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"nextFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId2\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Restrictions",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a3137c29-dab1-4d42-b125-e19017383f46",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e6e6d0e9-ab60-4580-99a3-032d04f5fd46",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6bfb680-8dd9-43b2-a401-5416cf62af92",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "023f4637-a8c6-434e-b424-91a089361477",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09e511bd-5abc-48c9-91d4-0cdf86e900e8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"histFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"HIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "209108fe-4cfa-4c81-9073-537538cce980",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"History\",\n\t  \"code\": \"HIST\",\n\t  \"externalAccountNo\": \"276507594438808\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"subdivided by geographic regions, to match individual selectors\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d39308f-78c7-41df-b187-d0e0e75e6b93",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"canhistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"CANHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "da872671-3f4a-4dee-b6bb-7bfe73ae203f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Canadian History\",\n\t  \"code\": \"CANHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL; use for Canada once CANLATHIST is inactivated\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\",\n\t  \"allocatedFromIds\": [\"{{histFundId}}\"]\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61f5d7a0-7ca6-40c8-a4bb-7e74d4d74f7d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"lathistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"LATHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53fbf492-d949-4d08-8ffb-10284e340815",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Latin America History\",\n\t  \"code\": \"LATHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update HIST fund - add allocatedToIds set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87b5373d-13d4-42a3-86d9-d7f67be57f30",
												"exec": [
													"pm.test(\"Fund is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2f7e697f-b487-4541-81ac-70167dfb3731",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/finance/funds/\" + pm.environment.get(\"histFundId\"), function (err, res) {",
													"    let histFund = res.json();",
													"    histFund.fund.allocatedToIds = new Array(pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"));",
													"",
													"    pm.environment.set(\"histFundContent\", JSON.stringify(histFund));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST budget",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "450c4a04-45ab-4c6a-b254-b0183c177c77",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var budget = utils.buildBudgetMinContent(\"HIST-BDGT\", pm.environment.get(\"histFundId\"), pm.environment.get(\"allocFiscalYearId\"));",
													"budget.allocated = 9999999;",
													"pm.variables.set(\"histBudgetContent\", JSON.stringify(budget));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5553c0d5-ade7-4286-820d-480cf1600d48",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"histBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"HIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72e381b7-0681-4874-b885-9f1feba99ca2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"canhistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"CANHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "078e8a4b-9db3-4713-8987-70301c6b10ba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"canhistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"CANHIST-BDGT\", pm.environment.get(\"canhistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{canhistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e5c4c05-dc7d-4c1a-b5a6-396f7f26b714",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"lathistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"LATHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "69186318-5cc4-4e4a-855b-95a90e6adf8b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"lathistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"LATHIST-BDGT\", pm.environment.get(\"lathistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lathistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create external allocation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f161e25f-2a3f-474a-802d-ff6f81d7daf8",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b466e88b-2c43-4c8b-89fe-b10a4adccd84",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d904ec2-a738-4238-9338-8529d92e7b81",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "57289829-f523-4fbc-8f36-0113b3d746a2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation matching allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a32d3b8-00ba-4d25-a5c9-744275ba3668",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "307e4a86-edf3-478c-a28d-a7bf39f57ef3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"canhistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cffceb4-d57f-4b50-bd89-9ef1989fdb26",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e88d7835-8b46-491e-a495-349ffe704995",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer matching allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b094726-0ceb-4dd2-9a7c-3e800a74ded1",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b5a3c9b1-136e-4077-a1cc-1a6910c3917e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"canhistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2f93152-410a-4e6c-bac7-f39e73dc580e",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0b867123-ae22-474f-9c03-5f5ab949fbcf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with empty allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27fb9741-ce81-4b20-9ccf-7192f5738e77",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d12e46dd-02ae-4208-9601-bc494dd79edf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d95aeab4-bfff-4209-ad42-0d3dde2a7194",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73a8dcec-2ddb-490d-9498-340e570115b0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with empty allocated ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2561e69d-4cfc-428b-88f3-ef74661d04bd",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b542561f-a23a-473d-a245-b17f5f30dd60",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83133abf-adf9-48c1-8e0d-266c0f7c3711",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fcf37414-eb90-484b-ad7f-9e8c3d131334",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with empty allocatedFromIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4769b537-1f40-458a-bc0d-42d4e7c34e2e",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e372447e-ab25-468a-81df-0131cf421f6f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"lathistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b566d57-5774-4a3a-b756-fff699e2c6f1",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e9ebba0-d487-45c6-8264-e8d30cde0e60",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with empty allocatedFromIds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0572a64-9530-4892-94db-1d353a7f7fe7",
												"exec": [
													"let record = {};",
													"",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id);",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "276fa342-d04d-48bb-ac4a-0addd297af19",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"histFundId\"), pm.environment.get(\"lathistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "159f7539-9c26-4761-b827-36c1acd7cf5b",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee7ce6a6-13cd-4107-a31c-76d18ed1b812",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get allocation transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c48da418-e241-4561-8ab2-6f300a329404",
												"exec": [
													"pm.test(\"Get allocation transaction id\", function() {",
													"    pm.environment.set(\"transactionToDelete_id\", pm.response.json().transactions[0].id); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "35c68d5c-9af0-4b53-a058-bbb46254c0ae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=toFundId=={{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "toFundId=={{histFundId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete allocation transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "674bf2b2-3d2c-4249-9555-2de0aae96a07",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cbc6f0f1-d516-4dfa-a0de-b6ca7dfd0162",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionToDelete_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionToDelete_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1cb16c48-ae6a-43fb-affd-6cca4790cb65",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "01975891-cdfc-49e0-a92e-f80dc8e8eb8b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{histBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{histBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60b65dfd-8d3f-45f3-b259-c7b5f87c30f9",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78c4d234-35ec-42a4-90a8-06ad8c5228a2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{canhistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{canhistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0ecf681-f7b8-408f-95c4-f030a24a2c95",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0434aed3-4bdb-4129-9ef0-7cad0377cd3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{lathistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{lathistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac1db349-0892-4865-a85d-82ff96dc2124",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dc4cadc3-728e-46f3-b7bd-246a8f1ec5f7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{lathistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{lathistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fbc39b0-a698-4c68-8501-778802623621",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "63de8ffd-1555-478b-b9e5-31945cc98a10",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{canhistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{canhistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e5e6489-02ae-4b6b-90e9-0fd8d12e221e",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d7b3b704-82a2-4b13-917a-57e01bc9d53c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b182171-0723-48d8-a50a-7ee4c87d4167",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5acc44fd-d332-4720-aedd-6f5ab2484d07",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33e6cfe1-498c-4a30-80f1-36cd7b647a04",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "86373d07-515d-43f9-a8eb-a59b2bad4e0f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Allocations",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2e179670-aef9-4a4b-93fa-5c33544de494",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bac1e3bb-02ae-463d-867a-c05e0ee1bc04",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c618e50c-0bb6-4da1-978a-b698cc645aec",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c26f5440-1604-4561-93d6-1e596d3a5caf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05e2b9f7-6553-4531-b609-ebeed82a96bc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e6666648-57ce-4478-bcea-edc4549d1202",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e62f1a9-f8b0-4c9e-9d99-794784ef5d1e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "10a259c4-d819-4fcf-bca5-0eff161c5111",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3ec8421-f922-4eb2-b027-f17246562bca",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5aeb0ba6-809b-4365-b744-1b8f3c0303c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbca0039-862e-4561-b1a1-28eaabafe062",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e8cbece0-a4b2-4e5d-8303-7676f41db574",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec8b1f2c-95a6-4ac8-9d6f-05a4414dc12c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "823eb723-f6fe-41b2-9f32-75e33c010f69",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d2a0119-139d-4a78-a7ee-9273b1ad0b94",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "56130df7-60d6-44c3-985b-1a644edf55d6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7aa16fa4-c741-45ed-9de8-f6b042fcfb3e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8c2cdc57-26ea-4281-88d6-f0c43d01a315",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d071ab0-2a3b-495c-8901-bbb0fbfd6e94",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "489ab619-9f96-4c23-a326-31fa85231057",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{transactionId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger record with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "beb0c6d4-5589-4a0f-aa29-705dd4f631d6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledger is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json();",
													"    utils.validateLedger(ledger);",
													"    let allocation = JSON.parse(pm.environment.get(\"allocationContent\"));",
													"    pm.expect(ledger.allocated).to.equal(allocation.amount);",
													"    pm.expect(ledger.available).to.equal(allocation.amount);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c62bae85-4785-4890-b123-997d59e34c7b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}?fiscalYear={{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{allocFiscalYearId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger records by fiscalYear with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd89cbd1-b6ef-406b-90e3-93ee34f7cfed",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledgers are retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json().ledgers[0];",
													"    utils.validateLedger(ledger);",
													"    let allocation = JSON.parse(pm.environment.get(\"allocationContent\"));",
													"    pm.expect(ledger.allocated).to.equal(allocation.amount);",
													"    pm.expect(ledger.available).to.equal(allocation.amount);",
													"    pm.environment.unset(\"allocationContent\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e0cf6809-0722-43b1-84d7-2f9e59323371",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers?fiscalYear={{allocFiscalYearId}}&query=id=={{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{allocFiscalYearId}}"
												},
												{
													"key": "query",
													"value": "id=={{allocLedgerId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2f4b4a5-e0e8-47c6-9c92-f5a1b4fd9feb",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4a3a6d5a-1e75-4e8d-93a1-8df76a2d6be8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84465c86-a299-4913-b6a5-c2ef6a5e2f75",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "459293af-817d-46f8-b1bb-1de06d6873e0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05402a37-39d6-4718-a5a1-1e6b5533b9d7",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ecfb5397-b329-470c-9452-543d649eae3f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3feea89-9c20-49d8-8704-37fd583aa15f",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d07a316b-1d8d-4a58-aa1f-b999e3c620fd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "074bd04c-9f70-4d11-b12d-d3c296f51fba",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2db0775a-54be-4754-81d8-15bafdb57e69",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Encumbrances",
							"item": [
								{
									"name": "Prepare data for encumbrances",
									"item": [
										{
											"name": "Create fiscal year  - required for budgets",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5bff2ecd-c7f0-4ad3-8ec3-e7d16110b0fb",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ENCFY2019\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2a3efb27-01c6-49f7-a518-6567bf771c7b",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encFiscalYearId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encFyContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ledger - required for funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f0388e2f-4d18-41e8-917d-f564f98f232d",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encLedgerId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "997bc70a-9335-43ce-9157-24d8fca1fb04",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let ledger = utils.buildLedgerMinContent(\"ENC-LDGR\", \"Test encumbrance ledger\");",
															"ledger.fiscalYearOneId = pm.environment.get(\"encFiscalYearId\");",
															"pm.variables.set(\"encLedgerContent\", JSON.stringify(ledger));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encLedgerContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Fund 1 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "54944b14-402e-422f-b914-abef27f1d8d9",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Encumbrance Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Encumbrance Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fund1Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"ENC-FND1\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "787c5047-31a3-4f3b-8e29-70fe5d1bc24d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ENC-FND1\", pm.environment.get(\"encLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encFundContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Fund 2 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "538d9ff5-4c8e-4718-9c38-a95cad7880b0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Encumbrance Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Encumbrance Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fund2Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"ENC-FND2\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f77152a0-c803-4f14-84e0-66ed4cc0870d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encFundContent2\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ENC-FND2\", pm.environment.get(\"encLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encFundContent2}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bfc47a55-6ed2-422e-8a16-e07651820045",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"encBudget1Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"ENC-BDGT1\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "20663abe-66fd-4e9c-883b-fef7f41e5856",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ENC-BDGT1\", pm.environment.get(\"fund1Id\"), pm.environment.get(\"encFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f930aa89-f362-4aa2-831a-b2d4b1b0b9da",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"encBudget2Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"ENC-BDGT2\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f0ee73a2-233c-48fb-a125-b3d9fec10cf5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"encBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ENC-BDGT2\", pm.environment.get(\"fund2Id\"), pm.environment.get(\"encFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Allocate money for budget 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aef7426a-719f-4263-99f0-dccc794eb27a",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"transaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8a0446a8-96e1-48b2-ab15-3ae88cedcfcd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(2500, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"fund1Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Allocate money for budget 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8db088ae-e6aa-4d86-838c-438d064aa27d",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"transaction2Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c959c349-e044-4abd-b9d4-68afa00b39f8",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(1500, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"fund2Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 1 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "77cb6ccf-72be-4dcb-8fb6-14c31a656181",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "acc4b1d5-6c61-4c8e-9099-b7021a7c5e9d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fd3b8f75-c378-4011-8284-98c471119f7f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "801b3764-12db-45ae-9a0b-876495912e52",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Test Encumbrance Restrictions",
									"item": [
										{
											"name": "Create encumbrance with insufficient funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "263aed66-23a2-4e97-a7de-bbcd6574fe3a",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is not created\", () => {",
															"    pm.response.to.have.status(400);",
															"    response = pm.response.json();",
															"    pm.expect(response.errors[0].message).to.equal(\"Fund cannot be paid due to restrictions\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8c666bb7-ae24-45a4-af11-5215ad5bd9da",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let encumbranceRemainingAmount = 2501;",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(encumbranceRemainingAmount, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Encumbrance\");",
															"",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fund1Id\");",
															"pm.environment.set(\"restrictedEncumbranceContent\", JSON.stringify(transactionEncumbrance));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{restrictedEncumbranceContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8999f878-2ca6-48a3-a86a-c5f4fdffbb2a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dd8dfef2-36a4-4b76-a96c-33064b924921",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Test encumbrances",
									"item": [
										{
											"name": "Create order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0f7e0769-a73e-4d1b-8efa-f68e36d5ec99",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7c44c9a3-e036-4ea3-b775-1a485341c952",
														"exec": [
															"pm.test(\"Order transaction summary is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"orderTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{$guid}}\",\r\n  \"numTransactions\": 2\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create encumbrance 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1b08430a-6dae-4e87-8ad3-a8689f8b5687",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encumbrance1Id\", pm.response.json().id);",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5b9fa8be-a925-44cf-a9a9-beca8f1727ab",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"var uuid = require(\"uuid\");",
															"",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(25, pm.environment.get(\"encFiscalYearId\"), null, \"Encumbrance\");",
															"encumbranceMinContent.initialAmountEncumbered = 25;",
															"encumbranceMinContent.amountExpended = 0;",
															"encumbranceMinContent.amountAwaitingPayment = 0;",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"",
															"transactionEncumbrance.encumbrance.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionSummaryId\");",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fund1Id\");",
															"delete transactionEncumbrance.toFundId;",
															"",
															"pm.environment.set(\"encumbrance1Content\", JSON.stringify(transactionEncumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance1Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create encumbrance 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c25a35b-07f6-479a-8c65-a5ee9703e3e3",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encumbrance2Id\", pm.response.json().id);",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6b45eaab-46eb-4c79-95d1-a1f10cb30c82",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"var uuid = require(\"uuid\");",
															"",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(105, pm.environment.get(\"encFiscalYearId\"), null, \"Encumbrance\");",
															"encumbranceMinContent.initialAmountEncumbered = 105;",
															"encumbranceMinContent.amountExpended = 0;",
															"encumbranceMinContent.amountAwaitingPayment = 0;",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"",
															"transactionEncumbrance.encumbrance.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionSummaryId\");",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fund2Id\");",
															"delete transactionEncumbrance.toFundId;",
															"",
															"pm.environment.set(\"encumbrance2Content\", JSON.stringify(transactionEncumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance2Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 1 record after encumbrances creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f7fe072a-345a-447a-a788-67b6f8eef7c4",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(2500 - 25);",
															"    pm.expect(budget.encumbered).to.eql(0 + 25);",
															"    pm.expect(budget.unavailable).to.eql(0 + 25);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bbb7450d-de92-4034-9685-d7233867cf18",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 2 record after encumbrances creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f2a99095-bc90-4343-94d5-6ee7593abe0b",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(1500 - 105);",
															"    pm.expect(budget.encumbered).to.eql(0 + 105);",
															"    pm.expect(budget.unavailable).to.eql(0 + 105);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "31c7affc-ef74-446a-b342-fbf883a8f997",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ledger record with summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "45c2e4a7-0a1f-44b6-b937-0ddddb8f1bc0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"    utils.validateLedger(ledger);",
															"    let encumbrance1 = JSON.parse(pm.environment.get(\"encumbrance1Content\"));",
															"    let encumbrance2 = JSON.parse(pm.environment.get(\"encumbrance2Content\"));",
															"    pm.expect(ledger.available).to.equal(2500 + 1500 - encumbrance1.amount - encumbrance2.amount);",
															"    pm.expect(ledger.unavailable).to.equal(encumbrance1.amount + encumbrance2.amount);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "87c300a8-dc91-4b19-a975-63fef80f0f44",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}?fiscalYear={{encFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{encLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{encFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e77a819d-e440-4529-81e3-a5a56722f978",
														"exec": [
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e51e78ad-3567-4c93-9a97-2f2efa1e4942",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"invoice-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create positive pending payments, encumbrance linked",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3318f0e1-365c-44f3-a5f4-632c462d8a6a",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pendingPaymentTransaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b58326b8-b975-4b98-8802-7cf880edb7ca",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let pendingPayment = utils.buildPaymentTransactionMinContent(10.0, pm.environment.get(\"encFiscalYearId\"), pm.environment.get(\"fund1Id\"), \"Pending payment\");",
															"pendingPayment.awaitingPayment = {};",
															"pendingPayment.awaitingPayment.encumbranceId = pm.environment.get(\"encumbrance1Id\");",
															"pendingPayment.awaitingPayment.releaseEncumbrance = false;",
															"pendingPayment.sourceInvoiceId = pm.environment.get(\"invoiceTransactionSummaryId\");",
															"pendingPayment.fromFundId = pm.environment.get(\"fund1Id\");",
															"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(pendingPayment));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pendingPaymentContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 1 updated after Pending payment creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a34c72d4-3f4f-4b75-909d-63a6ab26b8fd",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Unreleased\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(15);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(25);",
															"    pm.expect(encumbrance.encumbrance.amountAwaitingPayment).to.eql(10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "008087e4-c142-4df1-be6f-13406048cae4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3cba4805-01f0-47b0-86ca-fcb1462a5faa",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bc8b28e0-cc8d-4933-9794-22ba10688219",
														"exec": [
															"pm.test(\"Order transaction summary is updated\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{orderTransactionSummaryId}}\",\r\n  \"numTransactions\": 2\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries/{{orderTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries",
														"{{orderTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Updete encumbrace 1 to make it pending",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fd2ead1b-16e1-4a1e-97b8-3b86c077b7ac",
														"exec": [
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "94a4b903-a8c1-405f-a26a-2a31597370a0",
														"exec": [
															"let encumbrance = JSON.parse(pm.environment.get(\"encumbrance1Content\"));",
															"encumbrance.encumbrance.status = \"Pending\";",
															"",
															"pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance1Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Release encumbrance request",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5d5a7e17-dd45-49c1-8401-62c99a00c381",
														"exec": [
															"pm.test(\"Encumbrance successfully released\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "16420b94-ff3d-45e9-afa5-2a3112c714b3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/release-encumbrance/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"release-encumbrance",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 1 updated with pending status",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a8ae4fa-aeff-416b-ac7b-c68ee0363640",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Pending\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.amountAwaitingPayment).to.eql(10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "dcc26f35-2af0-4401-85f8-e87985c8bf70",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 2 updated with Released status",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ca224c5b-131e-43b9-9022-95e2bc778e06",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance2Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Released\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(105);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "128ed741-366e-4336-bab6-f229ef82e4fc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 1 record after encumbrances become Pending",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cafe9503-52ea-44b5-a51c-5e1e7477c6fd",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(2500 - 10);",
															"    pm.expect(budget.encumbered).to.eql(0);",
															"    pm.expect(budget.unavailable).to.eql(0 + 10);",
															"    pm.expect(budget.awaitingPayment).to.eql(0 + 10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "27c6f014-2840-4280-83b7-c720ab23abfe",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 2 record after encumbrances being Relesed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "789877d4-49f1-40b1-8594-5acc2e17f55f",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(1500);",
															"    pm.expect(budget.encumbered).to.eql(0);",
															"    pm.expect(budget.unavailable).to.eql(0 );",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "dfb2375f-9fdf-470e-8195-eba1f58be4c5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ledger record with summary after encumbrances update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "32591432-e2a5-4d37-9822-469ab7703ac6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"    utils.validateLedger(ledger);",
															"    pm.expect(ledger.available).to.equal(2500 + 1500 - 10);",
															"    pm.expect(ledger.unavailable).to.equal(10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "12d8d4af-bc08-47c5-8c06-eff6c58f2f2f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}?fiscalYear={{encFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{encLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{encFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Update order transaction summaries, increase num transactions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d76417c8-9b6c-4129-96e8-735847630c72",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "107ca99f-37f9-4669-a2bc-d0280fdb4c49",
														"exec": [
															"pm.test(\"Order transaction summary is updated\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{orderTransactionSummaryId}}\",\r\n  \"numTransactions\": 3\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries/{{orderTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries",
														"{{orderTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create encumbrance 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "69feecaf-6b36-4fa7-8763-ea25c97bf851",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"encumbrance3Id\", pm.response.json().id);",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "38731106-9d69-4816-a61c-228cc9fe1423",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(45, pm.environment.get(\"encFiscalYearId\"), null, \"Encumbrance\");",
															"encumbranceMinContent.initialAmountEncumbered = 45;",
															"encumbranceMinContent.amountExpended = 0;",
															"encumbranceMinContent.amountAwaitingPayment = 0;",
															"encumbranceMinContent.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionSummaryId\");",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fund1Id\");",
															"delete transactionEncumbrance.toFundId;",
															"pm.environment.set(\"encumbrance3Content\", JSON.stringify(transactionEncumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance3Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update encumbrace 1 to make it Unreleased, change initialAmountEncumbred",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "783d4b16-2ede-43c4-83a8-2ff0ff92508d",
														"exec": [
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "39c0cdde-f0a9-459d-9b56-6391e111362e",
														"exec": [
															"let encumbrance = JSON.parse(pm.environment.get(\"encumbrance1Content\"));",
															"encumbrance.encumbrance.status = \"Unreleased\";",
															"encumbrance.encumbrance.initialAmountEncumbered = 110;",
															"encumbrance.amount = 110;",
															"",
															"pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance1Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update encumbrace 2 to try update amounts",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1ad53541-0878-4415-848c-f4a26ddcefe1",
														"exec": [
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "701927f0-1d9e-4aba-866c-e3f3b43ecf18",
														"exec": [
															"let encumbrance = JSON.parse(pm.environment.get(\"encumbrance2Content\"));",
															"encumbrance.encumbrance.initialAmountEncumbered = 110;",
															"encumbrance.amount = 110;",
															"",
															"pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbrance1Content}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 1 updated with Unreleased status, amount consider awaitingPayment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0554ac60-f7ca-48ff-915d-66a6ee3047bd",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance1Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Unreleased\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(110 - 10);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(110);",
															"    pm.expect(encumbrance.encumbrance.amountAwaitingPayment).to.eql(10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "86667834-ab3b-40ba-8b90-5550975d636b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 2 not changed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2841cb27-a249-4fc3-a594-61043422e497",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance2Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Released\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(105);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3bffdf82-2002-468d-a5d9-8dd7c10a6d2c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrace 3 created",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8fbdb04f-2e4c-42fe-a645-15c64deb3826",
														"exec": [
															"let encumbrance = {};",
															"pm.test(\"Trasaction encumbrance is retrieved\", () => {",
															"    pm.response.to.have.status(200);",
															"    encumbrance = pm.response.json();",
															"    pm.environment.set(\"encumbrance3Content\", JSON.stringify(encumbrance));",
															"});",
															"",
															"pm.test(\"Encumbrance status is Pending is created\", () => {",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Unreleased\");",
															"});",
															"",
															"pm.test(\"Encumbrance amounts are zero\", () => {",
															"    pm.expect(encumbrance.amount).to.eql(45);",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.eql(45);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "69273577-1086-4b10-8c3e-d89c14512598",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance3Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance3Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 1 record after encumbrance 1 unopened and new encumbrance created",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "20b75b4e-986d-4009-9cd4-740348a99e36",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(2500 - 110 - 45);",
															"    pm.expect(budget.encumbered).to.eql(0 + 110 - 10 + 45);",
															"    pm.expect(budget.unavailable).to.eql(0 + 110 + 45);",
															"    pm.expect(budget.awaitingPayment).to.eql(0 + 10);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1ae16491-9e4a-4c26-b8e8-f6ea8e74c379",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check budget 2 not changed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0d045295-a317-4490-bb8b-f3699e4a649f",
														"exec": [
															"let budget = {};",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    budget = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget total updated correctly\", function () {",
															"    pm.expect(budget.available).to.eql(1500);",
															"    pm.expect(budget.encumbered).to.eql(0);",
															"    pm.expect(budget.unavailable).to.eql(0 );",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b5610e3f-86a4-4a4f-891a-f775d408616e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ledger record with summary after 2nd encumbrances update",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "31ed93e2-0e47-4c6a-baee-706544f5c8ca",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"    utils.validateLedger(ledger);",
															"    pm.expect(ledger.available).to.equal(2500 + 1500 - 45 -110);",
															"    pm.expect(ledger.unavailable).to.equal(45 + 110);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "704e1527-d1b4-4da5-acb1-90fb520c6fe9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}?fiscalYear={{encFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{encLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{encFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Clean up",
									"item": [
										{
											"name": "Delete encumbrance 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2344954f-6bf1-4824-9a9a-a30a5ee73641",
														"exec": [
															"pm.test(\"Encumbrance is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4cd98107-9216-4198-ad80-7d2e8e171183",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete encumbrance 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dacdd8b2-57d4-41cd-b647-062b5f463720",
														"exec": [
															"pm.test(\"Encumbrance is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d54c641d-c325-45da-9d55-73690af61e36",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete encumbrance 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fe820516-ec5e-4b07-9bf9-8d4f41ce9ff7",
														"exec": [
															"pm.test(\"Encumbrance is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "19e5eea6-fb5e-4cb1-8dfb-50536f6b9c58",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbrance3Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbrance3Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f39d79d2-4679-4f04-aaf4-eddd923ec7da",
														"exec": [
															"pm.test(\"Allocation is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "abc28d99-1539-41ba-a4ab-12960f86ebb6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{transaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d82171f5-575b-43cf-bc5d-d4ecff1bb752",
														"exec": [
															"pm.test(\"Allocation is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a0558a3b-3f75-428f-aeed-ad014089f438",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transaction2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{transaction2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete pending payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3b7440d5-0983-4f25-ad1f-aaf90cbe5b0d",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "381e153d-3deb-49b5-9367-4b2945a3d351",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{pendingPaymentTransaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{pendingPaymentTransaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget 1 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b51aeab-f0f2-462d-8c10-113152c0360e",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b37b1439-ce88-4a0e-9945-0d22ff4b0e84",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e860df61-2437-48e8-886c-fb2c7c2cd37a",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b799c158-345e-4abc-9536-43834782777a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{encBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{encBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Fund 1 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d0925208-49ff-4022-a3f5-a6c69e3f5e78",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "98eb92ac-c6ea-4982-9e7d-45cf96af3bde",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fund1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fund1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Fund 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3466afc8-2e1c-4c0c-a25f-5689eb699caf",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "43e68d51-be2b-4ca7-9c52-9c7f04c1799c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fund2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fund2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Ledger",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22ca6ad8-fc73-462a-9a89-bdfa45e27488",
														"exec": [
															"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a6453125-a1a1-40d1-b28f-ec7dcb47d4c6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{encLedgerId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{encLedgerId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fiscal year",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "57709e02-4512-46e9-b430-6811f2cb617e",
														"exec": [
															"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cef13e4c-6fc4-41d0-afe1-84accf969e49",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{encFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years",
														"{{encFiscalYearId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Create Transaction encumbrances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9354027c-5830-4e8a-98bf-469f2daadc40",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "76a0224f-1067-4700-a48b-94172afe5ad6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Pending payments",
							"item": [
								{
									"name": "Prepare data",
									"item": [
										{
											"name": "Create fiscal year  - required for budgets",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9f679d52-3eef-4eba-bc46-5c1e16b77b0d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"PCFY2020\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "104c84ee-e29c-4680-8390-805f96bd631a",
														"exec": [
															"pm.test(\"Fisscal Year is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcFiscalYearId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFyContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ledger - required for funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7b59eebc-5a12-4b7a-a990-4e929069f97a",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcLedgerId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4817b9e4-454a-4ff3-886c-df6d31e556b7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let ledger = utils.buildLedgerMinContent(\"PC-LDGR\", \"Test transaction ledger\");",
															"ledger.fiscalYearOneId = pm.environment.get(\"pcFiscalYearId\");",
															"pm.environment.set(\"pcLedgerContent\", JSON.stringify(ledger));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcLedgerContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fund 1 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "786573a9-fd88-4ddf-8999-0aefcd1e0f8d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFund1Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"PP-FND1\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b33c4616-7b47-425f-b375-8e58c71bcb67",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"PP-FND1\", pm.environment.get(\"pcLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFundContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fund 2 - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "542a57ff-d864-4012-8d2c-e555bce706d1",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFund2Id\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"PP-FND2\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bad29b5a-362d-49e5-ab9b-e84ec0994255",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"PP-FND2\", pm.environment.get(\"pcLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFundContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4cbc70d9-94c2-4aad-bc55-ee31256041e6",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"PP-BDGT\", pm.environment.get(\"fromFund1Id\"), pm.environment.get(\"pcFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0090b7bd-754a-4164-bd69-97b521499fd5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"allocBudget1Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"PP-BDGT\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0ce9f520-8455-4373-a1fc-65ae98a3426e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"PP-BDGT2\", pm.environment.get(\"fromFund2Id\"), pm.environment.get(\"pcFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "17485859-db86-4f9e-be71-446f7a73e460",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"allocBudget2Id\", record.id); ",
															"    pm.expect(record.name).to.eql(\"PP-BDGT2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create allocations to Budget 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8b144c78-c03e-447e-9148-e3bfc2b0b302",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(1000, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund1Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a5e7fe21-5fef-424b-8814-638734b9fef3",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"allocTransaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create allocations to Budget 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4c6b7c42-9fdf-4675-b086-ea299186c4b4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(2000, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund2Id\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "81af1d3b-3c1b-48ca-abe6-f055d472831a",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"allocTransaction2Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "902393be-81b7-4c06-8d09-32f83dee426b",
														"exec": [
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9a091103-68ab-4451-8fa9-454a00252c99",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 2,\n  \"numPaymentsCredits\": 2\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"invoice-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a6c3cefd-db1b-4950-b3e3-903353991040",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dcdc0843-1958-4387-9407-f8de28caa548",
														"exec": [
															"pm.test(\"Order transaction summary is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"ordersTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\": \"{{$guid}}\",\r\n  \"numTransactions\": 1\r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"order-transaction-summaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create encumbrance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "874c3583-5d64-490a-a7ef-17637e01758c",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction encumbrance is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"    pm.environment.set(\"encumbranceId\", record.id);",
															"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f02cb7b3-1c61-4489-acec-3f4e33db9d07",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"var uuid = require(\"uuid\");",
															"",
															"",
															"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
															"let transactionEncumbrance = utils.buildTransactionMinContent(125, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund1Id\"), \"Encumbrance\");",
															"encumbranceMinContent.initialAmountEncumbered = 125;",
															"encumbranceMinContent.sourcePurchaseOrderId = pm.environment.get(\"ordersTransactionSummaryId\");",
															"transactionEncumbrance.encumbrance = encumbranceMinContent;",
															"transactionEncumbrance.fromFundId = pm.environment.get(\"fromFund1Id\");",
															"pm.environment.set(\"encumbranceContent\", JSON.stringify(transactionEncumbrance));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{encumbranceContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"encumbrances"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1a81edb6-6c42-4e1b-8700-a37e4c59ee07",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f76cbeb8-b597-4c58-b870-08b42cfa2c77",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Test API",
									"item": [
										{
											"name": "Get ledger record with summary before",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5bd68f6a-7efd-4ef6-b6e3-1306103b1e31",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"",
															"    pm.expect(ledger.available).to.equal(3000 - 125);",
															"    pm.expect(ledger.unavailable).to.equal(125);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "17883611-03a4-4a14-8d6a-e3d17e17ce07",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}?fiscalYear={{pcFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{pcLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{pcFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record before 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fed7c44b-c752-44ca-8a50-015904e3bf77",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().allocated).to.eql(1000.0);",
															"    pm.expect(pm.response.json().available).to.eql(875.0);",
															"     pm.expect(pm.response.json().unavailable).to.eql(125.0);",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(0.0);",
															"    // 100 = 0.0 - 100(pending payment)",
															"    pm.expect(pm.response.json().encumbered).to.eql(125.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a85687c2-c126-4143-894a-ea6bcd05a898",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record before 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "30b7891a-5550-47a8-827b-45ee9b99f03a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().allocated).to.eql(2000.0);",
															"    pm.expect(pm.response.json().available).to.eql(2000.0);",
															"    pm.expect(pm.response.json().unavailable).to.eql(0.0);",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(0.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6484f926-bcd9-4355-99dc-4ed32f0e6443",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create positive pending payments, encumbrance linked, encumbrance is going to be released",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2e7a31ec-353f-4b8e-a6c5-c2cf4b3734ce",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pendingPaymentTransaction1Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "762a3abd-82a5-4a9c-ad8c-4513fa61e27e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let pendingPayment = utils.buildPaymentTransactionMinContent(100.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund1Id\"), \"Pending payment\");",
															"pendingPayment.awaitingPayment = {};",
															"pendingPayment.awaitingPayment.encumbranceId = pm.environment.get(\"encumbranceId\");",
															"pendingPayment.awaitingPayment.releaseEncumbrance = true;",
															"pendingPayment.sourceInvoiceId = pm.environment.get(\"invoiceTransactionSummaryId\");",
															"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(pendingPayment));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pendingPaymentContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/pending-payments",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"pending-payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create negative pending payments, encumbrance not linked",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af043b25-3cd0-4405-bfea-6d7e617c3520",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction payment is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pendingPaymentTransaction2Id\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e87ee776-2954-423e-a6a4-7108f82daa0c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let pendingPayment = utils.buildPaymentTransactionMinContent(-50.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFund2Id\"), \"Pending payment\");",
															"pendingPayment.sourceInvoiceId = pm.environment.get(\"invoiceTransactionSummaryId\");",
															"pendingPayment.amount=-50;",
															"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(pendingPayment));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pendingPaymentContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/pending-payments",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"pending-payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check encumbrance is updated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af6cec3b-cff5-459a-a7c6-d6630a806c33",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Verify transaction released\", function() {",
															"    pm.response.to.be.ok;",
															"    let encumbrance = pm.response.json();",
															"    pm.expect(encumbrance.amount).to.eql(0);",
															"    pm.expect(encumbrance.encumbrance.status).to.eql(\"Released\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "24968d68-940f-4668-8e20-855e7ab1a36d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{encumbranceId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{encumbranceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 1 record after pending payments",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "49dce417-0cce-42dc-b7e7-1775c1d67dd4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(100.0);",
															"    // 100 = 0.0 - 100(pending payment)",
															"    pm.expect(pm.response.json().encumbered).to.eql(0.0);",
															"    pm.expect(pm.response.json().available).to.eql(900.0);",
															"    pm.expect(pm.response.json().unavailable).to.eql(100.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "879c39df-d6e9-4c37-972f-fc0b5edb16c9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget 2 record after pending payments",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0fe7c937-c69d-4b04-9b29-1bb8d93bc573",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().awaitingPayment).to.eql(-50.0);",
															"    pm.expect(pm.response.json().encumbered).to.eql(0.0);",
															"    pm.expect(pm.response.json().available).to.eql(2050.0);",
															"    pm.expect(pm.response.json().unavailable).to.eql(0.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7c94b22d-f9ac-454f-b5cf-2d5f1fb4427b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get ledger record with summary after",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bf8696be-8661-4799-81fc-655403c682cd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Ledger is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    let ledger = pm.response.json();",
															"",
															"    pm.expect(ledger.available).to.equal(3000 - 100 + 50);",
															"    pm.expect(ledger.unavailable).to.equal(100);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bad1bb1f-d3b4-4b25-a6ac-f6abf828753b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}?fiscalYear={{pcFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{pcLedgerId}}"
													],
													"query": [
														{
															"key": "fiscalYear",
															"value": "{{pcFiscalYearId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check tinvoice transaction summary is processed",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d09fffa2-b1a1-44a6-bffd-b2c7618082da",
														"exec": [
															"pm.test(\"Transaction sumary is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    pm.expect(pm.response.json().numPendingPayments).to.eql(-2);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6ed23ad2-98b0-43be-b62d-ebdd5596e32f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/invoice-transaction-summaries/{{invoiceTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"invoice-transaction-summaries",
														"{{invoiceTransactionSummaryId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Clean-up",
									"item": [
										{
											"name": "Delete order transaction summaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "83ccfc14-9a5f-47d1-b904-97b28cc1a5e3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4951b47b-5dc9-4133-a06d-4870cb93a920",
														"exec": [
															"pm.test(\"Order transaction summary is deleted\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/order-transaction-summaries/{{ordersTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"order-transaction-summaries",
														"{{ordersTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e99d07b7-4c0d-4c49-8e27-430df072f2b2",
														"exec": [
															"pm.test(\"Trasaction allocation is deleted\", () => {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3d9d9193-9c0f-4d90-8c70-aaea16ee5b3c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/invoice-transaction-summaries/{{invoiceTransactionSummaryId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"invoice-transaction-summaries",
														"{{invoiceTransactionSummaryId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation transaction 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "75fdbaf9-1254-4dd6-8ed0-17a9fb5b4628",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "19aeaf7c-d57b-4e86-aefa-388569499ab3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{allocTransaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{allocTransaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete allocation transaction 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "65118b98-9fe2-4003-afcd-e3b0ca25c24b",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1206c130-4450-444f-ba13-ff126dd80f9d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{allocTransaction2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{allocTransaction2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete pending payment 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e7181340-656c-4c4d-969c-c19b288b84cc",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bac4c961-d2c6-478e-ad6f-fbd4e3a150ec",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{pendingPaymentTransaction1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{pendingPaymentTransaction1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete pending payment 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "29a95014-3f81-4883-8660-ef5d51c5610a",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6cec8497-1bcc-4358-b8e7-de4170d08814",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{pendingPaymentTransaction2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{pendingPaymentTransaction2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete encumbrance transaction",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8703c2f1-463c-4ae4-bf5e-9bf0fa357050",
														"exec": [
															"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "de685f2e-c422-4b16-9843-3e86c8200b59",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{encumbranceId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance-storage",
														"transactions",
														"{{encumbranceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "62901c72-1d9e-496f-a5cb-18a99affd968",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9410f00b-2544-40e9-8f74-ed6b692b3fac",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete budget 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "749b3fc9-08b9-4bc4-ab5a-9b9baf9cb1f1",
														"exec": [
															"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e2abf611-4ddc-447f-b0df-576a2588e6be",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudget2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudget2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fund record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "903c83a1-f147-4093-9948-bbac0384fb5c",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "596da09f-1003-4f4e-b2c2-7d2ad5b1f9ca",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFund1Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fromFund1Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fund 2 record",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0b78c828-1983-482d-ac89-ad218c080019",
														"exec": [
															"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3edf49a5-12ce-4322-a41f-f58ec461a5dd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFund2Id}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds",
														"{{fromFund2Id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Ledger",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5fa559d6-b2fa-4ff3-9aec-ed72d4ebee57",
														"exec": [
															"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cfd04b55-6a79-42cb-af5d-23710adc826c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers",
														"{{pcLedgerId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete fiscal year",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "54c55bf7-a2a1-4adf-bad7-bc18014de11b",
														"exec": [
															"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "31f25675-4993-4bf8-a916-dc2c4a27f9e7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{pcFiscalYearId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years",
														"{{pcFiscalYearId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transfers",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "74f7d1eb-aa8f-4494-ae0e-65b458c01118",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"TRANSFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "80cf2feb-0792-4b62-a743-3fe339d641e1",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bbc8a1e-5fee-4b91-853f-6f56cf829ae5",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6f49dde0-4ece-4685-abed-3cca3523f010",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"TRANS-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"transFiscalYearId\");",
													"pm.variables.set(\"transLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create from fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "328d9723-c221-48c0-b54e-e12f3ab28fa3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function () {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"fromFundId\", record.fund.id);",
													"    pm.expect(record.fund.code).to.eql(\"FROM-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6acfb809-8bf2-4754-9c6b-3c9468d784b5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"FROM-FND\", pm.environment.get(\"transLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create to fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fc8ba9f-7218-4ee0-93d4-2dccb2635764",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function () {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id);",
													"    pm.expect(record.fund.code).to.eql(\"TO-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f62e76cd-10cf-44fa-8b22-565f4fd3a3f3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TO-FND\", pm.environment.get(\"transLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create from budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce81eced-dad8-4de2-971c-e5c3b69d8e08",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"fromBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"FROM-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0693b343-dc4f-4499-8f55-324f38dfb005",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var budget = utils.buildBudgetMinContent(\"FROM-BDGT\", pm.environment.get(\"fromFundId\"), pm.environment.get(\"transFiscalYearId\"));",
													"budget.allocated = 9999999;",
													"pm.variables.set(\"transBudgetContent\", JSON.stringify(budget));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create to budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2eec3033-bcf2-4ee8-b7ef-92dfd2ab4362",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"toBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"TO-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b84ea50c-ade3-4839-b5ee-dbd37b44c311",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"transBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TO-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"transFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee1017f8-d9fa-4d78-b547-3a8546e80a05",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99cd6f04-c3c7-442d-8082-918ad20dbd4f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{transFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b150f00-296f-450f-9e83-c981d31759a3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8f0dae09-fc88-4bff-b568-d525a648d53f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get from budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38fb0103-84cf-4d3e-9b88-be60ccc201c6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8a64be2e-c6d6-43a3-b6b9-d3aec190ecd8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{fromBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{fromBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get to budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "510f6581-f041-4a73-bb78-1b2276ed3ffd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b67a044d-c38c-44bf-8774-4549630e1c38",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{toBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{toBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55dc26cc-e5b9-427f-b378-d014dd5fe163",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction transfer is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transferId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Transfer\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "854fe45f-953a-4a3e-b0f4-181d0e1c65d1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"transferContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"transFiscalYearId\"), pm.environment.get(\"fromFundId\"), pm.environment.get(\"toFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get ledger record with summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "256a766b-d1a4-4ec8-ab8b-6f0903771d3e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Ledger is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    let ledger = pm.response.json();",
													"    utils.validateLedger(ledger);",
													"    let allocation = JSON.parse(pm.environment.get(\"transferContent\"));",
													"    pm.expect(ledger.available).to.equal(9999999);",
													"    pm.environment.unset(\"transferContent\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c9defbb-91a7-4361-8327-c11b5239aa01",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{transLedgerId}}?fiscalYear={{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{transLedgerId}}"
											],
											"query": [
												{
													"key": "fiscalYear",
													"value": "{{transFiscalYearId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0435bfc-5bab-4f4d-b894-292d7d34e2da",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction transfer is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "496aa7c0-406c-43da-8c74-d549710894e6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction records by query - 1 record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82f7955a-f432-474a-8928-57ac21fd74c5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"One transaction record is found\", function () {",
													"    pm.response.to.be.ok;",
													"    let records = pm.response.json();",
													"    pm.expect(records.transactions).to.have.lengthOf(1);",
													"    utils.validateTransaction(records.transactions[0]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6f9d0643-09e7-4578-88d9-70d93b2142c9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=id=={{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "id=={{transferId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get allocation transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c643b9d-eeee-4b3f-bed7-0f8b673a19c4",
												"exec": [
													"pm.test(\"Get allocation transaction id\", function() {",
													"    pm.environment.set(\"transactionToDelete_id\", pm.response.json().transactions[0].id); ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "276a4f8a-3f21-4747-b2e0-8d815b20a176",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=toFundId=={{fromFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions"
											],
											"query": [
												{
													"key": "query",
													"value": "toFundId=={{fromFundId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete allocation transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9f972b8-e801-4491-9198-f081e9e3b8a5",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9e43b597-63d1-40a8-ae59-5aa7fa57b184",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionToDelete_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionToDelete_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0678c76d-8ce8-47fb-8432-422601184de8",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ffb2c1a-8a1c-4eed-89a0-75050578c916",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transferId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete from budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b16d1ba-81e5-4b16-bd68-89b56256c737",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ecb833bd-06a8-4fed-b21c-99731b55125c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{fromBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{fromBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete to budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69b1c372-5686-4996-9590-08464d015537",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3e8c7fb-17b7-4ecc-ae58-72500f227451",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{toBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{toBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete from fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d23f248-0d63-4863-94c9-079a444e709c",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "84be2994-1580-454b-8d1d-6e92ffa1024f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{fromFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete to fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b70d0e2-4a2d-4649-a879-83e9ad7b07fc",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "703fa0ed-e539-4ada-b76e-b5f0c9c1aaba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ff633b0-d3f7-4280-a7d8-faefcc95eab9",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "64e1874f-9ca2-4b45-b023-a97f924dcd32",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{transLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{transLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afeb6585-6c4d-42b5-a39e-f8dc9dec16cc",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17fefc14-7e9c-47dd-9610-0d0c3e13a8df",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{transFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{transFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payments Credits",
							"item": [
								{
									"name": "Prepare data for Payments and Credits",
									"item": [
										{
											"name": "Create fiscal year  - required for budgets",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "15e1c8ab-15ab-451d-a9ef-49174a12ff62",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"PCFY2020\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "202aaa28-dc14-43e0-ad9f-60ff913a46cc",
														"exec": [
															"pm.test(\"Fisscal Year is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcFiscalYearId\", pm.response.json().id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFyContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"fiscal-years"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create ledger - required for funds",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0cd4955e-1f71-47e1-a67f-30094ccb4d18",
														"exec": [
															"pm.test(\"Ledger is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"pcLedgerId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e51f1e86-6922-4ce3-bf12-c7c292e60c99",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let ledger = utils.buildLedgerMinContent(\"PC-LDGR\", \"Test transaction ledger\");",
															"ledger.fiscalYearOneId = pm.environment.get(\"pcFiscalYearId\");",
															"pm.environment.set(\"pcLedgerContent\", JSON.stringify(ledger));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcLedgerContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"ledgers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create fund - required for transactions",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "78ca3126-404c-40bf-9f63-0bef0130bf6c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Fund is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Fund content is valid\", function() {",
															"    utils.validateCompositeFund(record);",
															"    pm.environment.set(\"fromFundId\", record.fund.id); ",
															"    pm.expect(record.fund.code).to.eql(\"PC-FND\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3685b07c-8bd1-4e97-bc7b-c82c72e7c711",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"PC-FND\", pm.environment.get(\"pcLedgerId\")))));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcFundContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"funds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create budget first",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "23e39b2b-8006-48bc-b874-1b41efbd2e5c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.variables.set(\"pcBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"PC-BDGT\", pm.environment.get(\"fromFundId\"), pm.environment.get(\"pcFiscalYearId\"))));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "39ffd75d-1f84-465e-b3d7-0f8a882925a2",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let record = {};",
															"",
															"pm.test(\"Budget is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    record = pm.response.json();",
															"});",
															"",
															"pm.test(\"Budget content is valid\", function() {",
															"    utils.validateBudget(record);",
															"    pm.environment.set(\"allocBudgetId\", record.id); ",
															"    pm.expect(record.name).to.eql(\"PC-BDGT\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pcBudgetContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create allocations to Budget",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "36c41f73-4434-4406-8691-2e2668d14625",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(1000, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Allocation\")));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6cc7e26e-94d9-4629-92f2-1818d4327691",
														"exec": [
															"let record = {};",
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"allocTransactionId\", pm.response.json().id); ",
															"    record = pm.response.json();",
															"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{allocationContent}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"allocations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get budget record before",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ac1e7fe1-fbf6-43ae-8b30-4dae981c85fd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.test(\"Budget is retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    utils.validateBudget(pm.response.json());",
															"    pm.expect(pm.response.json().allocated).to.eql(1000.0);",
															"    pm.expect(pm.response.json().available).to.eql(1000.0);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "76f03aa1-1d1c-4197-b494-e1b6b2a0f83a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"budgets",
														"{{allocBudgetId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create invoice transaction summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d70f6217-5fef-4132-af93-2b0553d3d4a1",
														"exec": [
															"pm.test(\"Trasaction allocation is created\", () => {",
															"    pm.response.to.have.status(201);",
															"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f968e492-8032-4d93-9f1b-079f4c8834c3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"invoice-transaction-summaries"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create pending payments for payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f477cdd-7ba7-4161-9018-9c0498a5a633",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction payment is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pendingPaymentTransaction1Id\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e8c127b3-2e76-4198-95ad-9eab4a543c0c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(100.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Pending payment\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pendingPaymentContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/pending-payments",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"pending-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create payments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7523c22-6e24-4683-bcac-dd1d6824d946",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction payment is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"paymentTransactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e4aeab7b-816c-421e-a12d-3da650239919",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"paymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(100.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Payment\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{paymentContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice transaction summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98587f69-b904-4403-939e-230c099caa90",
												"exec": [
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e8b470b9-ec5d-4479-994c-1ce217fca387",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{$guid}}\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"invoice-transaction-summaries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create pending payments for credit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c85c4b55-a3ee-4219-945a-c34361e495f3",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction payment is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pendingPaymentTransaction2Id\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Pending payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3abe95b9-ad67-4094-821f-cc706b089111",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"pendingPaymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(-20.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Pending payment\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pendingPaymentContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/pending-payments",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"pending-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "921f705a-a82a-4dac-811c-65124568ea7e",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction credits is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"creditTransactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Credit\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8536061d-7d43-49a9-98c3-f524853b5604",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.environment.set(\"creditContent\", JSON.stringify(utils.buildCreditTransactionMinContent(20.0, pm.environment.get(\"pcFiscalYearId\"), pm.environment.get(\"fromFundId\"), \"Credit\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{creditContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"credits"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record after payments and credits",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "860e42ba-5f83-40a7-90a8-45a55f4c3948",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"    // 0.0 = 80 - 100(payment) + 20(credit)",
													"    pm.expect(pm.response.json().awaitingPayment).to.eql(0.0);",
													"    // 80.0 = 0 + 100(payment) - 20(credit)",
													"    pm.expect(pm.response.json().expenditures).to.eql(80.0);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad49f588-8732-4838-9aff-062a9eba6c5c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get and verify payment transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5baed57-4c1b-4d20-9e19-e9beb64b2858",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction payment is retrieved and validated\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"    pm.expect(pm.response.json().amount).to.eql(100.0);",
													"    pm.expect(pm.response.json().transactionType).to.eql(\"Payment\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e003b60c-4c54-47a7-abb6-f4d24193a24b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{paymentTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{paymentTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get and verify credit transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c34d8c1-a5c5-4858-9301-510f6aa77b44",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction credit is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"    pm.expect(pm.response.json().amount).to.eql(20.0);",
													"    pm.expect(pm.response.json().transactionType).to.eql(\"Credit\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ae1fa9bf-47c5-481a-a1f4-b74414f32737",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{creditTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{creditTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check pending payment 1 deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "734725b9-7000-42e0-9e67-2b1838f13e6a",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(404));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad2d1f7b-4552-423d-9394-b263c0d909f7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{pendingPaymentTransaction1Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{pendingPaymentTransaction1Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check pending payment 1 deleted Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "771000bf-a90b-4a29-8159-5c3efebd6f05",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(404));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d0dc5ed-4b8b-479f-8297-e74e535663ac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{pendingPaymentTransaction2Id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{pendingPaymentTransaction2Id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete allocation transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c35fe87-aea1-4c76-8dac-012313e1d397",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4626166a-7a44-4271-809e-d5058187ccc1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{allocTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{allocTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete payment transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c51a021e-7c86-43f2-ab2b-ae57110ace51",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "305c3eb6-c465-482c-a840-05bd2f3fd0b4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{paymentTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{paymentTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete credit transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1e9244e-7cd5-43bd-a012-b24f55f89746",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "690ab4b8-15c0-4cda-9ce3-278c7ece18ce",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{creditTransactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{creditTransactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eacb5ecc-b44c-4d32-a654-75f0bc90b2f5",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "47044e03-d62b-4af0-b65d-24e199008c35",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41ff2b6f-6bc7-4826-9db5-47386e34fbfd",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a96fd2e2-58ba-4e98-bb2a-73aa7072be19",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fromFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{fromFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3892ec35-2618-47e4-879c-365a619307ea",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ac95283-ce5e-4e6a-9cb5-624e3346271f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{pcLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{pcLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10800d27-3874-4320-9266-84ce8b8abf24",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a051bf76-faab-4bdd-b1a8-3cd95906ced4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{pcFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{pcFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Create Transaction allocations",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Current fiscal year",
					"item": [
						{
							"name": "Create current fiscal year for ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1f37d6e-189e-4546-987f-70d55d067127",
										"exec": [
											"pm.test(\"Current fiscal year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"currentFiscalYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a985c664-34f2-4d2f-b7ae-ff5e2ca586b7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moment = require('moment');",
											"",
											"let currentFiscalYear = utils.buildFiscalYearMinContent();",
											"var start = moment().startOf('year');",
											"var end = moment().endOf('year');",
											"",
											"currentFiscalYear.periodStart = start.format('YYYY-MM-DD');",
											"currentFiscalYear.periodEnd = end.format('YYYY-MM-DD');",
											"",
											"currentFiscalYear.name = \"CurrentFY\";",
											"currentFiscalYear.code = \"CF1111\";",
											"currentFiscalYear.series = \"CFYSERIES\";",
											"",
											"pm.variables.set(\"fyContent\", JSON.stringify(currentFiscalYear));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create next fiscal year for ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d987a70-9b17-46ff-a13a-31293ef61b5e",
										"exec": [
											"pm.test(\"Next fiscal year is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"nextFiscalYearId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3b31b15-5305-443d-a0b8-cef5b469a90f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moment = require('moment');",
											"",
											"let nextFiscalYear = utils.buildFiscalYearMinContent();",
											"var start = moment().startOf('year').add(1, 'year');",
											"var end = moment().endOf('year').add(1, 'year');",
											"",
											"nextFiscalYear.periodStart = start.format('YYYY-MM-DD');",
											"nextFiscalYear.periodEnd = end.format('YYYY-MM-DD');",
											"",
											"nextFiscalYear.name = \"NextFY\";",
											"nextFiscalYear.code = \"CF2222\";",
											"nextFiscalYear.series = \"CFYSERIES\";",
											"",
											"pm.variables.set(\"fyContent\", JSON.stringify(nextFiscalYear));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fyContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ledger with next fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ed16e27-670b-45a1-8428-8ef5fe2d5225",
										"exec": [
											"pm.test(\"Ledger is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"ledgerForCurrentFiscalYearId\", pm.response.json().id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09f39e64-1a4d-46a9-9013-8ddf82fa8228",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let ledger = utils.buildLedgerMinContent(\"n-lgr\", \"Next FY ledger\");",
											"ledger.fiscalYearOneId = pm.environment.get(\"nextFiscalYearId\");",
											"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{ledgerContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get current fiscal year by ledger id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04d57ce7-5ea0-4b64-b5a8-17424041e61f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Current fiscal year is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    let ledger = pm.response.json();",
											"    pm.expect(ledger.id).to.equal(pm.environment.get(\"currentFiscalYearId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1fafc1b-39b6-485c-8fe3-9678192c1933",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{ledgerForCurrentFiscalYearId}}/current-fiscal-year",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{ledgerForCurrentFiscalYearId}}",
										"current-fiscal-year"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group FiscalYear Summary",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create group fund fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "350bd9a4-27ed-4170-a0ff-8a37841cb7db",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Group fund fiscal year is created\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0f82f0a2-a450-49bd-b1b1-9f383b418d0e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"groupFundFiscalYearContent\", ",
													"JSON.stringify(utils.buildGroupFundFiscalYearMinContent(pm.environment.get(\"groupId\"), pm.environment.get(\"fundId\"), pm.environment.get(\"fiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{groupFundFiscalYearContent}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"group-fund-fiscal-years"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get group fiscal year summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f67ae12f-a6dd-48b0-901e-7e143a035aae",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fiscal year summary is retrieved\", function() {",
											"    pm.response.to.be.ok;",
											"    let summaries = pm.response.json().groupFiscalYearSummaries;",
											"    pm.expect(summaries.length).to.equal(1);",
											"    utils.validateGroupFiscalYearSummaries(summaries[0]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4c7e43dd-0951-420a-a2e0-1a71a119a029",
										"exec": [
											"// let utils = eval(globals.loadUtils);",
											"",
											"// let fiscalYear = utils.buildFiscalYearMinContent(\"DD1259\");",
											"// let group = utils.buildGroupMinContent();",
											"",
											"// // Create fiscal year",
											"// pm.test(\"Fiscal year is created\", function() {",
											"//     utils.sendPostRequest('/finance/fiscal-years', fiscalYear, (err, res) => {",
											"//         pm.expect(res).to.have.status(201);",
											"//         pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//             // Create group",
											"//             pm.test(\"Group is created\", function() {",
											"//                 utils.sendPostRequest('/finance/groups', group, (err, res) => {",
											"//                 pm.expect(res).to.have.status(201);",
											"//                 pm.variables.set(\"groupId\", res.json().id);",
											"//                 pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//                 // Create fund",
											"//                 pm.test(\"Fund is created\", function() {",
											"//                     utils.sendPostRequest('/finance/funds', group, (err, res) => {",
											"//                     pm.expect(res).to.have.status(201);",
											"//                     pm.variables.set(\"fundIdId\", res.json().id);",
											"//                     });",
											"//                 });",
											"//             });",
											"//         });",
											"//     });",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fiscal-year-summaries?query=groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{fiscalYearId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fiscal-year-summaries"
									],
									"query": [
										{
											"key": "query",
											"value": "groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{fiscalYearId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Exchange rate",
					"item": [
						{
							"name": "Get exchange rate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76eefea7-77c3-4bbe-8012-3d31ae6e3517",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Exchange rate is retrieved\", function () {",
											"    pm.response.to.be.ok;",
											"    utils.validateExchangeRate(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "556d74e1-2c01-412e-aa75-cce052f1673f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=EUR",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "EUR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate for same currencies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3918e46-6bfe-4227-8936-893e3356e2fd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Exchange rate for equal currencies is 1.0\", function () {",
											"    pm.response.to.be.ok;",
											"    let exchangeRate = pm.response.json();",
											"    pm.expect(exchangeRate.exchangeRate).to.eql(1.0);",
											"    utils.validateExchangeRate(pm.response.json());",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f8c16a68-dace-4064-9482-d0e6f392f37e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=USD",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e07ffdd3-ad0a-44c6-9dfc-dd0542bb13ab",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b43f47bd-7118-417a-aa24-0396cf68bc7a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Ledgers",
					"item": [
						{
							"name": "Get ledger by id with summary, FY not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aebbf840-ea05-439f-ac72-795e1045daba",
										"exec": [
											"pm.test(\"Fund cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"fiscalYearNotFound\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af26484d-fdd1-4141-827b-8f8ddd4a2a30",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{ledgerId}}?fiscalYear={{fyForDeleteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{ledgerId}}"
									],
									"query": [
										{
											"key": "fiscalYear",
											"value": "{{fyForDeleteId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund types",
					"item": [
						{
							"name": "Create first type for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8568328-b4cd-4f3b-9eb6-76a300dd6e6a",
										"exec": [
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "45c4c7f7-1456-4255-96af-388ed37f99a9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second type for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52ed7b62-3eeb-4c36-8d3d-680b2804b222",
										"exec": [
											"pm.test(\"Fund type is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundTypeId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61b01623-738c-4ea5-8b91-7663e3a5ff1b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative2\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create type without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9fb4a18c-1ab1-4fd9-b3fb-713e0bf7d191",
										"exec": [
											"pm.test(\"Fund type is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"name\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "75c4f269-780e-4178-878e-44a85ecafb79",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create type - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bee79b3f-d3cd-4945-95ac-9639af9c9f76",
										"exec": [
											"pm.test(\"Fund type is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d099f9d5-05e3-40f9-bfd9-d589abe28713",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update type - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4c9cdaf-1ca2-42e3-9595-9a9f766d1cf2",
										"exec": [
											"pm.test(\"Fund type is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7a98f4fc-8b66-4321-a86d-a13be4c4bcb6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Negative\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types/{{fundTypeId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types",
										"{{fundTypeId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for types by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de717c6c-8a60-4c97-8505-e48f1868d7bf",
										"exec": [
											"pm.test(\"Fund types cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53370edb-3491-4afa-9146-3cd1c1664107",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Funds",
					"item": [
						{
							"name": "Create first fund for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47575b61-ba27-4a62-83f7-aaaac693427b",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"fundId\", pm.response.json().fund.id); ",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "93e5c726-6526-4456-beb0-090659ad64e4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second fund for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea8a4dcd-96e6-4720-8675-bc1a92a2dab1",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let record = pm.response.json();",
											"    pm.environment.set(\"fundId2\", record.fund.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1094de3b-c4ed-49fa-9fc4-6d08db655947",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST2\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55007cf9-6870-4b19-856e-1925aeb2b9c2",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "73b34788-77f0-43b7-ad2f-c7e5b452dd0f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "534fb53c-9072-456e-84eb-508967eb729d",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5948e83d-992e-45d9-813a-b9d47769c002",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - non existent ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a1bfd1d-a694-4398-a97b-34ff9477c4ad",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"ledgerid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55f2b38f-178c-48f6-9126-e8ec188c1808",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST3\", uuid.v4()))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fund - non existent fund type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c986c82d-ae2b-432c-a603-ea95024fb78f",
										"exec": [
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fundtypeid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80b542e7-9b0b-496f-ac4d-f530c12232a4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"let record = utils.buildCompositeFund(utils.buildFundMinContent(\"TST3\"));",
											"record.fund.fundTypeId = uuid.v4();",
											"pm.variables.set(\"fundContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "641ae759-1cfc-4b42-bd16-b277f2de8de7",
										"exec": [
											"pm.test(\"Fund is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "47c16dec-013c-4a5f-b685-c64b8c3fce8e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"fundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"TST1\"))));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{fundId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{fundId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for funds by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18c95c8b-836f-4587-a7fe-d7fbd7eaac50",
										"exec": [
											"pm.test(\"Fund cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "79eca49c-9ea1-421f-ac07-f64b888ae495",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Groups",
					"item": [
						{
							"name": "Create first group for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a618e670-ec9e-4683-a3e2-e0794826fea8",
										"exec": [
											"pm.test(\"Group is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "340974f0-4305-4a61-9ad0-6e68aa611ba7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST1\", \"NEGATIVE_TEST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second group for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "246066f1-576d-4f23-b9c7-6a09c2f1ce07",
										"exec": [
											"pm.test(\"Group is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"groupId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d4efeaf-57ee-4f79-9503-4ed8433bae72",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST2\", \"NEGATIVE_TEST2\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80cca7e2-e37b-40df-8dc4-ddfc607a3c99",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "21262eca-94e9-4004-89c8-66756db1fd9b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8cf6905c-2c56-4cb3-91a3-5a4f6b04e688",
										"exec": [
											"pm.test(\"Group is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13c90ba1-8e37-4cf4-aa66-2a017097b494",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST3\", \"NEGATIVE_TEST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6715c1e-468e-42d5-ac18-300bd781cfcb",
										"exec": [
											"pm.test(\"Group is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7ecd4c0-0b89-49d7-a97c-8a67b1d4449f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST1\", \"NEGATIVE_TEST3\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e79f72b-195e-4719-bcb7-e494f06c6bc9",
										"exec": [
											"pm.test(\"Group is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b18697ce-33c4-4dae-90d8-2cb50c62118c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST3\",  \"NEGATIVE_TEST2\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupId1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update group - code already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c1c0642-8b3b-4df4-8d65-d9e93f279b02",
										"exec": [
											"pm.test(\"Group is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"uniqueField\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "16717dae-62b6-47ca-a9a0-e1867144c708",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"groupContent\", JSON.stringify(utils.buildGroupMinContent(\"TST2\",  \"NEGATIVE_TEST3\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{groupContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups/{{groupId1}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups",
										"{{groupId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for groups by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdbc833e-c3e9-4f81-94c2-292bf5de3a1d",
										"exec": [
											"pm.test(\"Groups cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbda469c-623c-465d-9a71-c85e9bb47b45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/groups?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"groups"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets",
					"item": [
						{
							"name": "Budget deletion with existing transaction",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3b36aa04-df52-4396-8c5e-fb8abd2abb3a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "76839d4f-6e1f-4623-9cea-43d54a3681f1",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20c73e8c-7c06-4e76-a241-d2d0b6f344c2",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e00af5cd-8ad0-4e09-bacf-33d5152da1b6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f956b1ee-cd6e-4e26-bd7d-69ef2e266862",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"toFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ALLOC-FND\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b48a6835-f0c4-42ee-9a96-f34a64065bfe",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFundContent\", JSON.stringify(utils.buildCompositeFund(utils.buildFundMinContent(\"ALLOC-FND\", pm.environment.get(\"allocLedgerId\")))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bb37cb2-b853-49f2-b97c-0c03fcac1a01",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function() {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"allocBudgetId\", record.id); ",
													"    pm.expect(record.name).to.eql(\"ALLOC-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "59a529bd-5931-4ea0-9f89-109717aa1352",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ALLOC-BDGT\", pm.environment.get(\"toFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fiscal year by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c4b10bc-6878-426e-89fe-66fa9cbe0e71",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fiscal year is retrieved\", function() {",
													"    pm.response.to.be.ok;",
													"    utils.validateFiscalYear(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b26ea203-b208-4f57-9b5e-b3c3fbcf91bb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b28ae3-6d6a-41e9-9925-78a768143cf5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Fund is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateCompositeFund(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4b176141-d7be-4209-8de8-c77eab7510f1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df0178be-d809-4d62-93e5-aed6039206f6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Budget is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateBudget(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ab5b9fe-6704-48cf-beec-bd48206aa375",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocations",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5172374-bce1-4cbf-92f2-4ebb1caf4290",
												"exec": [
													"let record = {};",
													"pm.test(\"Trasaction allocation is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
													"    record = pm.response.json();",
													"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "30e6d3e4-eade-4b5d-976a-eb1618dac7ad",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"toFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get transaction by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5f0c939-92d5-47e2-b55d-91a5ae952723",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Transaction allocation is retrieved\", function () {",
													"    pm.response.to.be.ok;",
													"    utils.validateTransaction(pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f7470641-1b54-48c9-897a-56ca2f2c1232",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35e279a7-316b-4a0d-813d-4a2b640418fb",
												"exec": [
													"pm.test(\"Budget deletion is failed\", function () {",
													"    pm.response.to.have.status(400).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].code).to.contain(\"transactionIsPresentBudgetDeleteError\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d8cfa4fa-c5c3-4d6c-a8a2-ee8524d0c2d7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80b705cf-9720-4eb9-a05d-c58f72c30ea7",
												"exec": [
													"pm.test(\"Transaction is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d14b0e88-9426-4b23-8232-efa506718d7a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions/{{transactionId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance-storage",
												"transactions",
												"{{transactionId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete budget record after transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5af4a188-1035-4eef-b1e8-ef04cddfdfa5",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2e08233f-3703-4a58-a7f1-56d564a8a19c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{allocBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{allocBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b7c5259-7fb8-40ba-abc9-78f517287106",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cdcfe32f-e085-43d3-bf0d-c0b7d5a30d16",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{toFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{toFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b80b008-80f5-4bfe-a188-450ea8138c0f",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8500d2e4-022f-42b4-9add-82bab4c28298",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "249ba645-af9b-49e6-b2da-8085e23560f9",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0adb7184-afcf-435a-8dc3-956f7c96b38e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Delete budget with existing transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dd229379-dace-46dc-baeb-fbe421c86475",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "21d10d48-c275-4d66-b471-969742b488da",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create first budget for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d42a8ed-6d8b-4caf-b772-1171a555bb47",
										"exec": [
											"pm.test(\"Budget is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4df8c1e3-5dd4-4142-a719-1a0c0be8b6f4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));",
											"pm.environment.set(\"firstBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create second budget for negative tests",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a34bee2-1c15-48a7-825a-aab8e77ee65a",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    let record = pm.response.json();",
											"    pm.environment.set(\"budgetId2\", record.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d9e0b14-3bdc-409a-b871-50f8dd831c25",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let scndBudget = utils.buildBudgetMinContent(\"TST2\");",
											"scndBudget.fundId = pm.environment.get(\"fundId2\");",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(scndBudget));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6f27855-b787-4072-9513-0ea5442c8b2c",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f2585c2a-7ba8-42bc-8ba0-8ce77095e9b4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f39ced0a-585b-4b31-be88-3ebb2c18691d",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ebdcdfb-402c-4286-b0cf-5ca43380a881",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - non existent fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81f5e5e9-c8d1-4f5c-9d54-f42e4751dbda",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"Fund with UUID\").and.to.contain(\"does not exist\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9fd69295-9c69-4550-b5ae-b490c2b80a44",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST3\", uuid.v4())));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create budget - non existent fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e24b9d37-c954-499f-b55d-869393a1574f",
										"exec": [
											"pm.test(\"Budget is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"fiscalyearid\").and.to.contain(\"because it does not exist in\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2fdc53f4-7ccc-438e-ab6a-fec62d861596",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"let record = utils.buildBudgetMinContent(\"TST3\");",
											"record.fiscalYearId = uuid.v4();",
											"pm.variables.set(\"budgetContent\", JSON.stringify(record));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget - name already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "005bb192-8bca-410b-b546-042ae21ba30c",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f408d21-6113-41b5-94dc-a80fe1fff6a7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"budgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"TST1\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{budgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId2}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for budgets by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85e50acc-f820-458d-ae7e-12b2be9ea6de",
										"exec": [
											"pm.test(\"Budgets cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74b9ad65-21d7-41ae-af82-ade1dff283bd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Budgets Restrictions",
					"item": [
						{
							"name": "Allocate money for budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3c6076d-fef1-4505-85c8-7da4b88dde11",
										"exec": [
											"let record = {};",
											"pm.test(\"Trasaction allocation is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"transactionId\", pm.response.json().id); ",
											"    record = pm.response.json();",
											"    pm.expect(record.transactionType).to.eql(\"Allocation\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c16638c6-3a47-458d-92f3-a26e02888388",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionMinContent(90, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Allocation\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{allocationContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order transaction summaries",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7dccc108-269c-4477-a207-79063b29c136",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fadc9b17-4d20-4198-85b8-25c4fee3d681",
										"exec": [
											"pm.test(\"Order transaction summary is created\", () => {",
											"    pm.environment.set(\"orderTransactionIdBudget\", pm.response.json().id);",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"e5ae4afd-3fa9-494e-a972-f541df9b8772\",\r\n  \"numTransactions\": 1\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/order-transaction-summaries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"order-transaction-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice transaction summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75050a09-5320-419f-a99d-64d4301ffb0d",
										"exec": [
											"pm.test(\"Trasaction allocation is created\", () => {",
											"    pm.environment.set(\"invoiceTransactionSummaryId\", pm.response.json().id);",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f653601-50e4-4a89-aa80-014cd7c81545",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"187c7e6f-782a-4bd0-a04e-7174d4da2415\",\n  \"numPendingPayments\": 1,\n  \"numPaymentsCredits\": 1\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/invoice-transaction-summaries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"invoice-transaction-summaries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create encumbrances",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2af636e8-2ccd-4528-8a5b-51fedc237fe0",
										"exec": [
											"let record = {};",
											"pm.test(\"Trasaction encumbrance is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"encumbranceId\", pm.response.json().id);",
											"    record = pm.response.json();",
											"    pm.expect(record.transactionType).to.eql(\"Encumbrance\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67e629b1-729c-44ba-9ebd-f3ea523643f9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let encumbranceMinContent = utils.buildEncumbranceMinContent();",
											"let transactionEncumbrance = utils.buildTransactionMinContent(25, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Encumbrance\");",
											"",
											"transactionEncumbrance.encumbrance = encumbranceMinContent;",
											"transactionEncumbrance.encumbrance.sourcePurchaseOrderId = pm.environment.get(\"orderTransactionIdBudget\");",
											"transactionEncumbrance.fromFundId = pm.environment.get(\"fundId\");",
											"pm.environment.set(\"encumbranceContent\", JSON.stringify(transactionEncumbrance));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{encumbranceContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create pending payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6672b705-681c-49b1-92be-5f6606980d06",
										"exec": [
											"pm.test(\"Trasaction pending payment is created\", () => {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd6c17ad-4bc9-44fa-b9be-a616e127d9da",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pendingPayment = utils.buildPaymentTransactionMinContent(30, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Pending payment\");",
											"pm.environment.set(\"paymentContent\", JSON.stringify(pendingPayment));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{paymentContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/transactions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e412831-828e-4b58-a0a5-2375f095dcd2",
										"exec": [
											"pm.test(\"Trasaction payment is created\", () => {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b15ba28d-87b2-44cd-9cba-32b335c99132",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.environment.set(\"paymentContent\", JSON.stringify(utils.buildPaymentTransactionMinContent(30, pm.environment.get(\"fiscalYearId\"), pm.environment.get(\"fundId\"), \"Payment\")));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{paymentContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9983649a-d1b6-4cc0-89d9-cd839f01e95e",
										"exec": [
											"pm.test(\"Get Budget\", function() {",
											"    pm.response.to.have.status(200);",
											"    pm.environment.set(\"firstBudgetContent\", JSON.stringify(pm.response.json()));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1bcc1d84-adb9-4966-81a3-fd30f57dfcd4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget allowableEncumbrance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ee00b7c-7da5-471f-b231-8b6b52212367",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"allowableEncumbranceLimitExceeded\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fd63163-bbf3-476e-9b01-e6af6a5606d3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let budgetForUpdate = JSON.parse(pm.environment.get(\"firstBudgetContent\"));",
											"",
											"budgetForUpdate.allowableEncumbrance = 1;",
											"budgetForUpdate.allowableExpenditure = 100;",
											"",
											"",
											"pm.variables.set(\"firstBudgetContent\", JSON.stringify(budgetForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{firstBudgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated budget Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2555fa90-5a1e-4024-8a72-55740787c2b7",
										"exec": [
											"pm.test(\"Get Budget\", function() {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "10d37dfa-c853-434d-b55d-abed7f28c032",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update budget allowableExpenditures",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4326b8f7-ae0e-4803-88a7-8ce2369dde57",
										"exec": [
											"pm.test(\"Budget is not updated\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.contain(\"allowableExpenditureLimitExceeded\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18c73d07-d4f1-4dde-9134-5240a614637b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let budgetForUpdate = JSON.parse(pm.variables.get(\"firstBudgetContent\"));",
											"",
											"budgetForUpdate.allowableEncumbrance = 100;",
											"budgetForUpdate.allowableExpenditure = 1;",
											"",
											"pm.variables.set(\"firstBudgetContent\", JSON.stringify(budgetForUpdate));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{firstBudgetContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{budgetId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets",
										"{{budgetId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5bfa212e-3ac0-4d84-9a9f-8313dcfdeca4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5690c8e4-af09-4530-a467-58f5c259e99b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group fund fiscal year",
					"item": [
						{
							"name": "Create group fund fiscal year without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38f67b15-09fe-4ed6-a6c9-5a5c1cdf3692",
										"exec": [
											"pm.test(\"Group fund fiscal year is not created\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"groupId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "64fac09a-91c0-438b-81da-e509e4a15da4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"78872d8a-bf16-420b-829f-206da38f6c10\",\r\n  \"fiscalYearId\": \"684b5dc5-92f6-4db7-b996-b549d88f5e4e\",\r\n  \"fundId\": \"68872d8a-bf16-420b-829f-206da38f6c10\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group fund fiscal year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c696160f-4966-4f8f-8730-2c87d106457d",
										"exec": [
											"pm.test(\"Group fund fiscal year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "686ef086-347d-4faa-8f09-0f41a4bac7a1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"a8bf1036-502c-42e4-8783-00a60beeae24\",\r\n  \"groupId\": \"{{groupId}}\",\r\n  \"fiscalYearId\": \"{{fiscalYearId}}\",\r\n  \"fundId\": \"{{fundId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create group fund fiscal year - already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07a4408f-e6f3-48aa-bc2d-25d3c9db617a",
										"exec": [
											"pm.test(\"Group fund fiscal year is not created\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"value already exists\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "50b61ae4-528b-4293-b7e5-b8ce1923a23a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"a8bf1036-502c-42e4-8783-00a60beeae24\",\r\n  \"groupId\": \"{{groupId}}\",\r\n  \"fiscalYearId\": \"{{fiscalYearId}}\",\r\n  \"fundId\": \"{{fundId}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete group fund fiscal year - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38ba01c8-cc71-487a-bf29-5779aef029fe",
										"exec": [
											"pm.test(\"Group fund fiscal year is not deleted\", function () {",
											"    pm.response.to.have.status(404).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"Not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de345753-c516-4b5a-aa81-90ad1e47bde3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fund-fiscal-years/d65969c5-1887-4801-8024-486502bd2a1b",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fund-fiscal-years",
										"d65969c5-1887-4801-8024-486502bd2a1b"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for group fund fiscal year by bad query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca799615-5dcf-430b-bedc-994e6d45cd3f",
										"exec": [
											"pm.test(\"Fund types cannot be found\", function () {",
											"    pm.response.to.have.status(400).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.contain(\"cql\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6c8e7d8d-06b6-45b3-a1eb-e858f81e81f5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fund-types?query=invalid cql",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fund-types"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid cql"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assign funds to groups",
					"item": [
						{
							"name": "Prepare data for testing",
							"item": [
								{
									"name": "Create fiscal year one",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3b6091c-b412-41ef-ae3c-cc9e2a089a05",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"testNegativeFiscalYearOneId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad019414-4ad6-47d8-a5ab-d18ffca64d49",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"const today = moment.utc();",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = today.startOf('year').subtract(1, 'years');",
													"var end = today.endOf('year').subtract(1, 'years');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEGATIVE\";",
													"fiscalYear.code = \"TESTNEGATIVE2018\";",
													"",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create  after next fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15edca3b-964b-42d0-abfc-680776b81046",
												"exec": [
													"pm.test(\"Fiscal year is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"afterNextFiscalYearId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "61b3922c-36b0-4e8a-89c4-9caf0dfc2897",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const moment = require('moment');",
													"const today = moment.utc();",
													"",
													"var fiscalYear = utils.buildFiscalYearMinContent();",
													"var start = today.startOf('year').add(2, 'years');",
													"var end = today.endOf('year').add(2, 'years');",
													"",
													"fiscalYear.periodStart = start.format('YYYY-MM-DD');",
													"fiscalYear.periodEnd = end.format('YYYY-MM-DD');",
													"fiscalYear.series = \"TESTNEGATIVE\";",
													"fiscalYear.code = \"TESTNEGATIVE2021\";",
													"pm.variables.set(\"fyContent\", JSON.stringify(fiscalYear));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d043c045-b78c-48a1-b4ae-4b2938d8379c",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"negativeLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "10a4617b-57b2-4f35-9976-4de2aeb6b8db",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent();",
													"ledger.fiscalYearOneId = pm.environment.get(\"testNegativeFiscalYearOneId\");",
													"ledger.name = \"Negative\";",
													"ledger.code = \"TESTNEGATIVE\";",
													"pm.variables.set(\"ledgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{ledgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create fund with groups - current fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cf6c280-46b7-434a-abf7-508ef66e777a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is not created\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5923c854-fafa-449e-b029-2ec8842a2555",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TESTNEGATIVE\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"negativeFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fund with groups - current fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ded0911a-fa5e-4e4a-baea-a226fd7371cf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let record = {};",
											"",
											"pm.test(\"Fund is not updated\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4ce50fad-6276-411f-8b4d-1f43758ab644",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let fund = utils.buildFundMinContent(\"TESTNEGATIVE\");",
											"fund.fundTypeId = pm.variables.get(\"fundTypeId\");",
											"fund.ledgerId = pm.environment.get(\"negativeFyLedgerId\");",
											"",
											"let compositeFund = utils.buildCompositeFund(fund);",
											"compositeFund.groupIds.push(pm.environment.get(\"groupId2\"));",
											"pm.variables.set(\"fundContent\", JSON.stringify(compositeFund));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{fundContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{nextFyFundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds",
										"{{nextFyFundId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Transactions",
					"item": [
						{
							"name": "Restrictions",
							"item": [
								{
									"name": "Create fiscal year  - required for budgets Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f8ba5bda-5b3b-4790-b4df-cad7ea368490",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"allocFyContent\", JSON.stringify(utils.buildFiscalYearMinContent(\"ALLOCFY2019\")));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cc872cb0-6e52-4901-bd72-66f12d85238d",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocFiscalYearId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocFyContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ledger - required for funds Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1848b1d0-cfea-456d-ba13-c5e7088665df",
												"exec": [
													"pm.test(\"Ledger is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"allocLedgerId\", pm.response.json().id); ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ccc8c67-d9cd-4cb0-abd9-5dc4f67af5e7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let ledger = utils.buildLedgerMinContent(\"ALLOC-LDGR\", \"Test transaction ledger\");",
													"ledger.fiscalYearOneId = pm.environment.get(\"allocFiscalYearId\");",
													"pm.environment.set(\"allocLedgerContent\", JSON.stringify(ledger));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocLedgerContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be778f86-bf9d-4283-b874-cbf96dcce97a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"histFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"HIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "44970fba-5088-4bc7-accc-101a3d9b8d68",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"History\",\n\t  \"code\": \"HIST\",\n\t  \"externalAccountNo\": \"276507594438808\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"subdivided by geographic regions, to match individual selectors\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "450d26cf-20bf-4015-bb85-8c3a528e2b59",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"canhistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"CANHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "08b11df1-0797-4469-a913-dd31f751d227",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Canadian History\",\n\t  \"code\": \"CANHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL; use for Canada once CANLATHIST is inactivated\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\",\n\t  \"allocatedFromIds\": [\"{{histFundId}}\"]\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5c53329-609d-46b9-9332-adb7308c3a9e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"lathistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"LATHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b428cf2a-cf09-460e-ac2c-73f4d7e30ffb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Latin America History\",\n\t  \"code\": \"LATHIST\",\n\t  \"externalAccountNo\": \"114929793941270\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"WAITING FOR ADMIN APPROVAL\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\"\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update HIST fund - add allocatedToIds set",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0dd23d8-6354-44e2-bdfb-2d99f1f4cbe6",
												"exec": [
													"pm.test(\"Fund is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ae3a2441-a589-4bf0-be69-b4b397856ad5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/finance/funds/\" + pm.environment.get(\"histFundId\"), function (err, res) {",
													"    let histFund = res.json();",
													"    histFund.fund.allocatedToIds = new Array(pm.environment.get(\"canhistFundId\"), pm.environment.get(\"lathistFundId\"));",
													"    ",
													"    pm.environment.set(\"histFundContent\", JSON.stringify(histFund));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histFundContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ASIAHIST fund - required for transactions",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04a78809-8d96-45da-91f4-f28074ae97f9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Fund is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Fund content is valid\", function() {",
													"    utils.validateCompositeFund(record);",
													"    pm.environment.set(\"asiahistFundId\", record.fund.id); ",
													"    pm.expect(record.fund.code).to.eql(\"ASIAHIST\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90b7a67e-9e0b-45af-95ba-5633075f03e5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"fund\": {\n\t  \"name\": \"Asian History\",\n\t  \"code\": \"ASIAHIST\",\n\t  \"externalAccountNo\": \"94508839006119\",\n\t  \"fundStatus\": \"Active\",\n\t  \"description\": \"use for East, Central, and South Asia\",\n\t  \"ledgerId\": \"{{allocLedgerId}}\",\n\t  \"allocatedToIds\": [\"{{histFundId}}\"],\n\t  \"allocatedFromIds\": [\"cf23adf0-61ba-4887-bf82-956c4aae2260\"]\n\t}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create HIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "951754ae-fcc0-4e0e-a507-ae687241b356",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"histBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"HIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "091e15be-d1ba-47f4-a54c-342a3c1c06bf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"histBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"HIST-BDGT\", pm.environment.get(\"histFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{histBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CANHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12823f0f-3132-4c37-82c0-ad2ed9331741",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"canhistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"CANHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b47046e9-b2ba-4c9b-87cc-0b180c04bc68",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"canhistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"CANHIST-BDGT\", pm.environment.get(\"canhistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{canhistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LATHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b33a6c2-84ce-4f4f-8368-76c806c83391",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"lathistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"LATHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "98fafd63-3bc7-42a0-89cd-a5a94995158a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"lathistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"LATHIST-BDGT\", pm.environment.get(\"lathistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lathistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ASIAHIST budget",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2891ea2-3114-4adb-9f89-4fcdadf821a7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let record = {};",
													"",
													"pm.test(\"Budget is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    record = pm.response.json();",
													"});",
													"",
													"pm.test(\"Budget content is valid\", function () {",
													"    utils.validateBudget(record);",
													"    pm.environment.set(\"asiahistBudgetId\", record.id);",
													"    pm.expect(record.name).to.eql(\"ASIAHIST-BDGT\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "68ea1b3d-7d7c-44ee-a792-b028d6b6903b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"asiahistBudgetContent\", JSON.stringify(utils.buildBudgetMinContent(\"ASIAHIST-BDGT\", pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"allocFiscalYearId\"))));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{asiahistBudgetContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with allocated ids mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "789a6a8e-c798-4b3b-9cd7-913a7c8e6000",
												"exec": [
													"pm.test(\"Allocation is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "515f3d61-5a06-40f2-af74-e13d33424ebc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"canhistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with allocated ids mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "206a6d94-f9ba-4c96-8895-58939fb334d6",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9fb659df-642e-4a82-8c6b-72ccd895f4f7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"canhistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with allocatedFromIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b42beb1e-41f3-46b1-91aa-ac6184b0da40",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce868750-d8d2-440a-8ef6-152eb27a55d2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"lathistFundId\"), pm.environment.get(\"canhistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with allocatedFromIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54ba5dcd-32a1-4216-8ff3-5788baa2b177",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e8eb9a8-e541-45f2-852a-8c33e822d5e5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"lathistFundId\"), pm.environment.get(\"canhistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create allocation with allocatedToIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74fb59db-a580-414d-ac0b-1798e5a3d30e",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c100d844-4e22-420e-b963-d8a31fd76797",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"lathistFundId\"), \"Allocation\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"allocations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create transfer with allocatedToIds mismatch",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "392aa31f-f06b-4930-9126-3f7b655bfef5",
												"exec": [
													"pm.test(\"Transfer is not created - allocated ids mismatch\", function () {",
													"    pm.response.to.have.status(422).and.to.be.json;",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Allowable allocation ids mismatch\");",
													"    pm.expect(pm.response.json().errors[0].code).to.eql(\"allowableAllocationIdsMismatch\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "928a1dc1-5fb6-4911-ade6-7b39f78719fb",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.environment.set(\"allocationContent\", JSON.stringify(utils.buildTransactionBetweenFunds(25, pm.environment.get(\"allocFiscalYearId\"), pm.environment.get(\"asiahistFundId\"), pm.environment.get(\"lathistFundId\"), \"Transfer\")));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{allocationContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b25bf683-1ae3-4e9c-a38b-d42f8ecd6831",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3af6ea35-3a62-4d80-9e38-657a98b37f92",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{histBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{histBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "093d56ad-384c-4e16-832a-98dce551b219",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "57e8c7da-9b0c-4971-9c2e-65ba3b22de9a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{canhistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{canhistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51abe13e-7a90-4772-9f33-fcdf3aa9031e",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "645b054c-8b7e-4306-9b7d-8751a6249821",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{lathistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{lathistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ASIAHIST budget record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee9cf3d4-338e-4d7b-9a6d-08c19d9f4828",
												"exec": [
													"pm.test(\"Budget is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53e472b3-d810-4075-9986-db2332f105c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets/{{asiahistBudgetId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"budgets",
												"{{asiahistBudgetId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ASIAHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef18b024-71a8-49bd-a58e-f7bd57d6ac0e",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f4ee9eea-d512-4c13-9040-8e6ed72134d7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{asiahistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{asiahistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LATHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00eb605c-8934-4c32-8817-236e971287b8",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "44645b8f-49d8-4fc0-82e9-5db8bd5cc108",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{lathistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{lathistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CANHIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4365b3c5-36cc-47b2-acb3-f5ddc756158d",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8c077370-f054-4b9d-8bf7-537b3a3f4701",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{canhistFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{canhistFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete HIST fund record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ed82d59-b3d9-4b5c-9e95-170c80daa676",
												"exec": [
													"pm.test(\"Fund is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9add2ec3-dbe6-4a9c-b7e1-b777df293b07",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds/{{histFundId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"funds",
												"{{histFundId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Ledger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c77b5c0-018c-4efd-a0d9-d61861fcc6a9",
												"exec": [
													"pm.test(\"Ledger is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "af42dc22-0468-4d21-a312-15d0fe43797e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{allocLedgerId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"ledgers",
												"{{allocLedgerId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete fiscal year",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2d1d9bb-5339-410f-85f9-4b01eee6c27a",
												"exec": [
													"pm.test(\"Fiscal year is deleted\", () => pm.response.to.have.status(204));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2da6b98e-b489-4f49-a525-88ded3ba0e5b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years/{{allocFiscalYearId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"finance",
												"fiscal-years",
												"{{allocFiscalYearId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create transaction Transfer without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a915272a-47c2-4699-82bf-db859f501083",
										"exec": [
											"pm.test(\"Transfers is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "613278a4-299b-4173-86a9-1da29971f0e1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5765890f-e324-4da6-8c6a-c354a447f5b8",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"currency\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "080e397f-05eb-4c6f-ac29-3f3ed78b2530",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation without toFundId and fromFundId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6817cca-73ef-49bc-84bf-42de8ae792fd",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.be.eql(\"Missing to/from fund id\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a96bcc8-30e9-438e-b5d4-f4f00a886588",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer without fromFundId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41063bfb-3722-494e-92eb-f6ae4fc49bf9",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.be.eql(\"Missing to/from fund id\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ec50c7ba-c9a0-4d91-9af3-e708f2b14d6c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer without toFundId",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3435a02-aa2d-44c3-acbb-6cdc34d953bc",
										"exec": [
											"pm.test(\"Allocations is not created - missing currency field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.be.eql(\"Missing to/from fund id\")",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "80efaa59-a747-4f2d-82a3-05fe3e842a5b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"fromFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Encumbrance without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff1543bf-e2e6-4f8e-9e59-35f64cb729c1",
										"exec": [
											"pm.test(\"Encumbrance is not created - missing transactionType field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"transactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36974bb8-3836-4fed-9a3e-92ef6e965923",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Payment without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1453835-acd8-4196-962b-80e8eebdaa07",
										"exec": [
											"pm.test(\"Payments is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2f8456d7-c919-44b1-87f5-471a3e4e6511",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Payment\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Credit without required field",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08de3a97-665e-4983-9e2a-64732ef2c08f",
										"exec": [
											"pm.test(\"Credits is not created - missing fiscalYearId field\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters[0].key).to.eql(\"fiscalYearId\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a050fad8-cb76-4ff4-92b7-42c4deb325fd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Credit\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"credits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get transaction by id - wrong id, not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09454f98-9b7d-45bc-bc67-f73acca90153",
										"exec": [
											"pm.test(\"Encumbrance not found - wrong id\", function () {",
											"    pm.response.to.have.status(404).and.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "00a32f98-40db-4f0e-88b5-e304f7d0e163",
										"exec": [
											"var uuid = require('uuid');",
											"pm.variables.set(\"randomId\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{randomId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transactions",
										"{{randomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Allocation with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bba2d86f-2e5c-4c78-ac3b-03a609b85159",
										"exec": [
											"pm.test(\"Allocations is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62ec4f04-64b8-488d-aca9-5c9fd438481a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/allocations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"allocations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Transfer with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "353e9cec-ad64-4df0-9105-6707604aafb8",
										"exec": [
											"pm.test(\"Transfers is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "94f5a029-b200-41d6-b1c9-b4db48a6b987",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transfers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Payment with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7d02949-89fc-489a-a3d8-d4a9b3bfa5e5",
										"exec": [
											"pm.test(\"Payments is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4c0fa73-fe60-417b-9fea-ed974d1d4d58",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Credit with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6e20baa-e951-4104-bcf0-2c3d74f92ee3",
										"exec": [
											"pm.test(\"Credits is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a6daa1c-2450-4744-b540-f8c5246c34ea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Allocation\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"credits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Encumbrance with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5dded2e-a9a4-49eb-ad74-2c0441c20fbd",
										"exec": [
											"pm.test(\"Encumbrances is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e5616fb-08bf-45d4-9b37-bc13afd37191",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction pending payment with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bfadff1-e7fb-4875-841c-4d277236f20d",
										"exec": [
											"pm.test(\"Pending payment is not created - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c49a72e1-ddbc-4d84-a6f6-282d8394b20e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/pending-payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"pending-payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Payment with negative amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5e877a5-c378-4120-b472-881151109a7f",
										"exec": [
											"pm.test(\"Payments is not created - invalid amont value\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Value must be greater or equal to zero\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"negativeValue\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "df2248be-6905-4ba6-b2c9-1b291a1a003f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": -25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Payment\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/payments",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"payments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create transaction Credit with negative amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1915e4e3-c8df-42ff-8573-75d28cc40d17",
										"exec": [
											"pm.test(\"Credit is not created - invalid amont value\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Value must be greater or equal to zero\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"negativeValue\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b71406d1-d933-4eb7-a402-2716cfc299bb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"amount\": -25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Credit\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/credits",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"credits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update transaction Encumbrance with invalid transactionType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47c478c9-6844-447b-ab35-c1c20358e09e",
										"exec": [
											"pm.test(\"Encumbrances is not updated - invalid transactionType\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Invalid transaction type\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"invalidTransactionType\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a4c8b156-b982-4658-9264-3c1e3ce98b70",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"3b054494-c2e5-4101-b065-df6a266561e2\",\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances/3b054494-c2e5-4101-b065-df6a266561e2",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances",
										"3b054494-c2e5-4101-b065-df6a266561e2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update transaction Encumbrance with ids mismatch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02cb792a-17d4-4a5b-b04f-36c2eedda186",
										"exec": [
											"pm.test(\"Encumbrances is not updated - ids mismatch\", function () {",
											"    pm.response.to.have.status(422).and.to.be.json;",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].parameters).to.have.lengthOf(0);",
											"    pm.expect(pm.response.json().errors[0].message).to.eql(\"Mismatch between id in path and request body\");",
											"    pm.expect(pm.response.json().errors[0].code).to.eql(\"idMismatch\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "410b4069-7d1e-43d2-9683-33ec9f30db76",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"3b054494-c2e5-4101-b065-df6a266561e2\",\r\n  \"amount\": 25.0,\r\n  \"currency\": \"USD\",\r\n  \"description\": \"PO_Line: History of Incas\",\r\n  \"source\": \"User\",\r\n  \"fiscalYearId\": \"c01ea7fa-ffbd-48bc-8b48-67321d9ff205\",\r\n  \"toFundId\": \"0d55e306-d7ab-49a1-ae33-b94249bf95ee\",\r\n  \"transactionType\": \"Transfer\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/encumbrances/644fcd2f-d408-4e8a-9ef8-b2eb7ca0a0e0",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"encumbrances",
										"644fcd2f-d408-4e8a-9ef8-b2eb7ca0a0e0"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Current fiscal year",
					"item": [
						{
							"name": "Get current fiscal year for non-existed ledger id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6bded5ca-b002-4aa8-b50d-40e276aa225c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Current fiscal year isn't retrieved\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f01d7a2-17d1-40d9-809d-78f9ed6ca1ee",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/ledgers/{{$guid}}/current-fiscal-year",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"ledgers",
										"{{$guid}}",
										"current-fiscal-year"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Group fiscal year summary",
					"item": [
						{
							"name": "Get group fiscal year summary - fiscal year not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28156aea-e683-4268-8413-1193878fa990",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Group fiscal year summary is empty\", function() {",
											"    pm.response.to.be.ok;",
											"    let summaries = pm.response.json().groupFiscalYearSummaries;",
											"    pm.expect(summaries.length).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5959b90f-8149-44ff-ad2b-70dd5d72b410",
										"exec": [
											"// let utils = eval(globals.loadUtils);",
											"",
											"// let fiscalYear = utils.buildFiscalYearMinContent(\"DD1259\");",
											"// let group = utils.buildGroupMinContent();",
											"",
											"// // Create fiscal year",
											"// pm.test(\"Fiscal year is created\", function() {",
											"//     utils.sendPostRequest('/finance/fiscal-years', fiscalYear, (err, res) => {",
											"//         pm.expect(res).to.have.status(201);",
											"//         pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//             // Create group",
											"//             pm.test(\"Group is created\", function() {",
											"//                 utils.sendPostRequest('/finance/groups', group, (err, res) => {",
											"//                 pm.expect(res).to.have.status(201);",
											"//                 pm.variables.set(\"groupId\", res.json().id);",
											"//                 pm.variables.set(\"fiscalYearId\", res.json().id);",
											"//                 // Create fund",
											"//                 pm.test(\"Fund is created\", function() {",
											"//                     utils.sendPostRequest('/finance/funds', group, (err, res) => {",
											"//                     pm.expect(res).to.have.status(201);",
											"//                     pm.variables.set(\"fundIdId\", res.json().id);",
											"//                     });",
											"//                 });",
											"//             });",
											"//         });",
											"//     });",
											"// });",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/group-fiscal-year-summaries?query=groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"group-fiscal-year-summaries"
									],
									"query": [
										{
											"key": "query",
											"value": "groupFundFY.groupId={{groupId}} or groupId={{groupId}} and fiscalYearId=={{$guid}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Exchange rate",
					"item": [
						{
							"name": "Get exchange rate missing request parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6dbf9270-3ae8-458a-936f-d00116d7f22a",
										"exec": [
											"pm.test(\"Get exchange rate missing request parameters: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f988364c-d021-42e4-bfd6-31b074eeaade",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate missing from parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be95a3c2-de1c-441e-a32f-044da625d06b",
										"exec": [
											"pm.test(\"Get exchange rate missing from parameter: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "11827115-567d-4338-8014-2f27e7c29527",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?to=USD",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "to",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate missing to parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdff9f91-bd4c-4e7c-96ce-c58239ee86ef",
										"exec": [
											"pm.test(\"Get exchange rate missing to parameter: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "437e01f3-129d-4940-aa86-f86b65e9f85a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate for invalid currency code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6da6a5a4-43cf-465e-a070-47868ee95940",
										"exec": [
											"pm.test(\"Get exchange rate for invalid currency code: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d4cfef9-2df2-4681-a55b-b4713f8f0827",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=EU",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "EU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate for non-existent currency code",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0f8be9c-5291-489a-b28f-b3d96c50d6e4",
										"exec": [
											"pm.test(\"Get exchange rate for non-existent currency code: status 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8d6915bf-5b4a-46d3-b26b-fb4584469367",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=ABC",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "ABC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exchange rate - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "024504cf-bfe2-4c8f-b16a-bd796ef42023",
										"exec": [
											"pm.test(\"Get not availible exchange rate: NOT_FOUND\", function() {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13d12e13-ad66-4360-8bc8-a66a2c91784c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/exchange-rate?from=USD&to=ALL",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"exchange-rate"
									],
									"query": [
										{
											"key": "from",
											"value": "USD"
										},
										{
											"key": "to",
											"value": "ALL"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9ea762a2-c2d5-4302-8075-be238ee86185",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});",
									"",
									"function buildPmRequest1(path) {",
									"    return {",
									"        url: utils.buildOkapiUrl(path),",
									"        method: \"GET\",",
									"        header: {",
									"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
									"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
									"        }",
									"    };",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f58ab330-41de-4052-9b96-b5a9d66a7b84",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a83c62b5-6118-4392-8854-fcd06a0966af",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb6fb42a-5f20-47cd-8d47-29b9e0da853f",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d46630e0-7382-4503-ba84-f58d284085dc",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [],",
					"        bodyTemplate: {",
					"            \"module\": \"FINANCE\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    localeConfigs: {",
					"        configNames: [],",
					"        bodyTemplate: {",
					"            \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"            \"module\": \"ORG\",",
					"            \"configName\": \"localeSettings\",",
					"            \"description\": \"locale Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"{\\\"locale\\\":\\\"en-US\\\",\\\"timezone\\\":\\\"America/New_York\\\",\\\"currency\\\":\\\"USD\\\"}\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Finance API - Admin\",",
					"                    \"lastName\": \"Finance Tests - Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": [\"finance-storage.transactions.item.delete\", \"finance.order-transaction-summaries.item.post\"]",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"regular-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Limited user\",",
					"                    \"lastName\": \"Finance Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"regular-user\",",
					"                \"password\": \"regular-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"finance.all\",",
					"                    \"finance.order-transaction-summaries.item.post\",",
					"                    \"finance-storage.transactions.item.delete\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test finance tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"finances_schema_\";",
					"",
					"    /**",
					"     * Builds Postman Request base data",
					"     */",
					"    utils.buildPmRequest = function (path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    utils.sendPostRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function (path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"",
					"    utils.copyJsonObj = function (obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function (configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function (configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function (configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.createFinanceConfig = function (configName) {",
					"        let body = utils.copyJsonObj(globals.testData.configs.bodyTemplate);",
					"        body.configName = configName;",
					"        body.value = pm.variables.get(configName);",
					"        utils.createConfig(body);",
					"    };",
					"",
					"    utils.createConfig = function (body) {",
					"        utils.sendPostRequest(\"/configurations/entries\", body, function (err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function (body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function (id) {",
					"        const timerId = setTimeout(() => { }, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Build group record with minimal required fields.",
					"     */",
					"    utils.buildGroupMinContent = function (code, name) {",
					"        return {",
					"            \"code\": code || \"TST-GRP\",",
					"            \"status\": \"Active\",",
					"            \"name\": name || \"Test group\"",
					"        };",
					"",
					"    };",
					"    /**",
					"     * Build ledger record with minimal required fields.",
					"     */",
					"    utils.buildLedgerMinContent = function (code, name) {",
					"        return {",
					"            \"code\": code || \"TST-LDGR\",",
					"            \"ledgerStatus\": \"Active\",",
					"            \"name\": name || \"Test ledger\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build fiscal year record with minimal required fields.",
					"     */",
					"    utils.buildFiscalYearMinContent = function (code) {",
					"        return {",
					"            \"code\": code || \"FY2019\",",
					"            \"name\": \"Test fiscal year\",",
					"            \"periodStart\": \"2019-01-01T00:00:00Z\",",
					"            \"periodEnd\": \"2025-12-30T23:59:59Z\",",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build group fund fiscal year record with minimal required fields.",
					"     */",
					"    utils.buildGroupFundFiscalYearMinContent = function (groupId, fundId, fiscalYearId) {",
					"        return {",
					"            \"groupId\": groupId,",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"fundId\": fundId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Fund record with minimal required fields.",
					"     */",
					"    utils.buildFundMinContent = function (code, ledgerId) {",
					"        return {",
					"            \"code\": code || \"TST-FND\",",
					"            \"fundStatus\": \"Active\",",
					"            \"ledgerId\": ledgerId || pm.variables.get(\"ledgerId\"),",
					"            \"name\": \"Test fund\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Composite Fund record.",
					"     */",
					"    utils.buildCompositeFund = function (fund, groupIds) {",
					"        return {",
					"            \"fund\": fund || buildFundMinContent(),",
					"            \"groupIds\": groupIds || []",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build budget record with minimal required fields.",
					"     */",
					"    utils.buildBudgetMinContent = function (name, fundId, fiscalYearId) {",
					"        return {",
					"            \"allocated\": 0,",
					"            \"name\": name || \"TST-BDGT\",",
					"            \"budgetStatus\": \"Active\",",
					"            \"fundId\": fundId || pm.variables.get(\"fundId\"),",
					"            \"fiscalYearId\": fiscalYearId || pm.variables.get(\"fiscalYearId\"),",
					"            \"allowableEncumbrance\": 100,",
					"            \"allowableExpenditure\": 100",
					"        };",
					"    };",
					"",
					"    var uuid = require('uuid');",
					"    /**",
					"     * Build encumbrance record with minimal required fields.",
					"     */",
					"    utils.buildEncumbranceMinContent = function () {",
					"        return {",
					"            \"initialAmountEncumbered\": 25,",
					"            \"status\": \"Unreleased\",",
					"            \"orderType\": \"One-Time\",",
					"            \"subscription\": false,",
					"            \"reEncumber\": false,",
					"            \"sourcePurchaseOrderId\": \"e5ae4afd-3fa9-494e-a972-f541df9b877e\",",
					"            \"sourcePoLineId\": uuid.v4()",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build transaction record with minimal required fields.",
					"     */",
					"    utils.buildTransactionMinContent = function (amount, fiscalYearId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build transaction between funds record with minimal required fields.",
					"     */",
					"    utils.buildTransactionBetweenFunds = function (amount, fiscalYearId, fromFundId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"fromFundId\": fromFundId,",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build payments transaction record with minimal required fields.",
					"     */",
					"    utils.buildPaymentTransactionMinContent = function (amount, fiscalYearId, fromFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"fromFundId\": fromFundId || pm.environment.get(\"fromFundId\"),",
					"            \"sourceInvoiceId\": pm.environment.get(\"invoiceTransactionSummaryId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build credits transaction record with minimal required fields.",
					"     */",
					"    utils.buildCreditTransactionMinContent = function (amount, fiscalYearId, toFundId, transactionType) {",
					"        return {",
					"            \"amount\": amount || 25.17,",
					"            \"currency\": \"USD\",",
					"            \"description\": \"PO_Line: History of Incas\",",
					"            \"fiscalYearId\": fiscalYearId,",
					"            \"source\": \"User\",",
					"            \"toFundId\": toFundId || pm.environment.get(\"toFundId\"),",
					"            \"sourceInvoiceId\": pm.environment.get(\"invoiceTransactionSummaryId\"),",
					"            \"transactionType\": transactionType",
					"        };",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates the content of the fund type record",
					"     */",
					"    utils.validateFundType = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fund_type.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the fund record",
					"     */",
					"    utils.validateFund = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.fundStatus).to.exist;",
					"        pm.expect(jsonData.ledgerId).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fund.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the composite fund record",
					"     */",
					"    utils.validateCompositeFund = function (jsonData) {",
					"        pm.expect(jsonData.fund).to.exist;",
					"        utils.validateFund(jsonData.fund);",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_fund.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the budget record",
					"     */",
					"    utils.validateBudget = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.allocated).to.exist;",
					"        pm.expect(jsonData.budgetStatus).to.exist;",
					"        pm.expect(jsonData.fundId).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        delete jsonData.statusExpenseClasses;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"budget.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the content of the transaction record",
					"     */",
					"    utils.validateTransaction = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.amount).to.exist;",
					"        pm.expect(jsonData.currency).to.exist;",
					"        pm.expect(jsonData.source).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.transactionType).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"transaction.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the content of the ledger record",
					"    */",
					"    utils.validateLedger = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.ledgerStatus).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"ledger.json\")));",
					"    };",
					"",
					"",
					"    /**",
					"     * Validates the content of the group record",
					"     */",
					"    utils.validateGroup = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.status).to.exist;",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"group.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the content of the fiscal year record",
					"    */",
					"    utils.validateFiscalYear = function (jsonData) {",
					"        pm.expect(jsonData.id).to.exist;",
					"        pm.expect(jsonData.code).to.exist;",
					"        pm.expect(jsonData.name).to.exist;",
					"        pm.expect(jsonData.periodStart).to.exist;",
					"        pm.expect(jsonData.periodEnd).to.exist;",
					"        pm.expect(jsonData.series).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"fiscal_year.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the content of the group fiscal year summary record",
					"    */",
					"    utils.validateGroupFiscalYearSummaries = function (jsonData) {",
					"        pm.expect(jsonData.groupId).to.exist;",
					"        pm.expect(jsonData.fiscalYearId).to.exist;",
					"        pm.expect(jsonData.allocated).to.exist;",
					"        pm.expect(jsonData.available).to.exist;",
					"        pm.expect(jsonData.unavailable).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"group_fiscal_year_summary.json\")));",
					"    };",
					"",
					"    /**",
					"    * Validates the exchange rate",
					"    */",
					"    utils.validateExchangeRate = function (jsonData) {",
					"        pm.expect(jsonData.from).to.exist;",
					"        pm.expect(jsonData.to).to.exist;",
					"        pm.expect(jsonData.exchangeRate).to.exist;",
					"",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"exchange_rate.json\")));",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"budgetId\");",
					"        pm.environment.unset(\"budgetId2\");",
					"        pm.environment.unset(\"budgetContent2\");",
					"        pm.environment.unset(\"fiscalYearId\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"fundId2\");",
					"        pm.environment.unset(\"fundContent2\");",
					"        pm.environment.unset(\"fundTypeId\");",
					"        pm.environment.unset(\"fundTypeId2\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"xokapitoken-limitedUesr\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"gffyGroupId\");",
					"        pm.environment.unset(\"gffyLedgerId\");",
					"        pm.environment.unset(\"gffyFiscalYearId\");",
					"        pm.environment.unset(\"gffyFundTypeId\");",
					"        pm.environment.unset(\"gffyFundId\");",
					"        pm.environment.unset(\"groupFundFiscalYearId\");",
					"        pm.environment.unset(\"groupId\");",
					"        pm.environment.unset(\"testCurrentFiscalYearOneId\");",
					"        pm.environment.unset(\"testNextFiscalYearOneId\");",
					"        pm.environment.unset(\"currentFiscalYearId\");",
					"        pm.environment.unset(\"nextFiscalYearId\");",
					"        pm.environment.unset(\"currentFyLedgerId\");",
					"        pm.environment.unset(\"nextFyLedgerId\");",
					"        pm.environment.unset(\"currentFyFundId\");",
					"        pm.environment.unset(\"nextFyFundId\");",
					"        pm.environment.unset(\"testNegativeFiscalYearOneId\");",
					"        pm.environment.unset(\"afterNextFiscalYearId\");",
					"        pm.environment.unset(\"negativeLedgerId\");",
					"        pm.environment.unset(\"groupForCrudId\");",
					"        pm.environment.unset(\"groupId1\");",
					"        pm.environment.unset(\"groupId2\");",
					"        pm.environment.unset(\"allocFiscalYearId\");",
					"        pm.environment.unset(\"allocLedgerId\");",
					"        pm.environment.unset(\"toFundId\");",
					"        pm.environment.unset(\"allocBudgetId\");",
					"        pm.environment.unset(\"transactionId\");",
					"        pm.environment.unset(\"encFiscalYearId\");",
					"        pm.environment.unset(\"encLedgerId\");",
					"        pm.environment.unset(\"fromFundId\");",
					"        pm.environment.unset(\"encBudgetId\");",
					"        pm.environment.unset(\"encumbranceId\");",
					"        pm.environment.unset(\"transFiscalYearId\");",
					"        pm.environment.unset(\"transLedgerId\");",
					"        pm.environment.unset(\"transBudgetId\");",
					"        pm.environment.unset(\"transferId\");",
					"        pm.environment.unset(\"currentFiscalYearId\");",
					"        pm.environment.unset(\"nextFiscalYearId\");",
					"        pm.environment.unset(\"ledgerForCurrentFiscalYearId\");",
					"        pm.environment.unset(\"pcFiscalYearId\");",
					"        pm.environment.unset(\"pcLedgerId\");",
					"        pm.environment.unset(\"fromFundId\");",
					"        pm.environment.unset(\"allocBudgetId\");",
					"        pm.environment.unset(\"allocTransactionId\");",
					"        pm.environment.unset(\"invoiceTransactionSummaryId\");",
					"        pm.environment.unset(\"paymentTransactionId\");",
					"        pm.environment.unset(\"creditTransactionId\");",
					"        pm.environment.unset(\"asiahistBudgetId\");",
					"        pm.environment.unset(\"asiahistFundId\");",
					"        pm.environment.unset(\"orderTransactionIdBudget\");",
					"        pm.environment.unset(\"firstBudgetContent\");",
					"        pm.environment.unset(\"creditContent\");",
					"        pm.environment.unset(\"paymentContent\");",
					"        pm.environment.unset(\"toBudgetId\");",
					"        pm.environment.unset(\"fromBudgetId\");",
					"        pm.environment.unset(\"encumbranceContent\");",
					"        pm.environment.unset(\"ordersTransactionSummaryId\");",
					"        pm.environment.unset(\"allocTransaction2Id\");",
					"        pm.environment.unset(\"allocTransaction1Id\");",
					"        pm.environment.unset(\"allocBudget2Id\");",
					"        pm.environment.unset(\"allocBudget1Id\");",
					"        pm.environment.unset(\"fromFund2Id\");",
					"        pm.environment.unset(\"fromFund1Id\");",
					"        pm.environment.unset(\"pcLedgerContent\");",
					"        pm.environment.unset(\"encumbrance3Id\");",
					"        pm.environment.unset(\"encumbrance3Content\");",
					"        pm.environment.unset(\"pendingPaymentTransaction1Id\");",
					"        pm.environment.unset(\"pendingPaymentContent\");",
					"        pm.environment.unset(\"encumbrance2Id\");",
					"        pm.environment.unset(\"encumbrance2Content\");",
					"        pm.environment.unset(\"encumbrance1Id\");",
					"        pm.environment.unset(\"encumbrance1Content\");",
					"        pm.environment.unset(\"orderTransactionSummaryId\");",
					"        pm.environment.unset(\"restrictedEncumbranceContent\");",
					"        pm.environment.unset(\"transaction2Id\");",
					"        pm.environment.unset(\"transaction1Id\");",
					"        pm.environment.unset(\"allocationContent\");",
					"        pm.environment.unset(\"encBudget2Id\");",
					"        pm.environment.unset(\"encBudget1Id\");",
					"        pm.environment.unset(\"fund2Id\");",
					"        pm.environment.unset(\"fund1Id\");",
					"        pm.environment.unset(\"lathistBudgetId\");",
					"        pm.environment.unset(\"canhistBudgetId\");",
					"        pm.environment.unset(\"histBudgetId\");",
					"        pm.environment.unset(\"histFundContent\");",
					"        pm.environment.unset(\"lathistFundId\");",
					"        pm.environment.unset(\"canhistFundId\");",
					"        pm.environment.unset(\"histFundId\");",
					"        pm.environment.unset(\"groupFundFiscalYearForCrudId\");",
					"        pm.environment.unset(\"groupFundFYId\");",
					"        pm.environment.unset(\"allocLedgerContent\");",
					"        pm.environment.unset(\"secondLedgerId\");",
					"        pm.environment.unset(\"ledgerContent\");",
					"        pm.environment.unset(\"fyForDeleteId\");",
					"        pm.environment.unset(\"secondFiscalYearId\");",
					"        pm.environment.unset(\"secondFyContent\");",
					"        pm.environment.unset(\"groupContent\");",
					"        pm.environment.unset(\"pendingPaymentTransaction2Id\");",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function (jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7d57000a-40af-4918-a6a1-705e85f79482",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ec1d4db1-0c73-4bab-9787-8988f8060a90",
			"key": "mod-financeResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-finance/master/src/test/resources"
		},
		{
			"id": "0809bc68-b3a0-44ca-b115-0440c7b55e17",
			"key": "testTenant",
			"value": "finance_api_tests"
		}
	],
	"protocolProfileBehavior": {}
}