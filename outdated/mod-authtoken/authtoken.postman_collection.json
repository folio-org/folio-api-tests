{
	"info": {
		"_postman_id": "b0f39d0e-9ba6-4b54-b46c-c0d6614e26cb",
		"name": "authtoken",
		"description": "Test the APIs provided by Authtoken module. Authtoken has only one API /token defined in its ModuleDescriptor. On top of that, it works as a request filter for all modules. To test it, direct access to it is needed. That's why the environment variable \"mod_url\" is used. Due to the different module exposure between FSE and Vagrant box, a collection level pre-test script is used to dynamically update \"mod_url\" variable to append \"/mod-authtoken\" for non-vagrant (localhost) environment.\n\nTests are organized to three folders, and each foler has subfolder Postive and Negative to contain tests.\n|--/foo (act as filter) -- test the general filter function provided by Authtoken using a legit token\n   |--Positive\n   |--Negative\n|--/token with payload -- test directly against Authtoken /token API with crafted token and headers\n   |--Positive\n   |--Negative\n|--/token without payload -- test directly against Authtoken /token API with crafted token and headers\n   |--Positive\n   |--Negative\n\nNote:\nAuthtoken was not implemented using RMB, so there is no API documentation available. The test cases are derived after inspecting its source code.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/foo (act as filter)",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "/authn/login create a legit token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78b8a410-1a56-481f-a026-4261740154b8",
										"type": "text/javascript",
										"exec": [
											"let msg = \"login into FOLIO\";",
											"",
											"pm.test(\"Response should be 201 if \" + msg, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-token header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-token\");",
											"});",
											"",
											"// set test token to use in later tests",
											"pm.environment.set(\"test_token\", postman.getResponseHeader(\"x-okapi-token\"));",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								},
								"description": "Set okapi-token header to be used by following tests."
							},
							"response": []
						},
						{
							"name": "202 with legit perms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0102c9f3-70bf-49b9-874e-77c06ab734f9",
										"type": "text/javascript",
										"exec": [
											"// will unset later in Negative 403 with required fake perms",
											"// unset to not interfere other tests",
											"// pm.environment.unset(\"test_token\");",
											"",
											"let msg = \"filter request has valid token\";",
											"",
											"pm.test(\"Response should be 202 if \" + msg, function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-permissions header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});",
											"",
											"let perm_headers = postman.getResponseHeader(\"x-okapi-permissions\");",
											"console.log (\"Response headers: \" + perm_headers);",
											"",
											"// pm.test(\"Response should have right perm size 4 in x-okapi-permissions header if \" + msg, function () {",
											"//     pm.expect(perm_headers.split(\",\").length).to.equal(4);",
											"// });",
											"",
											"pm.test(\"Response should have required perms in x-okapi-permissions header if \" + msg, function () {",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_required_1\"));",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_required_2\"));",
											"});",
											"",
											"pm.test(\"Response should have desired perm in x-okapi-permissions header if \" + msg, function () {",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_desired_1\"));",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_desired_2\"));",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-user-id header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-user-id\");",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-module-tokens header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-module-tokens\");",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-token header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-token\");",
											"});",
											"",
											"pm.test(\"Response should have authorization header if \" + msg, function () {",
											"    pm.response.to.have.header(\"Authorization\");",
											"});",
											"",
											"pm.test(\"Response should same value for both x-okapi-token header and authorization header if \" + msg, function () {",
											"    let token = postman.getResponseHeader(\"x-okapi-token\");",
											"    pm.expect(postman.getResponseHeader(\"Authorization\")).to.include(\"Bearer\");",
											"    pm.expect(postman.getResponseHeader(\"Authorization\")).to.include(token);",
											"});",
											"",
											"pm.test(\"Response should have transfer-encoding header if \" + msg, function () {",
											"    pm.response.to.have.header(\"transfer-encoding\", \"chunked\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									},
									{
										"key": "x-okapi-permissions-required",
										"value": "{{test_perm_required_1}},{{test_perm_required_2}}"
									},
									{
										"key": "x-okapi-permissions-desired",
										"value": "{{test_perm_desired_1}},{{test_perm_desired_2}}"
									},
									{
										"key": "authtoken-refresh-cache",
										"value": "true"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "202 with desired fake perms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67d18421-6166-45a0-8cec-68d9ad9d9263",
										"type": "text/javascript",
										"exec": [
											"// will unset later in Negative 403 with required fake perms",
											"// unset to not interfere other tests",
											"// pm.environment.unset(\"test_token\");",
											"",
											"let msg = \"request has legit token but fake perms header\";",
											"",
											"pm.test(\"Response should be 202 if \" + msg, function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-permissions header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});",
											"",
											"let perm_headers = postman.getResponseHeader(\"x-okapi-permissions\");",
											"console.log (\"Response headers: \" + perm_headers);",
											"",
											"// pm.test(\"Response should have right perm size 2 in x-okapi-permissions header if \" + msg, function () {",
											"//     pm.expect(perm_headers.split(\",\").length).to.equal(2);",
											"// });",
											"",
											"pm.test(\"Response should have required perms in x-okapi-permissions header if \" + msg, function () {",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_required_1\"));",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_required_2\"));",
											"});",
											"",
											"pm.test(\"Response should not have fake desired perms in x-okapi-permissions header if \" + msg, function () {",
											"    pm.expect(perm_headers).to.not.include(pm.variables.get(\"test_perm_fake_1\"));",
											"    pm.expect(perm_headers).to.not.include(pm.variables.get(\"test_perm_fake_2\"));",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-user-id header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-user-id\");",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-module-tokens header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-module-tokens\");",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-token header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-token\");",
											"});",
											"",
											"pm.test(\"Response should have authorization header if \" + msg, function () {",
											"    pm.response.to.have.header(\"Authorization\");",
											"});",
											"",
											"pm.test(\"Response should same value for both x-okapi-token header and authorization header if \" + msg, function () {",
											"    let token = postman.getResponseHeader(\"x-okapi-token\");",
											"    pm.expect(postman.getResponseHeader(\"Authorization\")).to.include(\"Bearer\");",
											"    pm.expect(postman.getResponseHeader(\"Authorization\")).to.include(token);",
											"});",
											"",
											"pm.test(\"Response should have transfer-encoding header if \" + msg, function () {",
											"    pm.response.to.have.header(\"transfer-encoding\", \"chunked\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									},
									{
										"key": "x-okapi-permissions-required",
										"value": "{{test_perm_required_1}},{{test_perm_required_2}}"
									},
									{
										"key": "x-okapi-permissions-desired",
										"value": "{{test_perm_fake_1}},{{test_perm_fake_2}}"
									},
									{
										"key": "authtoken-refresh-cache",
										"value": "true"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "202 with required fake perm in extra_permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20401e65-ab50-4cb8-9fd2-7ce7785cf54a",
										"type": "text/javascript",
										"exec": [
											"// will unset later in Negative 403 with required fake perms",
											"// unset to not interfere other tests",
											"// pm.environment.unset(\"test_token\");",
											"",
											"let msg = \"request has legit token and fake perm included in extra-permissions\";",
											"",
											"pm.test(\"Response should be 202 if \" + msg, function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-permissions header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});",
											"",
											"let perm_headers = postman.getResponseHeader(\"x-okapi-permissions\");",
											"console.log (\"Response headers: \" + perm_headers);",
											"",
											"// pm.test(\"Response should have right perm size in x-okapi-permissions header if \" + msg, function () {",
											"//     pm.expect(perm_headers.split(\",\").length).to.equal(4);",
											"// });",
											"",
											"pm.test(\"Response should have required fake perm in x-okapi-permissions header if \" + msg, function () {",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_fake_1\"));",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_fake_2\"));",
											"});",
											"",
											"pm.test(\"Response should have desired perms in x-okapi-permissions header if \" + msg, function () {",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_desired_1\"));",
											"    pm.expect(perm_headers).to.include(pm.variables.get(\"test_perm_desired_2\"));",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-user-id header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-user-id\");",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-module-tokens header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-module-tokens\");",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-token header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-token\");",
											"});",
											"",
											"pm.test(\"Response should have authorization header if \" + msg, function () {",
											"    pm.response.to.have.header(\"Authorization\");",
											"});",
											"",
											"pm.test(\"Response should same value for both x-okapi-token header and authorization header if \" + msg, function () {",
											"    let token = postman.getResponseHeader(\"x-okapi-token\");",
											"    pm.expect(postman.getResponseHeader(\"Authorization\")).to.include(\"Bearer\");",
											"    pm.expect(postman.getResponseHeader(\"Authorization\")).to.include(token);",
											"});",
											"",
											"pm.test(\"Response should have transfer-encoding header if \" + msg, function () {",
											"    pm.response.to.have.header(\"transfer-encoding\", \"chunked\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									},
									{
										"key": "x-okapi-permissions-required",
										"value": "{{test_perm_fake_1}},{{test_perm_fake_2}}"
									},
									{
										"key": "x-okapi-permissions-desired",
										"value": "{{test_perm_desired_1}},{{test_perm_desired_2}}"
									},
									{
										"key": "x-okapi-extra-permissions",
										"value": "{{test_perm_fake_1}},{{test_perm_fake_2}}"
									},
									{
										"key": "authtoken-refresh-cache",
										"value": "true"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "400/500 malformed auth header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a884b4ca-c2bb-4d00-915d-95cbb5e5c4c4",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request has malformed authorization header\";",
											"",
											"pm.test(\"Response should be 400 if \" + msg, function () {",
											"    // TODO: JIRA https://issues.folio.org/browse/MODAT-25",
											"    // Malformed Authorization header returns 500",
											"    pm.response.to.have.status(500);",
											"    // pm.response.to.have.status(400);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									},
									{
										"key": "Authorization",
										"value": "{{$guid}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 conflicting auth headers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15e0968c-617c-47e3-9569-33a5918be24f",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request has conflicting info between x-okapi-token and authorization\";",
											"",
											"pm.test(\"Response should be 400 if \" + msg, function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response should contain wording about conflicting token if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Conflicting token information\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{$guid}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 without tenant header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b558147c-b00b-47da-932d-de43ae568ea0",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request has no x-okapi-tenant header\";",
											"",
											"pm.test(\"Response should be 400 if \" + msg, function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response should contain wording about missing tenant header if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Missing header: X-Okapi-Tenant\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf55cadc-fe36-43d9-be5a-895b64849f8d",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request has invalid x-okapi-token\";",
											"",
											"pm.test(\"Response should be 401 if \" + msg, function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response should contain wording about invalid token format if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{$guid}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 with required fake perms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a7fc649-1568-4720-a78b-6baf69c47a2c",
										"type": "text/javascript",
										"exec": [
											"// unset to not interfere other tests",
											"pm.environment.unset(\"test_token\");",
											"",
											"let msg = \"request has legit token but desired fake perm\";",
											"",
											"pm.test(\"Response should be 403 if \" + msg, function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response should contain wording about access permissions if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Access requires permission\");",
											"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"test_perm_fake_1\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									},
									{
										"key": "x-okapi-permissions-required",
										"value": "{{test_perm_required_1}},{{test_perm_fake_1}}"
									},
									{
										"key": "x-okapi-permissions-desired",
										"value": "{{test_perm_desired_1}}"
									},
									{
										"key": "authtoken-refresh-cache",
										"value": "true"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "create test token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09be471b-a409-4c07-8477-c1a62fe6eec8",
										"type": "text/javascript",
										"exec": [
											"let msg = \"to create a test token\";",
											"",
											"pm.test(\"Response should be 201 if \" + msg, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response body should have token attribute if \" + msg, function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    // set test token to use by next request",
											"    pm.environment.set(\"test_token\", jsonData.token);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"L3Rva2Vu.execute\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\": {  \r\n      \"sub\":\" {{test_user}}\",\r\n      \"tenant\": \"{{xokapitenant}}\",\r\n      \"extra_permissions\": [\"auth.signtoken\"]\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 conflicting tenant info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4824816e-eebc-45f4-a5d2-d4774bcb45e5",
										"type": "text/javascript",
										"exec": [
											"// unset to not interfere other tests",
											"pm.environment.unset(\"test_token\");",
											"",
											"let msg = \"request has conflicting tenant info\";",
											"",
											"pm.test(\"Response should be 403 if \" + msg, function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about invalid token for access if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid token for access\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{$guid}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "create test token including user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d2f35df-99ee-449a-847c-c432172240af",
										"type": "text/javascript",
										"exec": [
											"let msg = \"to create a test token\";",
											"",
											"pm.test(\"Response should be 201 if \" + msg, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response body should have token attribute if \" + msg, function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    // set test token to use by next request",
											"    pm.environment.set(\"test_token\", jsonData.token);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"L3Rva2Vu.execute\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\": {  \r\n      \"sub\":\" {{test_user}}\",\r\n      \"tenant\": \"{{xokapitenant}}\",\r\n      \"user_id\": \"{{test_user_id}}\",\r\n      \"extra_permissions\": [\"auth.signtoken\"]\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "403 conflicting user id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6be046ba-c8a2-4e93-9618-ae488bacc1b1",
										"type": "text/javascript",
										"exec": [
											"// unset to not interfere other tests",
											"pm.environment.unset(\"test_token\");",
											"",
											"let msg = \"request has conflicting user id info\";",
											"",
											"pm.test(\"Response should be 403 if \" + msg, function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about invalid token for access if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Payload user id of\");",
											"    pm.expect(pm.response.text()).to.include(\"does not match expected value\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									},
									{
										"key": "x-okapi-user-id",
										"value": "{{$guid}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/foo",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"foo"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7b53aac1-57a3-4d79-b703-6048c8fd32aa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "69b329b1-6988-473d-a9c1-f4db370b5704",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "/token with payload",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "/token 200 with auth.signtoken.execute in x-okapi-permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c53eb623-dbd3-42f6-9a92-f318149b047e",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request has valid payload and required permissions\";",
											"",
											"pm.test(\"Response should be 201 if \" + msg, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response body should have token attribute if \" + msg, function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    // set test token to use by next request",
											"    pm.environment.set(\"test_token\", jsonData.token);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"L3Rva2Vu.execute\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "create test token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "126f9cb8-4d8b-4b0f-9d32-914ee8a8f3d8",
										"type": "text/javascript",
										"exec": [
											"let msg = \"to create a test token\";",
											"",
											"pm.test(\"Response should be 201 if \" + msg, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response body should have token attribute if \" + msg, function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    // set test token to use by next request",
											"    pm.environment.set(\"test_token\", jsonData.token);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"L3Rva2Vu.execute\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\": {  \r\n      \"sub\":\" {{test_user}}\",\r\n      \"tenant\": \"{{xokapitenant}}\",\r\n      \"extra_permissions\": [\"auth.signtoken\"]\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/token 200 with auth.signtoken in token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6cde62db-6559-48b3-b99d-0547b7305a4f",
										"type": "text/javascript",
										"exec": [
											"// unset to not interfere other tests",
											"pm.environment.unset(\"test_token\");",
											"",
											"let msg = \"request has required token\";",
											"",
											"pm.test(\"Response should be 202 if \" + msg, function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-token header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-token\");",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-permissions header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});",
											"",
											"pm.test(\"Response should have expected x-okapi-permissions header value if \" + msg, function () {",
											"    let perms = postman.getResponseHeader(\"x-okapi-permissions\");",
											"    pm.expect(perms).to.include(\"L3Rva2Vu.execute\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "/token 400 without JSON field sub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cac92e20-1436-47ef-bc9f-440972107e6a",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request JSON payload has no field 'sub'\";",
											"",
											"pm.test(\"Response should be 400 if \" + msg, function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about invalid JSON if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Payload must contain a 'sub' field\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"L3Rva2Vu.execute\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub_bad\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/token 403 without x-okapi-permissions header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e5ec214-a59e-4348-aa97-1802b8017b2a",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request has no x-okapi-permissions header\";",
											"",
											"pm.test(\"Response should be 403 if \" + msg, function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about missing permissions to access endpoint if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Missing permissions to access endpoint\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/token 403 with null x-okapi-permissions header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92e86a7b-734d-4e72-be21-09cbd5e98024",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request has null x-okapi-permissions header\";",
											"",
											"pm.test(\"Response should be 403 if \" + msg, function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about missing permissions to access endpoint if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Missing permissions to access endpoint\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": ""
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/token 400 without JSON field payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28ddd3a2-dbf8-40f7-9409-dd80018e4965",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request JSON payload has no field 'payload'\";",
											"",
											"pm.test(\"Response should be 400 if \" + msg, function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about invalid JSON if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Valid 'payload' field is required\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"L3Rva2Vu.execute\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload_bad\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/token 400 non-json payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "762d3c27-7f2f-40e5-a822-8618a22ca4c0",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request has non JSON payload\";",
											"",
											"pm.test(\"Response should be 400 if \" + msg, function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about invalid JSON if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Unable to decode\");",
											"    pm.expect(pm.response.text()).to.include(\"as valid JSON\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"L3Rva2Vu.execute\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "some non-JSON content"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/token 403 with empty x-okapi-permissions header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84e83dfa-a0b2-4fb2-841b-cfcde92408bc",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request has empty x-okapi-permissions header\";",
											"",
											"pm.test(\"Response should be 403 if \" + msg, function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about missing permissions to access endpoint if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Missing permissions to access endpoint\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/token 403 missing auth.signtoken.execute in x-okapi-permissions header",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1aaa8d2-98bf-439a-a5a2-1b23d83ee880",
										"type": "text/javascript",
										"exec": [
											"let msg = \"request does not include auth.signtoken.execute in x-okapi-permissions header\";",
											"",
											"pm.test(\"Response should be 403 if \" + msg, function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about missing permissions to access endpoint if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Missing permissions to access endpoint\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"{{test_perm_fake_1}}\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\":{  \r\n      \"sub\":\"{{test_user}}\",\r\n      \"tenant\":\"{{xokapitenant}}\"\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "/token without payload",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "create test token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b19b2bfb-4199-4f21-9bd2-8ca535be8d84",
										"type": "text/javascript",
										"exec": [
											"let msg = \"to create a test token\";",
											"",
											"pm.test(\"Response should be 201 if \" + msg, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response body should have token attribute if \" + msg, function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    // set test token to use by next request",
											"    pm.environment.set(\"test_token\", jsonData.token);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"L3Rva2Vu.execute\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\": {  \r\n      \"sub\":\" {{test_user}}\",\r\n      \"tenant\": \"{{xokapitenant}}\",\r\n      \"extra_permissions\": [\"auth.signtoken\"]\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/token 200",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61bf4e87-84f8-4c68-8045-40b8badb61e3",
										"type": "text/javascript",
										"exec": [
											"// unset to not interfere other tests",
											"pm.environment.unset(\"test_token\");",
											"",
											"let msg = \"request has no payload but token with auth.signtoken extra_permission\";",
											"",
											"pm.test(\"Response should be 202 if \" + msg, function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-token header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-token\");",
											"});",
											"",
											"pm.test(\"Response should have x-okapi-permissions header if \" + msg, function () {",
											"    pm.response.to.have.header(\"x-okapi-permissions\");",
											"});",
											"",
											"pm.test(\"Response should have auth.signtoken.execute in x-okapi-permissions header if \" + msg, function () {",
											"    pm.expect(postman.getResponseHeader(\"x-okapi-permissions\")).to.include(\"L3Rva2Vu.execute\");",
											"});",
											"",
											"pm.test(\"Response should have transfer-encoding header if \" + msg, function () {",
											"    pm.response.to.have.header(\"transfer-encoding\", \"chunked\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "create test token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57e4283f-4198-4d73-a3b8-e53a3d0539a2",
										"type": "text/javascript",
										"exec": [
											"let msg = \"to create a test token\";",
											"",
											"pm.test(\"Response should be 201 if \" + msg, function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"let jsonData = JSON.parse(responseBody);",
											"pm.test(\"Response body should have token attribute if \" + msg, function () {",
											"    pm.expect(jsonData).to.have.property(\"token\");",
											"    // set test token to use by next request",
											"    pm.environment.set(\"test_token\", jsonData.token);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-permissions",
										"value": "[\"L3Rva2Vu.execute\"]"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"payload\": {  \r\n      \"sub\":\" {{test_user}}\",\r\n      \"tenant\": \"{{xokapitenant}}\",\r\n      \"extra_permissions\": [\"random.perm\"]\r\n   }\r\n}"
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "/token 401 missing module-level permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05ca2725-8c0b-40ff-8f57-edcdd0c68b52",
										"type": "text/javascript",
										"exec": [
											"// unset to not interfere other tests",
											"pm.environment.unset(\"test_token\");",
											"",
											"let msg = \"request has no payload and no required auth.signtoken extra_permission in token\";",
											"",
											"pm.test(\"Response should be 401 if \" + msg, function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response text should contain wording about missing required module-level permissions for endpoint if \" + msg, function () {",
											"    pm.expect(pm.response.text()).to.include(\"Missing required module-level permissions for endpoint\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"value": "{{test_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{mod_url}}/token",
									"host": [
										"{{mod_url}}"
									],
									"path": [
										"token"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "11ec0ce1-f808-4242-bf1c-c785618fea52",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0ea8c6a8-3a98-4135-ba1e-79d2c2b61d2a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "107c0426-85b7-4d74-ab7b-5d6e491a69af",
				"type": "text/javascript",
				"exec": [
					"let mod_url = pm.environment.get(\"mod_url\");",
					"console.log(mod_url)",
					"",
					"if (mod_url.indexOf(\"localhost\") < 0 && mod_url.indexOf(\"mod-authtoken\") < 0) {",
					"    pm.environment.set(\"mod_url\", mod_url + \"/mod-authtoken\");",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0bf728bb-98b4-4762-a4bf-a5e7108d3a7f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cd41f99e-3fbf-4c38-a5b0-3424b58f2888",
			"key": "test_user",
			"value": "fse_test_authtoken_user",
			"type": "string"
		},
		{
			"id": "24fa57f8-4a95-4696-bd81-20f0c58442f9",
			"key": "test_user_id",
			"value": "fse_test_authtoken_user_id",
			"type": "string"
		},
		{
			"id": "dafc3738-3851-4ad4-9b4e-3b95b7f97a22",
			"key": "test_perm_required_1",
			"value": "login.item.get",
			"type": "string"
		},
		{
			"id": "91c5685b-3d17-425b-80e6-e88a615f1d17",
			"key": "test_perm_required_2",
			"value": "login.item.post",
			"type": "string"
		},
		{
			"id": "eed92173-57bc-4dd6-8ac2-78b70cbc7c46",
			"key": "test_perm_desired_1",
			"value": "login.item.put",
			"type": "string"
		},
		{
			"id": "735fce46-eaef-4bc7-a9f3-007ea28a727b",
			"key": "test_perm_desired_2",
			"value": "login.item.delete",
			"type": "string"
		},
		{
			"id": "82139ac0-6ef2-4173-8241-28f57703fd1e",
			"key": "test_perm_fake_1",
			"value": "fse.fake.perm.1",
			"type": "string"
		},
		{
			"id": "5727fb6e-875a-4d3e-b1cb-3104e0cd3a6c",
			"key": "test_perm_fake_2",
			"value": "fse.fake.perm.2",
			"type": "string"
		}
	]
}