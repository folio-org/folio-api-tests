{
	"info": {
		"_postman_id": "fa661ce8-df54-4dda-b9b3-08fbb72fe079",
		"name": "mod-organizations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd33ee67-ed9f-436f-9769-c21cbe23f3b5",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "31151109-f769-4dea-827f-10d67944975f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ba9598c6-22fa-42a5-b89b-23243910fb4b",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c42774ce-1bfc-4742-9b73-578c587e2c1c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-organizations-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-organizations\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-orders-storage\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\": moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"\tpm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2544cf9a-daf9-44a6-9a9a-0ce46e409a60",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "33576586-7770-42f0-8113-013200ffae04",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "793f508c-817d-4d7b-ada8-5b480a2f2745",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e796a24d-6f3a-4ebc-b3cc-316980cd9035",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b994edcb-747a-414c-9cef-2273334c757a",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e729585-7189-456f-89c0-ba378d0115e6",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3274ee2a-6071-491a-9b71-6be0f21de2ef",
										"exec": [
											"eval(globals.loadUtils).sendGetRequest('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])', (err, res) => {",
											"        let userPermissions = globals.testData.users.admin.permissions;",
											"        userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"        pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c624cd4a-416b-48b8-a2a4-6abb632ca889",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab545ce8-4e1f-4cbf-ba86-54c743a36c76",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"mod-authtoken is enabled\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d2d3784-fa4d-4e2b-bde5-82ff2c4f0a71",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bebf2cdc-31ab-4e4a-8bd5-5e1996b1810c",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5bd977e8-295e-44a0-9d83-7d2886e9b03c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "00b20e51-704d-412f-827c-3eeec5ab38f4",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    ",
											"    pm.variables.set(\"userId\", globals.testData.users.regular.user.id);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6d66640-40ae-49af-97e3-0d807d3b323a",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6e5cc56-8210-447f-9fc0-73a5a16c7872",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Define permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "950462b6-e047-4a03-90bf-d5fbf24f784c",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98f38366-3566-4138-8c99-783cddf67397",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5ab88f6-6f1d-482b-81c9-26eca60caf43",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "020d07d6-3960-43a3-ab48-010cde874a12",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "208d6ba0-0d79-440d-9b59-ac5e9c4e4f09",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modOrgsId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05e30c72-092e-4237-b675-98affcb9814f",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-organizations-storage';\r",
											"\r",
											"pm.sendRequest(utils.buildOkapiUrl('/_/proxy/tenants/' + pm.variables.get(\"testTenant\") + '/interfaces/_jsonSchemas'), (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function () {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"    \tpm.variables.set('modOrgsId', moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modOrgsId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "30a8f679-acf9-4a97-a726-94586ce2a799",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f4632f12-3d7b-4c76-b931-5e8a2384aad8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Organizations",
					"item": [
						{
							"name": "Acqusitions Units",
							"item": [
								{
									"name": "Prepare test entities",
									"item": [
										{
											"name": "Create read-open acquisitions unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b93031f7-decc-4aba-8a43-9e9d64d98ce5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnit = {};",
															"",
															"pm.test(\"Acq.unit is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnit = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"readOnlyAcqUnitId\", acqUnit.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bfdaabe3-4cad-402f-9dd9-ec9305734c18",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"read only\";",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = false;",
															"body.protectUpdate = true;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create update-open acquisitions unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92465f4d-e35b-4200-882a-55486985317c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnit = {};",
															"",
															"pm.test(\"Acq.unit is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnit = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"updateOnlyAcqUnitId\", acqUnit.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b7e27226-62e5-4a30-b24e-f03efd1dec54",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"update only\";",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = true;",
															"body.protectUpdate = false;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create full-protected acquisitions unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b87b09e8-dc99-4dc2-a07a-43c319b026f5",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnit = {};",
															"",
															"pm.test(\"Acq.unit is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnit = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"fullProtectedAcqUnitId\", acqUnit.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "eeadb26c-5b24-4840-945e-92beffb0bbbc",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"full protected\";",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = true;",
															"body.protectUpdate = true;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create no-acq org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "73de8572-3ce1-49c4-86be-21aa24af2fb9",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organization is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function() {",
															"    pm.expect(organization.id).to.exist;",
															"    pm.environment.set(\"noAcqOrganizationId\", organization.id); ",
															"",
															"    utils.validateOrganization(organization);",
															"    pm.expect(organization.status).to.eql(\"Active\");",
															"    pm.expect(organization.name).to.contain(\"for API Test\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3c91a2e0-2569-4706-919b-54b5bba7b0cd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
															"    let org = res.json();",
															"    delete org.id;",
															"    org.name = \"Active org for API Test\";",
															"    org.status = \"Active\";",
															"    org.code = \"NO_ACQ_ORG\";",
															"    org.acqUnitIds = [];",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5ded4295-4535-4900-8b28-102c09121ee8",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organization is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function() {",
															"    pm.expect(organization.id).to.exist;",
															"    pm.environment.set(\"readOnlyOrganizationId\", organization.id); ",
															"",
															"    utils.validateOrganization(organization);",
															"    pm.expect(organization.status).to.eql(\"Active\");",
															"    pm.expect(organization.name).to.contain(\"for API Test\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "16a70538-bbfb-495c-af5b-4a146812a52a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
															"    let org = res.json();",
															"    delete org.id;",
															"    org.name = \"Active org for API Test\";",
															"    org.status = \"Active\";",
															"    org.code = \"READ_ONLY_ORG\";",
															"    org.acqUnitIds = [pm.variables.get(\"readOnlyAcqUnitId\")];",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dd669e0d-d360-4fca-943b-e5ea56c2d81d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organization is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function() {",
															"    pm.expect(organization.id).to.exist;",
															"    pm.environment.set(\"updateOnlyOrganizationId\", organization.id); ",
															"",
															"    utils.validateOrganization(organization);",
															"    pm.expect(organization.status).to.eql(\"Active\");",
															"    pm.expect(organization.name).to.contain(\"for API Test\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d5bce3a0-9843-4685-8b07-061013cb2d02",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
															"    let org = res.json();",
															"    delete org.id;",
															"    org.name = \"Active org for API Test\";",
															"    org.status = \"Active\";",
															"    org.code = \"UPDATE_ONLY_ORG\";",
															"    org.acqUnitIds = [pm.variables.get(\"updateOnlyAcqUnitId\")];",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create full-protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d5634b43-467c-444a-aa62-279f64cde57a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organization is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function() {",
															"    pm.expect(organization.id).to.exist;",
															"    pm.environment.set(\"fullProtectedOrganizationId\", organization.id); ",
															"",
															"    utils.validateOrganization(organization);",
															"    pm.expect(organization.status).to.eql(\"Active\");",
															"    pm.expect(organization.name).to.contain(\"for API Test\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f24805db-8fab-4e2c-9f4d-bf4428a88202",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
															"    let org = res.json();",
															"    delete org.id;",
															"    org.name = \"Active org for API Test\";",
															"    org.status = \"Active\";",
															"    org.code = \"FULL_PROTECTED_ORG\";",
															"    org.acqUnitIds = [pm.variables.get(\"fullProtectedAcqUnitId\")];",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "GET",
									"item": [
										{
											"name": "Get not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9a096ffa-1eda-48cc-90da-7f724259b18b",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"noAcqOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7d48eb5f-726c-4aca-af7b-65efdf762ad8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c77a8312-e442-444d-a486-f66231a04cfc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"readOnlyOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8f2b7ae1-052d-43a9-a9a6-ef84d820d19f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a2678473-0e27-4613-97f8-bc0126f26d0e",
														"exec": [
															"pm.test(\"Organization can not be viewed\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1cd85853-474c-443b-9a66-ceece2b7e031",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get organizations",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "568d07fe-1518-431a-8b0c-42e779b2f1df",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organizations = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organizations = pm.response.json();",
															"});",
															"",
															"pm.test(\"2 open for read organizations should be found\", function () {",
															"    pm.expect(organizations.totalRecords).to.eql(2);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e3ef7386-31ac-41c7-a212-12c21b03353a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations?limit=10",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to read-open unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "36892fdd-740d-4217-b471-ed66f8484d18",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnitMembership = {};",
															"",
															"pm.test(\"Membership is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnitMembership = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"acqMembershipId\", acqUnitMembership.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1f3959ff-cd54-489e-b64e-2d1315de0d4d",
														"exec": [
															"let body = {};",
															"",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"readOnlyAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d6b3f20f-9890-4eda-b146-4add1ca3769f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"noAcqOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "319ea3d8-3630-49cd-b2ff-9eb4e3c1b7a9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "230a5032-08ef-4d6e-9f7a-cf1f7c10d1eb",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"readOnlyOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b0a0857e-eb7f-4465-8afc-e951c06bbc0d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70b9041b-343e-4ed9-ac78-c735d00a4b77",
														"exec": [
															"pm.test(\"Operation forbidden\", function () {",
															"    pm.response.to.have.status(403);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f18929fe-4735-4fe2-9f80-3d30126aa710",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get organizations",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c2a8dc2c-4d69-4735-aa74-a5947ccac7a9",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organizations = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organizations = pm.response.json();",
															"});",
															"",
															"pm.test(\"2 open for read organizations should be found\", function () {",
															"    pm.expect(organizations.totalRecords).to.eql(2);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "41b5fd0d-408f-4c63-82dd-f51b4b01d5ea",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations?limit=10",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to full-protected unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bd71c795-c44f-4231-9589-b6414a6524ae",
														"exec": [
															"pm.test(\"Membership was assigned\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "70c76165-8771-48e7-b182-26678bef8ecd",
														"exec": [
															"let body = {};",
															"",
															"body.id = pm.variables.get(\"acqMembershipId\");",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"fullProtectedAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships/{{acqMembershipId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships",
														"{{acqMembershipId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0f4c2952-f63f-4ed9-8ab9-081565e03ea7",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"noAcqOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3fd5d263-5d37-455c-a16b-cd9936c97bf0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "937651a9-1eb5-42ab-92a3-3a300530b4f1",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organization = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organization = pm.response.json();",
															"});",
															"",
															"pm.test(\"Organization content is valid\", function () {",
															"    pm.expect(organization.id).to.eql(pm.environment.get(\"readOnlyOrganizationId\"));",
															"    utils.validateOrganization(organization);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8e43591b-4b60-4645-ad84-ecdd15b06aef",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get full-protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1a79f2c-4394-49e5-bcb1-c961618e2808",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "51865140-5b1e-418e-9bf2-7f92e353f83c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get organizations",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f43c5d8b-266e-4168-934c-09fb8fa0b3dc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let organizations = {};",
															"",
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(200);",
															"    organizations = pm.response.json();",
															"});",
															"",
															"pm.test(\"3 organizations should be found\", function () {",
															"    pm.expect(organizations.totalRecords).to.eql(3);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1da14afa-31fc-4b4c-b783-89a83b751ed2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations?limit=10",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations"
													],
													"query": [
														{
															"key": "limit",
															"value": "10"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT",
									"item": [
										{
											"name": "Unassign user from acq. unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "15363093-9304-4ec4-91e2-a03164083877",
														"exec": [
															"pm.test(\"Membership is deleted\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0ebcfc45-c80b-415a-ac01-0b220a848f23",
														"exec": [
															"let body = {};",
															"",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"readOnlyAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships/{{acqMembershipId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships",
														"{{acqMembershipId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "99b09a48-8801-46cd-9120-57b7ac255638",
														"exec": [
															"pm.test(\"Organization is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5e3675b9-d55f-452f-9ad5-d831e415fb09",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"noAcqOrganizationContent\"));",
															"    org.code = \"UPDATED_NO_ACQ\";",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4fbe3503-6daf-408a-9e1d-d3df913fb9da",
														"exec": [
															"pm.test(\"Organization is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0431961f-cfa6-41af-b137-2646e7ecd1d9",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"updateOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_UPDATE_ONLY\";",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{updateOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{updateOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-open org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e5d798f2-586d-4133-891f-3687ae287da3",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cb50d173-fbdd-42c5-9771-df5e51acc17c",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change read-open acq.unit permissions to read-update-open",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1f8b8924-206f-4acf-a8cf-431de7f4fa3f",
														"exec": [
															"pm.test(\"Acq.unit is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cb06ffe9-88bb-424a-844f-0264c2c24ab5",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"read and update only\";",
															"body.id = pm.variables.get(\"readOnlyAcqUnitId\");",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = false;",
															"body.protectUpdate = false;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units/{{readOnlyAcqUnitId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units",
														"{{readOnlyAcqUnitId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10f4f2d7-e3d4-47ef-afca-c21738d266ac",
														"exec": [
															"pm.test(\"Organization is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e1d2cc3c-d4af-4e67-af49-54182052897d",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change read-update-open acq.unit permissions to read-open",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "07f621aa-f19a-44c7-95ac-32954fd72eae",
														"exec": [
															"pm.test(\"Acq.unit is updated\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "48811db9-7703-421e-ba45-6f15b53b1364",
														"exec": [
															"let body = {};",
															"",
															"body.name = \"read only\";",
															"body.id = pm.variables.get(\"readOnlyAcqUnitId\");",
															"body.isDeleted = false;",
															"body.protectCreate = true;",
															"body.protectRead = false;",
															"body.protectUpdate = true;",
															"body.protectDelete = true;",
															"",
															"pm.variables.set(\"unitBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{unitBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/units/{{readOnlyAcqUnitId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"units",
														"{{readOnlyAcqUnitId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "247a4c67-b705-4a41-8ae2-d726455fb42a",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6dbff135-6429-451b-bff0-0c7c88a3ca1e",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"fullProtectedOrganizationContent\"));",
															"    org.code = \"UPDATED_FULL_PROTECTED\";",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to read-open unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ba7fb47a-b914-4fb9-94a1-3cc00c73f901",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let acqUnitMembership = {};",
															"",
															"pm.test(\"Membership is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    acqUnitMembership = pm.response.json();",
															"});",
															"",
															"pm.variables.set(\"acqMembershipId\", acqUnitMembership.id);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b19e70ed-5d39-4bee-97cc-50607c026a43",
														"exec": [
															"let body = {};",
															"",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"readOnlyAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "91f8ebf7-03c2-4cf5-8a4c-fcd1d7799624",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c1817f5c-cc0e-4290-9188-f52295cafc15",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"noAcqOrganizationContent\"));",
															"    org.code = \"UPDATED_NO_ACQ\";",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a9324186-09f4-439c-884e-031a401a3959",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5383718c-2b6e-4d03-a61e-dadbd448220c",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ae593b6f-f045-49e3-ad6d-4a46fac205f2",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5e62fad7-6dff-40d0-88c0-2919867f8e65",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"updateOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_UPDATE_ONLY\";",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{updateOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{updateOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87fbe298-4a6e-49d9-bc39-c567159b077a",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0d396b0f-8c6e-4dda-ad1d-2ac0abbf0b46",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"fullProtectedOrganizationContent\"));",
															"    org.code = \"UPDATED_FULL_PROTECTED\";",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to update-open unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "34ab525e-df19-4779-aed3-1c9e6ee0bde5",
														"exec": [
															"pm.test(\"Membership was assigned\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2ddc1346-9997-440a-9e70-2293e21266bf",
														"exec": [
															"let body = {};",
															"",
															"body.id = pm.variables.get(\"acqMembershipId\");",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"updateOnlyAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships/{{acqMembershipId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships",
														"{{acqMembershipId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bc5e9c92-a2be-4375-aa42-d1b485323857",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c219d0f4-e11c-47f8-8d05-0517b96f199f",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"noAcqOrganizationContent\"));",
															"    org.code = \"UPDATED_NO_ACQ\";",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-open org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ede0cd17-088d-4505-a161-e24067d099ad",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e19894fd-8e06-4e00-87c2-ba9d3192cb99",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e788aba9-e7c9-4d9e-9c42-d1e0efebb788",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e682f210-daa3-4e74-9063-69a832312f20",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"updateOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_UPDATE_ONLY\";",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{updateOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{updateOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update full-protected org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "99fbbfd3-f2ea-4237-82ea-d0f301c40e5b",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bc0b33e7-dd0c-43fc-8d48-b7fb46db27cf",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"fullProtectedOrganizationContent\"));",
															"    org.code = \"UPDATED_FULL_PROTECTED\";",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Assign user to full-protected unit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8d8aa207-5624-4053-a1db-528492bf8d7e",
														"exec": [
															"pm.test(\"Membership was assigned\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "02f91660-079d-4545-b187-bd34086d39ca",
														"exec": [
															"let body = {};",
															"",
															"body.id = pm.variables.get(\"acqMembershipId\");",
															"body.userId = pm.variables.get(\"userId\");",
															"body.acquisitionsUnitId = pm.variables.get(\"fullProtectedAcqUnitId\");",
															"",
															"pm.variables.set(\"membershipBody\", JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{membershipBody}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/acquisitions-units-storage/memberships/{{acqMembershipId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"acquisitions-units-storage",
														"memberships",
														"{{acqMembershipId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update not protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1710cdb2-a852-4015-b2b6-205be074864e",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0feeb8da-af83-4a0d-ab28-092f536705c3",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"noAcqOrganizationContent\"));",
															"    org.code = \"UPDATED_NO_ACQ\";",
															"    pm.variables.set(\"noAcqOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{noAcqOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{noAcqOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{noAcqOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update read-open org - forbidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "246e5dc7-c3e0-4fb5-88b6-9f26f777ce1a",
														"exec": [
															"pm.test(\"Organization can not be updated\",  () => {",
															"    pm.response.to.be.forbidden;",
															"",
															"    let errors = pm.response.json().errors;",
															"    pm.expect(errors.length).to.eql(1);",
															"    pm.expect(errors[0].code).to.eql(\"userHasNoPermission\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "48016ab1-426f-4ce4-b642-53810d5e88de",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"readOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_READ_ONLY\";",
															"    pm.variables.set(\"readOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{readOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{readOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{readOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update update-open org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "36655828-e87c-4b66-a8a7-9ed007c2b9e3",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "30542162-81d3-4c02-a9aa-6e0ed66b5997",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"updateOnlyOrganizationContent\"));",
															"    org.code = \"UPDATED_UPDATE_ONLY\";",
															"    pm.variables.set(\"updateOnlyOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{updateOnlyOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{updateOnlyOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{updateOnlyOrganizationId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update full-protected org",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c5acb6c-07e3-4be2-b4fc-75a20c8756fd",
														"exec": [
															"pm.test(\"Organizations found\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d0689fd7-00f5-4bf5-a272-3aa359c90b23",
														"exec": [
															"let org = JSON.parse(pm.variables.get(\"fullProtectedOrganizationContent\"));",
															"    org.code = \"UPDATED_FULL_PROTECTED\";",
															"    pm.variables.set(\"fullProtectedOrganizationContent\", JSON.stringify(org));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{fullProtectedOrganizationContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{fullProtectedOrganizationId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"organizations",
														"organizations",
														"{{fullProtectedOrganizationId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create active org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0643063-7765-4558-80fb-a8c729f09278",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let organization = {};",
											"",
											"pm.test(\"Organization is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    organization = pm.response.json();",
											"});",
											"",
											"pm.test(\"Organization content is valid\", function() {",
											"    pm.expect(organization.id).to.exist;",
											"    pm.environment.set(\"activeOrganizationId\", organization.id); ",
											"",
											"    utils.validateOrganization(organization);",
											"    pm.expect(organization.status).to.eql(\"Active\");",
											"    pm.expect(organization.name).to.contain(\"for API Test\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "47de4af0-7a9b-4296-b21b-09d042a196ee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    delete org.id;",
											"    org.name = \"Active org for API Test\";",
											"    org.status = \"Active\";",
											"    org.code = \"ACTIVEORG1\";",
											"    org.accounts[0].acqUnitIds = [];",
											"    org.acqUnitIds = [];",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update active org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd4ce51c-c2b9-41c4-811e-7094f62835f6",
										"exec": [
											"pm.test(\"Organization is updated\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a81c9ff-0deb-4dcd-ab13-59e6b2b7dc01",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    delete org.id;",
											"    org.name = \"Active org for API Test - UPDATED\";",
											"    org.status = \"Active\";",
											"    org.code = \"ACTIVEORG2\";",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{activeOrganizationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"{{activeOrganizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created active org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fa4c719-cd53-424b-b674-fcea53a2edc0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let organization = {};",
											"",
											"pm.test(\"Organizations found\", function () {",
											"    pm.response.to.have.status(200);",
											"    organization = pm.response.json();",
											"});",
											"",
											"pm.test(\"Organization content is valid\", function () {",
											"    pm.expect(organization.id).to.eql(pm.environment.get(\"activeOrganizationId\"));",
											"    utils.validateOrganization(organization);",
											"    pm.expect(organization.code).to.eql(\"ACTIVEORG2\");",
											"    pm.expect(organization.status).to.eql(\"Active\");",
											"    pm.expect(organization.name).to.contain(\"Active org for API Test - UPDATED\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ce080ea9-bd61-4aee-81fd-b583a1e6625a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{activeOrganizationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"{{activeOrganizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete active org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60804dd9-5f68-4b94-90fe-d71b9846d62a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Organization is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f1c0e6d1-78cd-4a94-acc5-6158cd862b85",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/{{activeOrganizationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"{{activeOrganizationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create inactive org",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b7f7edc-de20-47b3-ab43-6df73ba45a9b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let organization = {};",
											"",
											"pm.test(\"Organization is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    organization = pm.response.json();",
											"});",
											"",
											"pm.test(\"Organization content is valid\", function() {",
											"    pm.expect(organization.id).to.exist;",
											"    pm.environment.set(\"inactiveOrganizationId\", organization.id); ",
											"",
											"    utils.validateOrganization(organization);",
											"    pm.expect(organization.status).to.eql(\"Inactive\");",
											"    pm.expect(organization.isVendor).to.be.false;",
											"    pm.expect(organization.name).to.contain(\"for API Test\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a28db58d-1fad-40e2-a8fb-8c6eca8ba17e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    delete org.id;",
											"    org.name = \"Inactive for API Test\";",
											"    org.status = \"Inactive\";",
											"    org.code = \"INACTIVEORG\";",
											"    org.isVendor = false;",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created orgs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e155db8-8541-432a-80d1-8ab6b10f29d7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let organization = [];",
											"",
											"pm.test(\"Organizations found\", function () {",
											"    pm.response.to.have.status(200);",
											"    organizations = pm.response.json().organizations;",
											"});",
											"",
											"pm.test(\"Organization content is valid\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.equal(1);",
											"    organizations.forEach(org => utils.validateOrganization(org));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63a16c02-92db-4097-a562-8f249dc3c014",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations?query=name=\"Inactive for API Test\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations"
									],
									"query": [
										{
											"key": "query",
											"value": "name=\"Inactive for API Test\""
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Addresses",
					"item": [
						{
							"name": "Create address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c67d1277-8e17-449b-b409-64ff47f1d487",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"addressContent\", JSON.stringify(utils.buildAddress()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6ab0dc9-b475-40c5-86de-ff629f9c1cc0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = {};",
											"",
											"pm.test(\"Address is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    address = pm.response.json();",
											"});",
											"",
											"pm.test(\"Address content is valid\", function() {",
											"    pm.expect(address.id).to.exist;",
											"    pm.environment.set(\"addressId\", address.id); ",
											"    ",
											"    utils.validateAddress(address);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{addressContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create another address for filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8efad50e-37c6-411d-8723-836b1da45f17",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = JSON.stringify(utils.buildAddress());",
											"let add = JSON.parse(address);",
											"add.addressLine1 = \"Api Test\"",
											"",
											"pm.variables.set(\"addressContentForFilter\", JSON.stringify(add));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c5f577f2-7640-41a0-9d6a-55c248228187",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = {};",
											"",
											"pm.test(\"Address is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    address = pm.response.json();",
											"});",
											"",
											"pm.test(\"Address content is valid\", function() {",
											"    pm.expect(address.id).to.exist;",
											"    pm.environment.set(\"addressForFilterId\", address.id); ",
											"    ",
											"    utils.validateAddress(address);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{addressContentForFilter}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update address with new country",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "314d7ee6-533e-4b6c-a3f7-00cc0bfcb6cc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = JSON.stringify(utils.buildAddress());",
											"let add = JSON.parse(address);",
											"let country = \"UUU\" + add.country;",
											"",
											"add.country = country;",
											"pm.variables.set(\"updatedCountry\", country);",
											"pm.variables.set(\"updatedAddress\", JSON.stringify(add));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cb49b64d-b623-44db-8ce9-f6938b09f990",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/organizations-storage/addresses/\" + environment.addressId, (err, res) => {",
											"        pm.test(\"Verify address updated with new country\", () => pm.expect(res.json().country).to.equal(pm.variables.get(\"updatedCountry\")));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedAddress}}\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4cd1af2-2796-4987-aeb6-cf6c7d1ca110",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = {};",
											"",
											"pm.test(\"Address found\", function () {",
											"    pm.response.to.have.status(200);",
											"    address = pm.response.json();",
											"});",
											"",
											"pm.test(\"Addrress content is valid\", function() {",
											"    pm.expect(address.id).to.eql(pm.environment.get(\"addressId\"));",
											"    utils.validateAddress(address);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get created addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "528e3dc6-3424-49ff-8d5f-640f394d69a1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let addresses = [];",
											"",
											"pm.test(\"Addresses found\", function () {",
											"    pm.response.to.have.status(200);",
											"    addresses = pm.response.json().addresses;",
											"});",
											"",
											"pm.test(\"Addresses content is valid\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.be.equal(1);",
											"    addresses.forEach(address => utils.validateAddress(address));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses?query=addressLine1==API Test",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses"
									],
									"query": [
										{
											"key": "query",
											"value": "addressLine1==API Test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b75d7b3-f0cd-4961-a4b2-b71d6de33c03",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Address is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Interfaces",
					"item": [
						{
							"name": "Create interface",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3b71dca8-8eda-4f40-baed-11d3c1d1aac1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/interfaces/acso_interface.json\", function (err, res) {",
											"    let testInterface = res.json();",
											"    delete testInterface.id;",
											"    pm.variables.set(\"interfaceContent\", JSON.stringify(testInterface));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "44395a41-a7d6-41c4-840f-6a397ed397d9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Interface is created\", function() {",
											"    pm.response.to.have.status(201);",
											"",
											"    let testInterface = pm.response.json();",
											"    pm.expect(testInterface.id).to.exist;",
											"    pm.variables.set(\"interfaceId\", testInterface.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{interfaceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create interface credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec1635b4-0784-4118-a99b-4529ab13977f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let interfaceCredential = {};",
											"",
											"pm.test(\"Interface credential is created\", function() {",
											"    pm.response.to.have.status(201);",
											"    interfaceCredential = pm.response.json();",
											"});",
											"",
											"pm.test(\"Interface credential content is valid\", function() {",
											"    pm.expect(interfaceCredential.id).to.exist;",
											"    pm.expect(interfaceCredential.interfaceId).to.be.equal(pm.variables.get(\"interfaceId\"));",
											"",
											"    pm.variables.set(\"createdInterfaceCredential\", JSON.stringify(interfaceCredential));",
											"    pm.variables.set(\"createdInterfaceCredentialId\", interfaceCredential.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b3dba707-392e-44a2-b549-ab61b4a523b1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/interface_credentials/alexs_interface_credential.json\", function (err, res) {",
											"    let interfaceCredential = res.json();",
											"    delete interfaceCredential.id;",
											"    interfaceCredential.interfaceId = pm.variables.get(\"interfaceId\");",
											"    pm.variables.set(\"interfaceCredentialContent\", JSON.stringify(interfaceCredential));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{interfaceCredentialContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update interface credential with new password",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8688da24-67e5-49ef-aff8-daa29542f9a1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let interfaceCredentialForUpdate = JSON.parse(pm.variables.get(\"createdInterfaceCredential\"));",
											"interfaceCredentialForUpdate.password = \"NEW_PASSWORD_123\";",
											"pm.variables.set(\"interfaceCredentialContent\", JSON.stringify(interfaceCredentialForUpdate));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6aae72a8-f496-45df-b4a8-99f58b74cf81",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/organizations-storage/interfaces/\" + pm.variables.get(\"interfaceId\") + \"/credentials\", (err, res) => {",
											"        pm.test(\"Verify password updated\", () => pm.expect(res.json().password).to.equal(\"NEW_PASSWORD_123\"));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{interfaceCredentialContent}}\n"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get interface credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3d31c19-feab-4d6a-94f1-fd2621c11708",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let interfaceCredential = {};",
											"",
											"pm.test(\"Interface credential found\", function() {",
											"    pm.response.to.have.status(200);",
											"    interfaceCredential = pm.response.json();",
											"});",
											"",
											"pm.test(\"Interface credential content is valid\", function() {",
											"    pm.expect(interfaceCredential.interfaceId).to.eql(pm.variables.get(\"interfaceId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete interface credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "888c6ba3-4b36-4246-b1a9-a2315c1c43b8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Address is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "394952ec-ce9a-4909-beda-3a89f57c174d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Address is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/interfaces/{{interfaceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"interfaces",
										"{{interfaceId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e8af445f-558e-4639-bf86-e89ec050d508",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d25f209-df98-4dff-bb31-b8843aced844",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Organizations",
					"item": [
						{
							"name": "Get org - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7596386a-5c99-4056-ac34-2440b17a8abf",
										"exec": [
											"pm.test(\"Organization not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/28cccf6f-599d-4cce-afeb-18d042717508",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"28cccf6f-599d-4cce-afeb-18d042717508"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update org - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27f55038-fbc6-4309-a53c-20c8443b9b7b",
										"exec": [
											"pm.test(\"Organization updating not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7554f9c-1ef6-4ab1-a368-d3caba262b88",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    delete org.id;",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/28cccf6f-599d-4cce-afeb-18d042717508",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"28cccf6f-599d-4cce-afeb-18d042717508"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update org - id mismatch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3c9b78e-6544-45e2-838c-6b3a0f7461ea",
										"exec": [
											"pm.test(\"Organization updating id mismatch\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1abfe0c-31b1-4dfd-8888-71f53adfebf7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/organizations/srebsco.json\", function (err, res) {",
											"    let org = res.json();",
											"    org.id = \"28cccf6f-599d-4cce-afeb-18d042717507\";",
											"    pm.variables.set(\"organizationContent\", JSON.stringify(org));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{organizationContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/28cccf6f-599d-4cce-afeb-18d042717508",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"28cccf6f-599d-4cce-afeb-18d042717508"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete org - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a0e8e40-6884-4f91-807f-b373fa5b705e",
										"exec": [
											"pm.test(\"Organization delete not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations/organizations/28cccf6f-599d-4cce-afeb-18d042717508",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations",
										"organizations",
										"28cccf6f-599d-4cce-afeb-18d042717508"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Addresses",
					"item": [
						{
							"name": "Get address - bad ID 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b84d8a27-c1da-4ae1-8b9f-50bed3d59d48",
										"exec": [
											"pm.test(\"Status code is 404 - resource does not exist\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid UUID format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get address - valid token, invalid tenant - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c59b7579-9690-400d-8f90-a8631e8b954e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "X-Okapi-Tenant",
										"value": "fs12345678",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get address - bad token format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29ddb774-4a14-4ea1-9ec0-3d81760b44d0",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "bad-token",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get address - invalid token - 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6595b1fb-4783-419d-80fa-07e601832956",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{testTenant}}",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create address with invalid ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc03d8ae-39c5-4730-9cf5-b896d4e660fc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let address = JSON.stringify(utils.buildAddress());",
											"let add = JSON.parse(address);",
											"add.id = \"123-345\"",
											"",
											"pm.variables.set(\"addressContent\", JSON.stringify(add));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6e5a48b4-248f-4efc-9d9f-7930c006916d",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{addressContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update address - bad ID 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2ba11d19-3716-4a4a-8d5a-7afb7593a361",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"addressBody\", JSON.stringify(utils.buildAddress()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fc51ff99-6759-4278-aa48-fae9ab69e63b",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid UUID format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{addressBody}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete address - bad ID 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4b51ad-643e-45f0-9632-297c842c1f63",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d03d515f-4cf0-48a9-8292-09ffa21dc3c6",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Invalid UUID format\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete already deleted address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d05d6b0-48b3-43ce-b9ee-63a655bca3f2",
										"exec": [
											"pm.test(\"Address is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{addressId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{addressId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete address by random ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e49ecae-d9e9-48ee-a5cc-da5acb46936f",
										"exec": [
											"pm.test(\"Address is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/addresses/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"addresses",
										"{{$guid}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Cleanup test tenant",
					"item": [
						{
							"name": "Purge and disable all module for created tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e03b66e0-d7c1-416c-a336-3e83943c9b27",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
											"    pm.test(\"Preparing request to disable modules\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res.code).to.equal(200);",
											"        let modulesToDisable = res.json();",
											"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
											"",
											"        console.log(modulesToDisable);",
											"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f7e00974-85c3-4c9b-97fe-1b84be730ce8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Disable all modules for test tenant\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToDisable}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									],
									"query": [
										{
											"key": "purge",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f476b21f-33a2-4305-b25b-b20b889a5f40",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3a11d712-80aa-4948-a63b-63fe5cc46892",
										"exec": [
											"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"// Remove all created variables",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a02869df-bf0d-417e-a9e3-4d628b631ad3",
				"type": "text/javascript",
				"exec": [
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", {",
					"    // User templates with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orgs-admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Tenant\",",
					"                    \"lastName\": \"Admin\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orgs-admin-user\",",
					"                \"password\": \"mod-orgs-admin-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": []",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orgs-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"mod-organizations-storage\",",
					"                    \"lastName\": \"API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orgs-user\",",
					"                \"password\": \"mod-orgs-user-password\"",
					"            },",
					"            permissions: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders-storage.module.all\",",
					"                    \"organizations-storage.module.all\",",
					"                    \"organizations.module.all\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test organizations tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"orgs_schema_\";",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function (path) {",
					"        return new Promise((resolve) => {",
					"            utils.sendDeleteRequest(path, (err, response) => resolve(response.code));",
					"        });",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res).to.be.ok;",
					"                let modulesArr = res.json();",
					"                pm.expect(modulesArr).to.have.lengthOf.at.least(1);",
					"                bodyHandler(modulesArr[modulesArr.length - 1].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function (code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function () {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function (path, method) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.variables.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"testData\");",
					"",
					"        pm.environment.unset(\"addressId\");",
					"        pm.environment.unset(\"addressForFilterId\");",
					"        pm.environment.unset(\"activeOrganizationId\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"inactiveOrganizationId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils.validateOrganization = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"organization.json\")));",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils.validateAddress = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"address.json\")));",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function (jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to build address",
					"     */",
					"    utils.buildAddress = function () {",
					"        return {",
					"            \"addressLine1\": \"10 Estes Street\",",
					"            \"addressLine2\": \"\",",
					"            \"city\": \"Ipswich\",",
					"            \"stateRegion\": \"MA\",",
					"            \"zipCode\": \"01938\",",
					"            \"country\": \"USA\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6b7ae461-d159-4a0f-9c9d-2dd923a53f56",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "9797b888-1231-4c69-9d13-5dcc3de0a34c",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-organizations-storage/master/src/main/resources/data"
		},
		{
			"id": "9aa63e26-17ad-4e3e-b147-6334eeb2b7f0",
			"key": "testTenant",
			"value": "orgs_api_tests"
		}
	],
	"protocolProfileBehavior": {}
}