{
	"info": {
		"_postman_id": "68479f52-3912-4295-a97d-3dfa4777d554",
		"name": "mod-invoice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Auth",
					"item": [
						{
							"name": "Login by admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify required modules enabled",
					"item": [
						{
							"name": "mod-invoices is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-invoice",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-invoice"
										}
									]
								},
								"description": "Check if mod-invoices is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						},
						{
							"name": "mod-configuration is deployed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98be8798-dde9-4048-a8f5-b1e0ae4de535",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9c7eb4d-544c-4d6e-9e0a-d9d495065b37",
										"exec": [
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"modules exist\", function () {",
											"    // In case there is no module no sense to run further requests",
											"    postman.setNextRequest(null);",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules?filter=mod-configuration",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"modules"
									],
									"query": [
										{
											"key": "filter",
											"value": "mod-configuration"
										}
									]
								},
								"description": "Check if mod-configuration is deployed. If no module available, do not proceed to the next request."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check invoice configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.invoicesConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \" + configs);",
											"    pm.environment.set(\"mod-invoices-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
											"}",
											"// Store current version of configs",
											"pm.environment.set(\"current-invoices-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICES"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check orders configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.ordersConfigs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0f0c2518-826f-44fb-ab7e-11157f1e7187",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82ea9c5-8f62-4a16-bf56-907e3dcb4662",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Load schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f930ca9d-df31-4572-90c8-63f5243ae30e",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modInvoiceId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "789cccc8-2479-48c7-ac26-5e35328874bd",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"const moduleName = 'mod-invoice';\r",
											"\r",
											"utils.sendGetRequest('/_/proxy/tenants/' + pm.variables.get(\"xokapitenant\") + '/interfaces/_jsonSchemas', (err, response) => {\r",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function () {\r",
											"        pm.expect(err).to.equal(null);\r",
											"        pm.expect(response.text()).to.include(moduleName);\r",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];\r",
											"    \tpm.variables.set('modInvoiceId', moduleId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modInvoiceId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b589a48-d3fa-4985-85c4-8b7dcda638a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b882afd4-d85f-4006-9746-08bea97bbdf5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare orders",
					"item": [
						{
							"name": "Create Pending order with 2 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    delete order.poNumber;",
											"    order.compositePoLines[0].paymentStatus = \"Awaiting Payment\";",
											"    order.compositePoLines[1].paymentStatus = \"Awaiting Payment\";",
											"    // Set retrieved content for further requests",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"completeOrderId\", order.id); ",
											"    pm.globals.set(\"poLine1Id\",  order.compositePoLines[0].id);",
											"    pm.globals.set(\"poLine2Id\",  order.compositePoLines[1].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "Get or create ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET ledger response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.ledgers.length == 1) {",
											"        useAlreadyExistingType(jsonData.ledgers[0]);",
											"    } else {",
											"        createNewRecord();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(identifierType) {",
											"    pm.test(\"Ledger already exists\", function () {",
											"        pm.expect(identifierType.id).to.exist;",
											"        rememberId(identifierType.id);",
											"    });",
											"}",
											"",
											"function createNewRecord() {",
											"    const type = {",
											"        \"name\": \"Ledger for invoicing API Tests\",",
											"        \"code\": pm.variables.get(\"finance-ledgerCode\"),",
											"        \"description\": \"Ledger for invoicing API Tests\"",
											"    };",
											"",
											"    eval(globals.loadUtils).sendPostRequest(\"/finance-storage/ledgers\", type, (err, res) => {",
											"        pm.test(\"Ledger created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            rememberId(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function rememberId(id) {",
											"    pm.environment.set(\"ledgerId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers?query=code=={{finance-ledgerCode}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									],
									"query": [
										{
											"key": "query",
											"value": "code=={{finance-ledgerCode}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Get or create fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b15fda-7df4-473f-9ce4-ccfc4924460c",
										"exec": [
											"pm.test(\"GET funds response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    let jsonData = pm.response.json();",
											"    if (jsonData.funds.length == 1) {",
											"        useAlreadyExistingType(jsonData.funds[0]);",
											"    } else {",
											"        createNewRecord();",
											"    }",
											"});  ",
											"",
											"function useAlreadyExistingType(identifierType) {",
											"    pm.test(\"Fund already exists\", function () {",
											"        pm.expect(identifierType.id).to.exist;",
											"        rememberId(identifierType.id);",
											"    });",
											"}",
											"",
											"function createNewRecord() {",
											"    const type = {",
											"      \"code\": pm.variables.get(\"finance-fundCode\"),",
											"      \"description\": \"Fund for invoicing API Tests\",",
											"      \"externalAccountNo\": \"11111122211111111\",",
											"      \"fundStatus\": \"Active\",",
											"      \"ledgerId\": pm.variables.get(\"ledgerId\"),",
											"      \"name\": \"Fund for invoicing API Tests\"",
											"    };",
											"",
											"    eval(globals.loadUtils).sendPostRequest(\"/finance-storage/funds\", type, (err, res) => {",
											"        pm.test(\"Fund created\", () => {",
											"            pm.expect(err).to.equal(null);",
											"            pm.expect(res).to.have.property('code', 201);",
											"            rememberId(res.json().id);",
											"        });",
											"    });",
											"}",
											"",
											"function rememberId(id) {",
											"    pm.environment.set(\"fundId\", id);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fa42b974-2ac7-4dbf-9572-3f42ef3569f6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds?query=code=={{finance-fundCode}}&limit=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									],
									"query": [
										{
											"key": "query",
											"value": "code=={{finance-fundCode}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create user",
					"item": [
						{
							"name": "Create new user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "76c0a072-8ef6-4371-b926-f56d6a3218a0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/users/\" + globals.testData.user.id, (err, res) => {",
											"    pm.test(\"Check if user for API Tests already exists\", () => {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(res.code).to.be.oneOf([200, 404]);",
											"        // If user already exists, check if this is for API Tests and delete it",
											"        if (res.code === 200 && res.json().username) {",
											"            utils.sendDeleteRequest(\"/users/\" + globals.testData.user.id, (err, res) => {",
											"                pm.test(\"User '\" + globals.testData.user.username + \"' deleted\", () => {",
											"                    pm.expect(res.code).to.eql(204);",
											"                });",
											"            });",
											"        }",
											"    });",
											"});",
											"",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d98143bb-5fc0-4394-ac89-bff8d0df33fe",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5542417e-4b64-431c-8b07-7f5b5e9179ff",
										"exec": [
											"pm.test(globals.testData.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de3203a8-0abe-4599-aee0-b34306d051de",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/authn/credentials?query=userId=\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has credentials and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        utils.sendDeleteRequest(\"/authn/credentials/\" + res.json().credentials[0].id, (err, res) => {",
											"            pm.test(globals.testData.user.username + \" user's credentials deleted\", () => {",
											"                pm.expect(res.code).to.eql(204);",
											"            });",
											"        });",
											"    }",
											"});",
											"",
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add only mod-invoice permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f1202b1-b74a-46cc-8fcd-e5d9b76d53b7",
										"exec": [
											"pm.test(globals.testData.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dded3598-c238-487d-b06c-721c60509cf4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/perms/users?query=userId==\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has permissions and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        utils.sendDeleteRequest(\"/perms/users/\" + res.json().permissionUsers[0].id, (err, res) => {",
											"            pm.test(globals.testData.user.username + \" user's permissions deleted\", () => {",
											"                pm.expect(res.code).to.eql(204);",
											"            });",
											"        });",
											"    }",
											"});",
											"",
											"pm.variables.set(\"orgsUserPermissions\", JSON.stringify(globals.testData.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orgsUserPermissions}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								},
								"description": "Adding all mod-invoice permissions and as vouchers do not have POST endpoints, adding \"voucher-storage.vouchers.item.post\" and \"voucher-storage.vouchers.item.delete\" permission to test voucher GET endpoint and cleanup"
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a59f5097-d5cb-4e46-8bf6-3bddff268e65",
										"exec": [
											"pm.variables.set(\"modInvoiceUserCreds\", JSON.stringify(globals.testData.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modInvoiceUserCreds}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"minInvoiceId\", invoice.id);",
													"    pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    ",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with new vendor invoice number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    let number = \"UPD\" + invoice.vendorInvoiceNo;",
													"    invoice.vendorInvoiceNo = number;",
													"    pm.variables.set(\"updatedNumber\", number);",
													"    pm.variables.set(\"updatedInvoice\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"minInvoiceId\"), (err, res) => {",
													"        pm.test(\"Verify invoice updated with new vendor invoice number\", () => {",
													"            let invoice = res.json();",
													"            pm.expect(invoice.vendorInvoiceNo).to.equal(pm.variables.get(\"updatedNumber\"));",
													"            utils.validateInvoice(invoice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								},
								{
									"name": "Get invoice by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"success test\", function() {",
													"    pm.response.to.be.ok;",
													"    pm.response.to.be.json;",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate fields\", function() {",
													"    // Validate fields",
													"    pm.response.to.have.jsonBody(\"id\", pm.environment.get(\"minInvoiceId\"));",
													"    pm.response.to.have.jsonBody(\"folioInvoiceNo\", pm.environment.get(\"folioInvoiceNo\"));",
													"",
													"    // validate against schema",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{minInvoiceId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Filter invoices",
							"item": [
								{
									"name": "Create another invoice for filtering",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"filterInvoiceId\", invoice.id);",
													"    ",
													"    utils.validateInvoice(invoice);",
													"",
													"    // validate calculated totals",
													"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
													"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
													"    pm.expect(invoice.total, \"total\").to.equal(0);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/invoices.json\", function (err, res) {",
													"    pm.globals.set(\"mock-invoices\",  JSON.stringify(res.json()));",
													"    let invoice = utils.prepareInvoice(res.json().invoices[1]);",
													"",
													"    invoice.note += \" - filtering\";",
													"",
													"    pm.variables.set(\"invoiceToFilterContent\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceToFilterContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.at.least(2);",
													"    invoices = pm.response.json().invoices;",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get created  invoices filter by query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoices = [];",
													"",
													"pm.test(\"Invoices found\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
													"    invoices = pm.response.json().invoices;",
													"    pm.expect(invoices[0].note).to.equal('Invoice for API Tests - filtering');",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    invoices.forEach(invoice => utils.validateInvoice(invoice));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=1&query=note=\"filtering\" and note=\"Invoice for API Tests\"",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												},
												{
													"key": "query",
													"value": "note=\"filtering\" and note=\"Invoice for API Tests\""
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Invoice and associated lines",
							"item": [
								{
									"name": "Create invoice for deletion test",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.environment.set(\"InvoiceIdForDelete\", invoice.id);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceForDelete\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice line for delete with invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"InvoiceIdForDelete\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.environment.set(\"InvoiceLineIdForDelete\", invoiceLine.id);",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"InvoiceIdForDelete\"));",
													"",
													"pm.variables.set(\"InvoiceLineForDelete\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceLineForDelete}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete  invoice and associated lines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is deleted\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"",
													"pm.test(\"invoce line deleted: \", () => {",
													"    let invoiceId = pm.environment.get(\"InvoiceIdForDelete\");",
													"",
													"    utils.sendGetRequest(\"/invoice/invoice-lines?query=invoiceId==\" + invoiceId , (err, response) => {",
													"        pm.expect(response).to.have.status(200);",
													"        pm.expect(response.json().invoiceLines.length).to.be.equal(0);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceIdForDelete}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceIdForDelete}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Invoice content is valid\", function() {",
											"    pm.expect(invoice.id).to.exist;",
											"    pm.expect(invoice.folioInvoiceNo).to.exist;",
											"    pm.environment.set(\"invoiceId\", invoice.id);",
											"    ",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoices/52fd6ec7-ddc3-4c53-bc26-2779afc27136.json\", function (err, res) {",
											"    pm.variables.set(\"invoiceContent\", JSON.stringify(utils.prepareInvoice(res.json())));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with minimal content",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceId\"), (err, res) => {",
											"        utils.validateInvoiceWithMinimalContent(res.json());",
											"      ",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with invoices",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "58fc2db4-96f3-4a4e-907b-b35d8146fe27",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "267e3a92-c3eb-4121-a453-6794b54fa4bf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Create invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has required and optional fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"minInvoiceId\"));",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"",
													"pm.variables.set(\"minContentInvoiceLine\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{minContentInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice Line has minimal content\", function () {",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.validateInvoiceLineWithMinimalContent(invoiceLine);",
													"});",
													"",
													"pm.test(\"Validate schema for invoice_line.json\", function () {",
													"    utils.validateInvoiceLine(invoiceLine);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by empty query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLines = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(invoiceLines.invoiceLines).to.have.lengthOf.above(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get invoice lines by query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var resp = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    resp = pm.response.json();",
													"});",
													"",
													"pm.test(\"At least one line\", function () {",
													"    pm.expect(resp.invoiceLines).to.have.lengthOf.above(0);",
													"});",
													"",
													"pm.test(\"Validate that response contains lines with proper status\", function () {",
													"    for(var i = 0; i < resp.invoiceLines.length; i++) {",
													"    \tpm.expect(resp.invoiceLines[i].invoiceLineStatus).to.equal(\"Open\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines?limit=30&query=invoiceLineStatus==Open",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											],
											"query": [
												{
													"key": "limit",
													"value": "30"
												},
												{
													"key": "query",
													"value": "invoiceLineStatus==Open"
												}
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.variables.get(\"invoiceLineId\"), function (err, res) {",
													"    pm.expect(err).to.equal(null);",
													"    let invoiceLine  = res.json();",
													"    pm.test(\"Verify updated fields\", function () {",
													"       pm.expect(res.json().description).to.equal(pm.variables.get(\"invLineDescription\"));",
													"       pm.expect(res.json().quantity).to.equal(pm.variables.get(\"invLineQuantity\"));",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"invoiceLineId\", utils.getLastInvoiceLineId());",
													"",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
													"invoiceLine.description = \"Updating given description\";",
													"invoiceLine.quantity = 4;",
													"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));",
													"pm.variables.set(\"invLineDescription\",invoiceLine.description);",
													"pm.variables.set(\"invLineQuantity\",invoiceLine.quantity);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete invoice line by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08a1f33b-b49a-42e6-9da3-31a3043226f7",
												"exec": [
													"pm.test(\"Invoice is deleted\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{invoiceLineId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "adjustments",
							"item": [
								{
									"name": "Create invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to include only In addition to relation\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(10.27);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/invoiceLines/e0d08448-343b-118a-8c2f-4fb50248d672.json\", function (err, res) {",
													"    let invoiceLine = res.json();",
													"    pm.globals.set(\"mock-invoiceLine\",  JSON.stringify(invoiceLine));",
													"    delete invoiceLine.id;",
													"    delete invoiceLine.invoiceLineNumber;",
													"    delete invoiceLine.adjustments;",
													"    invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"    invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"    let adjustment1 = utils.buildAdjustmentObject();",
													"    adjustmentsArray.push(adjustment1);",
													"",
													"    let adjustment2 = utils.buildAdjustmentObject();",
													"    adjustment2.relationToTotal = \"Included in\";",
													"    adjustmentsArray.push(adjustment2);",
													"    ",
													"    let adjustment3 = utils.buildAdjustmentObject(12.222, \"Percentage\");",
													"    adjustmentsArray.push(adjustment3);",
													"",
													"    invoiceLine.adjustments = adjustmentsArray;",
													"",
													"    pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										},
										"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
									},
									"response": []
								},
								{
									"name": "Create invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"negativeAdjInLineId\",invoiceLine.id)",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.below(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total to be negative\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(-28.21);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = utils.getMockInvoiceLine();",
													"delete invoiceLine.id;",
													"delete invoiceLine.invoiceLineNumber;",
													"delete invoiceLine.adjustments;",
													"invoiceLine.comment = \"Adding line for API testing adjustment\";",
													"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
													"",
													"let adjustment1 = utils.buildAdjustmentObject();",
													"adjustment1.value = -13.88;",
													"adjustmentsArray.push(adjustment1);",
													"",
													"let adjustment2 = utils.buildAdjustmentObject();",
													"adjustment2.value = -14.33;",
													"adjustmentsArray.push(adjustment2);",
													"",
													"invoiceLine.adjustments = adjustmentsArray;",
													"",
													" pm.environment.set(\"negativeInvoiceLineContent\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeInvoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice-line with negative adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice Line is updated\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let adjustmentsArray = [];",
													"",
													"",
													"let invoiceLine = JSON.parse(pm.environment.get(\"negativeInvoiceLineContent\"));",
													"invoiceLine.adjustments[0].value = 15;",
													"",
													"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceLineContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get updated invoice-line with adjustments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is successfully retrieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    invoiceLine = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice line has expected fields\", function(){",
													"    pm.expect(invoiceLine.id).to.exist;",
													"    utils.rememberInvoiceLineId(invoiceLine);",
													"    pm.expect(invoiceLine.invoiceId).to.equal(pm.environment.get(\"invoiceId\"));",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.exist;",
													"    pm.expect(invoiceLine.total).to.be.above(invoiceLine.subTotal);",
													"});",
													"",
													"pm.test(\"adjustment total is recalulated\",function(){",
													"    pm.expect(invoiceLine.adjustmentsTotal).to.equal(0.67);",
													"    pm.expect(invoiceLine.total).to.equal(2.87);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{negativeAdjInLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{negativeAdjInLineId}}"
											]
										},
										"description": "validate that the adjustments are recalculated after a PUT with adjustment values changed"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with invoice lines. The invoices are used from `Invoices` tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "040edfaf-65d3-49da-be89-a5f39397e711",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7cf5818f-ba3a-4bcb-98ca-a1f41b456703",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice calculated totals",
					"item": [
						{
							"name": "Create invoice with locked total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ad7d58e-c223-4e15-a362-29e49c972f3d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
											"delete invoice.approvedBy;",
											"delete invoice.approvalDate;",
											"invoice.lockTotal = true;",
											"invoice.total = 12.34;",
											"invoice.note += \" - locked total\";",
											"invoice.status = \"Open\";",
											"",
											"invoice.adjustments = [];",
											"invoice.adjustments.push(utils.buildAdjustmentObject(10));",
											"",
											"pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30a0dbb-bd13-400b-9f39-687730665090",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"    pm.environment.set(\"invoiceWithLockedTotalId\", invoice.id);",
											"",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(10);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add adjustments to invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ad7d58e-c223-4e15-a362-29e49c972f3d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"",
											"    // The adjustment with fixed amount should affect adjustment total",
											"    invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Amount\"));",
											"    // The adjustment with percentage amount should not affect adjustment total now because there is no any line yet i.e. subTotal is 0",
											"    invoice.adjustments.push(utils.buildAdjustmentObject(25, \"Percentage\"));",
											"",
											"    // The adjustments with 'relationToTotal' other than 'In addition to' do not affect calculated totals",
											"    let adj1 = utils.buildAdjustmentObject(100, \"Amount\");",
											"    adj1.relationToTotal = \"Included in\";",
											"    invoice.adjustments.push(adj1);",
											"",
											"    let adj2 = utils.buildAdjustmentObject(50, \"Amount\");",
											"    adj2.relationToTotal = \"Separate from\";",
											"    invoice.adjustments.push(adj2);",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30a0dbb-bd13-400b-9f39-687730665090",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice without lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    pm.expect(invoice.adjustments, \"adjustments size\").to.have.lengthOf(5);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(35);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Create invoice line with adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoiceLine = {};",
											"",
											"pm.test(\"Invoice Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoiceLine = pm.response.json();",
											"});",
											"",
											"pm.test(\"Calculated totals\",function(){",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(15.37);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(69.69);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"invoiceLine.adjustments = [];",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceWithLockedTotalId\");",
											"invoiceLine.subTotal = 54.32;",
											"",
											"let adjustment1 = utils.buildAdjustmentObject(21.35);",
											"invoiceLine.adjustments.push(adjustment1);",
											"",
											"// Should no affect calculations",
											"let adjustment2 = utils.buildAdjustmentObject();",
											"adjustment2.relationToTotal = \"Included in\";",
											"invoiceLine.adjustments.push(adjustment2);",
											"",
											"let adjustment3 = utils.buildAdjustmentObject(-11, \"Percentage\");",
											"invoiceLine.adjustments.push(adjustment3);",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Get invoice with 1 line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(63.95);",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(54.32);",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Create second line with adjustment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoiceLine = {};",
											"",
											"pm.test(\"Invoice Line is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoiceLine = pm.response.json();",
											"});",
											"",
											"pm.test(\"Calculated totals\",function(){",
											"    pm.expect(invoiceLine.adjustmentsTotal, \"adjustmentsTotal\").to.equal(6.65);",
											"    pm.expect(invoiceLine.subTotal, \"subTotal\").to.equal(15.87);",
											"    pm.expect(invoiceLine.total, \"total\").to.equal(22.52);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"invoiceLine.adjustments = [];",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceWithLockedTotalId\");",
											"invoiceLine.subTotal = 15.87;",
											"",
											"invoiceLine.adjustments.push(utils.buildAdjustmentObject(6.65));",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Get invoice with 2 lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(22.02 + 35 + 17.55);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(12.34);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Set invoice's lock total to false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ad7d58e-c223-4e15-a362-29e49c972f3d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"invoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"",
											"    // Changing lock total to false to verify calculated total",
											"    invoice.lockTotal = false;",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30a0dbb-bd13-400b-9f39-687730665090",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Invoice updated\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice with 2 lines and non locked total",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"success test\", function() {",
											"    pm.response.to.be.ok;",
											"    pm.response.to.be.json;",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate fields\", function() {",
											"    // validate against schema",
											"    utils.validateInvoice(invoice);",
											"",
											"    // validate calculated totals",
											"    // 22.02 - invoice lines adjustments total; 35 - fixed amount of invoice adjustments; 17.55 - 25% of invoice's subTotal",
											"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(74.57);",
											"    // sum of sub totals of invoice lines",
											"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(70.19);",
											"    // the total is locked",
											"    pm.expect(invoice.total, \"total\").to.equal(144.76);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								},
								"description": "The invoice should have at this step 2 lines created by `Invoice lines -> adjustments` requests"
							},
							"response": []
						},
						{
							"name": "Delete  invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Tests to verify calculated totals of the invoice: [MODINVOICE-52](https://issues.folio.org/browse/MODINVOICE-52).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61adedba-139f-4efa-8528-d068d3d3126a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "01dd4754-df98-4635-94a1-6e33d23d3d63",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Successfully get Voucher\", function () {",
											"    pm.response.to.have.status(200);",
											"    voucher = pm.response.json();",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    utils.validateVoucher(voucher);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/vouchers/vouchers.json\", function (err, res) {",
											"    let voucher = res.json().vouchers[0];",
											"    voucher.invoiceId = pm.environment.get(\"minInvoiceId\");",
											"    delete voucher.id;",
											"    delete voucher.metadata;",
											"    voucher.voucherNumber = \"APITESTS\";",
											"    ",
											"  utils.sendPostRequest(\"/voucher-storage/vouchers\", voucher, function(err,response){",
											"      pm.test(\"voucher is created in storage\", function(){",
											"          pm.expect(err).to.equal(null);",
											"          pm.environment.set(\"voucherId\", response.json().id);",
											"      });",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{voucherId}}"
									]
								},
								"description": "The test creates a voucher in the storage using the storage API and then executes GET"
							},
							"response": []
						},
						{
							"name": "Get vouchers and filter by query param",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let vouchers = [];",
											"",
											"pm.test(\"Successfully get Vouchers\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.expect(pm.response.json().totalRecords).to.be.above(0);",
											"    vouchers = pm.response.json().vouchers;",
											"});",
											"",
											"pm.test(\"Voucher content is valid\", function() {",
											"    vouchers.forEach(voucher => utils.validateVoucher(voucher));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers?query=voucherNumber=APITESTS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers"
									],
									"query": [
										{
											"key": "query",
											"value": "voucherNumber=APITESTS"
										}
									]
								},
								"description": "The test gets list of voucher"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with vouchers which are created manually",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5769560-003e-459c-86c4-38dc723e684d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e0df604e-ce2e-4d39-be8f-525ac5c80359",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Min content",
							"item": [
								{
									"name": "Get voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.sendRequest(pm.variables.get(\"resourcesUrl\") + \"/mockdata/voucherLines/voucher_lines.json\", function (err, res) {",
													"    let voucherLine = res.json().voucherLines[0];",
													"    voucherLine.voucherId = pm.environment.get(\"voucherId\");",
													"    delete voucherLine.id;",
													"    ",
													"  utils.sendPostRequest(\"/voucher-storage/voucher-lines\", voucherLine, function(err,response){",
													"      pm.test(\"voucherLine is created in storage\", function(){",
													"          pm.expect(err).to.equal(null);",
													"          pm.environment.set(\"voucherLineId\", response.json().id);",
													"      });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Successfully get Voucher line\", function () {",
													"    pm.response.to.have.status(200);",
													"    voucher = pm.response.json();",
													"});",
													"",
													"pm.test(\"Voucher line content is valid\", function() {",
													"    utils.validateVoucherLine(voucher);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update voucher lines by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Voucher line and update voucherLineAmount only (MODINVOICE-40)",
													"utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"    let voucherLine  = res.json();",
													"    let updatedVoucherLineAmount = 10.00;",
													"    voucherLine.amount = updatedVoucherLineAmount;",
													"    pm.variables.set(\"updatedVoucherLineAmount\", updatedVoucherLineAmount);",
													"    pm.variables.set(\"updatedVoucherLine\", JSON.stringify(voucherLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // The test can be run only if update succeeded",
													"    utils.sendGetRequest(\"/voucher/voucher-lines/\" + pm.environment.get(\"voucherLineId\"), (err, res) => {",
													"        pm.test(\"Verify voucher line updated with new VoucherLine Amount\", () => pm.expect(res.json().amount).to.equal(pm.variables.get(\"updatedVoucherLineAmount\")));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedVoucherLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{voucherLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"voucher",
												"voucher-lines",
												"{{voucherLineId}}"
											]
										},
										"description": "GET /invoice/invoice-lines requests that return 200"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "Tests to verify basic operations with voucher lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1060aa45-dd34-4730-8486-898332b79b3f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e799c366-94f7-48fb-9557-1f3f7acae482",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(set) current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully re(set) voucher start value\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get current start value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully got voucher start value\", function () {",
											"    pm.response.to.have.status(200);",
											"    utils.validateSequenceNumber(pm.response.json());",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"description": "Tests to verify basic operations with voucher number configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "806a1974-4f38-4544-b55f-102d387e02c5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "734608cb-36c2-4c85-a7ab-898ff08ad839",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Workflows with configs",
							"item": [
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice with 4 lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"workflow-invoiceWith4LinesId\", invoice.id);",
															"    pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"    utils.validateInvoice(invoice);",
															"    createLines(invoice.id);",
															"",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(0);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															"",
															"function createLines(invoiceId) {",
															" ",
															"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
															"",
															"    // Now creating 4 invoice lines",
															"    for (let i = 1; i < 5; i++) {",
															"        invoiceLine.poLineId = i % 2 === 0 ? pm.globals.get(\"poLine1Id\") : pm.globals.get(\"poLine2Id\");",
															"        invoiceLine.releaseEncumbrance = i === 4;",
															"        ",
															"        utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
															"            pm.test(\"Invoice line #\" + i + \" is created in storage\", () => {",
															"              pm.expect(err).to.equal(null);",
															"              pm.expect(response).to.have.property('code', 201);",
															"            });",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
															"",
															"invoice.note += \" - with 4 lines for transition through workflow\";",
															"invoice.status = \"Open\";",
															"invoice.currency=\"EUR\";",
															"",
															"delete invoice.adjustments;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"            // Verify that voucher has been created",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"One voucher created\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    let voucher = res.json().vouchers[0];",
															"                    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"                    pm.expect(voucher.voucherNumber).to.include(pm.variables.get(\"voucherNumberPrefix\"));",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Paid",
									"item": [
										{
											"name": "Pay invoice with 4 lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"workflow-invoiceWith4LinesContent\"));",
															"invoice.status = \"Paid\";",
															"pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"workflow-invoiceWith4LinesId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Paid\");",
															"",
															"            // Remember updated invoice",
															"            pm.environment.set(\"workflow-invoiceWith4LinesContent\", JSON.stringify(invoice));",
															"",
															"            // Validate voucher",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"Still only one voucher but already Paid\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    pm.expect(res.json().vouchers[0].status).to.eql(\"Paid\");",
															"                });",
															"            });",
															"",
															"            // Validate order lines",
															"            utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
															"                pm.test(\"Associated order lines payment status updated\", function () {",
															"                    res.json().compositePoLines.forEach(poLine => {",
															"                        let expectedStatus = (poLine.id === globals.poLine1Id) ? \"Fully Paid\" : \"Partially Paid\";",
															"                        pm.expect(poLine.paymentStatus).to.equal(expectedStatus);",
															"                    });",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{workflow-invoiceWith4LinesContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{workflow-invoiceWith4LinesId}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Workflows with empty configs",
							"item": [
								{
									"name": "Delete invoice configs",
									"item": [
										{
											"name": "Get invoice configs and delete",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let currentConfigs;",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"",
															"    currentConfigs = pm.response.json().configs;",
															"    console.log(\"Current configs: \", currentConfigs);",
															"});",
															"",
															"let configsToProcess = globals.testData.invoicesConfigs.configNames;",
															"for (var i = 0; i < configsToProcess.length; i++) {",
															"    let configName = configsToProcess[i];",
															"     if (currentConfigs.length > 0) {",
															"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
															"        utils.deleteConfig(configId);",
															"    } else {",
															"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-admin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICES",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICES"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Open invoices",
									"item": [
										{
											"name": "Create invoice with 1 line",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let invoice = {};",
															"",
															"pm.test(\"Invoice is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    invoice = pm.response.json();",
															"});",
															"",
															"pm.test(\"Invoice content is valid\", function() {",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineId\", invoice.id);",
															"    pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"    utils.validateInvoice(invoice);",
															"    createLine(invoice.id);",
															"",
															"    pm.expect(invoice.status, \"status\").to.eql(\"Open\");",
															"    pm.expect(invoice.adjustmentsTotal, \"adjustmentsTotal\").to.equal(0);",
															"    pm.expect(invoice.subTotal, \"subTotal\").to.equal(0);",
															"    pm.expect(invoice.total, \"total\").to.equal(0);",
															"",
															"    // Verify that voucher has not been created",
															"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
															"    });",
															"});",
															"",
															"function createLine(invoiceId) {",
															"   ",
															"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
															"",
															"    // Now creating invoice line",
															"    utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
															"        pm.test(\"Invoice line is created in storage\", () => {",
															"          pm.expect(err).to.equal(null);",
															"          pm.expect(response).to.have.property('code', 201);",
															"        });",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
															"",
															"invoice.note += \" - with 1 line for transition through workflow\";",
															"invoice.status = \"Open\";",
															"delete invoice.voucherNumber;",
															"delete invoice.adjustments;",
															"delete invoice.approvalDate;",
															"delete invoice.approvedBy;",
															"",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Transition to Approved",
									"item": [
										{
											"name": "Approve invoice with 1 line",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
														"exec": [
															"let invoice = JSON.parse(pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineContent\"));",
															"invoice.status = \"Approved\";",
															"pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(\"No Content\");",
															"",
															"    // The test can be run only if update succeded",
															"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"emptyConfigWorkflow-invoiceWith1LineId\"), (err, res) => {",
															"        pm.test(\"Invoice status updated\", function () {",
															"            let invoice = res.json();",
															"            pm.expect(invoice.status).to.equal(\"Approved\");",
															"            pm.expect(invoice.approvalDate).to.exist;",
															"            pm.expect(invoice.approvedBy).to.exist;",
															"            ",
															"            // Remember updated invoice",
															"            pm.environment.set(\"emptyConfigWorkflow-invoiceWith1LineContent\", JSON.stringify(invoice));",
															"",
															"            // Verify that voucher has been created",
															"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
															"                pm.test(\"One voucher created\", () => {",
															"                    pm.expect(res.json().vouchers).to.have.lengthOf(1);",
															"                    let voucher = res.json().vouchers[0];",
															"                    pm.expect(voucher.status).to.eql(\"Awaiting payment\");",
															"                    pm.expect(voucher.voucherNumber).to.not.include(pm.variables.get(\"voucherNumberPrefix\"));",
															"                });",
															"            });",
															"        });",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Tenant",
														"value": "{{xokapitenant}}"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{emptyConfigWorkflow-invoiceWith1LineContent}}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"invoice",
														"invoices",
														"{{emptyConfigWorkflow-invoiceWith1LineId}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Restore invoice configs",
									"item": [
										{
											"name": "Check invoice configs and restore",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let testConfigs = globals.testData.invoicesConfigs;",
															"",
															"let configs = [];",
															"pm.test(\"Storing current configs\", function () {",
															"    pm.response.to.be.ok;",
															"    configs = pm.response.json().configs;",
															"});",
															"",
															"let configNamesToProcess = testConfigs.configNames;",
															"console.log(\"Config codes to process: \" + configNamesToProcess);",
															"",
															"for (var i = 0; i < configNamesToProcess.length; i++) {",
															"    let configName = configNamesToProcess[i];",
															"    let value = pm.variables.get(configName);",
															"    utils.updateOrCreateInvoicesConfig(configs, configName, value);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-admin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICES",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"configurations",
														"entries"
													],
													"query": [
														{
															"key": "query",
															"value": "module==INVOICES"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "This directory contains various tests related to transition of the invoices/vouchers through the workflow",
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eabc0e99-5321-4b94-8073-c1009945649c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "42e30b13-2d65-40cc-871d-b736930858cb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create invoices for negative tests",
					"item": [
						{
							"name": "Create reviewed invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Invoice content is valid\", function() {",
											"    pm.environment.set(\"negativeReviewedToApprovedInvoiceId\", invoice.id);",
											"    pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));",
											"",
											"    createLine(invoice.id);",
											"",
											"    // Verify that voucher has not been created",
											"    utils.getVouchersForInvoice(invoice.id, (err, res) => {",
											"        pm.test(\"No voucher created\", () => pm.expect(res.json().vouchers).to.be.empty);",
											"    });",
											"});",
											"",
											"function createLine(invoiceId) {",
											"",
											"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoiceId);",
											"",
											"    // Now creating invoice line",
											"    utils.sendPostRequest(\"/invoice/invoice-lines\", invoiceLine, (err, response) => {",
											"        pm.test(\"Invoice line is created in storage\", () => {",
											"          pm.expect(err).to.equal(null);",
											"          pm.expect(response).to.have.property('code', 201);",
											"        });",
											"    });",
											"",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
											"",
											"invoice.note += \" - transition to Approved\";",
											"invoice.status = \"Reviewed\";",
											"delete invoice.adjustments;",
											"delete invoice.voucherNumber;",
											"delete invoice.approvalDate;",
											"delete invoice.approvedBy;",
											"",
											"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create approved invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"});",
											"",
											"pm.test(\"Invoice content is valid\", function() {",
											"    pm.environment.set(\"negativeApprovedToPaidInvoice\", invoice.id);",
											"    pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
											"    utils.validateInvoice(invoice);",
											"    ",
											"});",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"invoiceLine.invoiceId = pm.environment.get(\"negativeApprovedToPaidInvoice\");",
											"invoiceLine.fundDistributions.forEach(distro => distro.fundId = pm.environment.get(\"fundId\"));",
											"delete invoiceLine.id;",
											"delete invoiceLine.metadata;",
											"var uuid = require('uuid');",
											"invoiceLine.poLineId = uuid.v4();",
											"",
											"utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
											"    pm.test(\"Invoice line is created in storage\", function(){",
											"      pm.expect(err).to.equal(null);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(1));",
											"",
											"invoice.note += \" - transition to Paid\";",
											"invoice.status = \"Approved\";",
											"",
											"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{negativeApprovedToPaidInvoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create approved invoice with locked total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ad7d58e-c223-4e15-a362-29e49c972f3d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
											"",
											"invoice.lockTotal = true;",
											"invoice.total = 12.34;",
											"invoice.note += \" - locked total\";",
											"invoice.status = \"Open\";",
											"",
											"delete invoice.approvalDate;",
											"delete invoice.approvedBy;",
											"",
											"pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30a0dbb-bd13-400b-9f39-687730665090",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    invoice = pm.response.json();",
											"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalId\", invoice.id);",
											"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));",
											"    utils.validateInvoice(invoice);",
											"    addLine(invoice);",
											"});",
											"",
											"function addLine(invoice) {",
											"    let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), invoice.id);",
											"    invoiceLine.poLineId = pm.globals.get(\"poLine1Id\");",
											"",
											"    utils.sendPostRequest(\"/invoice-storage/invoice-lines\", invoiceLine, function(err,response){",
											"        pm.test(\"Invoice line is created in storage\", function(){",
											"          pm.expect(err).to.equal(null);",
											"          pm.expect(response).to.have.property('code', 201);",
											"          utils.updateInvoiceStatus(invoice, \"Approved\");",
											"        });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify invoice with locked total and delete voucher",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ad7d58e-c223-4e15-a362-29e49c972f3d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d30a0dbb-bd13-400b-9f39-687730665090",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let invoice = {};",
											"",
											"pm.test(\"Invoice is Approved\", function () {",
											"    pm.response.to.have.status(200);",
											"    invoice = pm.response.json();",
											"    pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));",
											"    pm.expect(invoice).to.have.property('status', \"Approved\");",
											"    utils.deleteVouchersForInvoice(invoice.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoices",
					"item": [
						{
							"name": "Protected Fields Modification",
							"item": [
								{
									"name": "Create invoice with protected fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3f4b21e8-9911-4c39-8757-1d69b0f99051",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let json = utils.buildInvoiceWithMinContent();",
													"json.status = \"Approved\";",
													"",
													"pm.variables.set(\"approvedInvoice\", JSON.stringify(json));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7bfa1e35-0c0b-4def-8439-e400734ec857",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    let invoice = pm.response.json();",
													"    pm.environment.set(\"approvedInvoiceId\", invoice.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{approvedInvoice}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice with protected fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"approvedInvoiceId\"), (err, res) => {",
													"    let invoice  = res.json();",
													"    invoice.currency = \"TUGRIK\";",
													"    pm.variables.set(\"updatedApprovedInvoiceBody\", JSON.stringify(invoice));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.expect(pm.response.text()).to.include(\"Field can't be modified\");",
													"    pm.expect(pm.response.text()).to.include(\"protectedFieldChanging\");",
													"    pm.expect(pm.response.text()).to.include(\"currency\");",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedApprovedInvoiceBody}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{approvedInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{approvedInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get invoice by id - UUID does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"404 test - UUID does not exists\", function() {",
											"    pm.response.to.have.status(404);",
											"    pm.response.to.have.body();",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"pm.environment.set(\"UUIDDoesNotExists\", \"2cf5d43f-d107-4aaa-a8f4-2e6647f4794a\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{UUIDDoesNotExists}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{UUIDDoesNotExists}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoice by id - invalid UUID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - invalid UUID on URL\", function() {",
											"    pm.response.to.have.status(400);",
											"    pm.response.to.have.body();",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/foo",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"foo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - negative limit\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?limit=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - limit less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?limit=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "limit",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - negative offset\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-1",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative limit /invoices?offset=-2147483649",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"400 test - offset less than Integer.MIN_VALUE\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices?offset=-2147483649",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									],
									"query": [
										{
											"key": "offset",
											"value": "-2147483649"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice with locked total but without total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "903a45ae-2053-43f1-84d9-7fff5f0d362e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let invoice = utils.prepareInvoice(utils.getMockInvoice(0));",
											"",
											"delete invoice.total;",
											"invoice.lockTotal = true;",
											"",
											"pm.variables.set(\"invoiceBodyWithLockedTotal\", JSON.stringify(invoice));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b12d8d39-bf2e-4515-96e3-8e5fcc6b81bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected creation\", function () {",
											"    pm.response.to.have.status(422);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"invoiceTotalRequired\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceBodyWithLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create empty invoice with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Required properties are missing\", function () {",
											"        pm.expect(jsonData.errors).to.have.lengthOf.at.least(7);",
											"",
											"        let requiredProps = utils.getInvoiceSchema().required;",
											"        let missingRequiredPropsErrors = jsonData.errors.filter(error => requiredProps.includes(error.parameters[0].key));",
											"",
											"        missingRequiredPropsErrors.forEach(error => requiredObj(error));",
											"",
											"        // Number of filtered errors should be equal to number of required properties",
											"        pm.expect(missingRequiredPropsErrors).to.have.lengthOf(requiredProps.length);",
											"    });",
											"});",
											"",
											"function requiredObj(error) {",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Update invoice by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"updatedInvoice\", JSON.stringify(utils.buildInvoiceWithMinContent()));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedInvoice}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice with status Piad, and missing poLine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let invoice = JSON.parse(globals.negativeApprovedToPaidInvoiceContent);",
											"invoice.status = \"Paid\";",
											"delete invoice.subTotal;",
											"delete invoice.total;",
											"pm.globals.set(\"negativeApprovedToPaidInvoiceContent\", JSON.stringify(invoice));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedToPaidInvoice\"), (err, res) => {",
											"        pm.expect(res.json().status).to.equal(\"Approved\");",
											"      ",
											"    });",
											"});",
											"",
											"pm.globals.unset(\"negativeApprovedToPaidInvoiceContent\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{negativeApprovedToPaidInvoiceContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedToPaidInvoice}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Update invoice with locked total changing total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"    invoice.total += invoice.total;",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected updates\", function () {",
											"    pm.response.to.have.status(400);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"protectedFieldChanging\");",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"One 'protectedAndModifiedFields' is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].protectedAndModifiedFields[0], \"The only changed property should be 'total'\").to.equal(\"total\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Update invoice with locked total to false and delete total",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
											"    let invoice = res.json();",
											"    invoice.lockTotal = false;",
											"    delete invoice.total;",
											"",
											"    pm.variables.set(\"invoiceContentLockedTotal\", JSON.stringify(invoice));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Validation rejected updates\", function () {",
											"    pm.response.to.have.status(400);",
											"    let errors = pm.response.json().errors;",
											"    pm.expect(errors, \"One error is expected\").to.have.lengthOf(1);",
											"    pm.expect(errors[0].code, \"Error code does not match to expected\").to.equal(\"protectedFieldChanging\");",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"Two elements in 'protectedAndModifiedFields' are expected\").to.have.lengthOf(2);",
											"    pm.expect(errors[0].protectedAndModifiedFields, \"Unexpected changed properties\").to.have.members([\"total\", \"lockTotal\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceContentLockedTotal}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Delete invoice by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete non existent invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice by random id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice lines",
					"item": [
						{
							"name": "Protected Fields Modification",
							"item": [
								{
									"name": "Create invoice-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice Line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"approvedInvoiceInvoiceLineId\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"invoiceId\"));",
													"",
													"pm.variables.set(\"approvedInvoiceInvoiceLine\", JSON.stringify(invoiceLine));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-admin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{approvedInvoiceInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice-Line with protected fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"utils.sendGetRequest(\"/invoice/invoice-lines/\" + pm.environment.get(\"approvedInvoiceInvoiceLineId\"), (err, res) => {",
													"    let invoiceLine  = res.json();",
													"    invoiceLine.quantity = 10;",
													"    pm.variables.set(\"updatedApprovedInvoiceInvoiceLine\", JSON.stringify(invoiceLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 400\", function () {",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedApprovedInvoiceInvoiceLine}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{approvedInvoiceInvoiceLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoice-lines",
												"{{approvedInvoiceInvoiceLineId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create empty invoice-lines with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"",
											"        requiredObj(errors, \"description\");",
											"        requiredObj(errors, \"invoiceId\");",
											"        requiredObj(errors, \"invoiceLineStatus\");",
											"        requiredObj(errors, \"subTotal\");",
											"        requiredObj(errors, \"quantity\");",
											"",
											"        // releaseEncumbrance is also required but has default value",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Create an invoice with empty body"
							},
							"response": []
						},
						{
							"name": "Create invoice line - without required fields- 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "570809ac-8aba-4c7c-b384-8ee934d027c0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"delete line.invoiceId;",
											"delete line.invoiceLineStatus;",
											"delete line.subTotal;",
											"delete line.quantity;",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b95ac933-05d2-4876-aab0-13142296fb9e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    ",
											"});",
											"pm.test(\"4 validation errors\", function () {",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 400 - Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice-line- bad content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"minInvoiceId\"));",
											"invoiceLine.invalidProperty = \"invalid\";",
											"pm.variables.set(\"invoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update invoice line by id with empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Invoice Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get invoice lines by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "823db5da-29d8-40cd-9e3a-64e832e15184",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice-line by id with bad format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"bad-id-format"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice line with incorrect lang code format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{$guid}}?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{$guid}}"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete already deleted invoice line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice line is not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines/{{invoiceLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines",
										"{{invoiceLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create invoice-line with invalid adjustments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice Line creation fails\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let adjustmentsArray = [];",
											"",
											"",
											"let invoiceLine = utils.getMockInvoiceLine();",
											"",
											"delete invoiceLine.id;",
											"delete invoiceLine.invoiceLineNumber;",
											"delete invoiceLine.adjustments;",
											"invoiceLine.comment = \"Adding line for API testing adjustment\";",
											"invoiceLine.invoiceId = pm.environment.get(\"invoiceId\");",
											"",
											"let adjustment1 = utils.buildAdjustmentObject();",
											"adjustmentsArray.push(adjustment1);",
											"",
											"let adjustment2 = utils.buildAdjustmentObject();",
											"adjustment2.relationToTotal = \"Not Included in\";",
											"adjustmentsArray.push(adjustment2);",
											"",
											"invoiceLine.adjustments = adjustmentsArray;",
											"",
											"pm.variables.set(\"invoiceLineContent\", JSON.stringify(invoiceLine));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{invoiceLineContent}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								},
								"description": "Tests the adjustments calculations \n1.with amount and Percentage \n2.only \"In addition to\" relationToTotal adjustments are included in the calculation"
							},
							"response": []
						},
						{
							"name": "Create invoice-line for approved invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let error = {};",
											"",
											"pm.test(\"Can't add invoice line to the invoice that has been approved\", function () {",
											"    pm.response.to.have.status(500);",
											"    error = pm.response.json().errors[0];",
											"    pm.expect(error.code).to.equal(\"prohibitedInvoiceLineCreation\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var invoiceLine = utils.buildInvoiceLineWithMinContent(pm.environment.get(\"negativeApprovedToPaidInvoice\"));",
											"",
											"pm.variables.set(\"approvedInvoiceInvoiceLine\", JSON.stringify(invoiceLine));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{approvedInvoiceInvoiceLine}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoice-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoice-lines"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Vouchers",
					"item": [
						{
							"name": "Get voucher by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "823db5da-29d8-40cd-9e3a-64e832e15184",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/vouchers/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"vouchers",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher lines",
					"item": [
						{
							"name": "Get voucher line by Id - random Id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8c9ac0f-96ad-4626-b6cd-5bd280e0e1a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildVoucherLineWithMinContent();",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccc9c5b5-89d5-413c-8c48-5d7b817d6dc6",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /invoice/invoice-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get voucher line by id - bad ID - 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "823db5da-29d8-40cd-9e3a-64e832e15184",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-lines/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-lines",
										"bad-id"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Voucher number",
					"item": [
						{
							"name": "Re(setting) with negative start value - illegal",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Re(setting) with negative voucher start value not allowed\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start/-150",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start",
										"-150"
									]
								},
								"description": "Implementation story - https://issues.folio.org/browse/MODINVOICE-48"
							},
							"response": []
						},
						{
							"name": "Get start value with wrong lang param",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher/voucher-number/start?lang=english",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher",
										"voucher-number",
										"start"
									],
									"query": [
										{
											"key": "lang",
											"value": "english"
										}
									]
								},
								"description": "GET /invoice/invoice-lines requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "806a1974-4f38-4544-b55f-102d387e02c5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "734608cb-36c2-4c85-a7ab-898ff08ad839",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflows",
					"item": [
						{
							"name": "Transition to Approved",
							"item": [
								{
									"name": "Prepare invalid vousherNumberPrefix config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"voucherNumberPrefix\";",
													"let value = \"invalid-prefix\";",
													"",
													"utils.updateOrCreateInvoicesConfig(configs, configName, value);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-admin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICES and configName==voucherNumberPrefix",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==INVOICES and configName==voucherNumberPrefix"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update invoice with status Approved",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f17bb1f5-ff53-49f0-8706-0e4c40ac8dfd",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeReviewedToApprovedInvoiceContent\"));",
													"invoice.status = \"Approved\";",
													"pm.environment.set(\"negativeReviewedToApprovedInvoiceContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "238f0667-02ea-4763-972c-b0a6d1e7d3c2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 500\", function () {",
													"    pm.response.to.have.status(\"Internal Server Error\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeReviewedToApprovedInvoiceId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function () {",
													"            pm.expect(invoice.status).to.equal(\"Reviewed\");",
													"        });",
													"        pm.test(\"Voucher number not exist\", function () {",
													"             pm.expect(invoice.voucherNumber).to.not.exist;",
													"        });",
													"        ",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"reviewedToApprovedInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeReviewedToApprovedInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeReviewedToApprovedInvoiceId}}"
											]
										},
										"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Paid",
							"item": [
								{
									"name": "Pay invoice with locked total (no voucher)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalContent\"));",
													"invoice.status = \"Paid\";",
													"pm.environment.set(\"negativeApprovedInvoiceWithLockedTotalContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Error expected: voucher is not available\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    pm.expect(pm.response.json().errors[0]).to.have.property(\"code\", \"voucherNotFound\");",
													"",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"negativeApprovedInvoiceWithLockedTotalId\"), (err, res) => {",
													"        pm.test(\"Invoice status updated\", function () {",
													"            let invoice = res.json();",
													"            pm.expect(invoice.status).to.equal(\"Approved\");",
													"",
													"            // Validate voucher",
													"            utils.getVouchersForInvoice(invoice.id, (err, res) => {",
													"                pm.test(\"Still no voucher\", () => pm.expect(res.json().vouchers).to.be.empty);",
													"            });",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{negativeApprovedInvoiceWithLockedTotalContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{negativeApprovedInvoiceWithLockedTotalId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Transition to Approved with Empty FundDistributions",
							"item": [
								{
									"name": "Create invoice with minimal content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoice = pm.response.json();",
													"});",
													"",
													"pm.test(\"Invoice content is valid\", function() {",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosId\", invoice.id);",
													"    // pm.environment.set(\"folioInvoiceNo\", invoice.folioInvoiceNo);",
													"    pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));",
													"",
													"    utils.validateInvoiceWithMinimalContent(invoice);",
													"",
													"    utils.validateInvoice(invoice);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"invoiceContent\", JSON.stringify(utils.buildInvoiceWithMinContent()));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{invoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line with FundDistributions percentage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "94753103-bb6d-46d3-bebd-3ce94cc05fcd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"",
													"invoiceLine.fundDistributions[0].percentage=50;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dbfd94db-59c5-4fd9-8467-a284b21fb175",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"    invoiceLine = pm.response.json();",
													"    pm.environment.set(\"InvoiceLineWithePercentageNot100Id\", invoiceLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-admin}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit to approved. FundDistros percantage !=100",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f17bb1f5-ff53-49f0-8706-0e4c40ac8dfd",
												"exec": [
													"let invoice = JSON.parse(pm.environment.get(\"InvoiceWithEmptyFundDistrosContent\"));",
													"invoice.status = \"Approved\";",
													"",
													"pm.environment.set(\"InvoiceWithEmptyFundDistrosContent\", JSON.stringify(invoice));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "238f0667-02ea-4763-972c-b0a6d1e7d3c2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"",
													"    //delete invalid line",
													"    let lineToDelete = pm.environment.get(\"InvoiceLineWithePercentageNot100Id\");",
													"    utils.sendDeleteRequest(\"/invoice-storage/invoice-lines/\" + lineToDelete, (err, res) => {",
													"        pm.expect(res).to.have.property('code', 204);",
													"    });",
													"    pm.environment.unset(\"InvoiceLineWithePercentageNot100Id\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add line without FundDistributions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "94753103-bb6d-46d3-bebd-3ce94cc05fcd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let invoiceLine = utils.prepareInvoiceLine(utils.getMockInvoiceLine(), pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"));",
													"delete invoiceLine.fundDistributions;",
													"pm.environment.set(\"lineWithoutFundDistros\", JSON.stringify(invoiceLine));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cb8eab54-0245-46b7-b52f-1769914da16e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoiceLine = {};",
													"",
													"pm.test(\"Invoice is created\", function() {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-admin}}",
												"type": "text"
											},
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{lineWithoutFundDistros}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoice-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice-storage",
												"invoice-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Transit ot approved invoice without FundDistros",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f17bb1f5-ff53-49f0-8706-0e4c40ac8dfd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "238f0667-02ea-4763-972c-b0a6d1e7d3c2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let invoice = {};",
													"pm.test(\"Status code is 400\", function() {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"    // The test can be run only if update succeded",
													"    utils.sendGetRequest(\"/invoice/invoices/\" + pm.environment.get(\"InvoiceWithEmptyFundDistrosId\"), (err, res) => {",
													"        invoice = res.json();",
													"        pm.test(\"Invoice status changed\", function() {",
													"            pm.expect(invoice.status).to.equal(\"Open\");",
													"        });",
													"    });",
													"});",
													"",
													"pm.globals.unset(\"InvoiceWithEmptyFundDistrosContent\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Tenant",
												"value": "{{xokapitenant}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{InvoiceWithEmptyFundDistrosContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{InvoiceWithEmptyFundDistrosId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e3760d3-5781-4771-ab48-f3fbe71589c0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ce5e7416-6d02-4d2d-a699-1e6f9ea1a28d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice with incompatible fields",
							"item": [
								{
									"name": "Create Open invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(pm.response.json()));",
													"    pm.environment.set(\"incompatibleFieldsInvoiceId\", pm.response.json().id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not updated\", function() {",
													"    pm.response.to.have.status(422);",
													"});",
													"pm.environment.unset(\"incompatibleFieldsInvoiceContent\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let incompatibleFieldsInvoice = JSON.parse(pm.environment.get(\"incompatibleFieldsInvoiceContent\"));",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{incompatibleFieldsInvoiceId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices",
												"{{incompatibleFieldsInvoiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open invoice with incompatible fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Invoice is not created\", function() {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let incompatibleFieldsInvoice = utils.buildInvoiceWithMinContent();",
													"incompatibleFieldsInvoice.approvedBy = \"1d17b91c-5eaf-4f24-b50b-cb10b4cfbc63\";",
													"",
													"pm.variables.set(\"incompatibleFieldsInvoiceContent\", JSON.stringify(incompatibleFieldsInvoice));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{incompatibleFieldsInvoiceContent}}"
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"invoice",
												"invoices"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Delete Voucher Line",
					"item": [
						{
							"name": "Delete  Voucher Line from storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Voucher Line is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher-storage/voucher-lines/{{voucherLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher-storage",
										"voucher-lines",
										"{{voucherLineId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef2b027e-72f0-48ae-baf5-757c1cfe2a21",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dbcc12fb-0cc8-4852-8217-1d84933fd023",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Vouchers",
					"item": [
						{
							"name": "Delete  Voucher from storage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Voucher is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/voucher-storage/vouchers/{{voucherId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"voucher-storage",
										"vouchers",
										"{{voucherId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete invoices for positive tests",
					"item": [
						{
							"name": "Delete  invoice with minimal content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{minInvoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{minInvoiceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete filter by invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{filterInvoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{filterInvoiceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice with 4 lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"workflow-invoiceWith4LinesId\");",
											"    pm.environment.unset(\"workflow-invoiceWith4LinesContent\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"eval(globals.loadUtils).deleteVouchersForInvoice(pm.variables.get(\"workflow-invoiceWith4LinesId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{workflow-invoiceWith4LinesId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{workflow-invoiceWith4LinesId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete invoice with 1 line",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineId\");",
											"    pm.environment.unset(\"emptyConfigWorkflow-invoiceWith1LineContent\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											"eval(globals.loadUtils).deleteVouchersForInvoice(pm.variables.get(\"emptyConfigWorkflow-invoiceWith1LineId\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{emptyConfigWorkflow-invoiceWith1LineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{emptyConfigWorkflow-invoiceWith1LineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete  invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{invoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{invoiceId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3576b999-c386-481e-8364-6f3c0b5523f2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83dafb48-cc84-4d0b-abdb-8c5457beba28",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete invoices for negative tests",
					"item": [
						{
							"name": "Delete Negative Approved to Paid invoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedToPaidInvoice}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedToPaidInvoice}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Negative Reviewed to Approved invoice Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeReviewedToApprovedInvoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeReviewedToApprovedInvoiceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice with locked total",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice line is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalId\");",
											"    pm.environment.unset(\"negativeApprovedInvoiceWithLockedTotalContent\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{negativeApprovedInvoiceWithLockedTotalId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{negativeApprovedInvoiceWithLockedTotalId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice with protected fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{approvedInvoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{approvedInvoiceId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice with empty FundDistributions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{InvoiceWithEmptyFundDistrosId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{InvoiceWithEmptyFundDistrosId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice with incompatible fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd474d88-68c0-4f40-ac6f-59e07108f064",
										"exec": [
											"pm.test(\"Invoice is deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5972827b-f9a4-47f7-98ab-7eacd59aa566",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice/invoices/{{incompatibleFieldsInvoiceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice",
										"invoices",
										"{{incompatibleFieldsInvoiceId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ef2b027e-72f0-48ae-baf5-757c1cfe2a21",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd78a8af-536b-403b-8dda-d1f2a64c70c7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete user with mod-invoice permissions only",
					"item": [
						{
							"name": "Delete user's credentials",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d4e68cd5-eca2-4427-ba8b-6f059a5fc130",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/authn/credentials?query=userId=\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has credentials and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        pm.variables.set(\"credentialsId\", res.json().credentials[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ff89363-4db6-40bc-a848-e7532b2a7bc0",
										"exec": [
											"let testFunc = pm.variables.get(\"credentialsId\") ? pm.test : pm.test.skip;",
											"testFunc(\"Credentials deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials/{{credentialsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials",
										"{{credentialsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user's permissions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "234a882a-edd7-4bac-8bc2-7f89c8a7a713",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/perms/users?query=userId==\" + globals.testData.user.id, (err, res) => {",
											"    // If user already has permissions and delete them to create fresh each time",
											"    if (res.code === 200 && res.json().totalRecords > 0) {",
											"        pm.variables.set(\"permissionsId\", res.json().permissionUsers[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f74eb5c8-1652-480c-9fac-356b3a3ffc56",
										"exec": [
											"let testFunc = pm.variables.get(\"permissionsId\") ? pm.test : pm.test.skip;",
											"testFunc(\"Permissions deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users/{{permissionsId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users",
										"{{permissionsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "123459a0-b737-4767-a32c-1c5692b8d920",
										"exec": [
											"pm.variables.set(\"userId\", pm.globals.get(\"testData\").user.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac493f0c-3e8c-4c07-94d2-6105617f0384",
										"exec": [
											"pm.test(\"User deleted - Expected No Content (204)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users/{{userId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "51550a77-35a8-45ab-bf74-f093a8202d42",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0decf5ff-c87f-4041-a8cd-ef1a9f2003bd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify Delete in Storage",
					"item": [
						{
							"name": "Verify that invoices are deleted in storage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"invoiceTestNote\", utils.INVOICE_NOTE);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Verify that no invoices are found\", function () {",
											"    pm.expect(pm.response.json().totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/invoice-storage/invoices?query=note=\"{{invoiceTestNote}}\"",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"invoice-storage",
										"invoices"
									],
									"query": [
										{
											"key": "query",
											"value": "note=\"{{invoiceTestNote}}\""
										}
									]
								},
								"description": "GET /invoice-storage/invoices returns a 404 after delete"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "39a9eea1-1e0e-4ce0-879d-09fb42d4558d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d3291b4b-85b4-427a-ba76-85228594cd62",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete orders",
					"item": [
						{
							"name": "Delete order with 2 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Order has been successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.globals.unset(\"completeOrderId\"); ",
											"    pm.globals.unset(\"poLine1Id\");",
											"    pm.globals.unset(\"poLine2Id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 204"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Finance data",
					"item": [
						{
							"name": "Delete fund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Test fund deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"fundId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds/{{fundId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds",
										"{{fundId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ledger",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb2052a4-e388-4860-80be-ea96976bcf21",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3bf00f6d-8798-4764-a256-2d360ea02876",
										"exec": [
											"pm.test(\"Test ledger deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.environment.unset(\"ledgerId\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers/{{ledgerId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers",
										"{{ledgerId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Revert configs",
					"item": [
						{
							"name": "Get orders configs and revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eed87d63-620c-49f8-9d98-6d9bc7400617",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let currentConfigs;",
											"pm.test(\"Storing current configs\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    currentConfigs = pm.response.json().configs;",
											"    console.log(\"Current configs: \", currentConfigs);",
											"});",
											"",
											"let configsToProcess = globals.testData.ordersConfigs.configNames;",
											"",
											"let originalConfigs = pm.environment.get(\"mod-orders-configs\") ? JSON.parse(pm.environment.get(\"mod-orders-configs\")) : [];",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configName = configsToProcess[i];",
											"    let originalConfig = utils.getConfigByName(originalConfigs, configName);",
											"",
											"    if (originalConfig) {",
											"        originalConfig.id = utils.getConfigByName(currentConfigs, configName).id;",
											"        utils.updateConfig(originalConfig);",
											"    } else if (currentConfigs.length > 0) {",
											"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
											"        utils.deleteConfig(configId);",
											"    } else {",
											"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1bfdef49-0a3f-494e-8ad5-c86b5b228a30",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get invoices configs and revert",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bae1c04-6f38-4b77-bdea-a918b637e5bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let currentConfigs;",
											"pm.test(\"Storing current configs\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    currentConfigs = pm.response.json().configs;",
											"    console.log(\"Current configs: \", currentConfigs);",
											"});",
											"",
											"let configsToProcess = globals.testData.invoicesConfigs.configNames;",
											"",
											"let originalConfigs = pm.environment.get(\"mod-invoices-configs\") ? JSON.parse(pm.environment.get(\"mod-invoices-configs\")) : [];",
											"for (var i = 0; i < configsToProcess.length; i++) {",
											"    let configName = configsToProcess[i];",
											"    let originalConfig = utils.getConfigByName(originalConfigs, configName);",
											"",
											"    if (originalConfig) {",
											"        originalConfig.id = utils.getConfigByName(currentConfigs, configName).id;",
											"        utils.updateConfig(originalConfig);",
											"    } else if (currentConfigs.length > 0) {",
											"        let configId = utils.getConfigByName(currentConfigs, configName).id;",
											"        utils.deleteConfig(configId);",
											"    } else {",
											"        console.log(\"The config cannot be reverted. Config name =\" + configName);",
											"    }",
											"}",
											"",
											"// Remove all created variables",
											"eval(globals.loadUtils).unsetTestVariables();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c6d609-c5de-49cf-aa6c-7cc022346e87",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==INVOICES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==INVOICES"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e07ce59d-212b-4673-9fd7-346a4ca947e2",
				"type": "text/javascript",
				"exec": [
					"let testData = {",
					"    // mod-configuration",
					"    invoicesConfigs: {",
					"        configNames: [\"voucherNumberPrefix\"],",
					"        bodyTemplate: {",
					"            \"module\": \"INVOICES\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    ordersConfigs: {",
					"        configNames: [\"poLines-limit\"],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    user: {",
					"        \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"        \"username\": \"mod-invoice-user\",",
					"        \"active\": true,",
					"        \"personal\": {",
					"            \"firstName\": \"Invoice First Name\",",
					"            \"lastName\": \"Invoice Last Name\"",
					"        }",
					"    },",
					"    credentials: {",
					"        \"username\": \"mod-invoice-user\",",
					"        \"password\": \"mod-invoice-user-password\"",
					"    },",
					"    permissions: {",
					"        \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"        \"permissions\": [\"invoice.all\"]",
					"    }",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"",
					"    utils.INVOICE_NOTE = \"Invoice for API Tests\";",
					"    utils.schemaPrefix = \"invoices_schema_\";",
					"",
					"    utils.prepareInvoice = function(invoice) {",
					"        delete invoice.id;",
					"        delete invoice.folioInvoiceNo;",
					"        delete invoice.subTotal;",
					"",
					"        invoice.note = utils.INVOICE_NOTE;",
					"",
					"        return invoice;",
					"    };",
					"",
					"    utils.prepareInvoiceLine = function(invoiceLine, invoiceId) {",
					"        invoiceLine.invoiceId = invoiceId;",
					"",
					"        delete invoiceLine.id;",
					"        delete invoiceLine.metadata;",
					"",
					"        invoiceLine.fundDistributions.forEach(distro => distro.fundId = pm.environment.get(\"fundId\"));",
					"",
					"        return invoiceLine;",
					"    };",
					"",
					"    utils.copyJsonObj = function(obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"    ",
					"    utils.getMockInvoiceLine = function() {",
					"        return JSON.parse(pm.globals.get(\"mock-invoiceLine\"));",
					"    }",
					"    ",
					"    utils.getMockInvoice = function(i) {",
					"        let invoices = JSON.parse(pm.globals.get(\"mock-invoices\"));",
					"        return invoices.invoices[i];",
					"    }",
					"    ",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function(path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function(path) {",
					"        return new Promise((resolve) => utils.sendDeleteRequest(path, (err, res) => resolve(res.code)));",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function(order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"",
					"        for (var i = 0; i < order.compositePoLines.length; i++) {",
					"            utils.preparePoLine(order.compositePoLines[i]);",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function(poLine) {",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        delete poLine.alerts;",
					"        delete poLine.reportingCodes;",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Adds Invoice line id to `completeInvoicelineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberInvoiceLineId = function(invoiceLine) {",
					"        if (invoiceLine && invoiceLine.id) {",
					"            let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"            completeInvoicelineIds.push(invoiceLine.id);",
					"            pm.environment.set(\"completeInvoicelineIds\", JSON.stringify(completeInvoicelineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completeInvoicelineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastInvoiceLineId = function(withRemoval) {",
					"        let completeInvoicelineIds = pm.environment.get(\"completeInvoicelineIds\") ? JSON.parse(pm.environment.get(\"completeInvoicelineIds\")) : [];",
					"        if (completeInvoicelineIds.length > 0) {",
					"            let lineId = completeInvoicelineIds.pop();",
					"            if (withRemoval) {",
					"                pm.environment.set(\"completePolineIds\", JSON.stringify(completeInvoicelineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the Invoice line is empty except line and order ids",
					"     */",
					"    utils.validateInvoiceLineWithMinimalContent = function(invoiceLine) {",
					"        let expectedLine = utils.buildInvoiceLineWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoiceLine.id, \"Invoice line: id expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description expected\").to.exist;",
					"        pm.expect(invoiceLine.description, \"Invoice line: description does not match to expected\").to.eql(expectedLine.description);",
					"        pm.expect(invoiceLine.invoiceId, \"Invoice line: invoiceId expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineNumber, \"Invoice line: invoiceLineNumber expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus expected\").to.exist;",
					"        pm.expect(invoiceLine.invoiceLineStatus, \"Invoice line: invoiceLineStatus does not match to expected\").to.eql(expectedLine.invoiceLineStatus);",
					"        pm.expect(invoiceLine.metadata, \"Invoice line: metadata expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal expected\").to.exist;",
					"        pm.expect(invoiceLine.subTotal, \"Invoice line: subTotal  does not match to expected\").to.eql(expectedLine.subTotal);",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity is expected\").to.exist;",
					"        pm.expect(invoiceLine.quantity, \"Invoice line: quantity does not match to expected\").to.eql(expectedLine.quantity);",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance expected\").to.exist;",
					"        pm.expect(invoiceLine.releaseEncumbrance, \"Invoice line: releaseEncumbrance does not match to expected\").to.eql(expectedLine.releaseEncumbrance);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoiceLine.adjustments, \"Invoice line: adjustments as empty array expected\").to.be.an('array').that.is.empty;",
					"        pm.expect(invoiceLine.adjustmentsTotal, \"Invoice line: adjustments total not expected\").to.exist;",
					"        pm.expect(invoiceLine.comment, \"Invoice line: comment is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.poLineId, \"Invoice line: PO line Id is not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productId, \"Invoice line: productId not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.productIdType, \"Invoice line: productIdType not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionInfo, \"Invoice line: subscriptionInfo not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionStart, \"Invoice line: subscriptionStart not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.subscriptionEnd, \"Invoice line: subscriptionEnd not expected\").to.not.exist;",
					"        pm.expect(invoiceLine.total, \"Invoice line: total expected\").to.exist;",
					"        pm.expect(invoiceLine.vendorRefNo, \"Invoice line: vendorRefNo not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Build Invoice line with minimal required fields.",
					"     */",
					"    utils.buildInvoiceLineWithMinContent = function(invoiceId) {",
					"        return {",
					"            \"description\": \"Some description\",",
					"            \"invoiceId\": invoiceId,",
					"            \"invoiceLineStatus\": \"Open\",",
					"            \"subTotal\": 2.20,",
					"            \"quantity\": 3,",
					"            \"releaseEncumbrance\": false",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Voucher line with minimal required fields.",
					"     */",
					"    utils.buildVoucherLineWithMinContent = function() {",
					"        return {",
					"            \"amount\": 33.55,",
					"            \"externalAccountNumber\": \"54321099\",",
					"            \"fundDistributions\": [",
					"                {",
					"                    \"fundId\": pm.environment.get(\"fundId\"),",
					"                    \"percentage\": 50",
					"                }",
					"            ],",
					"            \"sourceIds\": [\"0726fc17-38c3-4249-81d3-97ffddada92b\"],",
					"            \"voucherId\": \"d384a4c2-9f85-4072-a305-800b3f6f5143\"",
					"        };",
					"    };",
					"",
					"    utils.buildAdjustmentObject = function(amount, type){",
					"        return {",
					"            \"description\":\"adjustment API test\",",
					"            \"type\": type || \"Amount\",",
					"            \"value\": amount || 10,",
					"            \"prorate\":\"Not prorated\",",
					"            \"relationToTotal\":\"In addition to\"",
					"        };",
					"    };",
					"",
					"    utils.updateInvoiceStatus = function(invoice, status) {",
					"        invoice.status = status;",
					"        utils.sendPutRequest(\"/invoice/invoices/\" + invoice.id, invoice, (err,response) => {",
					"            pm.test(\"Invoice is now \" + status, () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(response).to.have.property('code', 204);",
					"            });",
					"        });",
					"    };",
					"",
					"",
					"    utils.deleteVouchersForInvoice = function(invoiceId) {",
					"        utils.getVouchersForInvoice(invoiceId, (err, res) => {",
					"            utils.deleteVouchers(res.json().vouchers);",
					"        });",
					"    };",
					"",
					"    utils.deleteVouchers = function(vouchers) {",
					"        if (vouchers.length !== 0) {",
					"            const timerId = setTimeout(() => {}, 60000);",
					"    ",
					"            let promises = vouchers.map(voucher => utils.deleteVoucherLines(voucher.id).then(ok => utils.deleteVoucher(voucher.id)));",
					"    ",
					"            Promise.all(promises)",
					"                .then(result => clearTimeout(timerId))",
					"                .catch(err => {",
					"                    console.log(\"Error happened on voucher record(s) deletion:\", err);",
					"                    clearTimeout(timerId);",
					"                });",
					"        }",
					"    };",
					"",
					"    utils.deleteVoucher = function(voucherId) {",
					"        return utils.processDeleteRequest(\"/voucher-storage/vouchers/\" + voucherId);",
					"    };",
					"",
					"    utils.deleteVoucherLines = function(voucherId) {",
					"        return new Promise((resolve) => {",
					"            utils.getVoucherLines(voucherId, (err, res) => {",
					"                let promises = [];",
					"                res.json().voucherLines.forEach(line => {",
					"                    promises.push(utils.processDeleteRequest(\"/voucher-storage/voucher-lines/\" + line.id));",
					"                });",
					"                Promise.all(promises)",
					"                    .then(ok => resolve())",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on voucher line record(s) deletion:\", err);",
					"                        resolve();",
					"                    });",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.getVouchersForInvoice = function(invoiceId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/vouchers?query=invoiceId==\" + invoiceId, handler);",
					"    };",
					"",
					"    utils.getVoucherLines = function(voucherId, handler) {",
					"        utils.sendGetRequest(\"/voucher-storage/voucher-lines?query=voucherId==\" + voucherId, handler);",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function(code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function() {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function(configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function(configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function(configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function(configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"        ",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"    ",
					"    utils.updateOrCreateInvoicesConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.invoicesConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function(configs, configName, value) {",
					"        let bodyTemplate = globals.testData.ordersConfigs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function(body) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/configurations/entries\"),",
					"            method: \"POST\",",
					"            header: {",
					"                \"X-Okapi-Token\": pm.variables.get(\"xokapitoken-admin\"),",
					"                \"Content-type\": \"application/json\",",
					"                \"Accept-Encoding\": \"identity\"",
					"            },",
					"            body: JSON.stringify(body)",
					"        }, function(err, response) {",
					"            pm.test(\"Config created\", function() {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function(body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, pm.environment.get(\"xokapitoken-admin\"), (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function() {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function(id) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id, pm.environment.get(\"xokapitoken-admin\"))",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"",
					"    utils.deleteRecord = function(path) {",
					"        const timerId = setTimeout(() => {}, 60000);",
					"        utils.processDeleteRequest(path)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function(path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function() {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.environment.unset(\"invoiceId\");",
					"        pm.environment.unset(\"folioInvoiceNo\");",
					"        pm.environment.unset(\"minInvoiceId\");",
					"        pm.environment.unset(\"completeInvoicelineIds\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"mod-invoices-configs\");",
					"        pm.environment.unset(\"voucherId\");",
					"        pm.environment.unset(\"voucherLineId\");",
					"        pm.environment.unset(\"negativeApprovedToPaidInvoice\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"current-orders-configs\");",
					"        pm.environment.unset(\"negativeAdjInLineId\");",
					"        pm.environment.unset(\"negativeInvoiceLineContent\");",
					"        pm.environment.unset(\"InvoiceWithEmptyFundDistrosId\");",
					"        pm.environment.unset(\"incompatibleFieldsInvoiceId\");",
					"        ",
					"        pm.globals.unset(\"mock-invoices\");",
					"        pm.globals.unset(\"mock-invoiceLine\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"",
					"    };",
					"",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function(jsonData, schema) {",
					"        console.log(\"Starting validating against schemas\");",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice against schema",
					"     */",
					"    utils.validateInvoice = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceSchema());",
					"    };",
					"",
					"    utils.getInvoiceSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates invoice line against schema",
					"     */",
					"    utils.validateInvoiceLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getInvoiceLineSchema());",
					"    };",
					"",
					"    utils.getInvoiceLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"invoice_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher against schema",
					"     */",
					"    utils.validateVoucher = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherSchema());",
					"    };",
					"",
					"    utils.getVoucherSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates voucher line against schema",
					"     */",
					"    utils.validateVoucherLine = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getVoucherLineSchema());",
					"    };",
					"",
					"    utils.getVoucherLineSchema = function() {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + \"voucher_line.json\"));",
					"    };",
					"",
					"    /**",
					"     * Validates sequence number against schema",
					"     */",
					"    utils.validateSequenceNumber = function(jsonData) {",
					"        utils._validateAgainstSchema(jsonData, utils.getSchema(\"sequence_number.json\"));",
					"    };",
					"",
					"    /**",
					"     * Gets schema as json object",
					"     */",
					"    utils.getSchema = function(name) {",
					"        return JSON.parse(pm.environment.get(utils.schemaPrefix + name));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function() {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function(path, method) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Validates the invoice is empty except required fields, invoice id and folioInvoiceNo",
					"     */",
					"    utils.validateInvoiceWithMinimalContent = function(invoice) {",
					"        let expectedInvoice = utils.buildInvoiceWithMinContent();",
					"",
					"        // Verify that required and system generated fields exist",
					"        pm.expect(invoice.id, \"Invoice id expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total not expected\").to.exist;",
					"        pm.expect(invoice.adjustmentsTotal, \"Invoice adjustments total should be zero\").to.eql(0);",
					"        pm.expect(invoice.currency, \"Invoice currency expected\").to.exist;",
					"        pm.expect(invoice.currency, \"Invoice currency does not match to expected\").to.eql(expectedInvoice.currency);",
					"        pm.expect(invoice.invoiceDate, \"Invoice date expected\").to.exist;",
					"        pm.expect(invoice.invoiceDate, \"Invoice date does not match to expected\").to.eql(expectedInvoice.invoiceDate);",
					"        pm.expect(invoice.lockTotal, \"Invoice lock total does not match to expected\").to.eql(false);",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method expected\").to.exist;",
					"        pm.expect(invoice.paymentMethod, \"Invoice payment method does not match to expected\").to.eql(expectedInvoice.paymentMethod);",
					"        pm.expect(invoice.status, \"Invoice status expected\").to.exist;",
					"        pm.expect(invoice.status, \"Invoice status does not match to expected\").to.eql(expectedInvoice.status);",
					"        pm.expect(invoice.folioInvoiceNo, \"Folio Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.metadata, \"Invoice metadata expected\").to.exist;",
					"        pm.expect(invoice.note, \"Invoice note\").to.equal(utils.INVOICE_NOTE);",
					"        pm.expect(invoice.source, \"Invoice source does not match to expected\").to.eql(expectedInvoice.source);",
					"        pm.expect(invoice.subTotal, \"Invoice subTotal not expected\").to.exist;",
					"        pm.expect(invoice.subTotal, \"Invoice subtotal should be zero\").to.eql(0);",
					"        pm.expect(invoice.total, \"Invoice total not expected\").to.exist;",
					"        pm.expect(invoice.total, \"Invoice total should be zero\").to.eql(0);",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice No expected\").to.exist;",
					"        pm.expect(invoice.vendorInvoiceNo, \"Vendor Invoice number does not match to expected\").to.eql(expectedInvoice.vendorInvoiceNo);",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id expected\").to.exist;",
					"        pm.expect(invoice.vendorId, \"Invoice vendor id does not match to expected\").to.eql(expectedInvoice.vendorId);",
					"",
					"        // Now verify that there are no optional fields",
					"        pm.expect(invoice.adjustments, \"Invoice adjustments expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.acquisitionsUnit, \"Invoice acquisitions unit not expected\").to.not.exist;",
					"        pm.expect(invoice.approvedBy, \"Invoice approved by not expected\").to.not.exist;",
					"        pm.expect(invoice.approvalDate, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.chkSubscriptionOverlap, \"Invoice approval date not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementNumber, \"Invoice disbursement number not expected\").to.not.exist;",
					"        pm.expect(invoice.disbursementDate, \"Invoice disbursement date not expected\").to.not.exist;",
					"        pm.expect(invoice.manualPayment, \"Invoice manual payment not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentDue, \"Invoice payment due not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentId, \"Invoice payment id not expected\").to.not.exist;",
					"        pm.expect(invoice.paymentTerms, \"Invoice payment terms not expected\").to.not.exist;",
					"        pm.expect(invoice.poNumbers, \"Invoice PO numbers expected to be empty\").to.be.empty;",
					"        pm.expect(invoice.voucherNumber, \"Invoice voucher number not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Build invoice with minimal required fields.",
					"     */",
					"    utils.buildInvoiceWithMinContent = function() {",
					"        return {",
					"            \"currency\": \"USD\",",
					"            \"invoiceDate\": \"2018-07-20T00:00:00.000+0000\",",
					"            \"paymentMethod\": \"EFT\",",
					"            \"status\": \"Open\",",
					"            \"source\": \"024b6f41-c5c6-4280-858e-33fba452a334\",",
					"            \"vendorInvoiceNo\": \"YK75851\",",
					"            \"vendorId\": \"168f8a63-d612-406e-813f-c7527f241ac3\",",
					"            \"note\": utils.INVOICE_NOTE",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function(data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.sendPostRequest = function (path, body, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function(path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "55006f90-5989-4448-9d61-ff39c3e3191b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "fc77c058-fa27-425c-ab2b-f11bb41a53c0",
			"key": "resourcesUrl",
			"value": "https://raw.githubusercontent.com/folio-org/mod-invoice/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "6475c7a9-118e-4020-bd8e-b3524bc3e69f",
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		},
		{
			"id": "8ab24b80-64d0-4616-90b8-fe8d55077f09",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "b3a2b498-8720-46fc-834a-87f94f824886",
			"key": "finance-ledgerCode",
			"value": "invoicingApiTests",
			"type": "string"
		},
		{
			"id": "77d1cf83-72b0-4dc2-a3fd-7b1f77bf8744",
			"key": "finance-fundCode",
			"value": "invoicingApiTests",
			"type": "string"
		},
		{
			"id": "76a3f293-4e3f-4da2-965c-6723d2d52db8",
			"key": "voucherNumberPrefix",
			"value": "testPrefix",
			"type": "string"
		}
	]
}