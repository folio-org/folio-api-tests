{
	"info": {
		"_postman_id": "ef11085f-21f0-49cb-9b94-2dbaac457442",
		"name": "mod-inventory-storage-loan-types",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "200d9700-1074-4c7e-993a-da80787ab6d5",
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/loan-types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c4e0eac7-e5a0-47cb-a5a2-1afb119f936f",
						"type": "text/javascript",
						"exec": [
							"const requestPayload = {",
							"    id:pm.environment.get(\"currentUUID\"),",
							"    name:pm.environment.get(\"loanName\")",
							"}",
							"",
							"const response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.have.status(\"Created\");",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", pm.variables.get(\"metadata.schema\"));",
							"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"loantype.schema\"))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"//verify headers",
							"",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"});",
							"    ",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2a6e72ad-e3c0-4bfe-b1b0-c44a7baa86e5",
						"type": "text/javascript",
						"exec": [
							"const uuid = require('uuid');",
							"pm.environment.set(\"currentUUID\",uuid.v4())",
							"pm.environment.set(\"loanName\",\"InterLib Loan\")"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{currentUUID}}\",\r\n  \"name\": \"{{loanName}}\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "Create a new loan type"
			},
			"response": []
		},
		{
			"name": "/loan-types Already exists loan type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9bda5f9e-6c3f-4318-8fb9-4c835c0ce56f",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
							"",
							"});",
							"",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});",
							"    ",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "aa26dfff-c690-43c8-8a1b-1fd5eece7e0d",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.environment.set(\"loanName\",\"InterLib Loan\")"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{loanName}}\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "POST with an already existed Loan type"
			},
			"response": []
		},
		{
			"name": "/loan-types Name as null",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c98d1d4-1fc5-4bd9-a2f9-beff2b7604e0",
						"type": "text/javascript",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"const requestPayload = {",
							"    id:pm.environment.get(\"currentUUID\"),",
							"    name:pm.environment.get(\"loanName\")",
							"}",
							"",
							"pm.test(\"Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"    pm.response.to.have.status(\"Unprocessable Entity\");",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "935a031f-1a3f-4602-be47-2b6918cc931f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{$guid}}\",\r\n  \"name\": null\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "POST loan type with name as null value"
			},
			"response": []
		},
		{
			"name": "/loan-types Name as boolean value",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "acdedb95-2eeb-41c7-abd1-8efeeb16ec65",
						"type": "text/javascript",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"const requestPayload = {",
							"    id:pm.environment.get(\"currentUUID\"),",
							"    name:pm.environment.get(\"loanName\")",
							"}",
							"",
							"// pm.test(\"Status is 400\", function () {",
							"//     pm.response.to.have.status(400);",
							"//     pm.response.to.have.status(\"Unprocessable Entity\");",
							"// });",
							"",
							"// pm.test(\"Response must be valid and have a body\", function () {",
							"//     pm.response.to.be.withBody;",
							"//     pm.response.to.be.json; ",
							"// });",
							"",
							"// //verify response body",
							"// pm.test(\"Response payload must be valid text  \", function () {",
							"//   pm.expect(response.errors[0].message).to.match(/may not be null/);",
							"// });",
							"",
							"// //verify headers",
							"// pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"//     pm.response.to.have.header(\"Content-Type\");",
							"//     pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"// });",
							"",
							"pm.environment.set(\"booleanId\",pm.response.json().id);",
							"//let commonHeaderTests = new(eval(pm.variables.get(\"commonTests\")))();",
							"//commonHeaderTests.negative();",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e66d0c5d-7f4c-4335-ad80-dc93c98d0903",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{$guid}}\",\r\n  \"name\": true\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "POST loan type with name as boolean value"
			},
			"response": []
		},
		{
			"name": "/loan-types id as null",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "65427bb8-a38e-4e3e-b213-86817012a5c2",
						"type": "text/javascript",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"   pm.response.to.have.status(\"Created\");",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    pm.expect(tv4.validate(pm.response.json(), pm.variables.get(\"loantype.schema\"))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"",
							"pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {",
							"    pm.response.to.have.header(\"Transfer-Encoding\");",
							"    pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");",
							"",
							"});",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							"",
							"pm.environment.set(\"nullId\",pm.response.json().id);",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a74c3239-52cb-4ffc-a5e0-e34d769962b4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": null,\r\n   \"name\": \"Test Loan\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "POST loan type with id as null value"
			},
			"response": []
		},
		{
			"name": "/loan-types No Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f3a09c29-902b-4ec1-9458-e5966b8853a9",
						"type": "text/javascript",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.have.status(\"Unprocessable Entity\");",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6dee32d5-33fe-427e-8d79-04ee84988262",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{$guid}}\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "POST loan type with no name attribute in the payload"
			},
			"response": []
		},
		{
			"name": "/loan-types Malformatted JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa06ab81-bbea-497d-a77a-10d29fe1cb11",
						"type": "text/javascript",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.have.status(\"Unprocessable Entity\");",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6dee32d5-33fe-427e-8d79-04ee84988262",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "No valid JSON"
			},
			"response": []
		},
		{
			"name": "/loan-types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "310a2354-ad4e-426b-836e-00be2dc27b4e",
						"type": "text/javascript",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", pm.variables.get(\"metadata.schema\"));",
							"    tv4.addSchema(\"loantype.json\", pm.variables.get(\"loantype.schema\"));",
							"    pm.expect(tv4.validate(response, pm.variables.get(\"loantypes.schema\"))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "Get list of all loan types"
			},
			"response": []
		},
		{
			"name": "/loan-types - 'query ID'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e11ae12c-fb01-41bd-b615-1d9c245f44fa",
						"type": "text/javascript",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", pm.variables.get(\"metadata.schema\"));",
							"    tv4.addSchema(\"loantype.json\", pm.variables.get(\"loantype.schema\"));",
							"    pm.expect(tv4.validate(response, pm.variables.get(\"loantypes.schema\"))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"const loanTypeObject = {",
							"    id:pm.environment.get(\"currentUUID\"),",
							"    name:pm.environment.get(\"loanName\")",
							"}",
							"",
							"//verify response body",
							"pm.test(\"verfiy the filter results \", function () {",
							"   pm.expect(response.totalRecords).to.equal(1);",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							" });",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types?query=(id={{currentUUID}})",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					],
					"query": [
						{
							"key": "query",
							"value": "(id={{currentUUID}})"
						}
					]
				},
				"description": "Get list of loan types with id as the query parameter"
			},
			"response": []
		},
		{
			"name": "/loan-types - 'query name'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0f5c273-a0e3-48cd-a568-1849552eb40c",
						"type": "text/javascript",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"raml-util/schemas/metadata.schema\", pm.variables.get(\"metadata.schema\"));",
							"    tv4.addSchema(\"loantype.json\", pm.variables.get(\"loantype.schema\"));",
							"    pm.expect(tv4.validate(response, pm.variables.get(\"loantypes.schema\"))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"const loanTypeObject = {",
							"    id:pm.environment.get(\"currentUUID\"),",
							"    name:pm.environment.get(\"loanName\")",
							"}",
							"",
							"//verify response body",
							"pm.test(\"verfiy the filter results \", function () {",
							"    pm.expect(response.loantypes.length).to.equal(1);",
							"    pm.expect(response.totalRecords).to.equal(1);",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							" });",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types?query=(name={{loanName}})",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					],
					"query": [
						{
							"key": "query",
							"value": "(name={{loanName}})"
						}
					]
				},
				"description": "Get list of loan types with name as the query parameter"
			},
			"response": []
		},
		{
			"name": "/loan-types - 'query name regex and limit 0'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd3404e3-6a32-46cb-be2d-3deedcec2ec2",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"loantype.json\", pm.variables.get(\"loantype.schema\"));",
							"    pm.expect(tv4.validate(response, pm.variables.get(\"loantypes.schema\"))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify response body",
							"pm.test(\"verfiy the filter results \", function () {",
							"    pm.expect(response.loantypes.length).to.equal(0);",
							"    pm.expect(response.totalRecords).to.equal(1);",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							" });",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types?query=(name==\"Inter*\")&limit=0",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					],
					"query": [
						{
							"key": "query",
							"value": "(name==\"Inter*\")"
						},
						{
							"key": "limit",
							"value": "0"
						}
					]
				},
				"description": "Get list of loan types with name and limit 0 as the query parameter"
			},
			"response": []
		},
		{
			"name": "/loan-types - 'query name regex and offset 1'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f463f573-badf-486c-90b4-37c977cbced1",
						"exec": [
							"const response = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.ok; ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json; ",
							"});",
							"",
							"pm.test(\"validate schema\", function() {",
							"    tv4.addSchema(\"loantype.json\", pm.variables.get(\"loantype.schema\"));",
							"    pm.expect(tv4.validate(response, pm.variables.get(\"loantypes.schema\"))).to.be.true;",
							"    pm.expect(tv4.missing).to.be.empty;",
							"});",
							"",
							"//verify response body",
							"pm.test(\"verfiy the filter results \", function () {",
							"    pm.expect(response.loantypes.length).to.equal(0);",
							"    pm.expect(response.totalRecords).to.equal(1);",
							"});",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							" });",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types?query=(name==\"Inter*\")&offset=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					],
					"query": [
						{
							"key": "query",
							"value": "(name==\"Inter*\")"
						},
						{
							"key": "offset",
							"value": "1"
						}
					]
				},
				"description": "Get list of loan types with name and offset 1 as the query parameter"
			},
			"response": []
		},
		{
			"name": "/loan-types - 'Malformated CQL Query'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5fa69d5d-ef71-4b16-8469-71ac36c4abd4",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
							"",
							" });",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types?query=(name==\"Inter*\") offset=1",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					],
					"query": [
						{
							"key": "query",
							"value": "(name==\"Inter*\") offset=1"
						}
					]
				},
				"description": "Get list of loan types incorrect CQL query"
			},
			"response": []
		},
		{
			"name": "/loan-types - Bad query",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e53725b4-b3b4-4b30-911d-60049a5a71cd",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"   pm.response.to.have.status(\"Bad Request\");",
							"});",
							"",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types?limit=2147483678",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					],
					"query": [
						{
							"key": "limit",
							"value": "2147483678"
						}
					]
				},
				"description": "Get list of loan types incorrect CQL query"
			},
			"response": []
		},
		{
			"name": "/loan-types-'name with special chars'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7e28e897-8456-4b27-ad18-05b2fc72d4c3",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"//verify headers",
							"",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"InterLib Loan updated%^!@@\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/{{currentUUID}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"{{currentUUID}}"
					]
				},
				"description": "Update loan types with name containing special chars"
			},
			"response": []
		},
		{
			"name": "/loan-types-'name with longest word'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a8497580-d296-4ec0-96e8-42d3488a1ab8",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"//verify headers",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"Lopadotemachoselachogaleokranioleipsanodrimhypotrimmatosilphioparaomelitokatakechymenokichlepikossyphophattoperisteralektryonoptekephalliokigklopeleiolagoiosiraiobaphetraganopterygon\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/{{currentUUID}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"{{currentUUID}}"
					]
				},
				"description": "Update loan types with name containing longest word"
			},
			"response": []
		},
		{
			"name": "/loan-types-'invalid attribute'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8303621f-3d75-4971-8bd8-f24f1b1bd1b3",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'application/json' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");",
							"",
							"});",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"nameIt\":\"InterLib Loan updated%^!@@\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/{{currentUUID}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"{{currentUUID}}"
					]
				},
				"description": "Update loan types with invalid attribute in the request"
			},
			"response": []
		},
		{
			"name": "/loan-types-'invalid uuid'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cd25a299-06bc-4e66-b805-cc57e3a001ed",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"//verify headers",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"InterLib Loan updated%^!@@\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/123",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"123"
					]
				},
				"description": "Update loan types with invalid UUDI in the request"
			},
			"response": []
		},
		{
			"name": "/loan-types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "371e3470-8e58-41e0-a2ff-699020c7c5b7",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.response.to.have.status(\"No Content\");",
							"});",
							"",
							"//verify headers",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/{{currentUUID}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"{{currentUUID}}"
					]
				},
				"description": "Delete the loan type with a valid existing id"
			},
			"response": []
		},
		{
			"name": "/loan-types nullID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b355971-3735-4963-91ec-02297ef17f0c",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.response.to.have.status(\"No Content\");",
							"});",
							"",
							"//verify headers",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/{{nullId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"{{nullId}}"
					]
				},
				"description": "Delete auto generated ID by the folio with not providing the id in the request payload"
			},
			"response": []
		},
		{
			"name": "/loan-types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9bd2eb1-1577-4149-8e8a-3249c21770e9",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.response.to.have.status(\"No Content\");",
							"});",
							"",
							"//verify headers",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							"",
							""
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/{{booleanId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"{{booleanId}}"
					]
				},
				"description": "Delete loan with name true.Currently this is a bug so need to clear POST data .This test needs to be deleted after the bug fix"
			},
			"response": []
		},
		{
			"name": "/loan-types non existing ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e20965a7-b9c7-424a-9cdb-ec68a670747f",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.have.status(\"Not Found\");",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
							"",
							"});",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();",
							"",
							"",
							"pm.environment.unset(\"nullId\");"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/{{nullId}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"{{nullId}}"
					]
				},
				"description": "Delete auto generated ID by the folio with not providing the id in the request payload"
			},
			"response": []
		},
		{
			"name": "/loan-types Invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4909efaf-f63e-417a-96ba-36bce241544e",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"",
							"//verify headers",
							"pm.test(\"'Content-Type'header is present and has 'text/plain' value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"text/plain\");",
							"",
							"});",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();",
							"",
							"",
							"pm.environment.unset(\"nullId\");"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/123",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"123"
					]
				},
				"description": "Delete loan type with invalid id or non existing id in folio system"
			},
			"response": []
		},
		{
			"name": "/loan-types-'unknown id'",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d792472d-1ad8-4f97-8a8d-19bb71915adf",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"//verify headers",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.positive();",
							"",
							"pm.environment.unset(\"currentUUID\");",
							"pm.environment.unset(\"loanName\");",
							""
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\"name\":\"Lopadotemachoselachogaleokranioleipsanodrimhypotrimmatosilphioparaomelitokatakechymenokichlepikossyphophattoperisteralektryonoptekephalliokigklopeleiolagoiosiraiobaphetraganopterygon\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types/{{currentUUID}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types",
						"{{currentUUID}}"
					]
				},
				"description": "Update loan type with a non existing id"
			},
			"response": []
		},
		{
			"name": "/loan-types 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b4dd45b-2f69-46f9-a5ed-37f0fd114741",
						"type": "text/javascript",
						"exec": [
							"",
							"",
							"pm.test(\"Status is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.have.status(\"Unauthorized\");",
							"    pm.response.to.be.withBody;",
							"});",
							"",
							"",
							"//verify headers",
							"",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "64e94ce2-e482-46af-82cc-cc13dd711f31",
						"type": "text/javascript",
						"exec": [
							"pm.environment.unset('xokapitoken')"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"{{$guid}}\",\r\n  \"name\": \"randomname\"\r\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "Check for 403 forbidden error"
			},
			"response": []
		},
		{
			"name": "/loan-types 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7bd32d67-41f8-43b8-83b8-863a62cc7cef",
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response must be valid and have a body\", function () {",
							"    pm.response.to.be.withBody;",
							"   pm.response.to.have.status(\"Unauthorized\");",
							"});",
							"",
							"//verify headers",
							"const str =`new ${pm.variables.get(\"commonTests\").toString()}()`;",
							"",
							"let commonHeaderTests = eval(str);",
							"commonHeaderTests.negative();",
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-okapi-tenant",
						"value": "{{xokapitenant}}"
					},
					{
						"key": "x-okapi-token",
						"value": "{{xokapitoken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
					"protocol": "{{protocol}}",
					"host": [
						"{{url}}"
					],
					"port": "{{okapiport}}",
					"path": [
						"loan-types"
					]
				},
				"description": "Get list of all loan types"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4697b5a1-f66e-40af-b942-f28e835a023b",
				"type": "text/javascript",
				"exec": [
					"eval(pm.variables.get(\"retrieveSchemaFunction\"));",
					"",
					"if (pm.variables.has(\"loantype.schema\") === false) {",
					"    retrieveSchema(\"loantype.json\", function(err, res) {",
					"        console.log(res)",
					"        pm.variables.set(\"loantype.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"loantypes.schema\") === false) {",
					"    retrieveSchema(\"loantypes.json\", function(err, res) {",
					"        pm.variables.set(\"loantypes.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"error.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"error.schema\", function(err, res) {",
					"        pm.variables.set(\"error.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"parameters.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"parameters.schema\", function(err, res) {",
					"        pm.variables.set(\"parameters.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"errors.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"errors.schema\", function(err, res) {",
					"        pm.variables.set(\"errors.schema\", res);",
					"    });",
					"}",
					"",
					"if (pm.variables.has(\"metadata.schema\") === false) {",
					"    retrieveRAMLUtilsSchema(\"metadata.schema\", function(err, res) {",
					"        pm.variables.set(\"metadata.schema\", res);",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "bfdca0b7-ad61-4fb9-a592-b0db999c59f5",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7f6c08b6-4578-44d7-82c3-b0080e6033fc",
			"key": "commonTests",
			"value": "class Header {\n    positive() {\n         pm.test(\"'X-Okapi-Trace' header is present\", function () {\n        pm.response.to.have.header(\"X-Okapi-Trace\");\n    });\n    \n    pm.test(\"'accept' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"accept\");\n        pm.expect(pm.response.headers.get(\"accept\")).to.be.equal(\"*/*\"); \n    });\n    \n    pm.test(\"'accept-encoding' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"accept-encoding\");\n        pm.expect(pm.response.headers.get(\"accept-encoding\")).to.be.equal(\"gzip, deflate\");\n    });\n    \n    \n    pm.test(\"'connection' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"connection\");\n        pm.expect(pm.response.headers.get(\"connection\")).to.be.equal(\"keep-alive\");\n    });\n    \n    pm.test(\"'host' header is present\", function () {\n        pm.response.to.have.header(\"host\");\n    });\n    \n    pm.test(\"'x-okapi-request-id' header is present\", function () {\n        pm.response.to.have.header(\"x-okapi-request-id\");\n    });\n    \n    pm.test(\"'x-okapi-tenant' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"x-okapi-tenant\");\n        pm.expect(pm.response.headers.get(\"x-okapi-tenant\")).to.be.equal(pm.environment.get(\"xokapitenant\"));\n    });\n    \n    pm.test(\"'x-okapi-token' header is present and has correct value\", function () {\n        pm.response.to.have.header(\"x-okapi-token\");\n        pm.expect(pm.response.headers.get(\"x-okapi-token\")).to.be.equal(pm.environment.get(\"xokapitoken\"));\n    });\n    \n    pm.test(\"'x-okapi-url' header is present\", function () {\n        pm.response.to.have.header(\"x-okapi-url\");\n    });\n    \n    pm.test(\"'x-okapi-user-id' header is present\", function () {\n        pm.response.to.have.header(\"x-okapi-user-id\");\n    });\n}\n\nnegative(){\n    pm.test(\"'Transfer-Encoding' header is present and has 'chunked' value\", function () {\n        pm.response.to.have.header(\"Transfer-Encoding\");\n        pm.expect(pm.response.headers.get(\"Transfer-Encoding\")).to.be.equal(\"chunked\");\n    });\n    \n    pm.test(\"'X-Okapi-Trace' header is present\", function () {\n        pm.response.to.have.header(\"X-Okapi-Trace\");\n    });\n}\n\n}",
			"type": "string"
		},
		{
			"id": "7d31b2ec-e725-46eb-88a2-b9837ccd5850",
			"key": "mod-inventory-storage_version",
			"value": "v13.1.0",
			"type": "string"
		},
		{
			"id": "a2456171-f014-4ac7-9c93-9e34195d1323",
			"key": "raml-utils_version",
			"value": "df77247471a057320a018b80a0827cc9ef5c7999",
			"type": "string"
		},
		{
			"id": "94e24f12-125e-43ba-9105-454ec727d044",
			"key": "retrieveSchemaFunction",
			"value": "var retrieveSchema = function(schemaName, cb) {\n    pm.sendRequest({\n        url: \"https://raw.githubusercontent.com/folio-org/mod-inventory-storage/\" + pm.variables.get(\"mod-inventory-storage_version\") + \"/ramls/\" + schemaName,\n        method: 'GET',\n    }, function(err, res) {\n        if (err !== null) {\n            console.log(\"Schema retrieval error: \" + err);\n            cb(\"failed\", null);\n        } else {\n            if (res.code === 200) {\n                cb(null, res.json());\n            } else {\n                console.log(\"Schema retrieval falied: \" + res.reason());\n            cb(\"failed\", null);\n            }\n        }\n    });\n};\n\nvar retrieveRAMLUtilsSchema = function(schemaName, cb) {\n    pm.sendRequest({\n        url: \"https://raw.githubusercontent.com/folio-org/raml/\" + pm.variables.get(\"raml-utils_version\") + \"/schemas/\" + schemaName,\n        method: 'GET',\n    }, function(err, res) {\n        if (err !== null) {\n            console.log(\"Schema retrieval error: \" + err);\n            cb(\"failed\", null);\n        } else {\n            if (res.code === 200) {\n                cb(null, res.json());\n            } else {\n                console.log(\"Schema retrieval falied: \" + res.reason());\n            cb(\"failed\", null);\n            }\n        }\n    });\n};",
			"type": "string"
		}
	]
}