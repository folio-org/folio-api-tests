{
	"info": {
		"_postman_id": "b66c5724-5caa-4fde-85a6-75d2612785aa",
		"name": "okapi-discovery-modules",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "schemas",
			"description": null,
			"item": [
				{
					"name": "schema_deploymentdesclist populate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4072fc4a-13a7-4611-a950-e0b6f8d1a1dd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_deploymentdesclist_result\", responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/okapi-core/src/main/raml/{{schema_deploymentdesclist}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"okapi-core",
								"src",
								"main",
								"raml",
								"{{schema_deploymentdesclist}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "schema_deploymentdesc populate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0cc1c0e-e8e2-4c1f-a717-fa5f1fddab41",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_deploymentdesc_result\", responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/okapi-core/src/main/raml/{{schema_deploymentdesc}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"okapi-core",
								"src",
								"main",
								"raml",
								"{{schema_deploymentdesc}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "schema_launchdesc populate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f54f7d3-8023-4f38-aaff-558aaedcb41f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_launchdesc_result\", responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/okapi-core/src/main/raml/{{schema_launchdesc}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"okapi-core",
								"src",
								"main",
								"raml",
								"{{schema_launchdesc}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "schema_enventrylist populate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae8b143b-27fd-4b04-97b0-c9a8207a11a4",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_enventrylist_result\", responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/okapi-core/src/main/raml/{{schema_enventrylist}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"okapi-core",
								"src",
								"main",
								"raml",
								"{{schema_enventrylist}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "schema_enventry populate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7c5d1a7-7494-45d0-8efe-2059b8e8864f",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"GET schema_error OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"GET schema_error has JSON body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"pm.environment.set(\"schema_enventry_result\", responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{schema_loc}}/{{mod_name}}/{{mod_version}}/okapi-core/src/main/raml/{{schema_enventry}}",
							"host": [
								"{{schema_loc}}"
							],
							"path": [
								"{{mod_name}}",
								"{{mod_version}}",
								"okapi-core",
								"src",
								"main",
								"raml",
								"{{schema_enventry}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"description": null,
			"item": [
				{
					"name": "/authn/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var token = postman.getResponseHeader(\"x-okapi-token\")",
									"pm.environment.set(\"xokapitoken\", token);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"authn",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "modules",
			"description": null,
			"item": [
				{
					"name": "_/proxy/modules - setting module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71fdc20b-6316-4a89-8a40-db78b9fe9dcd",
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"pm.environment.set(\"newmoduleid\", response.id);",
									"",
									"pm.test(\"Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/proxy/modules : 201\");",
									"});",
									"",
									"pm.test(\"Location header is present \", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});",
									"",
									"pm.test(\"Location header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.equal(\"/_/proxy/modules/\" + pm.environment.get(\"newmoduleid\"));",
									"});",
									"",
									"pm.test('Results have expected key attributes', function() {",
									"  pm.expect(response).to.have.all.keys(\"id\", \"name\", \"requires\",\"provides\", \"launchDescriptor\");",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"discovery-module-test-basic-1.0.0\",\r\n  \"name\": \"Okapi test module\",\r\n  \"provides\": [\r\n    {\r\n      \"id\": \"discovery-module-test-basic\",\r\n      \"version\": \"2.2\",\r\n      \"handlers\": [\r\n        {\r\n          \"methods\": [ \"GET\", \"POST\" ],\r\n          \"pathPattern\": \"/dmtestb\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"requires\": [],\r\n  \"launchDescriptor\": {\r\n    \"exec\": \"java -Dport=%p -jar okapi-test-module/target/okapi-test-module-fat.jar\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "/_/discovery/nodes - getting node id and url",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "201357cd-6a40-44f3-ac19-bf3c1cc82e7f",
								"type": "text/javascript",
								"exec": [
									"let json = JSON.parse(responseBody);",
									"",
									"// Store the first node's values so we can use them in the upcoming tests",
									"pm.environment.set(\"nodeid\", json[0].nodeId);",
									"pm.environment.set(\"nodeurl\", json[0].url);",
									"",
									"pm.test(\"Status is 200\", function() {",
									"    pm.response.to.be.ok;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response contains valid data\", function() {",
									"    pm.response.",
									"        to.have.jsonBody(\"[0].nodeId\").and.",
									"        to.have.jsonBody(\"[0].url\");",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Okapi-Tenant",
								"value": "{{xokapitenant}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/nodes",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"nodes"
							]
						},
						"description": "Returns a list of nodes"
					},
					"response": []
				},
				{
					"name": "_/discovery/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba77dbe-94ca-49c4-94ec-d2524d285ad6",
								"type": "text/javascript",
								"exec": [
									"let json = pm.response.json();",
									"pm.test(\"Validate schema\", function() {",
									"    tv4.addSchema(\"DeploymentDescriptor.json\", JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"schema_launchdesc_result\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"schema_enventrylist_result\")));",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"schema_enventry_result\")));",
									"    pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"schema_deploymentdesclist_result\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/discovery/modules : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b5613a5-ded7-460b-8873-d58b938e2e13",
								"type": "text/javascript",
								"exec": [
									"let json = pm.response.json();",
									"",
									"pm.environment.set(\"newserviceid\", json.srvcId);",
									"pm.environment.set(\"newinstanceid\", json.instId);",
									"",
									"pm.test(\"Validate schema\", function() {",
									"     tv4.addSchema(\"DeploymentDescriptor.json\", JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")));",
									"     tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"schema_launchdesc_result\")));",
									"     tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"schema_enventrylist_result\")));",
									"     tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"schema_enventry_result\")));",
									"     pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")))).to.be.true;",
									"     pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Module created - Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/discovery/modules : 201\");",
									"});",
									"",
									"pm.test(\"Location header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.contain(pm.environment.get(\"newserviceid\"));",
									"});",
									"",
									"pm.test(\"Location header is present \", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a5a7e0d-ea5a-4adc-994b-831fc8110b0f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"srvcId\": \"{{newmoduleid}}\",\r\n  \"instId\": \"{{newmoduleid}}\",\r\n  \"url\": \"{{nodeurl}}/{{newmoduleid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules Existing module with new URL - expect failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c1cd402-21e2-4a28-813d-5bd2faeab66c",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Module created - Status is 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response body contains correct message\", function () {",
									"    pm.expect(pm.response.text()).to.contain(\"Duplicate instance \" + pm.environment.get(\"newinstanceid\") );",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a5a7e0d-ea5a-4adc-994b-831fc8110b0f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"srvcId\": \"{{newmoduleid}}\",\r\n  \"instId\": \"{{newmoduleid}}\",\r\n  \"url\": \"stuff/things\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules new instid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43f96d27-5b16-4395-93e5-530603141bd7",
								"type": "text/javascript",
								"exec": [
									"let json = pm.response.json();",
									"",
									"pm.environment.set(\"newserviceid2\", json.srvcId);",
									"pm.environment.set(\"newinstanceid2\", json.instId);",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    tv4.addSchema(\"DeploymentDescriptor.json\", JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"schema_launchdesc_result\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"schema_enventrylist_result\")));",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"schema_enventry_result\")));",
									"    pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Module created - Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/discovery/modules : 201\");",
									"});",
									"",
									"pm.test(\"Location header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.contain(pm.environment.get(\"newserviceid2\"));",
									"});",
									"",
									"pm.test(\"Location header is present \", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a5a7e0d-ea5a-4adc-994b-831fc8110b0f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"srvcId\": \"{{newmoduleid}}\",\r\n  \"instId\": \"foobadInstIdfoo3\",\r\n  \"url\": \"{{nodeurl}}/{{newmoduleid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules new instid with new URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d4e8aa0-66bd-4ee6-a9c2-1e68d2ce3e08",
								"type": "text/javascript",
								"exec": [
									"let json = pm.response.json();",
									"",
									"pm.environment.set(\"newserviceid3\", json.srvcId);",
									"pm.environment.set(\"newinstanceid3\", json.instId);",
									"",
									"pm.test(\"Validate schema\", function() {",
									"    tv4.addSchema(\"DeploymentDescriptor.json\", JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"schema_launchdesc_result\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"schema_enventrylist_result\")));",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"schema_enventry_result\")));",
									"    pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Module created - Status is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/discovery/modules : 201\");",
									"});",
									"",
									"pm.test(\"Location header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"Location\")).to.contain(pm.environment.get(\"newserviceid3\"));",
									"});",
									"",
									"pm.test(\"Location header is present \", function () {",
									"    pm.response.to.have.header(\"Location\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a5a7e0d-ea5a-4adc-994b-831fc8110b0f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"srvcId\": \"{{newmoduleid}}\",\r\n  \"instId\": \"foobadInstIdfooanother\",\r\n  \"url\": \"{{nodeurl}}/anotherurl\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules - duplicate entry - expect error",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bc9ab06-0519-45f1-b246-7fb3b846902a",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Module created - Status is 400\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});",
									"",
									"pm.test(\"Response body contains correct message\", function () {",
									"    pm.expect(pm.response.text()).to.contain(\"Duplicate instance \" + pm.environment.get(\"newinstanceid\") );",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a5a7e0d-ea5a-4adc-994b-831fc8110b0f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"srvcId\": \"{{newmoduleid}}\",\r\n  \"instId\": \"{{newmoduleid}}\",\r\n  \"url\": \"{{nodeurl}}/{{newmoduleid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules - verify module indeed enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4821860d-f868-4906-be40-7b9c065e7442",
								"type": "text/javascript",
								"exec": [
									"let json = pm.response.json();",
									"pm.test(\"Validate schema\", function() {",
									"    tv4.addSchema(\"DeploymentDescriptor.json\", JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"schema_launchdesc_result\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"schema_enventrylist_result\")));",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"schema_enventry_result\")));",
									"    pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"schema_deploymentdesclist_result\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok;",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/discovery/modules : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules/{{newserviceid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55b05ded-17ba-4fdc-8300-213852908389",
								"type": "text/javascript",
								"exec": [
									"let json = pm.response.json();",
									"pm.test(\"Validate schema\", function() {",
									"    tv4.addSchema(\"DeploymentDescriptor.json\", JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"schema_launchdesc_result\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"schema_enventrylist_result\")));",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"schema_enventry_result\")));",
									"    pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"schema_deploymentdesclist_result\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/discovery/modules/\"+ pm.environment.get(\"newserviceid\") + \" : 200\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules/{{newserviceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules",
								"{{newserviceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules/{{newserviceid}}/{{newinstanceid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3b96179-1075-4b65-a462-d99da749fbb1",
								"type": "text/javascript",
								"exec": [
									"let json = pm.response.json();",
									"pm.test(\"Validate schema\", function() {",
									"    tv4.addSchema(\"DeploymentDescriptor.json\", JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")));",
									"    tv4.addSchema(\"LaunchDescriptor.json\", JSON.parse(pm.variables.get(\"schema_launchdesc_result\")));",
									"    tv4.addSchema(\"EnvEntryList.json\", JSON.parse(pm.variables.get(\"schema_enventrylist_result\")));",
									"    tv4.addSchema(\"EnvEntry.json\", JSON.parse(pm.variables.get(\"schema_enventry_result\")));",
									"    pm.expect(tv4.validate(json, JSON.parse(pm.variables.get(\"schema_deploymentdesc_result\")))).to.be.true;",
									"    pm.expect(tv4.missing).to.be.empty;",
									"});",
									"",
									"pm.test(\"Status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.ok; ",
									"     pm.response.to.be.json; ",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(pm.environment.get(\"newserviceid\"));",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{newmoduleid}}\",\r\n  \"name\": \"Okapi api test module\",\r\n  \"provides\": [\r\n    {\r\n      \"id\": \"test-basic\",\r\n      \"version\": \"2.3\",\r\n      \"handlers\": [\r\n        {\r\n          \"methods\": [ \"GET\", \"POST\", \"DELETE\" ],\r\n          \"pathPattern\": \"/testb\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"requires\": [],\r\n  \"launchDescriptor\": {\r\n    \"exec\": \"java -Dport=%p -jar okapi-test-module/target/okapi-test-module-fat.jar\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules/{{newserviceid}}/{{newinstanceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules",
								"{{newserviceid}}",
								"{{newinstanceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules/{{newserviceid}}/{{newinstanceid}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b0f565f-adbb-4157-a5e4-e53a7acefe14",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Delete successful - Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(pm.environment.get(\"newserviceid\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules/{{newserviceid}}/{{newinstanceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules",
								"{{newserviceid}}",
								"{{newinstanceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove module that should not have been created thisisobviouslyanonexistantservice",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d438cbe3-6748-4ce1-b15b-34e247d8aa1d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Delete successful - Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(pm.environment.get(\"newinstanceid\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules/thisisobviouslyanonexistantservice/{{newinstanceid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules",
								"thisisobviouslyanonexistantservice",
								"{{newinstanceid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove new instid",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cde5f815-4308-4d3d-877a-f21002d5e8c8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Delete successful - Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(pm.environment.get(\"newserviceid2\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules/{{newserviceid2}}/{{newinstanceid2}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules",
								"{{newserviceid2}}",
								"{{newinstanceid2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove new instid with new URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a293f8cc-f089-4cbf-a322-e097699e8ffd",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Delete successful - Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"'X-Okapi-Trace' header is present \", function () {",
									"    pm.response.to.have.header(\"X-Okapi-Trace\");",
									"});",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(pm.environment.get(\"newserviceid3\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules/{{newserviceid3}}/{{newinstanceid3}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules",
								"{{newserviceid3}}",
								"{{newinstanceid3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/proxy/modules - deleting test module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8468727e-65da-490b-af80-be0c76bcfc68",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"discovery-module-test-basic-1.0.0\",\r\n  \"name\": \"Okapi test module\",\r\n  \"provides\": [\r\n    {\r\n      \"id\": \"discovery-module-test-basic\",\r\n      \"version\": \"2.2\",\r\n      \"handlers\": [\r\n        {\r\n          \"methods\": [ \"GET\", \"POST\" ],\r\n          \"pathPattern\": \"/dmtestb\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"requires\": [],\r\n  \"launchDescriptor\": {\r\n    \"exec\": \"java -Dport=%p -jar okapi-test-module/target/okapi-test-module-fat.jar\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/modules/{{newmoduleid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"modules",
								"{{newmoduleid}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bd57656c-5198-4c39-b96f-e0186ff986f9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cf56f0c5-ba81-43d4-b23f-ea265529da8a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "module - negative tests",
			"description": null,
			"item": [
				{
					"name": "_/discovery/modules - malformed json",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32c8a5a0-0dc5-4591-abec-d43757155c0f",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"  ",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"instId\": \"{{newinstanceid}}\",\n        \"srvcId\": \"{{newserviceid}}\",\n        \"nodeId\": \"10.0.2.15\",\n        \"url\": \"http://10.0.2.15:9151\",\n        \"descriptor\": {\n            \"dockerImage\": \"folioci/mod-circulation-storage:latest\",\n            \"dockerPull\": false,\n            \"dockerArgs\": {\n                \"HostConfig\": {\n                    \"PortBindings\": {\n                        \"8081/tcp\": [\n                        {\n                                \"HostPort\": \"%p\"\n                        }\n                    ]\n                }\n            }\n        }\n    }\n"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules -- unexpected character",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53036efd-16fa-428b-8b24-9402c7ef473d",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"instId\": \"ins\",\n        \"srvcId\": \n    }\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules -- missing id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c98141ef-2228-4770-90c9-300696a6c3a3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"    ",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"instId\": \"misio\"\r\n }"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules non-existing module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f709ca94-9a71-43e7-ba30-ab3b0a2a8ed8",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Module not found - Status is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"response have a body\", function () {",
									"     pm.response.to.be.withBody;",
									"     pm.expect(pm.response.text()).to.contain(\"not found\");",
									"});",
									"",
									"pm.test(\"X-Okapi-Trace header has expected value\", function () {",
									"    pm.expect(pm.response.headers.get(\"X-Okapi-Trace\")).to.contain(\"/_/discovery/modules\");",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a5a7e0d-ea5a-4adc-994b-831fc8110b0f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"srvcId\": \"{{$guid}}\",\r\n  \"instId\": \"fooBadfoo\",\r\n  \"url\": \"{{nodeurl}}/{{newmoduleid}}\"\r\n}"
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules/{{$guid}} -- nonexisting module",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a535671d-6820-48c1-a4c0-b2f675bced00",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Module not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules/{{$guid}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "_/discovery/modules -- serviceid foo does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eb79fa5-a1a2-40bb-b7af-c17fc910cbc9",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"srvcId foo not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"foo\");",
									"});",
									"",
									"",
									"//clear all environment variables at the end of the test",
									"pm.environment.unset(\"newmoduleid\");",
									"pm.environment.unset(\"nodeid\");",
									"pm.environment.unset(\"nodeurl\");",
									"pm.environment.unset(\"xokapitoken\");",
									"",
									"pm.environment.unset(\"newserviceid\");",
									"pm.environment.unset(\"newserviceid2\");",
									"pm.environment.unset(\"newserviceid3\");",
									"pm.environment.unset(\"newinstanceid\");",
									"pm.environment.unset(\"newinstanceid2\");",
									"pm.environment.unset(\"newinstanceid3\");",
									"",
									"pm.environment.unset(\"schema_deploymentdesclist_result\");",
									"pm.environment.unset(\"schema_deploymentdesc_result\");",
									"pm.environment.unset(\"schema_launchdesc_result\");",
									"pm.environment.unset(\"schema_enventrylist_result\");",
									"pm.environment.unset(\"schema_enventry_result\");",
									"//pm.environment.clear();"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-okapi-tenant",
								"value": "{{xokapitenant}}"
							},
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/discovery/modules/foo",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"discovery",
								"modules",
								"foo"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e6973dce-08ad-44bc-86cd-5c42e0e1afc3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0dc60a59-7e8e-46a9-a5ef-178a87af728e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "bfa9c876-760f-4f0c-9a91-0d9baa32f93f",
			"key": "mod_name",
			"value": "okapi",
			"type": "string"
		},
		{
			"id": "dc1d6eb1-4e4b-4135-990f-eaac341ed062",
			"key": "mod_version",
			"value": "v2.14.1",
			"type": "string"
		},
		{
			"id": "3309e17a-0d38-4899-8c11-8be4b9b73ecf",
			"key": "schema_loc",
			"value": "https://raw.githubusercontent.com/folio-org",
			"type": "string"
		},
		{
			"id": "ff5bb761-3d14-4f85-9494-cf36db017a7b",
			"key": "schema_deploymentdesclist",
			"value": "DeploymentDescriptorList.json",
			"type": "string"
		},
		{
			"id": "7000845f-d79d-47ff-a4df-c889f8222490",
			"key": "schema_deploymentdesc",
			"value": "DeploymentDescriptor.json",
			"type": "string"
		},
		{
			"id": "32b9e4ca-bed3-4621-bd7c-a3fbcd6b3abd",
			"key": "schema_launchdesc",
			"value": "LaunchDescriptor.json",
			"type": "string"
		},
		{
			"id": "1526313f-9572-445b-9426-c0fb50078e9d",
			"key": "schema_enventrylist",
			"value": "EnvEntryList.json",
			"type": "string"
		},
		{
			"id": "2319c961-5013-4018-b3f6-1f6d0509b84c",
			"key": "schema_enventry",
			"value": "EnvEntry.json",
			"type": "string"
		}
	]
}