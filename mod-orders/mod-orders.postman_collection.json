{
	"info": {
		"_postman_id": "0b76c335-5f82-4d93-bca5-dd120b5ee514",
		"name": "mod-orders",
		"description": "Tests for mod-orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Create tenant and enable modules",
					"item": [
						{
							"name": "Login by existing admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e09d38f3-91fa-47c8-aced-16a51857bf63",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-admin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{xokapitenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{  \r\n   \"username\":\"{{username}}\",\r\n   \"password\":\"{{password}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ce37199-b03c-42d9-b6fe-52af54900704",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"tenantData\", JSON.stringify(globals.testData.tenant));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0c61f1f1-01a4-4a5c-87c5-b4b3dcf35065",
										"exec": [
											"// In case the tenant was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Tenant created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-admin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{tenantData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable modules for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0e40a6ff-1fb2-4d21-889f-686dba2f093f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-orders\", bodyHandler);",
											"utils.getModuleId(\"mod-finance-storage\", bodyHandler);",
											"utils.getModuleId(\"mod-login\", bodyHandler);",
											"utils.getModuleId(\"mod-permissions\", bodyHandler);",
											"utils.getModuleId(\"mod-configuration\", bodyHandler);",
											"utils.getModuleId(\"mod-circulation\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3b72e276-fd0f-4060-b7fa-385ae703ba0d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled required modules\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create admin user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "84fffa12-ec0d-498d-9925-4ae09b8d4d07",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.admin.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7a9b0044-baf4-4fd3-a3c4-ef256287fd5b",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for admin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a81a092-30ba-4a0c-9c5f-f1aa70d54f0b",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "51528ac3-e83a-4930-846f-37aa19a93f54",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add all permissions to admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "220b1b01-5d86-4d21-8114-bafda5002c6e",
										"exec": [
											"pm.test(globals.testData.users.admin.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "63f71dbe-1417-43d0-bafc-315284966bac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let pmRq = {",
											"    url: utils.buildOkapiUrl('/perms/permissions?length=1000&query=(subPermissions=\"\" NOT subPermissions ==/respectAccents []) and (cql.allRecords=1 NOT childOf <>/respectAccents [])'),",
											"    method: \"GET\",",
											"    header: {\"X-Okapi-Tenant\": pm.variables.get(\"testTenant\")}",
											"};",
											"pm.sendRequest(pmRq, (err, res) => {",
											"    let userPermissions = globals.testData.users.admin.permissions;",
											"    userPermissions.permissions = res.json().permissions.map(perm => perm.permissionName);",
											"    pm.variables.set(\"userPermissions\", JSON.stringify(userPermissions));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Enable mod-authtoken for new tenant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bba5cf57-1c5b-4d4c-b31a-6e8fd517f418",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.getModuleId(\"mod-authtoken\", bodyHandler);",
											"",
											"var modulesToEnable = [];",
											"",
											"function bodyHandler(moduleId) {",
											"\tmodulesToEnable.push({",
											"\t\t\"id\" : moduleId,",
											"\t\t\"action\": \"enable\"",
											"\t});",
											"    pm.variables.set(\"modulesToEnable\", JSON.stringify(modulesToEnable));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "14eba718-ab90-49a3-a956-e35d165facbd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"postman.setNextRequest(null);",
											"pm.test(\"Enabled mod-finance with all dependencies\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"enabledModules\", pm.response.json());",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-admin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{modulesToEnable}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"proxy",
										"tenants",
										"{{testTenant}}",
										"install"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f609805-cddc-4bb3-b202-9013cefe1626",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-testAdmin\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "981269b6-361a-4084-b6ec-f433dc1e493d",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.admin.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order approve permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2dafce44-2381-49aa-a17d-4666ef7c410e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e1fc471c-81ea-43aa-83f6-adb4f6859365",
										"exec": [
											"pm.test(\"Permission is created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissionName\": \"orders.item.approve\",\r\n  \"displayName\": \"Permission to approve order\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create order unopen permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fbf00b4d-e211-4cfe-b75c-466947a1492a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "35c87925-45ba-49b4-be13-540672e44395",
										"exec": [
											"pm.test(\"Permission is created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"permissionName\": \"orders.item.unopen\",\r\n  \"displayName\": \"Permission to unopen order\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/permissions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"permissions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update configs",
					"item": [
						{
							"name": "Check configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "106cc63e-eab4-43e2-b819-923376d6af23",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-orders-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "953fc5fb-b4ef-4bf8-a641-c3a08c44cc13",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Check TENANT configs and update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e96dde3-fce9-41ca-b289-2782e7808ae1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testTenantConfigs = globals.testData.tenantConfig;",
											"let bodyTemplate = globals.testData.tenantConfig.bodyTemplate;",
											"",
											"let configs = [];",
											"pm.test(\"Storing current tenant configs\", function () {",
											"    pm.response.to.be.ok;",
											"",
											"    configs = pm.response.json().configs;",
											"    console.log(\"Original configs: \", configs);",
											"    pm.environment.set(\"mod-tenant-configs\", JSON.stringify(configs));",
											"});",
											"",
											"let configNamesToProcess = testTenantConfigs.configNames;",
											"console.log(\"Config codes to process: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    console.log(configName + \": \" + value);",
											"    utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-tenant-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "093f2a2a-ecbd-448a-88c1-0e497a1f8d3b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==TENANT",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==TENANT"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "65594318-1466-4f8e-ac83-9c20c32d3455",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e8275e19-66da-4e4d-b745-21f3725d6e7b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Load all schemas for validation",
					"item": [
						{
							"name": "Get schemas and setup env variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de714190-f6b4-452b-a553-b6711c49fded",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"pm.test(\"Module has schemas to load\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.have.jsonBody();\r",
											"\r",
											"    let schemas = pm.response.json();\r",
											"    pm.expect(schemas).to.not.be.empty;\r",
											"    traverse(pm.response.json());\r",
											"});\r",
											"\r",
											"function traverse(schemas) {\r",
											"    const timerId = setTimeout(() => { }, 60000);\r",
											"\r",
											"    var promises = schemas.map(path => fetchSchema(path));\r",
											"    Promise.all(promises)\r",
											"        .then(result => {\r",
											"            let failedSchemas = schemas.filter(path => !result.includes(path));\r",
											"            pm.test(\"All json schemas are loaded\", () => pm.expect(failedSchemas, failedSchemas.join()).to.be.empty);\r",
											"            clearTimeout(timerId);\r",
											"        })\r",
											"        .catch((err, path) => {\r",
											"            clearTimeout(timerId);\r",
											"            pm.test(\"One or more schema could not be loaded: \" + err, () => pm.expect.fail());\r",
											"            console.log(\"Failure to load \" + path, err);\r",
											"        });\r",
											"}\r",
											"\r",
											"function fetchSchema(path) {\r",
											"    let getRequest = buildGetSchemaRequest(path);\r",
											"\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.sendRequest(getRequest, (err, response) => {\r",
											"            if (!err) {\r",
											"                if (response.code === 200) {\r",
											"                    let content = replaceResponseRefWithName(response.text());\r",
											"                    let name = extractName(path);\r",
											"                    setEnvironmentVariable(name, content);\r",
											"                    resolve(path);\r",
											"                } else {\r",
											"                    resolve();\r",
											"                }\r",
											"            } else {\r",
											"                reject(err);\r",
											"            }\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"function setEnvironmentVariable(name, data) {\r",
											"    pm.environment.set(utils.schemaPrefix + name, data);\r",
											"}\r",
											"\r",
											"function extractName(url) {\r",
											"    return url.substring(url.lastIndexOf(\"/\") + 1);\r",
											"}\r",
											"\r",
											"function replaceResponseRefWithName(text) {\r",
											"    return text.replace(/\"\\$ref\":\"([^\"]+\\/)(?=.*(\\.json|\\.schema))/g, \"\\\"$ref\\\":\\\"\" + utils.schemaPrefix);\r",
											"}\r",
											"\r",
											"function buildGetSchemaRequest(path) {\r",
											"    let getRequest = utils.buildPmRequest(\"/_/jsonSchemas?path=\" + path, \"GET\");\r",
											"    getRequest.header['X-Okapi-Module-Id'] = pm.variables.get(\"modOrdersId\");\r",
											"    return getRequest;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c9b4025b-8d72-464f-b7c0-b7bd915ffdc4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"const moduleName = 'mod-orders';",
											"",
											"pm.sendRequest(buildPmRequest1(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/interfaces/_jsonSchemas\"), (err, response) => {",
											"    pm.test(\"jsonSchemas provided by \" + moduleName, function() {",
											"        pm.expect(err).to.equal(null);",
											"        pm.expect(response.text()).to.include(moduleName);",
											"        let moduleId = response.json().map(element => element.id).filter(modId => modId.includes(moduleName))[0];",
											"        pm.variables.set('modOrdersId', moduleId);",
											"    });",
											"});",
											"",
											"",
											"function buildPmRequest1(path) {",
											"    return {",
											"        url: utils.buildOkapiUrl(path),",
											"        method: \"GET\",",
											"        header: {",
											"            \"X-Okapi-Tenant\": pm.variables.get(\"xokapitenant\"),",
											"            \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
											"        }",
											"    };",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Module-Id",
										"type": "text",
										"value": "{{modOrdersId}}"
									},
									{
										"key": "X-Okapi-Tenant",
										"type": "text",
										"value": "{{testTenant}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/jsonSchemas",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"_",
										"jsonSchemas"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "334903e6-3fb5-4ba0-9649-efb4a5bf349f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32e83d3a-662c-402d-b497-e16c74d9c2f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare global data",
					"item": [
						{
							"name": "Institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b405568-94cc-447a-9666-8728f61ba777",
										"exec": [
											"pm.test(\"Record is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7314153b-1460-49c2-8158-f1c61a7358c9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \"Universitet\",\n    \"code\": \"TU\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/institutions",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Campus",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "986d4975-961d-4d3f-ba0a-ac3a1f48c065",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5319610-5ed2-4b14-a448-60e73a006d9f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"name\": \" Campus\",\n    \"code\": \"TC\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/campuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"campuses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Library",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0efc05a-885d-4a65-8cb5-69904a10ab77",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52c9d3f7-81e8-4d72-9fec-a1559975841f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"name\": \"Library\",\n    \"code\": \"TL\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/location-units/libraries",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"location-units",
										"libraries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Service point",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ef3cf67-acce-4c3f-bcde-e935ae3ef17d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"// Most of the request will fail if there is a problem with location",
											"postman.setNextRequest(null);",
											"pm.test(\"Storing active location\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    ",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"let newLocationId = pm.response.json().id;",
											"pm.environment.set(\"newLocationId\", newLocationId);",
											"",
											"globals.testData.receiving.bodyTemplate.toBeReceived[0].receivedItems[0].locationId = newLocationId;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b21908a-c03f-4400-bf13-2e3463974c98",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"name\": \"Service point\",\n    \"code\": \"TSP\",\n    \"discoveryDisplayName\": \"Service point 1\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/service-points",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"service-points"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d14f9e3d-fcee-4828-b974-e2ff66d4af22",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId1\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "27cb7b75-b32f-401e-9ceb-8d4c830cf3e3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"b32c5ce2-6738-42db-a291-2796b1c3c4c6\",\n    \"name\": \"Location 1\",\n    \"code\": \"LOC1\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e6a92ee-1ffa-4d8f-9f5e-692564988e0d",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId2\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff9ace54-5d44-4782-b253-187e88cfaab6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n    \"name\": \"Location 2\",\n    \"code\": \"LOC2\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Location 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16cd4f82-b821-4626-8de4-3f37b8707b7d",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"locationId3\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5675d840-d2d3-411b-a8ed-660009d3ee43",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"f17914b0-048a-42f2-b6c1-fc6f38edf157\",\n    \"name\": \"Location 3\",\n    \"code\": \"LOC3\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare vendors",
					"item": [
						{
							"name": "Post active vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14ccaba4-2955-4b38-af12-10be1b79ac11",
										"exec": [
											"pm.test(\"Storing active vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"activeVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "90aa20b4-d626-4de2-8a87-c3d25d4e7dfa",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test active vendor\",\n\t\"code\": \"TAV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Active\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post inactive vendor",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb68821e-dcaf-4183-b2d3-b9047438ed9f",
										"exec": [
											"pm.test(\"Storing inactive vendor\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});",
											"",
											"pm.environment.set(\"inactiveVendorId\", pm.response.json().id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd6d718e-c947-47d3-93b1-ec57d674dd69",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Test inactive vendor\",\n\t\"code\": \"TIV\",\n\t\"isVendor\": true,\n\t\"status\" : \"Inactive\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/organizations-storage/organizations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"organizations-storage",
										"organizations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare finance data",
					"item": [
						{
							"name": "Fiscal Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b009c3ce-56f4-48c0-b7a4-d80db2a2ed05",
										"exec": [
											"pm.test(\"Fiscal Year is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "258866b3-0130-492a-afdd-1e80bf52cf34",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\n  \"name\": \"TST-Fiscal Year 2020\",\n  \"code\": \"FY2020\",\n  \"description\": \"January 1 - December 30\",\n  \"periodStart\": \"2020-01-01T00:00:00Z\",\n  \"periodEnd\": \"2020-12-30T23:59:59Z\",\n  \"series\": \"FY\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/fiscal-years",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"fiscal-years"
									]
								},
								"description": "Creates a Fiscal Year record which will be used to create a ledger record"
							},
							"response": []
						},
						{
							"name": "Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc3ce1f7-621a-41f6-8b68-992c63dd0126",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"ledgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "882bbbcb-f93d-47bc-b409-8f8337f3cad8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"5e4fbdab-f1b1-4be8-9c33-d3c41ec9a695\",\r\n\t\"code\": \"TST-LDG\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Test ledger\",\r\n    \"fiscalYearOneId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n    \"restrictEncumbrance\": false\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10e62f35-340d-40ac-a460-b31f07ea8f55",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"fundId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f994b9a-827c-4d72-9146-d9a8f1fd2eba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"TST-FND\",\r\n  \"description\": \"Fund for orders API Tests\",\r\n  \"externalAccountNo\": \"1111111111111111111111111\",\r\n  \"fundStatus\": \"Active\",\r\n  \"ledgerId\": \"{{ledgerId}}\",\r\n  \"name\": \"Fund for orders API Tests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5cfeefe-4119-4e04-87bf-1a834ebcb509",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"budgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "896cc910-7aa7-42a1-8f9a-95e932701f9b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Active\",\r\n  \"fundId\": \"{{fundId}}\",\r\n  \"name\": \"Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n  \"allocated\": 9999999\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Fund2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bf9f8d7-cf17-4026-a932-eb320a7cc578",
										"exec": [
											"var id = pm.response.json().fund.id",
											"var code = pm.response.json().fund.code",
											"pm.environment.set(\"fundId-2\", id);",
											"pm.environment.set(\"fundCode-2\", code);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ea990936-ed81-4cb4-81e5-f6b738374575",
										"exec": [
											"pm.environment.set(\"fundCode-2\", \"first\" + Math.floor(Math.random() * 999999));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fund\": {\n        \"fundStatus\": \"Active\",\n        \"name\": \"{{fundCode-2}}\",\n        \"code\": \"{{fundCode-2}}\",\n        \"externalAccountNo\": \"tttt\",\n        \"ledgerId\": \"{{ledgerId}}\"\n    },\n    \"groupIds\": []\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Budget2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33027253-c6c2-493f-b9c4-60778c913740",
										"exec": [
											"var id = pm.response.json().id",
											"pm.environment.set(\"budgetId-2\", id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "54c60308-fdce-4cce-89ed-6d58858835a2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fiscalYearId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\n    \"budgetStatus\": \"Active\",\n    \"allowableExpenditure\": 100,\n    \"allowableEncumbrance\": \"\",\n    \"allocated\": \"100\",\n    \"fundId\": \"{{fundId-2}}\",\n    \"name\": \"{{fundCode-2}}-FY2020\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Prepare inventory types",
					"item": [
						{
							"name": "Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e9b2e6e-4a8d-47e8-9424-6273ca1bad9c",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"identifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5ed2bb63-c4ff-4c22-b345-050eef50cf66",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0010-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-identifierTypeName}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "ISBN Identifier Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93583210-16ad-4bc3-a852-096e4b9ed7db",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"isbnIdentifierTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65b5e260-f850-4ace-abad-715b586fe6c7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n  \"name\": \"ISBN\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/identifier-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"identifier-types"
									]
								},
								"description": "Gets or creates ISBN identifier type to be used for ISBN validation"
							},
							"response": []
						},
						{
							"name": "Instance Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6938cfd-3025-4fc3-9d5d-c675574738d6",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "690eadc9-49f9-4815-9bd7-12a1b9f3e094",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceTypeCode}}\",\r\n  \"name\": \"{{inventory-instanceTypeCode}}\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Type - zzz",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "478a7c1b-88f2-4dcc-a127-398ea4208aa0",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "67b08143-771b-4a9c-8083-cd5a9eb6149c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"30fffe0e-e985-4144-b2e2-1e8179bdb41f\",\r\n  \"code\": \"zzz\",\r\n  \"name\": \"unspecified\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-types"
									]
								},
								"description": "Gets or creates if not yet exists test instance type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Instance Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cf4cea4-e3ed-4d08-a00b-0f44712a0013",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"instanceStatusId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c65a3cdd-c283-4b6d-8e04-7aafe0cb1f81",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0001-1111-aaaa-6f7264657273\",\r\n  \"code\": \"{{inventory-instanceStatusCode}}\",\r\n  \"name\": \"{{inventory-instanceStatusCode}}\",\r\n  \"source\": \"apiTests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"instance-statuses"
									]
								},
								"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Loan Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39c90b81-132c-4263-9084-25fcef23d6eb",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"loanTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f662a864-ffc4-45bf-923e-9461efeba7be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\",\r\n  \"name\": \"{{inventory-loanTypeName}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"loan-types"
									]
								},
								"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Material Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92ebac14-9b5a-4427-aa58-2e91da804f1e",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"materialTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2dd94ac-38ec-45bd-b3f4-56d9ac83d6ef",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\r\n  \"name\": \"materialTypeName\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/material-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"material-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Contributor name type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de39b7b7-cd37-4849-a7a6-8ccf69c59b0f",
										"exec": [
											"pm.test(\"Record is created\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"contributorNameTypeId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bf00510a-ab84-431d-b7b0-95e61d9c4155",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6d6f642d-0005-1111-aaaa-6f7264657273\",\r\n  \"name\": \"contributorNameType\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/contributor-name-types",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"contributor-name-types"
									]
								},
								"description": "Gets or creates if not yet exists test meterial type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create regular user",
					"item": [
						{
							"name": "Patron Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "30165aac-82bd-4bb3-b874-a34b2f518a4a",
										"exec": [
											"let user = globals.testData.users.regular.user;",
											"user.patronGroup",
											"pm.variables.set(\"userData\", JSON.stringify(user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b375f564-ab4e-4073-be5e-8cca083a8782",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"_patron_group_id\", pm.response.json().id)",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"group\" : \"Test Patron Group\",\n    \"desc\" : \"Test Patron Group Member\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/groups",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b085dffd-3e3c-4c28-9d67-1b8088ecf46d",
										"exec": [
											"let user = globals.testData.users.regular.user;",
											"user.type = \"patron\",",
											"user.active = true,",
											"user.barcode = \"236964750970123\",",
											"user.patronGroup = pm.environment.get(\"_patron_group_id\");",
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.regular.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4003b281-e666-4e5f-a98e-260601e1bad5",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54a2de36-e19c-4b61-b8ef-4c6fd93c9735",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52c86d38-c7f6-4380-b11c-0858ef19ac03",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d8a54dd-c1df-4104-9113-c7617d6082e9",
										"exec": [
											"pm.test(globals.testData.users.regular.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d16451-7748-4317-bf72-0f03d47063dc",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.regular.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b86d856-59f8-4f52-9f6b-2a34667102b3",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a09c1ce2-4466-47a1-945d-163081abd52a",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.regular.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create restricted user",
					"item": [
						{
							"name": "Create user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "56df7d2e-911d-4deb-8779-f23d5a90cb47",
										"exec": [
											"pm.variables.set(\"userData\", JSON.stringify(globals.testData.users.restricted.user));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a4823d7-e2c7-4061-bf6c-946f867aa2aa",
										"exec": [
											"// In case the user was not created no sense to run further requests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"User created - Expected Created (201)\", () => {",
											"    pm.response.to.have.status(201);",
											"",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userData}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create credentials for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f20b79b-26ab-4247-bc2e-89995f359f7b",
										"exec": [
											"pm.test(globals.testData.users.restricted.user.username + \" user's credentials created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c1e651ee-17a9-4c75-8bf4-911554d0ed45",
										"exec": [
											"pm.variables.set(\"userCreds\", JSON.stringify(globals.testData.users.restricted.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/credentials",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"credentials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add orders permissions to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a814ae3-0c87-472a-a8b1-974edfde8296",
										"exec": [
											"pm.test(globals.testData.users.restricted.user.username + \" user's permissions created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1a98f300-4b6c-4409-aed0-242afdb83c61",
										"exec": [
											"pm.variables.set(\"userPermissions\", JSON.stringify(globals.testData.users.restricted.permissions));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "content-type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{userPermissions}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/perms/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"perms",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login by new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa252327-e13c-49d9-a051-b405dd4f4aea",
										"exec": [
											"// In case the new user cannot be logged in no sense to run further tests",
											"postman.setNextRequest(null);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    // All is okay so running further requests",
											"    postman.setNextRequest();",
											"});",
											"",
											"pm.environment.set(\"xokapitoken-restricted\", postman.getResponseHeader(\"x-okapi-token\"));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "752705a5-2882-4e1f-9738-d7295a75d5ff",
										"exec": [
											"pm.variables.set(\"newUserCreds\", JSON.stringify(globals.testData.users.restricted.credentials));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{newUserCreds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/authn/login",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"authn",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9094b0c1-8360-416d-a33a-2ba32285fdb1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51fc44bf-bf58-42f6-90a0-900e8c8c57ee",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Empty Order",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9df58db8-f691-49fa-9eb2-a208b410affe",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4c44f23f-a5a8-42e9-bc26-bdc8360d40ab",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(0);",
											"    });",
											"",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"    ",
											"    pm.test(\"MODORDERS-145: Verify status to be Pending\", function(){",
											"        pm.expect(jsonData.workflowStatus).to.equal(\"Pending\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get created empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6a5f20b-7e1c-4c5f-9569-f2ee35114230",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "365a13e2-1f7d-4f68-9991-2eb75fd717c1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});",
											"",
											"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
											"    let order = pm.response.json();",
											"    pm.expect(order.approved).to.be.false;",
											"    pm.expect(order.reEncumber).to.be.false;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Update order with new poNumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dbde0e4b-41ee-4828-8c03-0642cd6b1dec",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get Order and update poNumber only (MODORDERS-150)",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"    let order  = res.json();",
											"    let number = \"UPD\" + order.poNumber;",
											"    order.poNumber = number;",
											"    pm.variables.set(\"updatedNumber\", number);",
											"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6ac046f-3560-4142-b61b-724296b298bd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"",
											"    // The test can be run only if update succeded",
											"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.emptyOrderId, (err, res) => {",
											"        pm.test(\"Verify order updated with new PO number\", () => pm.expect(res.json().poNumber).to.equal(pm.variables.get(\"updatedNumber\")));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "Verify [MODORDERS-150](https://issues.folio.org/browse/MODORDERS-150) - the order can be updated if created without workflow status"
							},
							"response": []
						},
						{
							"name": "Get empty order by order id and validate totalItems",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4d53571b-30c7-4222-969d-eb460c75df92",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "984791e3-5796-4579-bbf3-43712969360b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate PO totalItems\", function () {",
											"    var order = pm.response.json();",
											"    pm.expect(order.totalItems).to.equal(0);",
											"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3652236a-9534-47fc-be68-6f49ee20ada4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e9d9ec41-a857-409c-9e3e-43aefb4fba6f",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"description": "Verifies that an order can be created and deleted without order lines",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8d14cb17-fd36-492f-870e-c664448efba2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cbe89c82-97e2-45ff-9528-cb7c10aa8af0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending Order",
					"item": [
						{
							"name": "Create Pending order",
							"item": [
								{
									"name": "Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "105a29ce-1ad3-4eec-b532-0dd3e28ff69b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "44153cac-6674-40db-a5ac-dae54436f594",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"utils.verifyOrderCalculatedInfo(jsonData);",
													"",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"completeOrderId\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.globals.set(\"completeOrderPoNumber\",\"\\\"\"+jsonData.poNumber+\"\\\"\");",
													"    pm.expect(jsonData.notes).to.exist;",
													"    pm.expect(jsonData.vendor).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_listed_print_monograph}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Create order in Pending status without material types",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4481d07c-1106-4b36-a00d-66d16ec854be",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_po_line_without_material_type.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.compositePoLines[0].alerts = [];",
													"    order.compositePoLines[0].reportingCodes = [];",
													"    pm.globals.set(\"create_order_po_line_without_material_type\", JSON.stringify(order));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "645121e6-94f8-45a1-b76a-fe150d360e8c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    console.log(jsonData)",
													"    pm.globals.set(\"order_po_line_without_material_type\", jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{create_order_po_line_without_material_type}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update second line and delete",
							"item": [
								{
									"name": "Update second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1073abb8-013d-4a0e-89d2-261131bc370c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.purchaseOrderId = globals.completeOrderId;",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a3dea1d6-241d-4a40-98a0-fa685c67562d",
												"exec": [
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Verifies that second line can be sussessfully updated"
									},
									"response": []
								},
								{
									"name": "Get second line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "532e3f1b-e1ba-4617-9145-fd0c00649b83",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c13c5d5-b778-47f4-89e5-4e6cfc529aa6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete second line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d86859c3-36c3-4175-a3f8-3f89a162d981",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38863e06-6588-407d-a75d-5ca9a2c73fbc",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8c61bc84-4dae-4967-92ba-15863c27e46e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "131367af-730b-4192-ac78-86651e165997",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"1 PO Line exist\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200 and verifies that only one line exists"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add empty line, update and delete",
							"item": [
								{
									"name": "Add empty line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "190e4ba1-6c97-4504-9b20-2e34a1f551ba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.globals.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b807b4f5-5206-488b-a02e-997132fdaab8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/order-lines requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3b8bf0ee-6310-4e16-91f1-045b35e5a9d2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "87a94429-14fe-4540-9721-23de05e0e1fd",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update empty line with complex content without location and createInventory=Instance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d818533e-0281-4fbf-b075-de7326030e8e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/compositeLines/fca5fa9e-15cb-4a3d-ab09-eeea99b97a47.json\", function (err, res) {",
													"    var poline = utils.preparePoLine(res.json());",
													"    poline.physical.createInventory = \"Instance\";",
													"    poline.locations = [];",
													"    poline.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"    poline.isPackage = false;",
													"    poline.instanceId = \"5bf370e0-8cca-4d9c-82e4-5170ab2a0a39\";",
													"    pm.variables.set(\"po_line_updated_content\", JSON.stringify(poline));",
													"});",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5169363c-e0f4-4401-bd8a-4849741350ea",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 204\", function() {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Status code is 204\", function() {",
													"    utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + pm.variables.get(\"poLineId\"), (err, res) => {",
													"        pm.test(\"Verify title updated with new instanceId\", () => pm.expect(res.json().titles[0].instanceId).to.equal(\"5bf370e0-8cca-4d9c-82e4-5170ab2a0a39\"));",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_updated_content}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Validates that empty line can be updated with complex content"
									},
									"response": []
								},
								{
									"name": "Get order and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "663f90a6-23e7-45d4-8e33-f526496579c0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1779dba5-4ba8-41b3-8709-89e105051351",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "`GET /orders/composite-orders/<id>` request and validate content"
									},
									"response": []
								},
								{
									"name": "Delete last line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5a3b3826-4af7-44a0-948e-ac80f62e62a4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId(true));",
													"",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0d1222f4-41a7-4e60-a3a6-055bacb927d8",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 204"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Add line and update content",
							"item": [
								{
									"name": "Add line with complex content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e1bd23a4-d9e2-4fb7-8e29-d05050a67508",
												"exec": [
													"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"// make sure there is no id provided",
													"delete line.id;",
													"line.poLineNumber += \"1\";",
													"line.poLineDescription += \" another PO Line\";",
													"line.eresource.createInventory = \"Instance\";",
													"line.locations.pop();",
													"line.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
													"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3554b7e3-fc9c-4bb0-b88c-4a246e1c9be1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"    ",
													"    utils.rememberPoLineId(jsonData);",
													"});",
													"",
													"pm.test(\"Order line has required and optional fields\", function(){",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_listed_print_monograph}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										},
										"description": "GET /orders/id/lines/id requests that return 201"
									},
									"response": []
								},
								{
									"name": "Get added line and validate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "816a274b-ceb7-46dd-9a53-40ef725c4b6e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "727b90e2-c1b9-46a1-b506-3ef79e4fc5ba",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineSubObjetcsPresence(jsonData);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6f506ebd-e938-499f-ad1a-603c5350abcf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f86b4557-63c1-455d-9ca8-6660ef4c517e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Multiple notes exist\", function () {",
													"    pm.expect(jsonData.notes).to.have.length >= 1;",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"2 PO Lines exist\", function () {",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update last line with empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "93871699-2d81-4fe3-ac38-24dd87ceb4ac",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var poline = utils.buildPoLineWithMinContent(globals.completeOrderId);",
													"",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"pm.variables.set(\"newEmptyPoLine\", JSON.stringify(poline));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8bb51a71-931b-4175-b7bd-1569815f85c8",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{newEmptyPoLine}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get last line and verify empty content",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c29edc5-0d36-41c9-8c56-e5b7099dd29e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "80c18fdd-65a4-4417-abe0-af386358e979",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"PO Line has minimal content\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.variables.get(\"poLineId\"));",
													"    pm.expect(jsonData.purchaseOrderId).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validatePoLineWithMinimalContent(jsonData);",
													"});",
													"",
													"pm.test(\"MODORDSTOR-98: Validate fields with default value\", function () {",
													"    pm.expect(jsonData.checkinItems, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.collection, \"collection should have default value\").to.eql(false);",
													"    pm.expect(jsonData.rush, \"rush should have default value\").to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate schema for composite_po_line.json\", function () {",
													"    utils.validatePoLineAgainstSchema(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "GET /orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b5c37c9a-e8ed-497c-a305-4a36a77e5c38",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "941d8da3-5d7a-48e4-bfed-fda2cdc9afe1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": " Add expected receipt date to PO Line",
							"item": [
								{
									"name": "Update last line with expected receipt date",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7f75c9ed-9859-4e9c-90a8-e543aef0a266",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"// Using id of the last PO Line",
													"let poLineId = utils.getLastPoLineId();",
													"pm.variables.set(\"poLineId\", poLineId);",
													"utils.sendGetRequest(\"/orders/order-lines/\" + poLineId, (err, res) => {",
													"    // Get physical object",
													"    let compositePoLine = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
													"    let physical = compositePoLine.physical;",
													"    // make sure there is no id provided",
													"    delete physical.id;",
													"",
													"    // Get current date and add 1 month",
													"    let expectedReceiptDate = moment().utc().add(1, 'month').format();",
													"    pm.variables.set(\"expectedReceiptDate\", expectedReceiptDate);",
													"    physical.expectedReceiptDate = expectedReceiptDate;",
													"",
													"    let poLine  = res.json();",
													"    poLine.physical = physical;",
													"    poLine.locations = [compositePoLine.locations[0]];",
													"    pm.variables.set(\"updated_po_line\", JSON.stringify(poLine));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46ee7894-d410-4933-af3e-7401c6e4388f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let moment = require('moment');",
													"",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"// Get updated PO Line",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.variables.get(\"poLineId\"), function (err, res) {",
													"    pm.test(\"PO Line updated with expected receipt date\", function () {",
													"        let poLine  = res.json();",
													"        // Dates should be in the same format",
													"        let expectedReceiptDate = moment(pm.variables.get(\"expectedReceiptDate\")).utc().format();",
													"        let actualDate = moment(poLine.physical.expectedReceiptDate).utc().format();",
													"",
													"        pm.expect(actualDate).to.equal(expectedReceiptDate);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updated_po_line}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineId}}"
											]
										},
										"description": "Gets content of last PO Line and updates it adding expected receipt date"
									},
									"response": []
								}
							],
							"description": "[MODORDERS-135](https://issues.folio.org/browse/MODORDERS-135)\n\nAdd an `expectedReceiptDate` field to the physical sub-object.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "168129ad-753c-40cd-ac79-c3942e0e481d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c68313b5-0b19-4c2f-8d42-8ab2be0b48ff",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update order",
							"item": [
								{
									"name": "Update order leaving one line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c9278599-e545-4c27-9896-71da6db348a2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
													"",
													"let completePolineIds = pm.globals.get(\"completePolineIds\") ? JSON.parse(pm.globals.get(\"completePolineIds\")) : [];",
													"utils.deleteTitlesByLineId(completePolineIds[completePolineIds.length - 2]);",
													"",
													"pm.variables.set(\"listUnitPriceUpdate\", 537.96);",
													"pm.variables.set(\"discountUpdate\", 19.84);",
													"pm.variables.set(\"discountTypeUpdate\", \"percentage\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 9);",
													"pm.variables.set(\"currencyUpdate\", \"BYN\");",
													"",
													"// Expected PO Line's total based on values above will be 3881.058624 and rounded to value below",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 3881.06);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2958a4ab-f107-4398-a93b-9c2c6d8333b4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"",
													"    // Retrieve order to verify updates",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        var order = {};",
													"         ",
													"        pm.test(\"Order retrieved after update\", function () {",
													"            pm.expect(err).to.equal(null);",
													"            pm.expect(res.code).to.eql(200);",
													"            pm.expect(res.json()).to.exist;",
													"            order = res.json();",
													"        });",
													"        ",
													"        pm.test(\"Order now has 1 PO Line\", function () {",
													"            utils.validatePoLines(order, 1);",
													"        });",
													"        ",
													"        pm.test(\"Validate poLineNumber after update\", function() {",
													"            utils.validatePoLinesNumber(order);",
													"        });",
													"        ",
													"        let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"",
													"        // The PO has one line so its total price equals to PO Line's total",
													"        utils.verifyOrderCalculatedInfo(order);",
													"",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            let cost = order.compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.currency).to.equal(pm.variables.get(\"currencyUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": \"268758test2\",\n  \"reEncumber\": false,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"id\": \"{{poLineId}}\",\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"{{currencyUpdate}}\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityElectronic\": 0,\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204\nReplaces content leaving only one line."
									},
									"response": []
								},
								{
									"name": "Update order changing POL cost again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "82b92474-79a4-4b09-a378-211c94a58075",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"listUnitPriceUpdate\", 10.0);",
													"pm.variables.set(\"additionalCostUpdate\", 5.0);",
													"pm.variables.set(\"discountUpdate\", 15.01);",
													"pm.variables.set(\"discountTypeUpdate\", \"amount\");",
													"pm.variables.set(\"quantityPhysicalUpdate\", 21);",
													"",
													"utils.deleteTitlesByLineId(pm.variables.get(\"poLineId\"));",
													"",
													"// Expected PO Line's total based on values above",
													"pm.variables.set(\"expectedPoLineEstimatedPrice\", 199.99);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "59687cfc-75f5-4c3a-a4bc-0008d88c5678",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"    utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"        pm.test(\"Validate PO Line's Cost updates\", function() {",
													"            pm.expect(res.json()).to.exist;",
													"            pm.expect(res.json().compositePoLines).to.have.lengthOf(1);",
													"",
													"            let expectedTotalPrice = pm.variables.get(\"expectedPoLineEstimatedPrice\");",
													"            // The PO has one line so its total price equals to PO Line's total",
													"            utils.verifyOrderCalculatedInfo(res.json(), expectedTotalPrice);",
													"",
													"            let cost = res.json().compositePoLines[0].cost;",
													"            pm.expect(cost.listUnitPrice).to.equal(pm.variables.get(\"listUnitPriceUpdate\"));",
													"            pm.expect(cost.additionalCost).to.equal(pm.variables.get(\"additionalCostUpdate\"));",
													"            pm.expect(cost.discount).to.equal(pm.variables.get(\"discountUpdate\"));",
													"            pm.expect(cost.discountType).to.equal(pm.variables.get(\"discountTypeUpdate\"));",
													"            pm.expect(cost.quantityPhysical).to.equal(pm.variables.get(\"quantityPhysicalUpdate\"));",
													"            pm.expect(cost.poLineEstimatedPrice).to.equal(expectedTotalPrice);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"orderType\": \"One-Time\",\n  \"poNumber\": {{completeOrderPoNumber}},\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 100.99,\n  \"vendor\": \"d0fb5aa0-cdf1-11e8-a8d5-f2801f1b9fd1\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [\n        {\n          \"alert\": \"Receipt overdue\"\n        }\n      ],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000Z\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": {{listUnitPriceUpdate}},\n        \"additionalCost\": {{additionalCostUpdate}},\n        \"discount\": {{discountUpdate}},\n        \"discountType\": \"{{discountTypeUpdate}}\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}},\n        \"currency\": \"USD\"\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"9780764354113\",\n            \"productIdType\": \"{{identifierTypeId}}\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000Z\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000Z\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0,\n          \"encumbrance\": \"eb506834-6c70-4239-8d1a-6414a5b08ac3\"\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"fb7b70f1-b898-4924-a991-0e4b6312bb5f\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0,\n          \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\"\n        }\n      ],\n      \"locations\": [{\n        \"locationId\": \"eb2d063a-5b4c-4cab-8db1-5fc5c5941df6\",\n        \"quantityPhysical\": {{quantityPhysicalUpdate}}\n      }],\n      \"orderFormat\": \"Physical Resource\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"volumes\": [\"1\"],\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000Z\",\n        \"materialType\": \"{{materialTypeId}}\"\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"268758-03\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"receiptDate\": \"2018-10-09T00:00:00.000Z\",\n      \"receiptStatus\": \"Awaiting Receipt\", \n      \"reportingCodes\": [\n        {\n          \"code\": \"CODE1\",\n          \"description\": \"ABCDEF\"\n        },\n        {\n          \"code\": \"CODE2\",\n          \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n        },\n        {\n          \"code\": \"CODE3\",\n          \"description\": \"ABCDE\"\n        }\n      ],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      }\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update PO number",
							"item": [
								{
									"name": "Update order with new poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "724ccc31-32d1-4d53-8954-f3e283025eaa",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"// Get Order and update poNumber only",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOrderId, (err, res) => {",
													"    let order  = res.json();",
													"    order.poNumber = \"newponumber\";",
													"    delete order.totalItems;",
													"    pm.variables.set(\"updatedOrder\", JSON.stringify(order));",
													"});",
													"",
													"pm.globals.set(\"poNumber\", \"newponumber\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b236509b-f63d-4bd4-9ebd-f465ea8f1989",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedOrder}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order and validate poNumber",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2715729e-1c08-4dc1-b75c-17c173d691e6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "12df1afb-3503-4b7a-9b8c-dfff20f3051f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"Validate poNumber\", function() {",
													"    pm.expect(jsonData.poNumber).to.equal(pm.globals.get(\"poNumber\"));",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order again",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "38fa984c-701b-4050-b243-84d65e47b8a6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "91a8d93b-8f9f-4b8e-849b-51d98fc0f440",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"approved\": false,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"{{poNumber}}\",\n    \"orderType\": \"One-Time\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 99.99,\n    \"totalItems\": 2,\n    \"vendor\": \"168f8a86-d26c-406e-813f-c7527f241ac3\",\n    \"workflowStatus\": \"Pending\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get order and validate line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0bc12be1-9515-4e78-a0f4-15a0a04b87b8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3502952f-da2d-4af3-b593-4e3ff372f69c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate schema for composite_purchase_order.json\", function () {",
													"    pm.expect(jsonData.id).to.equal(pm.globals.get(\"completeOrderId\"));",
													"    utils.validateOrderAgainstSchema(jsonData);",
													"});",
													"",
													"pm.test(\"1 po line exists\", function () {",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													"",
													"pm.test(\"Validate poLineNumber\", function() {",
													"    utils.validatePoLinesNumber(jsonData);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Update order summary leaving only PO number",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9287985f-219f-433d-b57a-0d09964974c6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7bbe826e-5a94-4e32-afb0-a5f690ff08ed",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});   ",
													"",
													"",
													"pm.test(\"'X-Okapi-Trace' header is present\", function () {",
													"    pm.response.to.have.header(\"X-Okapi-Trace\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"poNumber\": \"{{poNumber}}\",\n\t\"orderType\": \"One-Time\",\n\t\"vendor\": \"{{activeVendorId}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "PUT /orders/composite-orders/id requests that return 204"
									},
									"response": []
								},
								{
									"name": "Get updated order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c30ca887-0ea5-4a07-9d5f-e7bff361be69",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3c128edb-9811-450c-9473-f11febce528b",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Validate that response contains default fields on creating an empty order\", function () {",
													"    pm.expect(jsonData.notes).to.have.lengthOf(0);",
													"    pm.expect(jsonData.compositePoLines).to.have.lengthOf(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{completeOrderId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2686f444-bd3e-4ffd-9bd3-6351e12978db",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2c4fb43c-1a74-4748-8b2f-0c1ee9abc26f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create another Pending order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c1904e91-e56f-4ae7-aa77-9c078db4b2ac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let order = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Pending\";",
											"    // Setting create inventory to None for PO Line with P/E Mix format",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.poNumber = \"1MIX1EL1PHYS1OTH\";",
											"",
											"    // add billTo an shipTo properties",
											"    utils.sendGetRequest(\"/configurations/entries?query=module==TENANT and code==\" + globals.testData.tenantConfig.bodyTemplate.code, (congifErr, configRes) => {",
											"        let addressConfId = configRes.json().configs[0].id;",
											"        order.billTo = addressConfId;",
											"        order.shipTo = addressConfId;",
											"        pm.variables.set(\"tenantAddressConfigId\", addressConfId);",
											"        pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(order)));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "13b1b647-3499-4e53-8724-c241c51fa906",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"anotherCompleteOrderId\", jsonData.id);",
											"    pm.globals.set(\"another_complete_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Test billTo and shipTo properties existance\", function() {",
											"    pm.expect(jsonData.billTo).to.exist;",
											"    pm.expect(jsonData.shipTo).to.exist;",
											"    ",
											"    pm.expect(jsonData.billTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"    pm.expect(jsonData.shipTo).to.equal(pm.variables.get(\"tenantAddressConfigId\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open and adding 2 more lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3e19843-d4bf-450f-93f8-979561388eb2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"another_complete_order_content\");",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    // Few more cases for MODORDERS-117",
											"    order.compositePoLines[0].orderFormat = \"Physical Resource\";",
											"    setPhysicalInfo(order.compositePoLines[0]);",
											"    order.compositePoLines[1].orderFormat = \"Other\";",
											"    setPhysicalInfo(order.compositePoLines[1]);",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Open\";",
											"    pendingOrder.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Pending\");",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"another_complete_order_content\");",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e5c6fc51-79c1-4984-a778-bafb45c5c32e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        //check status changed",
											"        order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"        order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"       ",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Titles",
					"item": [
						{
							"name": "Create package po line for title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0ce1caf-80a2-48a9-8995-7ae1d432297a",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"// make sure there is no id provided",
											"delete line.id;",
											"line.poLineNumber += \"1\";",
											"line.poLineDescription += \" another PO Line\";",
											"line.eresource.createInventory = \"Instance\";",
											"line.locations.pop();",
											"line.purchaseOrderId = pm.globals.get(\"completeOrderId\");",
											"line.isPackage = true;",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f6c1d31-388e-460f-8546-910ea0bee780",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    ",
											"    ",
											"    pm.environment.set(\"poLineIdForTitle\", jsonData.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/id/lines/id requests that return 201"
							},
							"response": []
						},
						{
							"name": "Create title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6fee7658-3729-4bd4-ba26-40ef1459b475",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c1935da-bb84-4bf2-908a-e8000dc3084f",
										"exec": [
											"pm.test(\"Title status code is 201\", function() {",
											"    pm.response.to.have.status(201);",
											"    let title = pm.response.json();",
											"    pm.expect(title.id).to.exist;",
											"    pm.variables.set(\"titleId\", title.id);",
											"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get title by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "484400ce-e5aa-4cfe-a2b1-a9216de916fb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8da54000-06cc-43c1-8b9a-7432f53ea0c4",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let retrievedTitle = pm.response.json();",
											"    pm.expect(retrievedTitle.id).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9ac18e9-5f3b-4380-a9cf-9c9c660782f9",
										"exec": [
											"let titleBody = JSON.parse(pm.variables.get(\"titleContent\"));",
											"",
											"titleBody.title = \"New title name\";",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(titleBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "37c870ba-938c-4742-85fd-676238ab9e5b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/titles/\" + pm.variables.get(\"titleId\"), (err, res) => {",
											"        pm.test(\"Title is updated\", () => {",
											"            pm.expect(res.code).to.eql(200);",
											"            var title = res.json();",
											"            pm.expect(title.title).to.eql(\"New title name\");",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get title collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1768c3a7-bb8e-4bc2-98f1-7b74f21a2cd3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1f19c7a5-d71f-4cf1-b8f3-a4394c79ba8d",
										"exec": [
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"",
											"    var titles = pm.response.json();",
											"",
											"    pm.test(\"Verify order templates collection contains order templates\", () => {",
											"        pm.expect(titles.totalRecords).to.be.above(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c9ef25c3-f6a2-4805-808d-de764e905688",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "47a69c4e-14fd-46d0-aea1-6a1dc283edc1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/titles/\" + pm.variables.get(\"titleId\"), (err, res) => {",
											"        pm.test(\"title is deleted\", () => {",
											"             pm.expect(res.code).to.eql(404);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces",
					"item": [
						{
							"name": "create title for piece",
							"item": [
								{
									"name": "Create title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "356306ca-03c0-4fb6-9a74-aa9249538a25",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0f0e20a6-a780-444c-a4e1-3d1c05efca21",
												"exec": [
													"pm.test(\"Title status code is 201\", function() {",
													"    pm.response.to.have.status(201);",
													"    let title = pm.response.json();",
													"    pm.expect(title.id).to.exist;",
													"    pm.variables.set(\"titleId\", title.id);",
													"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{titleContent}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfdcf7a6-3b1d-404a-ad31-318d42f063de",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
											"    let piece = res.json();",
											"    piece.poLineId = pm.environment.get(\"poLineIdForTitle\");",
											"    piece.titleId = pm.variables.get(\"titleId\");",
											"    piece.locationId = pm.environment.get(\"locationId1\");",
											"    pm.globals.set(\"pieceRecord\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f652399a-a649-48e8-93ae-5a9dc2d78113",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.globals.set(\"pieceIdToUpdate\", jsonData.id);",
											"    utils.validatePiece(jsonData);",
											"});",
											"",
											"pm.test(\"Each piece has these optional fields\", function () {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.expect(jsonData.caption).to.exist;",
											"    pm.expect(jsonData.comment).to.exist;",
											"    pm.expect(jsonData.itemId).to.exist;",
											"    pm.expect(jsonData.locationId).to.exist;",
											"    pm.expect(jsonData.supplement).to.exist;",
											"    pm.expect(jsonData.receivedDate).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{pieceRecord}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Edit piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e77f4ab-8b2a-4f5c-b1bf-dde20cb62f81",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let piece = pm.globals.get(\"pieceRecord\");",
											"",
											"// Update piece format to Electronic",
											"piece.format = \"Electronic\";",
											"// Use this pieceIdToUpdate to delete in next delete request",
											"pm.variables.set(\"updatedPiece\", piece);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "49ed1882-70ae-4211-bb1c-24e9a77b0071",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    pm.response.to.have.status(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedPiece}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6bb8fec1-974b-4725-91d7-d80a909cd730",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2242b454-d3e7-4246-a359-2657ad18eb01",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceIdToUpdate}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceIdToUpdate}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "delete title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "483c5d58-da10-447f-bf30-d15cc4a5fae5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8943a200-f944-422f-a528-2b03af36ebfe",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles",
										"{{titleId}}"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Ensure receiptStatus consistency between Pieces PoLine",
					"item": [
						{
							"name": "Verify PoLine Awaiting ReceiptStatus",
							"item": [
								{
									"name": "create title for piece",
									"item": [
										{
											"name": "Create title",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dcd83ad4-3e75-4ea2-b2f0-e9dc66354804",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"",
															"pm.variables.set(\"titleContent1\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a4097f2f-ab92-4f0e-8e1e-fd67568b8e14",
														"exec": [
															"pm.test(\"Title status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"    let title = pm.response.json();",
															"    pm.expect(title.id).to.exist;",
															"    pm.variables.set(\"titleId1\", title.id);",
															"    pm.variables.set(\"titleContent1\", JSON.stringify(title));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{titleContent1}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create 1st Piece - Received",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "57c0874f-7959-4035-94a6-66e2d1be617b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.globals.set(\"poLineIdToCreatePiece\", utils.getLastPoLineId());",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    piece.titleId = pm.variables.get(\"titleId1\");",
													"    piece.locationId = pm.environment.get(\"locationId1\");",
													"    pm.globals.set(\"pieceRecordAwaiting1\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1ea5a5a6-1b05-4deb-9c8e-3a8bdf403114",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pieceId1ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function () {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										},
										"description": "MODORDERS-173 - ensure receiptStatus consistency between piece and poLine"
									},
									"response": []
								},
								{
									"name": "Create 2nd Piece - Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e8139ada-d76e-49e5-9388-1a16d6f1ae89",
												"exec": [
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function (err, res) {",
													"    let piece = res.json();",
													"    piece.poLineId = pm.globals.get(\"poLineIdToCreatePiece\");",
													"    piece.caption = \"Tutorial Volume 99\";",
													"    piece.comment = \"Special Edition II\";",
													"    piece.format = \"Physical\";",
													"    piece.itemId = \"522a501a-56b5-48d9-b28a-3a8f02482d97\";",
													"    piece.receivingStatus = \"Expected\";",
													"    piece.supplement = true;",
													"    piece.receivedDate = \"2018-10-10T00:00:00.000+0000\";",
													"    piece.titleId = pm.variables.get(\"titleId1\");",
													"    piece.locationId = pm.environment.get(\"locationId1\");",
													"    pm.globals.set(\"pieceRecordAwaiting2\", JSON.stringify(piece));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "68ece4a5-fbfa-437d-966b-94383a6db50e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    pm.environment.set(\"pieceId2ToUpdate\", jsonData.id);",
													"    utils.validatePiece(jsonData);",
													"});",
													"",
													"pm.test(\"Each piece has these optional fields\", function () {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.caption).to.exist;",
													"    pm.expect(jsonData.comment).to.exist;",
													"    pm.expect(jsonData.itemId).to.exist;",
													"    pm.expect(jsonData.locationId).to.exist;",
													"    pm.expect(jsonData.supplement).to.exist;",
													"    pm.expect(jsonData.receivedDate).to.exist;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pieceRecordAwaiting2}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update 1st piece - to Expected",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5884c12e-9b3a-43d8-a885-ac25b433fe42",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let pieceId1ToUpdate = pm.variables.get(\"pieceId1ToUpdate\");",
													"utils.sendGetRequest(\"/orders-storage/pieces/\" + pieceId1ToUpdate, function (err, res) {",
													"    piece = res.json();",
													"    let receivingStatus = piece.receivingStatus;",
													"    console.log(\"receivingStatus storage: \" + receivingStatus);",
													"});",
													"",
													"var piece1 = {};",
													"piece1 = JSON.parse(pm.globals.get(\"pieceRecordAwaiting1\"));",
													"",
													"// Update piece1 receivingStatus to Expected",
													"piece1.receivingStatus = \"Expected\"; // Received -> Expected will trigger event",
													"",
													"// Use this pieceIdToUpdate to delete in next delete request",
													"pm.variables.set(\"updatedPieceRecordAwaiting1\", JSON.stringify(piece1));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b03d5b2a-2a60-4259-94bd-60aa3a9a3145",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPieceRecordAwaiting1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all pieces by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b378d6cb-b628-4895-93a3-524339f82662",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1bca6263-4260-4f99-a4e9-4833091f95c9",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces[0].receivingStatus).to.equal(\"Expected\");",
													"    pm.expect(jsonData.pieces[1].receivingStatus).to.equal(\"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdToCreatePiece}}"
												}
											]
										},
										"description": "GET /orders-storage/pieces requests that return 200"
									},
									"response": []
								},
								{
									"name": "Get PoLine by poLineId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3e60d885-81fd-41ad-ac06-0dbb3276a1c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a97a34f5-3788-4050-8b85-3a222caacc96",
												"exec": [
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"    ",
													"    // All pieces receiving status is \"Expected\" so receiptStatus should be \"Awaiting Receipt\"",
													"    pm.expect(jsonData.receiptStatus).to.equal(\"Awaiting Receipt\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineIdToCreatePiece}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineIdToCreatePiece}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Delete first piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3842ee4a-db80-4cb4-8ad0-415a031e8491",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2d11ed39-f1f6-4859-abf2-d3ffefb05fad",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId1ToUpdate\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId1ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId1ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								},
								{
									"name": "Delete second piece",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0ac38b6a-76f1-4409-a675-c40a167d380c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f9e73238-4810-4f91-b0fb-8b6a56a09462",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.globals.unset(\"pieceId2ToUpdate\");",
													"pm.globals.unset(\"poLineIdToCreatePiece\");",
													"pm.globals.unset(\"pieceRecordAwaiting1\");",
													"pm.globals.unset(\"pieceRecordAwaiting2\");",
													"pm.globals.unset(\"updatedPieceRecordAwaiting1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId2ToUpdate}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces",
												"{{pieceId2ToUpdate}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								},
								{
									"name": "delete title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d8ade59a-810d-4f6a-8cec-feb192e5d069",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d11903ef-9fe1-4fab-88fd-07c918536a8e",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{titleId1}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles",
												"{{titleId1}}"
											]
										},
										"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2f1b89c6-3aad-48b1-9f89-712042e010d2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "593e01e9-18ca-4199-9f33-ee8b9bcd02ad",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0958e2cd-7074-4c7e-9211-0b3e797ba0c1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "697cf83d-928a-4549-ac9a-a64f1ce2de6c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Open order",
					"item": [
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "36ecdfd9-5560-478a-9921-20d8d3fcd166",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"1MIX1EL\";",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9ec77f30-8e26-42a8-917f-cf988d662ecc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Partially Paid\"));",
											"utils.verifyOrderCalculatedInfo(jsonData);",
											"",
											"pm.test(\"Each order has these fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"completeOpenOrderId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"    // the approval details are set on OPEN if \"approval required\" is set to false",
											"    pm.expect(jsonData.approvalDate).to.exist;",
											"    pm.expect(jsonData.approvedById).to.exist;",
											"  ",
											"});",
											"  utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e6f3ea4-610c-4658-9d43-566fc792e9fc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order = utils.prepareOrder(res.json());",
											"    pm.variables.set(\"po_one_physical_one_electronic_lines\", JSON.stringify(order));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b44a5869-739e-4e74-bc77-daf69af80ca2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"physElecOpenOrderId\", order.id); ",
											"});",
											"",
											"pm.test(\"2 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"    order.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"    order.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Fully Paid\"));",
											"});",
											"    utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_one_physical_one_electronic_lines}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Create Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e4f98fd5-ec4c-4397-9790-b6c95061e73e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest({",
											"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
											"        method: \"GET\"",
											"    },",
											"    function (err, res) {",
											"        let order  = res.json();",
											"        order.workflowStatus = \"Open\";",
											"        order = utils.deletePoNumber(order);",
											"        for(var i = 0; i < order.compositePoLines.length; i++) {",
											"    \t  order.compositePoLines[i].receiptStatus = \"Receipt Not Required\";",
											"    \t  order.compositePoLines[i].paymentStatus = \"Pending\";",
											"        }",
											"        ",
											"        pm.variables.set(\"orderWithReceiptNotRequiredLines\", JSON.stringify(utils.prepareOrder(order)));",
											"    }",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "02b7b848-fbaf-4417-92ce-46fc51517865",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Receipt Not Required\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Awaiting Payment\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"orderWithReceiptNotRequiredId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithReceiptNotRequiredLines}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\n[MODORDERS-304](https://issues.folio.org/browse/MODORDERS-304). Even though Receiving is not required, Inventory interaction happens based on CreateInventory setting"
							},
							"response": []
						},
						{
							"name": "Create Open order for receiving history test",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d50e9181-0e84-47a4-8e51-9e22fecbb27c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = false;",
											"    order = utils.deletePoNumber(order);",
											"    pm.variables.set(\"poListedPrintMonographForReceivingHistory\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3623e904-e2a4-4e5d-9999-7f4f231da734",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"receivingHistoryPoId\", order.id); ",
											"});",
											"",
											"pm.test(\"Verify two PO Lines exist\", function () {",
											"    utils.validatePoLines(order, 2);",
											"});",
											"",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForReceivingHistory}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Open` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total, checkinItems is `true`.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `false`."
							},
							"response": []
						},
						{
							"name": "Create Open order. POLines with checkinItems = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8d0fef63-84f5-4718-8c7c-a43263c41774",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1N\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = false;",
											"    order.compositePoLines[1].checkinItems = true;",
											"    ",
											"    pm.variables.set(\"poListedPrintMonographForPartialCheckIn\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "85c2c15a-46e4-4f13-ae1a-74afc30cfaa8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poToCheckinItemsId\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForPartialCheckIn}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						},
						{
							"name": "Create order all po lines checkin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc688dfa-8745-4f75-ad4f-582732ebd7b9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    order.poNumber = \"CH3CK1NPHYELEC\";",
											"",
											"    // Set checkingItems flag",
											"    order.compositePoLines[0].checkinItems = true;",
											"    order.compositePoLines[1].checkinItems = true;",
											"",
											"    // Set new product ids to be sure that new instances will be created",
											"    order.compositePoLines[0].details.productIds.pop();",
											"    ",
											"    order.compositePoLines[0].titleOrPackage = \"Hey! Just API testing checkin\"",
											"    order.compositePoLines[1].titleOrPackage = \"Hey! Just API testing checkin with no items\"",
											"    ",
											"    //set create Inventory so that no item interaction is necessary",
											"    order.compositePoLines[1].eresource.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"poForTestingCheckin\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d6247d37-e8b6-4592-9e67-ec4ef53374a7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => {",
											"     utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    if(line.orderFormat === \"Physical Resource\"){",
											"        pm.globals.set(\"checkin_physical_poLine\", line);",
											"    }else{",
											"        pm.globals.set(\"checkin_electronic_poLine\", line);",
											"    }",
											"    });",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"poAllPoLineCheckin\", jsonData.id); ",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.exist;",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poForTestingCheckin}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						},
						{
							"name": "Create Open order. POLines with isPackage = true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cb2941e9-dcee-4fad-b0f1-09ad071cf943",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order = utils.deletePoNumber(order);",
											"    let line = order.compositePoLines[0];",
											"    line.isPackage = true;",
											"    // Set checkingItems flag",
											"    order.compositePoLines = [line];",
											"    ",
											"    pm.variables.set(\"poListedPrintMonographForPartialCheckIn\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8373eb2d-9404-4c4c-adbd-431aef6cf52d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"po_lines and corresponding Inventory not entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 1);",
											"});",
											"",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{poListedPrintMonographForPartialCheckIn}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`, checkinItems is `true`."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Unopen order",
					"item": [
						{
							"name": "Unopen workflows",
							"item": [
								{
									"name": "Unpopen order with 1POL and 1 Fund",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0e8adeee-37ce-4ebb-9adb-110307d014da",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f0a5b2bb-e686-4442-9c63-14a8ac1a0d34",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"beOrder338-1\", beOrder);",
															"    pm.variables.set(\"beOrderId338-1\", beOrder.id);",
															"    pm.variables.set(\"beOrderNumber338-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f016a4b2-63cf-4f8b-a92d-293026d933d2",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-1\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c2b873dd-4d79-4859-b192-fd131e743843",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"beOrderLine338-1\", beOrderLine);",
															"    pm.variables.set(\"beOrderLineId338-1\", beOrderLine.id);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-1}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e04556f6-d7e4-49bd-9d40-9f29f3821cfb",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7bfa37da-8377-4e13-b70f-84dfdaebc8df",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a8bccb86-94b7-41e2-84d2-19d4b7e3fcc8",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.variables.set(\"beOrde338-1\", beOrder);",
															"    pm.environment.set(\"bePOLEncumbrance338-1\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "54320042-fa76-4a47-b818-6f7661e00ed3",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"     pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4d6d98c2-3a8b-48c3-9a21-cf23818b5d11",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{bePOLEncumbrance338-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{bePOLEncumbrance338-1}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea593f4e-2a50-4a58-8496-e19ba27c3a86",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "81d9c3cb-a21f-48a1-a4bc-8c9cbf3415e3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "From Unpopen to Open with 1POL and 1 Fund and POL quantity changed",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e4d85bfa-416e-4f29-bd67-b931ad145fe8",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "25ebaaca-e895-4b9f-bd0e-83ae1d66e547",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-2\", beOrder);",
															"    pm.environment.set(\"beOrderId338-2\", beOrder.id);",
															"    pm.environment.set(\"beOrderNumber338-2\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5bdf15b6-de21-4ccd-a1d1-e25d23a79a68",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-2\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b9c02e3-70d5-416f-9f09-3548d5644c5a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"beOrderLine338-2\", beOrderLine);",
															"    pm.environment.set(\"beOrderLineId338-2\", beOrderLine.id);",
															"    pm.environment.set(\"poLineNumber338-2\", beOrderLine.poLineNumber);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-2}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1cab324-a8e4-45c1-88c2-f3f97a3bf40a",
														"exec": [
															"setTimeout(function(){}, 2000);\r",
															"let utils = eval(globals.loadUtils);\r",
															"let order = {};\r",
															"\r",
															"pm.test(\"Order is open\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-2-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8585e6f0-8e56-4853-8432-11f39e341953",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.environment.set(\"beOrder338-2\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId338-2\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-2-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "baf98633-e15e-4e56-9de6-a82616e40f5b",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    transactionArray = pm.response.json();\r",
															"    transactionArray.transactions.forEach(encumbrance => {\r",
															"        pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"        pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"        pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2f89bed6-d174-481e-a752-977d906b003d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "21084dd2-b319-4330-8523-c0e197e483aa",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a5358c56-dda4-4550-b733-f5d7b7f60b56",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "312a7db9-08b6-4e4b-9c8d-0eb2369196ca",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change quantity and cost for product in order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3c28b19d-94dc-4724-85c4-ea6f2c2b71dc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4849aa07-1db1-4524-be9b-2ad90a5845e8",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-2\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n      \"id\": \"{{beOrderLineId338-2}}\",\r\n      \"checkinItems\": false,\r\n      \"acquisitionMethod\": \"Approval Plan\",\r\n      \"alerts\": [],\r\n      \"claims\": [],\r\n      \"collection\": false,\r\n      \"contributors\": [\r\n        {\r\n          \"contributor\": \"Moutinho, Luiz\",\r\n          \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\r\n        }\r\n      ],\r\n      \"cost\": {\r\n        \"listUnitPrice\": 2.0,\r\n        \"currency\": \"USD\",\r\n        \"discount\": 10.0,\r\n        \"discountType\": \"percentage\",\r\n        \"quantityPhysical\": 3,\r\n        \"poLineEstimatedPrice\": 5.4\r\n      },\r\n      \"details\": {\r\n        \"productIds\": [\r\n          {\r\n        \t\"productId\": \"3319643991\",\r\n    \t\t\"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n            \"qualifier\": \"\"\r\n          }\r\n        ],\r\n        \"subscriptionInterval\": 0\r\n      },\r\n      \"eresource\": {\r\n        \"activated\": false,\r\n        \"createInventory\": \"Instance, Holding\",\r\n        \"trial\": false,\r\n        \"accessProvider\": \"{{activeVendorId}}\"\r\n      },\r\n      \"fundDistribution\": [\r\n        {\r\n          \"encumbrance\": \"{{fundEncumbranceId338-2}}\",\r\n          \"fundId\": \"{{fundId}}\",\r\n          \"distributionType\": \"percentage\",\r\n          \"value\": 100.0\r\n        }\r\n      ],\r\n      \"isPackage\": false,\r\n      \"locations\": [\r\n        {\r\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\r\n          \"quantity\": 3,\r\n          \"quantityPhysical\": 3\r\n        }\r\n      ],\r\n      \"orderFormat\": \"Physical Resource\",\r\n       \"paymentStatus\" : \"Awaiting Payment\",\r\n      \"physical\": {\r\n        \"createInventory\": \"None\",\r\n    \t\"materialSupplier\": \"{{activeVendorId}}\",\r\n    \t\"materialType\": \"{{materialTypeId}}\",\r\n        \"volumes\": []\r\n      },\r\n      \"poLineNumber\": \"{{poLineNumber338-2}}\",\r\n      \"publisher\": \"Palgrave Macmillan\",\r\n      \"purchaseOrderId\": \"{{beOrderId338-2}}\",\r\n     \"receiptStatus\" : \"Awaiting Receipt\",\r\n      \"reportingCodes\": [],\r\n      \"rush\": false,\r\n      \"source\": \"User\",\r\n      \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\r\n      \"vendorDetail\": {\r\n        \"instructions\": \"\",\r\n        \"vendorAccount\": \"BRXXXXX-01\"\r\n      },\r\n      \"metadata\": {\r\n        \"createdDate\": \"2020-06-03T07:32:15.794+0000\",\r\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\r\n        \"updatedDate\": \"2020-06-03T07:38:34.754+0000\",\r\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\r\n      }\r\n    }"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{beOrderLineId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines",
														"{{beOrderLineId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-2-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cbe1f81c-8a2a-4c1c-988a-5d8840dfc379",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.environment.set(\"beOrder338-2\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId338-2\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "88f5ff82-30ac-4dab-8e4e-6aa732184ac1",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-2-2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d15a0767-5b5a-4f61-ba8f-97f132c79a1f",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    transactionArray = pm.response.json();\r",
															"    transactionArray.transactions.forEach(encumbrance => {\r",
															"        pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"        pm.expect(encumbrance.amount).to.equal(5.4);\r",
															"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(5.4);\r",
															"        pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"    });\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d327ea86-0d3e-4dd2-9388-4149dff35522",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions?query=encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions"
													],
													"query": [
														{
															"key": "query",
															"value": "encumbrance.status <> Released and encumbrance.sourcePurchaseOrderId=={{beOrderId338-2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "43d57c9c-4c32-4f34-a34e-38c2f3818340",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "48721cd2-258d-4b92-b7a1-00cae5436589",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "From Unpopen to Open with 1POL and 1 Fund and fund changed",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1e4520d7-a6d4-4404-96c8-b6d4d2f1e6d7",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"bePoNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"bePoNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"bePoNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f9ecae45-d21c-4678-8b66-df8c6b6f8f2a",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    pm.environment.set(\"beOrderId338-3\", beOrder.id);",
															"    pm.environment.set(\"beOrderNumber338-3\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{bePoNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5cf09e04-1ada-46f2-9e2c-6687bef2ec56",
														"exec": [
															"console.log(pm.environment.get(\"beOrderId338-2\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "026dc74c-c35a-4a7e-9010-6c71b17f84a4",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"beOrderLine338-3\", beOrderLine);",
															"    pm.environment.set(\"beOrderLineId338-3\", beOrderLine.id);",
															"    pm.environment.set(\"poLineNumber338-3\", beOrderLine.poLineNumber);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{beOrderId338-3}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06ae76e6-a166-4928-84e3-3c69b9b9955b",
														"exec": [
															"setTimeout(function(){}, 2000);\r",
															"let utils = eval(globals.loadUtils);\r",
															"let order = {};\r",
															"\r",
															"pm.test(\"Order is open\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2c604d28-fdd3-45c7-a4e6-c4b479295e1c",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    console.log(beOrder.id);",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId-1-338-3\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get unreleased encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ae40068-f25b-45ff-99a0-29ae69d06fa8",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(3.6);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "eb6bfffb-d58f-408d-96c8-b71a14ff8f0a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Unopen order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "85a21b0a-8915-4ba3-8ac6-7cab08a36c6a",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get encumbrance by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9bf93360-e4b2-49bd-af27-7dad7d211b43",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Pending\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e3fb78fe-246d-4329-87ad-2414656d6035",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Change fund in order lines",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "71112725-05bd-41d0-aa27-151b58850d5e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "923c76c7-9704-4764-97d6-798a2ee5d220",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(204);",
															"});",
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n      \"id\": \"{{beOrderLineId338-3}}\",\r\n      \"checkinItems\": false,\r\n      \"acquisitionMethod\": \"Approval Plan\",\r\n      \"alerts\": [],\r\n      \"claims\": [],\r\n      \"collection\": false,\r\n      \"contributors\": [\r\n        {\r\n          \"contributor\": \"Moutinho, Luiz\",\r\n          \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\r\n        }\r\n      ],\r\n      \"cost\": {\r\n        \"listUnitPrice\": 2.0,\r\n        \"currency\": \"USD\",\r\n        \"discount\": 10.0,\r\n        \"discountType\": \"percentage\",\r\n        \"quantityPhysical\": 3,\r\n        \"poLineEstimatedPrice\": 5.4\r\n      },\r\n      \"details\": {\r\n        \"productIds\": [\r\n          {\r\n        \t\"productId\": \"3319643991\",\r\n    \t\t\"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\r\n            \"qualifier\": \"\"\r\n          }\r\n        ],\r\n        \"subscriptionInterval\": 0\r\n      },\r\n      \"eresource\": {\r\n        \"activated\": false,\r\n        \"createInventory\": \"Instance, Holding\",\r\n        \"trial\": false,\r\n        \"accessProvider\": \"{{activeVendorId}}\"\r\n      },\r\n      \"fundDistribution\": [\r\n        {\r\n          \"encumbrance\": \"{{fundEncumbranceId-1-338-3}}\",\r\n          \"fundId\": \"{{fundId-2}}\",\r\n          \"distributionType\": \"percentage\",\r\n          \"value\": 100.0\r\n        }\r\n      ],\r\n      \"isPackage\": false,\r\n      \"locations\": [\r\n        {\r\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\r\n          \"quantity\": 3,\r\n          \"quantityPhysical\": 3\r\n        }\r\n      ],\r\n      \"orderFormat\": \"Physical Resource\",\r\n       \"paymentStatus\" : \"Awaiting Payment\",\r\n      \"physical\": {\r\n        \"createInventory\": \"None\",\r\n    \t\"materialSupplier\": \"{{activeVendorId}}\",\r\n    \t\"materialType\": \"{{materialTypeId}}\",\r\n        \"volumes\": []\r\n      },\r\n      \"poLineNumber\": \"{{poLineNumber338-3}}\",\r\n      \"publisher\": \"Palgrave Macmillan\",\r\n      \"purchaseOrderId\": \"{{beOrderId338-3}}\",\r\n     \"receiptStatus\" : \"Awaiting Receipt\",\r\n      \"reportingCodes\": [],\r\n      \"rush\": false,\r\n      \"source\": \"User\",\r\n      \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\r\n      \"vendorDetail\": {\r\n        \"instructions\": \"\",\r\n        \"vendorAccount\": \"BRXXXXX-01\"\r\n      },\r\n      \"metadata\": {\r\n        \"createdDate\": \"2020-06-03T07:32:15.794+0000\",\r\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\r\n        \"updatedDate\": \"2020-06-03T07:38:34.754+0000\",\r\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\r\n      }\r\n    }"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{beOrderLineId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines",
														"{{beOrderLineId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3776c6ca-1ed6-47be-a8c2-2d1adbf53216",
														"exec": [
															"setTimeout(function(){}, 2000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{beOrderId338-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{beOrderNumber338-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}"
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get composite order 338-3-3",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2a6158c6-2e6a-42e3-84a7-c2b952cce874",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"Order after open\", function () {",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"beOrder338-3\", beOrder);",
															"    console.log(beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"    pm.environment.set(\"fundEncumbranceId338-2-3\", beOrder.compositePoLines[0].fundDistribution[0].encumbrance);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{beOrderId338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{beOrderId338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get released encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "03193f88-71f3-4d6d-bd21-79ccaaf908dd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(0);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Released\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5f4ed4f9-4524-4545-9871-6caa02a9ec50",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId-1-338-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId-1-338-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get new encumbrances for Order 338-3-1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "67d6c976-f9d9-4c77-a259-c21396264e00",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    encumbrance = pm.response.json();\r",
															"    pm.expect(encumbrance.currency).to.equal(\"USD\");\r",
															"    pm.expect(encumbrance.amount).to.equal(5.4);\r",
															"    pm.expect(encumbrance.encumbrance.initialAmountEncumbered).to.equal(5.4);\r",
															"    pm.expect(encumbrance.encumbrance.status).to.equal(\"Unreleased\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "603111cc-ebc9-4e4d-9630-19da55a54af0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/transactions/{{fundEncumbranceId338-2-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"finance",
														"transactions",
														"{{fundEncumbranceId338-2-3}}"
													]
												}
											},
											"response": []
										}
									],
									"description": "https://issues.folio.org/browse/MODORDERS-338",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "944fb470-7896-4017-a1df-b26f4911b563",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9924e7c4-e61b-4f88-9d5c-bbca63741638",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Open order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2b25affb-9e3e-4258-b3ba-62ed36fe5e9a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"UN0P3N\";",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.environment.set(\"orderForUnopenFlow\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "70815b29-490f-4b3d-9afd-335b260d180f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"orderForUnopenFlowId\", jsonData.id);",
											"    pm.environment.set(\"orderForUnopenFlowBody\", jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForUnopenFlow}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Unopen order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14bd9b2d-a334-4968-b924-34c12cd37e2d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let orderForUnopen = pm.environment.get(\"orderForUnopenFlowBody\");",
											"orderForUnopen.workflowStatus = \"Pending\";",
											"",
											"pm.variables.set(\"orderForUnopenBody\", JSON.stringify(orderForUnopen));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "596bb092-07a7-43c3-b056-636d53dc029f",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForUnopenBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForUnopenFlowId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForUnopenFlowId}}"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Fund Distribution",
					"item": [
						{
							"name": "Open order 422 - fund distri total greater than poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6d01db92-d181-47cb-a5c9-d80ad8383009",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 100;",
											"    order.compositePoLines[0].fundDistribution[1].value = 100;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d2901e4-a004-4ec0-a0ca-4ed6ee4a4770",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var error = {};",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    error = pm.response.json();",
											"    pm.expect(error).to.exist;",
											"    pm.expect(error.errors[0].code).to.equal(\"incorrectFundDistributionTotal\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c61febd-e569-4371-887e-b18855d4ddfd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = res.json();",
											"",
											"    pm.variables.set(\"delOrderWithPoNumber\", order.poNumber);",
											"    ",
											"    utils.sendGetRequest(\"/orders/composite-orders?query=poNumber=\" + pm.variables.get(\"delOrderWithPoNumber\"), function (err, res) {",
											"         let orderToDelete = res.json();",
											"         pm.variables.set(\"delOrderId\", orderToDelete.purchaseOrders[0].id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5a354fb2-790c-408d-ad0f-88ea0ae3717d",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Open order 422 - fund distri total less than poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "38758667-75f4-42c8-84d6-aaeea4e777a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 90;",
											"    order.compositePoLines[0].fundDistribution[1].value = 9;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "624bdb40-57a0-4bc3-92d1-716313e73b2f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var error = {};",
											"",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    error = pm.response.json();",
											"    pm.expect(error).to.exist;",
											"    pm.expect(error.errors[0].code).to.equal(\"incorrectFundDistributionTotal\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6781fd6a-ca90-4b07-a2e1-26c3dc4d6c2b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = res.json();",
											"    pm.variables.set(\"delOrderWithPoNumber\", order.poNumber);",
											"    ",
											"    utils.sendGetRequest(\"/orders/composite-orders?query=poNumber=\" + pm.variables.get(\"delOrderWithPoNumber\"), function (err, res) {",
											"        let orderToDelete = res.json();",
											"        pm.variables.set(\"delOrderId\", orderToDelete.purchaseOrders[0].id);",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22cda9f5-7e35-4f96-8855-d32a3dd3d1bd",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Open order 201 - fund distri total equals poLineEstimatedPrice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16c90c4d-b001-4ea1-a1f3-003a8bb6a87d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let order = utils.prepareOrderFundDistri(res.json());",
											"    order.compositePoLines[0].fundDistribution[0].value = 90;",
											"    order.compositePoLines[0].fundDistribution[1].value = 10;",
											"    pm.variables.set(\"po_listed_print_serial\", JSON.stringify(order));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "986957cb-bd6f-4a21-a89d-99818cadc6f0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.environment.set(\"delOrderId201\", order.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_serial}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Delete previous order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da083a70-bd32-4d6e-98f3-482f96c9adcf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "76820c6f-d056-4281-b7ca-04ac31d86b1f",
										"exec": [
											"pm.test(\"Order deleted - Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{delOrderId201}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{delOrderId201}}"
									]
								},
								"description": "Create a purchase order in Open status based on `po_one_physical_one_electronic_lines.json` from mod-orders.\nThe order has two lines: \n- the first line is of `Physical Resources` format, 2 locations and 25 items in total.\n- the second line is of `Electronic Resources` format, 1 location, 10 items, create inventory is `false`."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Should recieve Pieces if item.status = \"Order closed\" and order.workflowStatus = \"Closed\"",
							"item": [
								{
									"name": "Create order One-Time",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6cad2c59-4be3-45c2-804f-83812ad96f3a",
												"exec": [
													"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
													"if (bePoNumberNum === null) {",
													"    pm.environment.set(\"poNumberNum\", 1);",
													"}else",
													"{",
													"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f25e9b77-7448-4584-a1a2-56e9284699a5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrder = {};",
													"",
													"pm.test(\"One-time order is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrder = pm.response.json();",
													"    pm.environment.set(\"order\", beOrder);",
													"    pm.environment.set(\"orderId\", beOrder.id);",
													"    pm.environment.set(\"orderNumber\", beOrder.poNumber);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add order lines",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7a2f2fd-3d16-45f8-8db5-3bd0253f5e5b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let beOrderLine = {};",
													"",
													"pm.test(\"Order line is created\", function () {",
													"    pm.response.to.have.status(201);",
													"    beOrderLine = pm.response.json();",
													"    pm.environment.set(\"orderLine\", beOrderLine);",
													"    pm.environment.set(\"orderLineId\", beOrderLine.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"source\": \"User\",\n  \"cost\": {\n    \"discountType\": \"percentage\",\n    \"discount\": 10,\n    \"currency\": \"USD\",\n    \"quantityPhysical\": 2,\n    \"listUnitPrice\": 2\n  },\n  \"vendorDetail\": {\n    \"instructions\": \"\",\n    \"vendorAccount\": \"BRXXXXX-01\",\n    \"refNumberType\": null\n  },\n  \"details\": {\n    \"subscriptionInterval\": 0,\n    \"productIds\": [\n      {\n        \"productId\": \"3319643991\",\n        \"productIdType\": \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n        \"qualifier\": \"\"\n      }\n    ]\n  },\n  \"purchaseOrderId\": \"{{orderId}}\",\n  \"eresource\": {\n    \"createInventory\": \"Instance, Holding\",\n    \"accessProvider\": \"{{activeVendorId}}\"\n  },\n  \"physical\": {\n    \"createInventory\": \"None\",\n    \"materialSupplier\": \"{{activeVendorId}}\",\n    \"materialType\": \"{{materialTypeId}}\"\n  },\n  \"locations\": [\n    {\n      \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n      \"quantityPhysical\": 2\n    }\n  ],\n  \"isPackage\": false,\n  \"instanceId\": null,\n  \"titleOrPackage\": \"Futures, biometrics and neuroscience research Luiz Moutinho, Mladen Sokele, editors\",\n  \"publisher\": \"Palgrave Macmillan\",\n  \"contributors\": [\n    {\n      \"contributor\": \"Moutinho, Luiz\",\n      \"contributorNameTypeId\": \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n    }\n  ],\n  \"orderFormat\": \"Physical Resource\",\n  \"acquisitionMethod\": \"Approval Plan\",\n  \"fundDistribution\": [\n    {\n      \"distributionType\": \"percentage\",\n      \"fundId\": \"{{fundId}}\",\n      \"value\": 100\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Open order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7efed7df-0584-42fe-a67d-396bc3763301",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{orderId}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order is OPen",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Close order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3f041c7-4bb5-4b0b-8aee-874e6f9b088d",
												"exec": [
													"setTimeout(function(){}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"{{orderId}}\",\n  \"approved\": false,\n  \"approvedById\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n  \"approvalDate\": \"2020-04-14T11:31:47.034+0000\",\n  \"dateOrdered\": \"2020-04-14T11:31:47.034+0000\",\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Closed\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:31:48.038+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  },\n  \"closeReason\": {\n    \"reason\": \"Ceased\",\n    \"note\": \"\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get composite order is Close",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"type": "text",
												"value": "no-cache"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Recieve piece(Check-in)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae95c64e-703a-4334-b77d-2d5596fe079d",
												"exec": [
													"pm.test(\"Pieces is retrieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    let piecesArray = pm.response.json();",
													"    pm.environment.set(\"pieceId1\", piecesArray.pieces[0].id);",
													"    console.log(piecesArray.pieces[0].id)",
													"    pm.environment.set(\"pieceId2\", piecesArray.pieces[1].id);",
													"    console.log(piecesArray.pieces[1].id)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Cache-Control",
												"value": "no-cache",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{orderLineId}} sortby locationId",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{orderLineId}} sortby locationId"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Recieve piece(Check-in)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f00934ad-f713-47d6-b566-f2662f0a750f",
												"exec": [
													"pm.test(\"Piece is recieved\", function () {",
													"    pm.response.to.have.status(200);",
													"    receivingResultsArray = pm.response.json();",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[0].pieceId).to.be.equal( pm.environment.get(\"pieceId1\"));",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[0].processingStatus.type).to.be.equal(\"success\");",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[1].pieceId).to.be.equal( pm.environment.get(\"pieceId2\"));",
													"    pm.expect(receivingResultsArray.receivingResults[0].receivingItemResults[1].processingStatus.type).to.be.equal(\"success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Okapi-Token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"toBeCheckedIn\": [\n    {\n      \"poLineId\": \"{{orderLineId}}\",\n      \"checkedIn\": 2,\n      \"checkInPieces\": [\n        {\n          \"id\": \"{{pieceId1}}\",\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n          \"itemStatus\": \"Order closed\"\n        },\n        {\n          \"id\": \"{{pieceId2}}\",\n          \"locationId\": \"f34d27c6-a8eb-461b-acd6-5dea81771e70\",\n          \"itemStatus\": \"Order closed\"\n        }\n      ]\n    }\n  ],\n  \"totalRecords\": 2\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"check-in"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Receive all pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ba4fc2b6-a97f-4c75-a0bf-58622acc1a54",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9acffa79-7155-4bad-bf4b-3d5f50c4857a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for P/E Mix line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "97bd7b3a-303c-4da3-a42f-5fd5b29a12be",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"P/E Mix\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "113199c9-913e-45d8-8064-c1f69cdc5163",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert all received piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive 10 pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "450846d6-fe03-4385-b1d8-7f81c75c1c39",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\", 10);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "008903f7-3bc6-49f6-8f79-a57f80a59660",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 10);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 10, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives 10 piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Revert all received pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2d02f73-8826-4296-930b-ceb329205b0b",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71bf464e-75a8-41af-9f82-8117a930a007",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Received\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 10 received piece records back to `Expected` and Inventory items back to `On order` for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for physical line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69e966df-9c25-4341-a32e-ca4e925d5385",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Physical Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c774e0d3-b20c-41ce-be00-d8843148d581",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "28526ab0-a164-4f6c-9ff6-f5865277a260",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "50722398-f7d0-4256-bfb9-66cb2790be16",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 10 pieces, create inventory is `false`."
							},
							"response": []
						},
						{
							"name": "Revert 2 received pieces for electronic line (without items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "727b5fea-adb5-474a-8c21-16ed63619f71",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.physElecOpenOrderId, \"Electronic Resource\", 2);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c85ff88b-8385-4b6b-818e-94515a8e40a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully processed\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully processed",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 0);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 2, \"Expected\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 2 received piece records back to `Expected` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive pieces for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "158d4cf1-a4ef-4fd6-82d6-d16b1163c32a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e42ff197-9d59-4424-a8f6-0aa024ef4c94",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Fully Received\");",
											"    utils.validateInventoryItemsReceived(line);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 3 pieces, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Revert 1 received piece for electronic line (with items in Inventory)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fa6cd38e-0c62-4d7a-9640-ddbdd0a7b943",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c0ade87c-ac8e-47fe-8709-89f960092dfc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
											"let receivingHistoryTotalRecords = pm.variables.get(\"receivingHistoryTotalRecords\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, receivingHistoryTotalRecords - 1);",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with P/E Mix and Electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73e82c0c-a4ca-4048-bbbb-495b5b1f29f4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.completeOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3b497f34-ff8d-4ffd-9ddf-a18d4b9fc8ad",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with P/E Mix and Electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will be still `Open` after this operation because all PO Lines have `Partially Paid` payment status (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5dbda7d-324e-4d66-8539-6095a00818c6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.physElecOpenOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c0c47782-098d-4b7d-a273-450403de4396",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.completeOpenOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        // check that payment status is still `Partially Paid`",
											"        utils.validatePaymentStatus(line, \"Partially Paid\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by `Create Open order with physical and electronic lines` and  request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).  \nThe order will become `Closed` after this operation because all PO Lines have `Fully Paid` payment status and `Fully Received` receipt status once all piece records are received (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Receive all pieces for order with 4 lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0d56094b-f4f3-4a63-a97c-908fe82d61d7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.prepareReceivingRequestForOrder(globals.anotherCompleteOrderId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c89ef227-6afd-41ae-b94a-800c7611c5ef",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has all pieces successfully received\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.anotherCompleteOrderId, (err, res) => {",
											"    let order = res.json();",
											"    order.compositePoLines.forEach(line => {",
											"        utils.validateReceiptStatus(line, \"Fully Received\");",
											"        utils.validateInventoryItemsReceived(line);",
											"        utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records for an order created by requests from `Pending To Open order` folder (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)).\nThe order will be closed after this operation (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Close orders updating payment status of each PO Line",
					"item": [
						{
							"name": "Get order with 4 lines and update each one",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ac62e942-f9f3-4a12-9979-0cc8cdf1168b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a9dda334-5214-44b0-9a47-71ef04dd6aed",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.anotherCompleteOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        let locations = lines[i].locations;",
											"        for (let j = 0; j < locations.length; j++) {",
											"            locations[j].quantity = 9999;",
											"        }      ",
											"    }",
											"        ",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(4);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get order with receipt not required and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "06be7b22-3c1a-47e2-bc58-f6d9b63b8f0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "acae47f6-0eb2-4088-99f6-b51609565623",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        let locations = lines[i].locations;",
											"        for (let j = 0; j < locations.length; j++) {",
											"            locations[j].quantity = 9999;",
											"        }      ",
											"    }",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Get Mixed order and update each line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5730a4e4-8956-4185-9b7b-62926565c4ed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "07e2826f-0ee2-43cf-bd67-0896d87ecf70",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order with id=\" + globals.completeOpenOrderId + \" is retrieved and still Open\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    // Increase location.quantity to prevent piecesNeedToBeDeleted failure",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        let locations = lines[i].locations;",
											"        for (let j = 0; j < locations.length; j++) {",
											"            locations[j].quantity = 9999;",
											"        }      ",
											"    }",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    pm.expect(order.compositePoLines).to.have.lengthOf(2);",
											"",
											"    utils.updatePoLinesPaymentStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` request and updates PO Lines' payment status so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "Update PO Lines' payment statuses of `Open` orders so the system should close the order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218)).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "146a407e-988f-49ef-9462-bb142a6c47b2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5856a30a-fa80-4f1a-af2f-66dacd2fdbae",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check closed orders and re-open",
					"item": [
						{
							"name": "Order with 4 PO Lines should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f2aa6481-5405-46d7-ae2e-99213ba2acc9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0bc29882-1428-4cfe-ac8b-e9cb94db6119",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Cancelled\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4534384a-aade-4280-8a4e-fc15e02eedb2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96327b59-602a-49d7-b8e7-10eee902c659",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"",
											"    // Update only payment status to re-open order eventually",
											"    utils.updatePoLinePaymentStatus(order.compositePoLines[0], \"Partially Paid\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1032b839-0ac2-4021-b2d4-4b6d384e7e26",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "476ad641-5bcb-4a29-945d-54395872ba42",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is Closed\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    pm.expect(order.closeReason).to.exist;",
											"    pm.expect(order.closeReason.reason).to.equal(\"Complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order: revert 1 received piece for Electronic line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "03a6e0f3-8ea0-4a60-9671-feac9049ffc1",
										"exec": [
											"eval(globals.loadUtils).prepareRollBackReceivingRequestForPoLineOfFormat(globals.completeOpenOrderId, \"Electronic Resource\", 1);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8e007c78-9dc0-4ecb-88a4-d16d25f37bce",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has successfully reverted piece\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
											"    // All pieces should be successfully received",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Revert 1 received piece record back to `Expected` and associated Inventory item back to `On order` for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-175](https://issues.folio.org/browse/MODORDERS-175))."
							},
							"response": []
						},
						{
							"name": "Order with 4 PO Lines should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f9feb615-6fdb-4fa7-9779-9b5e27d07a38",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0b66c77d-17e6-462f-b86f-1e15033e424d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{anotherCompleteOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{anotherCompleteOrderId}}"
									]
								},
								"description": "Gets order created by requests from `Pending To Open order` and verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Cancelled`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Order with receipt not required should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3682765e-d8f8-4edc-b370-307e670d3dcc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "780c433c-59bf-4014-86ca-94971cac577e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderWithReceiptNotRequiredId}}"
									]
								},
								"description": "Gets order created by `Create Order With receipt not required` verifies that it is closed now.  \nIf all is okay, change `paymentStatus` of the first PO Line to `Partially Paid`. This should re-open order eventually (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						},
						{
							"name": "Mixed order should be already reopened",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8d9b0777-026a-4af6-af06-f157d0eed4c3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "08cfe378-0bf4-4c1a-9e5c-7c3ce01c6861",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Order is re-opened\", function() {",
											"    pm.response.to.be.ok;",
											"",
											"    let order = pm.response.json();",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{completeOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{completeOpenOrderId}}"
									]
								},
								"description": "Gets order created by `Create Open order with P/E Mix and Electronic lines` verifies that it is closed now (see [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218))."
							},
							"response": []
						}
					],
					"description": "The folder contains sets of requests:  \n1. Get orders and verify that their workflow status is `Closed`. If this is true, modify one of PO Line's payment status so the order becomes `Open` eventually.\n2. Roll back one of received piece so the order becomes `Open` eventually.\n3. Verify that orders were successfully re-opened by operations described above.\n\nSee [MODORDERS-218](https://issues.folio.org/browse/MODORDERS-218) for more details.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3510827-5a92-4fe0-af26-993e60e6f463",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "49ac883b-04a5-4c59-81bb-f01a48aaca26",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate New POnumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "096a7194-af5a-4f29-8bb8-38b6157c638f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66b26b04-34af-4c37-b755-ea8c28aa930b",
										"exec": [
											" ",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"NewPO111NewPO\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 204 if a valid and unique PO Number is given"
							},
							"response": []
						},
						{
							"name": "Get poNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0e2cd28-d980-4b5d-8189-0a4a9bb761a0",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"// 1. Verify response status\r",
											"pm.test(\"First response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// 2. Validate PoNumber schema\r",
											"var schema = JSON.parse(pm.environment.get(utils.schemaPrefix + \"po_number.json\"));\r",
											"pm.test('PoNumber schema is valid', function() {\r",
											"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"//3.  Verify po number generation process\r",
											"utils.sendGetRequest(\"/orders/po-number\", function (err, res) {\r",
											"    pm.test(\"Second response status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        console.log(\"Second request po number : \" + res.json().poNumber);\r",
											"\r",
											"        pm.test(\"po numbers are not same\", function () {\r",
											"            pm.expect(jsonData.poNumber).to.not.eql(res.json().poNumber);\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a9c39bb1-d36b-4425-b6f6-2ed93eb46fb8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number"
									]
								},
								"description": "GET /orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Orders",
					"item": [
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "349963ec-9674-4fbc-acde-40efd86af288",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "95e8e6a4-a92f-43f9-b76c-2d804b36948a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 3 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.purchaseOrders).to.have.lengthOf.at.least(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders by query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29abff6c-4bed-4508-9c4f-c508a85a6742",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "133d55db-de9d-40a2-8797-738228355a14",
										"exec": [
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"Validate that response contains orders with proper workflow status\", function () {",
											"    for(var i = 0; i < jsonData.purchaseOrders.length; i++) {",
											"    \tpm.expect(jsonData.purchaseOrders[i].workflowStatus).to.equal(\"Open\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6f4a9bf-aa80-4ab9-8df8-2b7e663d0111",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db5baec1-0d8f-45b4-9ba2-7a9a1b9f900d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var purchaseOrdersData = {};",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    purchaseOrdersData = pm.response.json();",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"    ",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Validate that response contains orders sorted by dateOrdered ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    let purchaseOrders = pm.response.json().purchaseOrders;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"Validate that PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											"",
											"",
											"    ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3fbc0972-ddbc-4d49-881a-8596e54df687",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "414b3188-ec94-4b6c-bc51-7f176b72d5ef",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order\", function () {",
											"    pm.expect(purchaseOrders.length).to.not.be.below(1);",
											"    pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < purchaseOrders.length; i++) {",
											"        if (uniqueIds.indexOf(purchaseOrders[i].id) === -1) {",
											"            uniqueIds.push(purchaseOrders[i].id);",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.be.equal(uniqueIds.length);",
											"    ",
											"    pm.test(\"Response contains orders sorted by dateOrdered descending\", function () {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"    \tpm.expect(new Date(purchaseOrders[i].dateOrdered)).to.most(date);",
											"    \tdate = new Date(purchaseOrders[i].dateOrdered);",
											"    \t    utils.sendGetRequest(\"/orders/order-lines?limit=30&query=orderFormat==Electronic Resource AND purchaseOrderId==\" + purchaseOrders[i].id, (err, res) => {",
											"    \t    pm.test(\"PoLines with sorting criteria exist\", function () {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }});",
											"});",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy dateOrdered/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open orders with date range and nested field sorting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "58941230-5c4d-4b76-88ae-365570ddc994",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e5420a54-2d35-4d43-8414-84ab608fec4e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment');",
											" ",
											"pm.test(\"PurchaseOrder response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let purchaseOrders = pm.response.json().purchaseOrders;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order with metadata.createdDate\", function () {",
											"    let numOfOrdersWithMetadata = 0;",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(purchaseOrders[i]).to.have.property(\"metadata\");",
											"        if (purchaseOrders[i].hasOwnProperty('metadata') && purchaseOrders[i].metadata.hasOwnProperty('createdDate')) {",
											"            numOfOrdersWithMetadata++;",
											"        }",
											"    }",
											"    pm.expect(purchaseOrders.length).to.not.be.below(2);",
											"    pm.expect(numOfOrdersWithMetadata).to.not.be.below(2);",
											"    ",
											"    pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function () {",
											"    let date = new Date('0000-01-01T00:00:00.000+0000');",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(date);",
											"    \tdate = new Date(purchaseOrders[i].metadata.createdDate);",
											"    }});",
											"    pm.test(\"Response contains orders in the fixed date range\", function () {",
											"    for(var i = 0; i < purchaseOrders.length; i++) {",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"        pm.expect(new Date(purchaseOrders[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"    }});",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}} sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}} sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Order Lines",
					"item": [
						{
							"name": "Get list of lines by empty query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d6f267a8-f341-46d6-970f-9fca64a5a680",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e2676f3e-4f71-4395-84da-53fc96424848",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"At least 4 orders\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.poLines).to.have.lengthOf.above(4);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of lines with \"Awaiting Payment\" status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a908502a-c131-4894-84fc-bdd8bc1f5f34",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b6faf5c-6190-422e-ae0b-d256f5e50386",
										"exec": [
											"pm.test(\"Validate that response contains orders with proper payment status\", function () {",
											"    pm.response.to.have.status(200);",
											"    let poLines = pm.response.json().poLines;",
											"    pm.expect(poLines).to.have.lengthOf.at.least(5);",
											"    poLines.forEach(pol => pm.expect(pol.paymentStatus).to.equal(\"Awaiting Payment\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=10&query=paymentStatus==Awaiting Payment",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "query",
											"value": "paymentStatus==Awaiting Payment"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by ascending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "af91a931-29cb-4fef-b265-84e9264b7612",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2d2b0be3-0780-421c-944a-dd987c8ba808",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.test(\"Check if polines sorted by order metadata.createdDate field\", function() {",
											"            if (poLines[i].hasOwnProperty('metadata')) {",
											"                pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"                date = new Date(poLines[i].metadata.createdDate);",
											"            }",
											"        });",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/order-lines requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of order lines with date range and nested search",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f309f70e-1c43-43af-bb31-71b8220df139",
										"exec": [
											"var moment = require('moment');",
											"",
											"pm.variables.set(\"minDate\", moment().utc().subtract(5, 'minutes').format('YYYY-MM-DDTHH:mm:ss[Z]'));",
											"pm.variables.set(\"maxDate\", moment().utc().format('YYYY-MM-DDTHH:mm:ss[Z]'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "846a8e36-c15b-4d8a-aae8-7cd82102ef77",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var moment = require('moment')",
											"",
											"pm.test(\"PurchaseOrder response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 Purchase Order Line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Validate that response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('1900-01-01T01:01:01.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.expect(poLines[i]).to.have.property(\"metadata\");",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(date);",
											"        //check polines date range",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.least(new Date(pm.variables.get(\"minDate\")));",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(new Date(pm.variables.get(\"maxDate\")));",
											"        date = new Date(poLines[i].metadata.createdDate);",
											"",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=physical.createInventory==Instance, Holding, Item AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"Validate that POs with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "physical.createInventory==\"Instance, Holding, Item\" AND metadata.createdDate>{{minDate}} AND metadata.createdDate<{{maxDate}}    sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get list of Open order lines sorted by descending",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3ff6c640-e63b-4a22-8c76-dafbc66cbab0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6b507fd-350b-4444-ae3d-9d5916ba3ce3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"PurchaseOrder line response status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let poLines = pm.response.json().poLines;",
											"",
											"pm.test(\"Recieved more than 1 PO line\", function() {",
											"    pm.expect(poLines.length).to.not.be.below(1);",
											"});",
											"",
											"pm.test(\"Ensure there are no duplicate rows in the results\", function() {",
											"    var uniqueIds = [];",
											"    for (i = 0; i < poLines.length; i++) {",
											"        if (uniqueIds.indexOf(poLines[i].id) === -1) {",
											"            uniqueIds.push(poLines[i].id);",
											"        }",
											"    }",
											"    pm.expect(poLines.length).to.be.equal(uniqueIds.length);",
											"});",
											"",
											"pm.test(\"Response contains orders sorted by metadata.createdDate ascending\", function() {",
											"    let date = new Date('9999-12-12T00:00:00.000+0000');",
											"    let poLines = pm.response.json().poLines;",
											"    for (var i = 0; i < poLines.length; i++) {",
											"        pm.expect(poLines[i]).to.have.property(\"metadata\");",
											"        pm.expect(new Date(poLines[i].metadata.createdDate)).to.most(date);",
											"        date = new Date(poLines[i].metadata.createdDate);",
											"",
											"        utils.sendGetRequest(\"/orders/composite-orders?limit=30&query=workflowStatus==Open AND id==\" + poLines[i].purchaseOrderId, (err, res) => {",
											"            pm.test(\"PoLines with sorting criteria exist\", function() {",
											"                pm.expect(res).to.have.status(200);",
											"                pm.expect(res.json().totalRecords).to.not.be.below(1);",
											"            });",
											"        });",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?limit=30&query=workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "limit",
											"value": "30"
										},
										{
											"key": "query",
											"value": "workflowStatus==Open AND orderFormat==Electronic Resource sortBy metadata.createdDate/sort.descending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "932a4408-3557-4d0b-9973-b075c8eca338",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c0dfd81c-7108-41b6-9041-7219aefb776f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces Creation",
					"item": [
						{
							"name": "P/E Mix Order (Physical and Electronic resources)",
							"item": [
								{
									"name": "Pieces PE Mix - Create Draft order with 2 lines",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "93a9532a-0cbf-42c3-af58-505f54361483",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Pending\";",
													"    order.compositePoLines[0].orderFormat = \"P/E Mix\";",
													"    ",
													"    order = utils.deletePoNumber(order);",
													"    // Set retrieved content for further requests",
													"    pm.variables.set(\"poListedPrintMonographPiece\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9e89b3db-0f5d-4170-be09-6239af656aaf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.globals.set(\"orderIdPEMix\", jsonData.id); ",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 2);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{poListedPrintMonographPiece}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4648ce73-501a-4f6b-92b3-08b584de5830",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6e4140d7-2f8d-4a4f-9bc3-0e0091c67c76",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 2);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"P/E Mix\")[0].id); ",
													"    pm.globals.set(\"poLine2IdPEMix\", order.compositePoLines.filter(line => line.orderFormat === \"Electronic Resource\")[0].id);",
													"    pm.globals.set(\"requestBodyToBeUpdated\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(7);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(7);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receiving History initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "69cf8ac7-b6cf-4f0b-83ce-3bc0bb72de3d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f226397c-b3a6-4e9d-84e8-4a4c22dd9752",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "57fb0fa4-3e8d-4229-aa73-785c034210cb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "91873d70-475b-48ff-8ce1-f00ec91229bf",
												"exec": [
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyToBeUpdated}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{orderIdPEMix}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "66e8c236-95df-4625-81ad-0b29c73677a6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "12eb43f7-bf7c-4ece-a884-0d60b5f14e25",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(7);",
													"    jsonData.pieces.forEach(piece => utils.validatePiece(piece));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId==({{poLineIdPEMix}} or {{poLine2IdPEMix}})",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId==({{poLineIdPEMix}} or {{poLine2IdPEMix}})"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "908339c1-bf82-4375-b2fa-23b1bf4362df",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "129f26c4-484d-480d-8991-71e799108f3f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// poLine1 -> 3 physical + 1 electronic = 4 pieces",
													"// poLine2 -> 3 electronic = 3 pieces",
													"// 3 + 4 -> 7 Pieces",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(7);",
													"    let receivingHistory = jsonData.receivingHistory;",
													"",
													"    let pol1PhysQty = receivingHistory.filter(entry => entry.pieceFormat === \"Physical\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol1ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLineIdPEMix).length;",
													"    let pol2ElQty = receivingHistory.filter(entry => entry.pieceFormat === \"Electronic\" && entry.poLineId === globals.poLine2IdPEMix).length;",
													"    pm.expect(pol1PhysQty).to.eql(3);",
													"    pm.expect(pol1ElQty).to.eql(1);",
													"    pm.expect(pol2ElQty).to.eql(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPEMix}} or poLineId=={{poLine2IdPEMix}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for P/E Mix resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5b93e755-4cd1-4363-b38e-286a9104aace",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"P/E Mix\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a1f27973-c78f-4b04-b28e-174521623b09",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records and Inventory items for a PO Line with `P/E Mix` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-163](https://issues.folio.org/browse/MODORDERS-163))."
									},
									"response": []
								},
								{
									"name": "Pieces PE Mix - Receive all pieces for Electronic resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d4849d30-46bf-4999-9365-47c33dd44a9d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.orderIdPEMix, \"Electronic Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8f21d724-595c-4817-82db-782c06f6b043",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all piece records without Inventory items for a PO Line with `Electronic Resource` order format from an order created by `Create Open order with P/E Mix and Electronic lines` request (see [MODORDERS-162](https://issues.folio.org/browse/MODORDERS-162)). The PO Line is with 4 pieces, create inventory is `true`."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4b180fa4-3fc3-4616-a323-7060f8b9afa1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8fdfb3cc-8ca0-4b50-bb95-0944be7af311",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Order with only Physical resource",
							"item": [
								{
									"name": "Pieces Phy - Create Draft order with 1 line",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9310f8c6-cff7-4f36-8bed-d75d4bdd749a",
												"exec": [
													"var uuid = require('uuid');",
													"pm.globals.set(\"randomUUId\", uuid.v4());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d874b8c-885e-4387-9bd9-200e40631056",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													" ",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"Each order has these optional fields\", function() {",
													"    pm.expect(jsonData.id).to.exist;",
													"    pm.expect(jsonData.approved).to.exist;",
													"    pm.expect(jsonData.poNumber).to.exist;",
													"    pm.expect(jsonData.notes).to.exist;",
													"",
													"    utils.validatePoLines(jsonData, 1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"{{randomUUId}}\",\n    \"approved\": true,\n    \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n    \"notes\": [\n        \"ABCDEFGHIJKLMNO\",\n        \"ABCDEFGHIJKLMNOPQRST\",\n        \"ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    \"poNumber\": \"PIECE100674545\",\n    \"orderType\": \"One-Time\",\n    \"reEncumber\": false,\n    \"totalEstimatedPrice\": 152.63,\n    \"totalItems\": 6,\n    \"workflowStatus\": \"Pending\",\n    \"vendor\": \"{{activeVendorId}}\",\n    \"compositePoLines\": [\n        {\n            \"id\": \"4186d931-3965-4794-bfbf-a398944127c2\",\n            \"acquisitionMethod\": \"Purchase At Vendor System\",\n            \"alerts\": [\n                {\n                    \"id\": \"a8129c90-208d-4a0d-aba1-71faa188fe84\",\n                    \"alert\": \"Receipt overdue\"\n                }\n            ],\n            \"cancellationRestriction\": false,\n            \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n            \"claims\": [\n                {\n                    \"claimed\": false,\n                    \"sent\": \"2018-10-09T00:00:00.000+0000\",\n                    \"grace\": 30\n                }\n            ],\n            \"collection\": false,\n            \"contributors\": [\n                {\n                    \"contributor\": \"Ed Mashburn\",\n                    \"contributorNameTypeId\": \"{{contributorNameTypeId}}\"\n                }\n            ],\n            \"cost\": {\n                \"listUnitPrice\": 24.99,\n                \"currency\": \"USD\",\n                \"additionalCost\": 10,\n                \"discount\": 5,\n                \"discountType\": \"percentage\",\n                \"quantityPhysical\": 3,\n                \"quantityElectronic\": 0,\n                \"poLineEstimatedPrice\": 81.22\n            },\n            \"description\": \"ABCDEFGH\",\n            \"details\": {\n                \"receivingNote\": \"ABCDEFGHIJKL\",\n                \"productIds\": [\n                    {\n                        \"productId\": \"9780764354113\",\n                        \"productIdType\": \"{{identifierTypeId}}\"\n                    }\n                ],\n                \"subscriptionFrom\": \"2018-10-09T00:00:00.000+0000\",\n                \"subscriptionInterval\": 824,\n                \"subscriptionTo\": \"2020-10-09T00:00:00.000+0000\"\n            },\n            \"donor\": \"ABCDEFGHIJKLM\",\n            \"fundDistribution\": [\n                {\n                    \"code\": \"HIST\",\n        \t\t\t\"fundId\": \"{{fundId}}\",\n        \t\t\t\"distributionType\": \"percentage\",\n        \t\t\t\"value\": 80\n                },\n                {\n                    \"code\": \"GENRL\",\n        \t\t\t\"fundId\": \"{{fundId}}\",\n                    \"encumbrance\": \"0466cb77-0344-43c6-85eb-0a64aa2934e5\",\n        \t\t\t\"distributionType\": \"percentage\",\n        \t\t\t\"value\": 20\n                }\n            ],\n            \"locations\": [\n                {\n                    \"locationId\": \"{{locationId1}}\",\n                    \"quantity\": 1,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 1\n                },\n                {\n                    \"locationId\": \"{{locationId2}}\",\n                    \"quantity\": 2,\n                    \"quantityElectronic\": 0,\n                    \"quantityPhysical\": 2\n                }\n            ],\n            \"orderFormat\": \"Physical Resource\",\n            \"paymentStatus\": \"Awaiting Payment\",\n            \"physical\": {\n                \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n                \"receiptDue\": \"2018-10-10T00:00:00.000+0000\",\n                \"volumes\": [\n                    \"vol.1\"\n                ],\n                \"materialType\": \"{{materialTypeId}}\"\n            },\n            \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n            \"publicationDate\": \"2017\",\n            \"publisher\": \"Schiffer Publishing\",\n            \"purchaseOrderId\": \"8b854f27-06cf-41ed-a7cb-d00d5d8fe5e4\",\n            \"receiptStatus\": \"Pending\",\n            \"reportingCodes\": [\n                {\n                    \"id\": \"9f49a9b0-5868-45ac-a2ec-c5a405311f4a\",\n                    \"code\": \"CODE1\",\n                    \"description\": \"ABCDEF\"\n                },\n                {\n                    \"id\": \"4bf527d2-0a01-41ec-bb56-eb660f970248\",\n                    \"code\": \"CODE2\",\n                    \"description\": \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                },\n                {\n                    \"id\": \"8fd796e5-6b8d-4f60-9302-4071e9e844da\",\n                    \"code\": \"CODE3\",\n                    \"description\": \"ABCDE\"\n                }\n            ],\n            \"requester\": \"Leo Bulero\",\n            \"rush\": true,\n            \"selector\": \"ABCD\",\n            \"source\": \"API\",\n            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n            \"vendorDetail\": {\n                \"instructions\": \"ABCDEFG\",\n                \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n                \"refNumber\": \"123456-78\",\n                \"refNumberType\": \"Supplier's unique order line reference number\",\n                \"vendorAccount\": \"8910-10\"\n            },\n            \"metadata\": {\n                \"createdDate\": \"2010-10-08T03:53:00.000+0000\",\n                \"createdByUserId\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify order created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2f3c8bfb-714f-46e5-8900-175919b854a2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "35a9fd2d-d493-41b4-8ffd-06dd09b22bf9",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													" ",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate PO totalItems\", function () {",
													"    var order = pm.response.json();",
													"",
													"    utils.validatePoLines(order, 1);",
													"",
													"    order.workflowStatus = \"Open\";",
													"    pm.globals.set(\"poLineIdPhysical\", order.compositePoLines[0].id); ",
													"    pm.globals.set(\"requestBodyPhysical\", JSON.stringify(order));",
													"    pm.expect(order.totalItems).to.equal(3);",
													"    pm.expect(utils.getTotalResourcesQuantity(order)).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "GET /orders/composite-orders/id requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receiving history initially empty",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b101fa1a-b4fb-42e2-9610-7f2ed1557160",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9ca4a8bf-d532-4550-b75e-1b20a4db7799",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(0);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Update order by changing workflow status to Open",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0d95a643-ea27-4708-9344-958f90ef56d3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "04cf926a-be81-439c-aed2-9e672dd02977",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"pm.test(\"Successfully updated (status code is 204)\", function () {",
													"    pm.response.to.have.status(\"No Content\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBodyPhysical}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{randomUUId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{randomUUId}}"
											]
										},
										"description": "Piece records are created on transitioning the orders from Pending to Open"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Verify pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "670f3c7d-ee38-495e-80a0-29619e97b838",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "869f0011-e511-4e2b-9c14-46362a362c0c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(3);",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Expected\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Get receiving history with pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f86089b4-3b70-46a7-b8e1-20a3816586ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "94d168c6-06d1-486c-8a46-11ce35083002",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var jsonData = {};",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    jsonData = pm.response.json();",
													"});",
													"",
													"// 3 pieces created for 3 physical resources",
													"pm.test(\"History has pieces to receive\", function() {",
													"    pm.expect(jsonData.totalRecords).to.equal(3);",
													"});",
													"",
													"pm.test(\"History contains all expected fields\", function(){",
													"    jsonData.receivingHistory.forEach(history => {",
													"        utils.validateReceivingHistory(history);",
													"        pm.expect(history.pieceFormat).to.equal(\"Physical\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receiving-history"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								},
								{
									"name": "Pieces Phy - Receive all pieces for Physical resources",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "802ec827-766e-465d-88d3-83ce7863df98",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"utils.prepareReceivingRequestForPoLineOfFormat(globals.randomUUId, \"Physical Resource\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "37d21b97-2f4a-4f7a-9ff8-1117ffcf992f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let jsonRq = JSON.parse(pm.variables.get(\"receivingRqBody\"));",
													"let receivingPoLineId = pm.variables.get(\"receivingPoLineId\");",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.response.to.be.ok;",
													"});",
													"",
													"pm.test(\"The reponse has all pieces successfully received\", function () {",
													"    let jsonRs = pm.response.json();",
													"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
													"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeReceived.length);",
													"    // All pieces should be successfully received",
													"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
													"});",
													"",
													"utils.sendGetRequest(\"/orders/order-lines/\" + receivingPoLineId, (err, res) => {",
													"    let line = res.json();",
													"    utils.validateReceiptStatus(line, \"Fully Received\");",
													"    utils.validateInventoryItemsReceived(line);",
													"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{receivingRqBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"receive"
											]
										},
										"description": "Receives all remaining piece records and Inventory items for a PO Line with `Physical Resource` order format from an order created by `Create Open order with physical and electronic lines` request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
									},
									"response": []
								},
								{
									"name": "Get all pieces created",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "66363a74-6290-4323-828c-569e738c1663",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cb8be0fd-2f31-4270-b2ec-2cf7e3dd6fb7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Pieces contains all expected fields\", function(){",
													"    let jsonData = pm.response.json();",
													"    pm.expect(jsonData.pieces).to.have.lengthOf(3);",
													"    jsonData.pieces.forEach(piece => {",
													"        utils.validatePiece(piece);",
													"        pm.expect(piece.format).to.equal(\"Physical\");",
													"        pm.expect(piece.receivingStatus).to.equal(\"Received\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineIdPhysical}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders-storage",
												"pieces"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{poLineIdPhysical}}"
												}
											]
										},
										"description": "GET /orders/receiving-history requests that return 200"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "797d31fa-3124-41d1-84f8-772c3e7d3e66",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "600e1534-57a2-48be-a678-29bc7dcf4b1a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create piece with itemId",
							"item": [
								{
									"name": "init inventory data",
									"item": [
										{
											"name": "create instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0f06c3d3-d2ac-4878-89e0-1ab535b8279d",
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e5709d47-7919-49e0-a263-8156c95f8db3",
														"exec": [
															"var uuid = require('uuid');",
															"pm.environment.set(\"_instance_id\", uuid.v4());",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"discoverySuppress\": false,\n    \"staffSuppress\": false,\n    \"previouslyHeld\": false,\n    \"source\": \"FOLIO\",\n    \"title\": \"test\",\n    \"instanceTypeId\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\n    \"precedingTitles\": [],\n    \"succeedingTitles\": [],\n    \"id\": \"{{_instance_id}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances"
													]
												}
											},
											"response": []
										},
										{
											"name": "create holding",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "66fcc8d7-bdbd-4c44-942b-9a72ce916511",
														"exec": [
															"pm.environment.set(\"_holding_id\", pm.response.json().id);",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"permanentLocationId\" : \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n\t\"instanceId\" : \"{{_instance_id}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{instanceId}}%20and%20permanentLocationId==53cf956f-c1df-410b-8bea-27f712cca7c0",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "create item",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a056d4dc-d19e-4117-9cb6-7fa3e6f84b89",
														"exec": [
															"pm.environment.set(\"_item_id\", pm.response.json().id);",
															"",
															"pm.test(\"purchaseOrderLineIdentifier is null\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.purchaseOrderLineIdentifier).to.eql(null);",
															"});",
															"",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "accept",
														"value": "application/json"
													},
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\" : \"{{_holding_id}}\",\n    \"barcode\": \"{{$guid}}\",\n    \"materialType\": {\n        \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\"\n    }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"items"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "create order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b820e703-a217-4de1-a88c-4ae450465821",
												"exec": [
													"var id = pm.response.json().id",
													"pm.environment.set(\"_order_id\", id);",
													"pm.environment.set(\"_poNumber\", pm.response.json().poNumber);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bdebc3b0-e6b3-49a9-af88-54971f305905",
												"exec": [
													"var poNumberNum = pm.environment.get(\"poNumberNum\");",
													"if (poNumberNum === null) {",
													"    pm.environment.set(\"poNumberNum\", 1);",
													"    console.log('1');",
													"}else",
													"{",
													"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
													"    console.log('2');",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"poNumber\": \"99999{{poNumberNum}}\",\n    \"orderType\": \"One-Time\",\n    \"vendor\": \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "create order-line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e423f48-2f4f-425b-b574-010a9bbb11fc",
												"exec": [
													"pm.environment.set(\"_poline_id\", pm.response.json().id);",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"edition\" : \"First edition.\",\n  \"checkinItems\" : true,\n  \"instanceId\" : \"271827e7-8e62-4669-bb3a-fac5ed92c4e9\",\n  \"acquisitionMethod\" : \"Approval Plan\",\n  \"alerts\" : [ ],\n  \"claims\" : [ ],\n  \"contributors\" : [ {\n    \"contributor\" : \"Burnett, William (Consulting professor of design),\",\n    \"contributorNameTypeId\" : \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n  }, {\n    \"contributor\" : \"Evans, David J. (David John), 1953-\",\n    \"contributorNameTypeId\" : \"2b94c631-fca9-4892-a730-03ee529ffe2a\"\n  } ],\n  \"cost\" : {\n    \"listUnitPrice\" : 1.0,\n    \"currency\" : \"USD\",\n    \"discountType\" : \"percentage\",\n    \"quantityPhysical\" : 1,\n    \"poLineEstimatedPrice\" : 1.0\n  },\n  \"details\" : {\n    \"productIds\" : [ {\n      \"productId\" : \"9780525655244\",\n      \"productIdType\" : \"8261054f-be78-422d-bd51-4ed9f33c3422\",\n      \"qualifier\" : \"(hardcover)\"\n    } ],\n    \"subscriptionInterval\" : 365\n  },\n  \"eresource\" : {\n    \"activated\" : false,\n    \"createInventory\" : \"Instance, Holding\",\n    \"trial\" : false,\n    \"accessProvider\" : \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\"\n  },\n  \"fundDistribution\" : [ {\n    \"fundId\" : \"65032151-39a5-4cef-8810-5350eb316300\",\n    \"distributionType\" : \"percentage\",\n    \"value\" : 100.0\n  } ],\n  \"isPackage\" : false,\n  \"locations\" : [ {\n    \"locationId\" : \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"quantity\" : 1,\n    \"quantityPhysical\" : 1\n  } ],\n  \"orderFormat\" : \"Physical Resource\",\n  \"paymentStatus\" : \"Pending\",\n  \"physical\" : {\n    \"createInventory\" : \"Instance, Holding, Item\",\n    \"materialType\" : \"1a54b431-2e4f-452d-9cae-9cee66c9a892\",\n    \"materialSupplier\" : \"11fb627a-cdf1-11e8-a8d5-f2801f1b9fd1\",\n    \"volumes\" : [ ]\n  },\n  \"poLineNumber\" : \"{{_poNumber}}-1\",\n  \"publicationDate\" : \"2020\",\n  \"publisher\" : \"Alfred A. Knopf\",\n  \"purchaseOrderId\" : \"{{_order_id}}\",\n  \"receiptStatus\" : \"Pending\",\n  \"reportingCodes\" : [ ],\n  \"source\" : \"User\",\n  \"titleOrPackage\" : \"Designing your work life : how to thrive and change and find happiness at work / Bill Burnett and Dave Evans.\",\n  \"vendorDetail\" : {\n    \"instructions\" : \"\",\n    \"vendorAccount\" : \"1234\"\n  },\n  \"metadata\" : {\n    \"createdDate\" : \"2020-04-17T12:07:19.778+0000\",\n    \"createdByUserId\" : \"b6c6415e-acec-561a-b7b6-a5f474393cbf\",\n    \"updatedDate\" : \"2020-04-17T12:07:19.778+0000\",\n    \"updatedByUserId\" : \"b6c6415e-acec-561a-b7b6-a5f474393cbf\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "get title",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7f32cd82-d6a4-4bf9-9b9d-ec4c3d3a1a0a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "33a4d0fd-c7b9-485e-92b3-9fb0b91d82fe",
												"exec": [
													"pm.test(\"Title status code is 200\", function() {",
													"    pm.response.to.have.status(200);",
													"    let title = pm.response.json().titles[0];",
													"    pm.expect(title.id).to.exist;",
													"    pm.variables.set(\"titleId\", title.id);",
													"    pm.variables.set(\"titleContent\", JSON.stringify(title));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{_poline_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"titles"
											],
											"query": [
												{
													"key": "query",
													"value": "poLineId=={{_poline_id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "create piece",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9d71545-f5f0-4dfc-8f5f-dce1ba5baab1",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Physical\",\n    \"caption\": \"test\",\n    \"locationId\": \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{titleId}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"pieces"
											]
										}
									},
									"response": []
								},
								{
									"name": "get item with purchaseOrderLineIdentifier",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1414edbc-02c1-4b1c-97cf-c22b881b5ec1",
												"exec": [
													"",
													"pm.test(\"purchaseOrderLineIdentifier isn't null\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.purchaseOrderLineIdentifier).to.eql(pm.environment.get(\"_poline_id\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken-testAdmin}}"
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\": \"4e7762bf-eb3a-4fd4-bb9a-cf102bc122d1\",\n    \"barcode\": \"1234{{poNumber}}\",\n    \"materialType\": {\n        \"id\": \"615b8413-82d5-4203-aa6e-e37984cb5ac3\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"2b94c631-fca9-4892-a730-03ee529ffe27\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_item_id}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"inventory",
												"items",
												"{{_item_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7295fced-a5b4-4823-b8a8-6fcd56a03122",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25f5be15-f1c3-4fbb-8a2b-5c9a36ca8e87",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create holdings/instance/item in time manual piece creation for POL is package",
							"item": [
								{
									"name": "Create holdings/instance/item in time manual piece creation where POL is package",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7295a98b-bd2b-44d8-b128-fd45f498ed97",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"poNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "389412b6-b2f7-47d5-85fc-344d2be31fcc",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.variables.set(\"order356-1\", beOrder);",
															"    pm.variables.set(\"orderId356-1\", beOrder.id);",
															"    pm.variables.set(\"orderNumber356-1\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add package order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1419ab5c-a0db-4c24-85e1-bf4da2eef7af",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.variables.set(\"orderLine356-1\", beOrderLine);",
															"    pm.variables.set(\"orderLineId356-1\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-1}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance, Holding, Item\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-1}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-1}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8cc30fc1-f495-415c-b078-a7050af1dd2d",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.variables.set(\"title356-1\", title);",
															"    pm.variables.set(\"titleId356-1\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-1}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "891d7689-0939-4a90-abae-738d90e017e2",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let piece = {};\r",
															"\r",
															"pm.test(\"Order line is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.variables.set(\"pieceId356-1\", piece.id);\r",
															"    pm.variables.set(\"pieceTitleId356-1\", piece.titleId);\r",
															"    pm.variables.set(\"pieceLocationId356-1\", piece.locationId);\r",
															"    pm.variables.set(\"piecePoLineId356-1\", piece.poLineId);\r",
															"    pm.variables.set(\"pieceItemId356-1\", piece.itemId);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-1}}\",\n\t\"titleId\":\"{{titleId356-1}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fa5b05fa-5016-4fa1-90ce-416542b22bcb",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let line = {};\r",
															"\r",
															"pm.test(\"Get order\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    line = pm.response.json();\r",
															"    pm.expect(line.compositePoLines[0].instanceId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6172eec9-d1b4-4f04-a430-146a2bd06c3e",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.variables.set(\"titleId356-1\", title.id);\r",
															"    pm.variables.set(\"titleInstanceId356-1\", title.instanceId);\r",
															"    pm.variables.set(\"titleTitle356-1\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.variables.get(\"orderLineId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f5df4c31-1ec4-4232-bd61-d64620a9b541",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get instance\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.variables.set(\"instanceId356-1\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.variables.get(\"titleTitle356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Item has link to title, POL, location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22169459-4302-4d75-b40f-b51c365ec63c",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let item = {};\r",
															"\r",
															"pm.test(\"Get item\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    item = pm.response.json();\r",
															"    pm.variables.set(\"itemId356-1\", item.id);\r",
															"    pm.variables.set(\"itemHoldingId356-1\", item.holdingsRecordId);\r",
															"    pm.expect(item.title).to.be.equal(pm.variables.get(\"titleTitle356-1\"));\r",
															"    pm.expect(item.purchaseOrderLineIdentifier).to.be.equal(pm.variables.get(\"orderLineId356-1\"));\r",
															"    pm.expect(item.effectiveLocation.id).to.be.equal(pm.variables.get(\"pieceLocationId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{pieceItemId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"items",
														"{{pieceItemId356-1}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9eb22009-3a25-4408-821b-a3344bf99bbb",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holding = {};\r",
															"\r",
															"pm.test(\"Get holding\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holding = pm.response.json();\r",
															"    pm.variables.set(\"holdingId356-1\", holding.id);\r",
															"    pm.expect(holding.instanceId).to.be.equal(pm.variables.get(\"instanceId356-1\"));\r",
															"    pm.expect(holding.permanentLocationId).to.be.equal(pm.variables.get(\"pieceLocationId356-1\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings/{{itemHoldingId356-1}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings",
														"{{itemHoldingId356-1}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create holdings/instancein time manual piece creation where POL is package Copy",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3a1bea0a-22a0-4ef1-bdd7-c6d15b792f1f",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"poNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b6984b39-d4cd-460e-93dd-a4859bc672ee",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"order356-2\", beOrder);",
															"    pm.environment.set(\"orderId356-2\", beOrder.id);",
															"    pm.environment.set(\"orderNumber356-2\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Package order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f7118f32-31f6-43c4-b56a-ef821832caa0",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"orderLine356-2\", beOrderLine);",
															"    pm.environment.set(\"orderLineId356-2\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-2}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-2}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-2}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "043b7566-59d7-4ca7-93cd-ecc3a1daefd3",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Title is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.environment.set(\"title356-2\", title);",
															"    pm.environment.set(\"titleId356-2\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-2}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59b7b88d-9c53-4538-900a-41489715dc9e",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let piece = {};\r",
															"\r",
															"pm.test(\"Piece is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.environment.set(\"pieceId356-2\", piece.id);\r",
															"    pm.environment.set(\"pieceTitleId356-2\", piece.titleId);\r",
															"    pm.environment.set(\"pieceLocationId356-2\", piece.locationId);\r",
															"    pm.environment.set(\"piecePoLineId356-2\", piece.poLineId);\r",
															"    pm.expect(piece.itemId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-2}}\",\n\t\"titleId\":\"{{titleId356-2}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76bb9713-3ce6-46ac-ae80-00f0673d7c7e",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let line = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    line = pm.response.json();\r",
															"    pm.expect(line.compositePoLines[0].instanceId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "220c21c1-3ad6-4633-aa24-5e47fd83654a",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.environment.set(\"titleId356-2\", title.id);\r",
															"    pm.environment.set(\"titleInstanceId356-2\", title.instanceId);\r",
															"    pm.environment.set(\"titleTitle356-2\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.environment.get(\"orderLineId356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f86c5201-9f7b-496c-b376-13f341bd458e",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.environment.set(\"instanceId356-2\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.environment.get(\"titleTitle356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-2}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a88a1c1-5250-47c9-bd3b-38eae0017932",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holdings = {};\r",
															"\r",
															"pm.test(\"Get holding\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holdings = pm.response.json();\r",
															"    pm.environment.set(\"holdingId356-2\", holdings.holdingsRecords[0].id);\r",
															"    pm.expect(holdings.holdingsRecords[0].instanceId).to.be.equal(pm.environment.get(\"instanceId356-2\"));\r",
															"    pm.expect(holdings.holdingsRecords[0].permanentLocationId).to.be.equal(pm.environment.get(\"pieceLocationId356-2\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{titleInstanceId356-2}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{titleInstanceId356-2}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create instance time manual piece creation where POL is package Copy Copy",
									"item": [
										{
											"name": "Create order One-Time",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "14e677c5-42b5-472b-9d2a-fbb16560b2b5",
														"exec": [
															"var bePoNumberNum = pm.environment.get(\"poNumberNum\");",
															"if (bePoNumberNum === null) {",
															"    pm.environment.set(\"poNumberNum\", 1);",
															"}else",
															"{",
															"    pm.environment.set(\"poNumberNum\", ++bePoNumberNum);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f3cd4ca6-b0b2-406e-a2a3-d4cb0c45cb3e",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrder = {};",
															"",
															"pm.test(\"One-time order is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrder = pm.response.json();",
															"    pm.environment.set(\"order356-3\", beOrder);",
															"    pm.environment.set(\"orderId356-3\", beOrder.id);",
															"    pm.environment.set(\"orderNumber356-3\", beOrder.poNumber);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"poNumber\": \"{{poNumberNum}}\",\n  \"vendor\": \"{{activeVendorId}}\",\n  \"orderType\": \"One-Time\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add order lines",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d3c8f593-1625-48d5-8031-b9fd35c6e05f",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let beOrderLine = {};",
															"",
															"pm.test(\"Order line is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    beOrderLine = pm.response.json();",
															"    pm.environment.set(\"orderLine356-3\", beOrderLine);",
															"    pm.environment.set(\"orderLineId356-3\", beOrderLine.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"source\": \"User\",\r\n  \"cost\": {\r\n    \"discountType\": \"percentage\",\r\n    \"discount\": 10,\r\n    \"currency\": \"USD\",\r\n    \"quantityPhysical\": 1,\r\n    \"listUnitPrice\": 1\r\n  },\r\n  \"vendorDetail\": {\r\n    \"instructions\": \"\",\r\n    \"vendorAccount\": \"BRXXXXX-01\"\r\n  },\r\n  \"details\": {\r\n    \"subscriptionInterval\": 0,\r\n    \"productIds\": [\r\n      {\r\n        \"productId\": \"3319643991\",\r\n        \"productIdType\": \"{{identifierTypeId}}\",\r\n        \"qualifier\": \"\"\r\n      }\r\n    ]\r\n  },\r\n  \"purchaseOrderId\": \"{{orderId356-3}}\",\r\n  \"eresource\": {\r\n    \"createInventory\": \"Instance, Holding\",\r\n    \"accessProvider\": \"{{activeVendorId}}\"\r\n  },\r\n  \"physical\": {\r\n    \"createInventory\": \"Instance\",\r\n    \"materialSupplier\": \"50fb6ae0-cdf1-11e8-a8d5-f2801f1b9fd1\",\r\n    \"materialType\": \"{{materialTypeId}}\"\r\n  },\r\n  \"locations\": [\r\n    {\r\n      \"locationId\": \"{{locationId1}}\",\r\n      \"quantityPhysical\": 1\r\n    }\r\n  ],\r\n  \"isPackage\": true,\r\n  \"instanceId\": null,\r\n  \"checkinItems\": false,\r\n  \"titleOrPackage\": \"TestAM\",\r\n  \"fundDistribution\": [\r\n    {\r\n      \"distributionType\": \"percentage\",\r\n      \"fundId\": \"{{fundId}}\",\r\n      \"value\": 100\r\n    }\r\n  ],\r\n  \"acquisitionMethod\": \"Approval Plan\",\r\n  \"orderFormat\": \"Physical Resource\"\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"order-lines"
													]
												}
											},
											"response": []
										},
										{
											"name": "Open order",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"{{orderId356-3}}\",\n  \"approved\": false,\n  \"notes\": [],\n  \"poNumber\": \"{{orderNumber356-3}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"totalEstimatedPrice\": 3.6,\n  \"totalItems\": 2,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Open\",\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"createdByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\",\n    \"updatedDate\": \"2020-04-14T11:22:33.171+0000\",\n    \"updatedByUserId\": \"584af3f6-b529-526c-a0d9-5553c5fb80a5\"\n  }\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create titles for package POL",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f07d49b-84cc-42de-8249-82f25cae0717",
														"exec": [
															"let utils = eval(globals.loadUtils);",
															"let title = {};",
															"",
															"pm.test(\"Piece is created\", function () {",
															"    pm.response.to.have.status(201);",
															"    title = pm.response.json();",
															"    pm.environment.set(\"title356-3\", title);",
															"    pm.environment.set(\"titleId356-3\", title.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"value": "{{xokapitoken}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"poLineId\": \"{{orderLineId356-3}}\",\r\n  \"title\": \"TestAM package line\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Piece for Title where POL is Package",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ddadea96-113f-49e8-b549-f5dcfa7713b2",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let piece = {};\r",
															"\r",
															"pm.test(\"Piece is created\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"    piece = pm.response.json();\r",
															"    pm.environment.set(\"pieceId356-3\", piece.id);\r",
															"    pm.environment.set(\"pieceTitleId356-3\", piece.titleId);\r",
															"    pm.environment.set(\"pieceLocationId356-3\", piece.locationId);\r",
															"    pm.environment.set(\"piecePoLineId356-3\", piece.poLineId);\r",
															"    pm.expect(piece.itemId).to.equal(undefined);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"poLineId\":\"{{orderLineId356-3}}\",\n\t\"titleId\":\"{{titleId356-3}}\",\n\t\"locationId\":\"{{locationId2}}\",\n\t\"format\":\"Physical\",\n\t\"caption\":\"Test\"\n\t\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"pieces"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that no InstanceId in POL",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Okapi-Token",
														"value": "{{xokapitoken-testAdmin}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Cache-Control",
														"type": "text",
														"value": "no-cache"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"composite-orders",
														"{{orderId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check that InstanceId and POLId in Title",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c7e2bc1e-854a-4c4a-b57b-89367f2f16e0",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let title = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    title = pm.response.json();\r",
															"    pm.environment.set(\"titleId356-3\", title.id);\r",
															"    pm.environment.set(\"titleInstanceId356-3\", title.instanceId);\r",
															"    pm.environment.set(\"titleTitle356-3\", title.title);\r",
															"    pm.expect(title.poLineId).to.be.equal(pm.environment.get(\"orderLineId356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles/{{pieceTitleId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"orders",
														"titles",
														"{{pieceTitleId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Instance",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ef1f3758-84ee-4993-8a69-082de67b6c18",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let instance = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    instance = pm.response.json();\r",
															"    pm.environment.set(\"instanceId356-3\", instance.id);\r",
															"    pm.expect(instance.title).to.be.equal(pm.environment.get(\"titleTitle356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances/{{titleInstanceId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"inventory",
														"instances",
														"{{titleInstanceId356-3}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check Holdings has link to instance and location",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f35fab3d-9bb9-424f-8fb9-50e4845cd035",
														"exec": [
															"let utils = eval(globals.loadUtils);\r",
															"let holdings = {};\r",
															"\r",
															"pm.test(\"Get title\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"    holdings = pm.response.json();\r",
															"    pm.environment.set(\"holdingId356-3\", holdings.holdingsRecords[0].id);\r",
															"    pm.expect(holdings.holdingsRecords[0].instanceId).to.be.equal(pm.environment.get(\"instanceId356-3\"));\r",
															"    pm.expect(holdings.holdingsRecords[0].permanentLocationId).to.be.equal(pm.environment.get(\"pieceLocationId356-3\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-okapi-token",
														"type": "text",
														"value": "{{xokapitoken-testAdmin}}"
													}
												],
												"url": {
													"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{titleInstanceId356-3}}",
													"protocol": "{{protocol}}",
													"host": [
														"{{url}}"
													],
													"port": "{{okapiport}}",
													"path": [
														"holdings-storage",
														"holdings"
													],
													"query": [
														{
															"key": "query",
															"value": "instanceId=={{titleInstanceId356-3}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "60357e2d-27e9-4890-9170-4dc134ef42a5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1e0d7e06-6d27-4535-8c04-731617a9f4cd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving History",
					"item": [
						{
							"name": "Get receiving history for Open Order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "60011a24-85ce-41f1-a6de-4f26ab0c6f16",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "963a3012-9cf5-43d9-8d53-d8d545fcdbe1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"History has pieces to receive\", function() {",
											"    pm.expect(jsonData.totalRecords).to.equal(7);",
											"});",
											"",
											"pm.test(\"History contains all expected fields\", function(){",
											"    jsonData.receivingHistory.forEach(history => utils.validateReceivingHistory(history));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{receivingHistoryPoId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{receivingHistoryPoId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history for Order With receipt not required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cfa73eb1-c341-46d7-9a17-8e39e658beec",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96d132ba-5f56-4afc-b5a2-234d4abc6f02",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"History has no pieces to receive\", function() {",
											"    pm.expect(pm.response.json().totalRecords).to.equal(0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=purchaseOrderId={{orderWithReceiptNotRequiredId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "purchaseOrderId={{orderWithReceiptNotRequiredId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Inventory",
					"item": [
						{
							"name": "Test createInventory defaults",
							"item": [
								{
									"name": "Create order with createInventory system value from config (createInventory config removed)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "df6e0778-9e10-4e68-974f-60b63c9d5198",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV5\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull1\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "474d0667-0571-40dd-b984-6b875e9a36ca",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId1\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull1}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Create order with createInventory default config value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "44e82904-0fa0-40fc-abb4-88a8a403a546",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"",
													"    let bodyTemplate = testConfigs.bodyTemplate;",
													"    let configName = \"createInventory\";",
													"",
													"    bodyTemplate.configName = configName;",
													"    bodyTemplate.value = \"{\\\"eresource\\\": \\\"None\\\",\\\"physical\\\": \\\"None\\\", \\\"other\\\": \\\"None\\\"}\";",
													"    utils.createConfig(bodyTemplate);",
													"",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV6\";",
													"",
													"    //remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull2\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4de4e5ae-9a06-4025-a9e2-d6cc6e57e02e",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId2\", order.id); ",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
													"    utils.validatePoLines(order, 1);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull2}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Get configs and delete them all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a034d530-f368-4bf0-91e0-d7b0ada9fd27",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Removing all current configs\", function() {",
													"    pm.response.to.be.ok;",
													"",
													"    let currentConfigs = pm.response.json().configs;",
													"    console.log(\"Current configs: \", currentConfigs);",
													"    for (var i = 0; i < currentConfigs.length; i++) {",
													"        let configId = currentConfigs[i].id;",
													"        utils.deleteConfig(configId);",
													"    }",
													"",
													"    pm.environment.unset(\"current-orders-configs\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "634a5e68-736f-4b96-a57f-79f06e535f7e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS"
												}
											]
										},
										"description": "Delete configs to excercise next step. The case when order created with empty configuration"
									},
									"response": []
								},
								{
									"name": "Instance Status - temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9295a56-96fb-41a7-ab06-df16a22901ac",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "beabc0da-449b-4ea3-8da7-96a132ef1002",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\": \"daf2681c-25af-4202-a3fa-e58fdf806183\",\r\n  \"code\": \"temp\",\r\n  \"name\": \"Temporary\",\r\n  \"source\": \"folio\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/instance-statuses",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"instance-statuses"
											]
										},
										"description": "Gets or creates if not yet exists test instance status to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Loan Type - Can circulate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f19779da-6682-42b4-ada0-c0fd56fccc5f",
												"exec": [
													"pm.test(\"Record is created\", () => {",
													"    pm.response.to.have.status(201);",
													"    pm.response.to.be.withBody;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26b211ac-862a-431b-a6d7-20a0af9897ad",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"id\":\"2b94c631-fca9-4892-a730-03ee529ffe27\",\r\n  \"name\":\"Can circulate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/loan-types",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"loan-types"
											]
										},
										"description": "Gets or creates if not yet exists test loan type to be used accross the orders while interaction with inventory"
									},
									"response": []
								},
								{
									"name": "Create order with createInventory system value (configs are empty)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a336b91e-843d-4263-9d21-8b4a140ebf74",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"CR34TE1NV7\";",
													"",
													"    // remove createInventory value",
													"    delete order.compositePoLines[0].eresource.createInventory;",
													"    delete order.compositePoLines[0].physical.createInventory;",
													"",
													"    pm.variables.set(\"orderWithCreateInventoryNull3\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2d7eaedd-08f4-4ecf-a2e9-a2f9f518fdb6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var order = {};",
													"",
													"pm.test(\"Status code is 201\", function() {",
													"    pm.response.to.have.status(201);",
													"    order = pm.response.json();",
													"    pm.expect(order.id).to.exist;",
													"    pm.globals.set(\"orderWithCreateInventoryNullId3\", order.id);",
													"});",
													"",
													"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function() {",
													"    utils.validatePoLines(order, 1, true);",
													"});",
													"utils.validateWorkflowStatus(order);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderWithCreateInventoryNull3}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Test for the case described in [MODORDERS-209](https://issues.folio.org/browse/MODORDERS-209)"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "be2aa86c-6b9c-4974-aead-fc02109f4d21",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "05426145-b4d3-44d3-a29d-6972fdd82e1a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create order with createInventory NONE and empty locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "93307697-db5f-42f0-b8de-db102e1e79a4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV1\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.compositePoLines[0].physical.createInventory = \"None\";",
											"    ",
											"    order.compositePoLines[0].locations = [];",
											"",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryNone\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4ee4ce94-5ff1-4ae8-9e1b-a92005eb0af1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryNoneId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Line and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryNone}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d292ec01-155d-4f6f-8580-1326b84527cd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV2\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstance\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9f1b065b-c6d8-4fab-9ee9-114199f700d9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstance}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2c242f77-1ce9-4823-931d-fad931f08b76",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV3\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHolding\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c0bd1235-1dba-42cc-9621-c8e7a6c1a3b9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHolding}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create order with createInventory INSTANCE_HOLDING_ITEM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a2d94ec-6743-4944-80bc-6f24e26606b0",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    order.poNumber = \"CR34TE1NV4\";",
											"    ",
											"    //set createInventory value",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    ",
											"    pm.variables.set(\"orderWithCreateInventoryInstanceHoldingItem\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "99cad85c-5574-49e9-9d91-f132a2c9d83f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderWithCreateInventoryInstanceHoldingItemId\", order.id); ",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithCreateInventoryInstanceHoldingItem}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Open order with P/E Mix, physical Instance, Holding, Items, electronic - None with locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c65600bd-6782-4339-a163-816d2b46483e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let order  = utils.prepareOrder(res.json());",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines[0].eresource.createInventory = \"None\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines.pop();",
											"    order.compositePoLines[0].cost.quantityPhysical = 2;",
											"    order.compositePoLines[0].cost.quantityElectronic = 2;",
											"    let location = {",
											"        \"locationId\": pm.environment.get(\"locationId1\"),",
											"        \"quantityElectronic\": 2,",
											"        \"quantityPhysical\": 2",
											"    };",
											"    ",
											"     order.compositePoLines[0].locations = [location];",
											"  ",
											"    pm.variables.set(\"po_mixed\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d2283c8a-c43b-4b51-8f37-d3f53ec0ceee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(jsonData, 1);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_mixed}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Get current configs and restore test values",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88755368-896d-49ca-a9da-480df41eb04a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let testConfigs = globals.testData.configs;",
											"let configNamesToProcess = testConfigs.configNames;",
											"",
											"let configs = [];",
											"pm.test(\"Get configs response is ok\", function () {",
											"    pm.response.to.be.ok;",
											"    configs = pm.response.json().configs;",
											"});",
											"",
											"console.log(\"Config codes to restore test values: \" + configNamesToProcess);",
											"",
											"for (var i = 0; i < configNamesToProcess.length; i++) {",
											"    let configName = configNamesToProcess[i];",
											"    let value = pm.variables.get(configName);",
											"",
											"    utils.updateOrCreateOrdersConfig(configs, configName, value);",
											"}",
											"",
											"// Store current version of configs",
											"pm.environment.set(\"current-orders-configs\", configs);",
											"pm.environment.set(\"temp-orders-configs\", configs);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a32b2ee-7f4a-4b8d-9003-674f954362b6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"configurations",
										"entries"
									],
									"query": [
										{
											"key": "query",
											"value": "module==ORDERS"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "get title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "62acceb0-4e65-492e-9e2b-0e16140724eb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"pm.environment.set(\"poLIneIdForTitle\", compPoLine.id);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8467b374-2e5b-4b18-a190-ffe23884a5b5",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let titles = pm.response.json();",
											"    pm.variables.set(\"titleId\", titles.titles[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{poLIneIdForTitle}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLIneIdForTitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check-in pieces without items in Inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3b9489e4-2843-4a71-8240-f9d149bf3b90",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"",
											"utils.createPieceAndCheckInBody(compPoLine);",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "00b5eec2-3aeb-4751-91a2-fb569ffc63c2",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece without items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db637d73-dfbd-4b5b-b275-e59688ecc3b8",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18df4798-f09f-420d-81a6-da95c355f430",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece in the prior request to Expected status"
							},
							"response": []
						},
						{
							"name": "check-in the existing piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48c94438-7fc8-40ae-ac24-1594f954f42f",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_electronic_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "758e8d2b-82e3-4260-b928-3b9959c31db2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Expected\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "Do not create a new piece, but the existing piece must be successfully checked in"
							},
							"response": []
						},
						{
							"name": "check-in pieces with items in inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8c12809f-318e-412c-a7ed-93081c34cf9b",
										"exec": [
											"//get holdings record Id -> need instance id and location id",
											"//get loan type id",
											"//create item -> need material type, loan type and holdings Id",
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"",
											"utils.prepareCheckinBodyWithItems(compPoLine);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6639e01-21cd-4307-82e5-8c63bac384d9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"checkinPoLineId\");",
											"",
											"pm.test(\"Response status code is 200\", function() {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function() {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    let receivingResults = pm.response.json().receivingResults[0];",
											"",
											"    utils.validateReceiptStatus(line, \"Partially Received\");",
											"    utils.validateInventoryItemsReceived(line, 1, \"In Process\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 0, \"Expected\");",
											"    utils.verifyItemsReceivedIntoAppropriateHolding(line, receivingResults);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece with items in inventory and performs check-in. Tests to see if the piece status is changed and also the Po line status. The order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "revert checked-in piece with items in inventory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08466f31-26ae-4c7b-bec3-b951b8899b52",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.globals.get(\"checkin_physical_poLine\").id;",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + checkinPoLineId, (err, res) => {",
											"    let line = res.json();",
											"    utils.validateReceiptStatus(line, \"Awaiting Receipt\");",
											"     utils.validateInventoryItemsReceived(line, 1, \"On order\");",
											"    utils.validateReceivingHistoryNumberOfPiecesByStatus(line, 1, \"Expected\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "636f5383-34ca-4632-beac-917d90efedb4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_physical_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Physical and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id,\"On order\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "rever the checked in piece with items. The item status as well as the piece status must be modified"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f8d4a99-bfaf-4c7a-9f60-2e631846edd4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e5f529e-a4b1-43d6-8f0c-2a7b6742e7e0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check Order  automatically changes workflowStatus",
					"item": [
						{
							"name": "Create Pending order, that should be automatically closed on transition to open",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c1783cd7-5261-45c7-8211-1be848134b34",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(pendingOrder));",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											" ",
											"    ",
											"    // add 2 new PO lines",
											"    pendingOrder.compositePoLines = pendingOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = pendingOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.globals.set(\"automatically_closed_order_content\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"            ",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e60de2ce-a55a-4b2d-bca8-045019a92978",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_closed_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{automatically_closed_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Open, adding 2 more lines make all lines completed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "284151a8-a3be-443e-96af-2fad7cc693d4",
										"exec": [
											"let pendingOrder = pm.globals.get(\"automatically_closed_order_content\");",
											"",
											"// Set Open status",
											"pendingOrder.workflowStatus = \"Open\";",
											"",
											"",
											"pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"pm.globals.unset(\"automatically_closed_order_content\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ba1f7ca-2a92-4d52-84b3-7776ca5d825f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyClosedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        let order  = res.json();",
											"        utils.validatePoLines(order, 4);",
											"        ",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyClosedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyClosedOrder}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Create Open order, that should be automatically closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ea6318f8-7339-44b5-a70a-f4c969e80544",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let openOrder = res.json();",
											"    openOrder.workflowStatus = \"Open\";",
											"    let order = {};",
											"    order = JSON.parse(JSON.stringify(openOrder));",
											"    delete openOrder.poNumber;",
											"",
											" ",
											"    // add 2 new PO lines",
											"    openOrder.compositePoLines = openOrder.compositePoLines.concat(order.compositePoLines);",
											"    let lines = openOrder.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
											"        lines[i].receiptStatus = (i % 3 === 0) ? \"Fully Received\" : \"Receipt Not Required\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.variables.set(\"request_body\", JSON.stringify(utils.prepareOrder(openOrder)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"        };",
											"    }",
											"    line.physical.createInventory = \"None\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1b46145d-f20c-4f80-9c62-382ec2417546",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 4);",
											"});",
											"",
											"pm.test(\"Order id exist\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyClosedOpenOrder\", jsonData.id);",
											"    pm.expect(jsonData.closeReason.reason).is.equal(\"Complete\");",
											"});",
											"",
											"utils.validateWorkflowStatus(jsonData);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create Pending order, that should be automatically open in an attempt to close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c2301170-bb3d-4309-ac3d-e3a497701461",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let pendingOrder = res.json();",
											"    pendingOrder.workflowStatus = \"Pending\";",
											"    delete pendingOrder.poNumber;",
											"    // Setting create inventory to false for PO Line with P/E Mix format",
											"    pendingOrder.compositePoLines[0].paymentStatus = \"Pending\";",
											"",
											"    pm.globals.set(\"po_listed_print_monograph\", JSON.stringify(utils.prepareOrder(pendingOrder)));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86e71653-9cdc-4270-b0cc-7f2ca76923ad",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    utils.verifyOrderCalculatedInfo(jsonData);",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"automaticallyOpenedOrder\", jsonData.id);",
											"    pm.globals.set(\"automatically_opened_order_content\", jsonData);",
											"    pm.expect(jsonData.approved).to.exist;",
											"    pm.expect(jsonData.poNumber).to.exist;",
											"    pm.expect(jsonData.notes).to.exist;",
											"    pm.expect(jsonData.totalItems).to.equal(utils.getTotalResourcesQuantity(jsonData));",
											"    pm.expect(jsonData.totalEstimatedPrice).to.be.above(0);",
											"    pm.expect(jsonData.vendor).to.exist;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order by changing workflow status to Close",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6a32ee1d-969e-4989-85de-7b6b4dd6f353",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"// Get mock order to add 2 more PO Lines",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"    let pendingOrder = pm.globals.get(\"automatically_opened_order_content\");",
											"",
											"    // Set Open status",
											"    pendingOrder.workflowStatus = \"Closed\";",
											"    pendingOrder.closeReason = {",
											"        \"reason\": \"Complete\"",
											"    };",
											" ",
											"    pm.variables.set(\"request_body\", JSON.stringify(pendingOrder));",
											"    pm.globals.unset(\"automatically_opened_order_content\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c4de49a2-6a23-45b8-8dd7-0b10fe84fa18",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.automaticallyOpenedOrder, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{automaticallyOpenedOrder}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{automaticallyOpenedOrder}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bdc33fb2-26e7-4cb3-9b19-1dcde702db84",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e5d137e1-0639-4eee-a6f0-0c2407ff618b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check order without PO line",
					"item": [
						{
							"name": "Create empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26d0001f-2bb3-4724-9956-393e593048a5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"THIS IS TEST FOR ORDER WITHOUT POLINES\"];",
											"",
											"pm.variables.set(\"orderWithoutPoLinesBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cd61d60a-26e2-419e-9973-451c1b6054a7",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    // The rest of the tests can be run only if the order created successfully",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Empty list of notes exist\", function () {",
											"        pm.expect(jsonData.notes).to.have.lengthOf(1);",
											"    });",
											"    ",
											"    pm.test(\"Each order has required fields\", function(){",
											"        pm.expect(jsonData.id).to.exist;",
											"        pm.globals.set(\"emptyOrderWithoutPoLinesId\", jsonData.id); ",
											"        pm.expect(jsonData.notes).to.exist;",
											"        pm.expect(jsonData.poNumber).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.exist;",
											"        pm.expect(jsonData.compositePoLines).to.be.empty;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithoutPoLinesBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Get list of orders by empty query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24ab5705-a55b-419f-9c08-de567584dc2d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Check orders without po-lines\", function () {",
											"    var jsonData = pm.response.json();",
											"    var purchaseOrders = jsonData.purchaseOrders;",
											"    ",
											"    pm.expect(purchaseOrders).to.have.lengthOf.above(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "384a6d87-007f-45e6-ad8e-eeb8cf433fe9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=notes=THIS IS TEST FOR ORDER WITHOUT POLINES",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "notes=THIS IS TEST FOR ORDER WITHOUT POLINES"
										}
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Delete empty order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bbece0c2-7ade-476c-8258-46956e8502f0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f7a514e9-9b3f-47f1-b234-4a70dff83cdb",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{emptyOrderWithoutPoLinesId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{emptyOrderWithoutPoLinesId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ISBN validation",
					"item": [
						{
							"name": "Create Order with duplicate ISBN numbers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4dd7eca0-da38-40f4-aa9a-55ccdec439a6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    order = utils.deletePoNumber(order);",
											"    order.compositePoLines.pop();",
											"    let preparedOrder = utils.prepareOrder(order);",
											"    preparedOrder.compositePoLines[0].details.productIds = [];",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"1-4028-9462-7\", null));",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"1-4028-9462-7\", \"(q1)\"));",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"9781402894626\", \"(q2)\"));",
											"    preparedOrder.compositePoLines[0].details.productIds.push(buildProductId(\"9781402894626\", null));",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(preparedOrder));",
											"})",
											"",
											"function buildProductId(isbn, qualifier) {",
											"    return {",
											"        \"productId\": isbn,",
											"        \"productIdType\": pm.environment.get(\"isbnIdentifierTypeId\"),",
											"        \"qualifier\": qualifier",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f8ab0103-f2cb-44bb-bdc1-2e431d0e1b31",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"isbnOrderId\", jsonData.id); ",
											"    pm.globals.set(\"isbn_Order_content\", jsonData);",
											"});",
											"",
											"pm.test(\"validate ISBN 13 is returned\", function () {",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds).to.have.lengthOf(2);",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[0].productId).to.equal(\"9781402894626\");",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[0].qualifier).to.equal(\"(q1)\");",
											"    ",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[1].productId).to.equal(\"9781402894626\");",
											"    pm.expect(jsonData.compositePoLines[0].details.productIds[1].qualifier).to.equal(\"(q2)\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						},
						{
							"name": "Update Order with ISBN10 - with hyphens",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26c0ece3-a6d2-4449-a4b9-e730e73c08cc",
										"exec": [
											"     let pendingOrder = pm.globals.get(\"isbn_Order_content\");",
											"    ",
											"    //set ISBN10",
											"    pendingOrder.compositePoLines[0].details.productIds = [];",
											"    pendingOrder.compositePoLines[0].details.productIds.push(buildProductId(\"81-7525-766-0\", \"(q1)\"));",
											"    pendingOrder.compositePoLines[0].details.productIds.push(buildProductId(\"81-7525-766-0\", \"(q1)\"));",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(pendingOrder));",
											"    ",
											"    function buildProductId(isbn, qualifier) {",
											"    return {",
											"        \"productId\": isbn,",
											"        \"productIdType\": pm.environment.get(\"isbnIdentifierTypeId\"),",
											"        \"qualifier\": qualifier",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac84d554-e753-45da-a561-8b543322f8b4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.isbnOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.test(\"ISBN value is modified to ISBN 13\", function () {",
											"            pm.expect(order.compositePoLines[0].details.productIds).to.have.lengthOf(1);",
											"            pm.expect(order.compositePoLines[0].details.productIds[0].productId).to.equal(\"9788175257665\");",
											"            pm.expect(order.compositePoLines[0].details.productIds[0].qualifier).to.equal(\"(q1)\");",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{isbnOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{isbnOrderId}}"
									]
								},
								"description": "Update a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Templates",
					"item": [
						{
							"name": "Create order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9c63bdb6-529a-4cc6-b0ce-5641b33a358b",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"pm.variables.set(\"orderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "06b5c078-4c1d-4624-be55-34465d1f4643",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    var orderTemplate = pm.response.json();",
											"",
											"    pm.test(\"Verify order template\", () => {",
											"        pm.expect(orderTemplate.id).to.exist;",
											"        pm.expect(orderTemplate.templateCode).to.eql(expectedOrderTemplate.templateCode);",
											"        pm.expect(orderTemplate.templateDescription).to.eql(expectedOrderTemplate.templateDescription);",
											"        pm.expect(orderTemplate.templateName).to.eql(expectedOrderTemplate.templateName);",
											"        pm.expect(orderTemplate.acquisitionMethod).to.eql(expectedOrderTemplate.acquisitionMethod);",
											"        pm.expect(orderTemplate.approved).to.be.true;",
											"        pm.environment.set(\"orderTemplateId\", orderTemplate.id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order template by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "70c5e246-57f1-414a-a425-c2346c1763bc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "af65d3ea-5868-47a7-ab91-79c5f0fcb1e0",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var orderTemplate = pm.response.json();",
											"",
											"    pm.test(\"Verify order template\", () => {",
											"        pm.expect(orderTemplate.id).to.exist;",
											"        pm.expect(orderTemplate.templateCode).to.eql(expectedOrderTemplate.templateCode);",
											"        pm.expect(orderTemplate.templateDescription).to.eql(expectedOrderTemplate.templateDescription);",
											"        pm.expect(orderTemplate.templateName).to.eql(expectedOrderTemplate.templateName);",
											"        pm.expect(orderTemplate.acquisitionMethod).to.eql(expectedOrderTemplate.acquisitionMethod);",
											"        pm.expect(orderTemplate.approved).to.be.true;",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64fa70d3-25a6-4b28-ab48-7da715252518",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"body.templateCode = \"Amazon-LLL\";",
											"pm.variables.set(\"updatedTemplateCode\", body.templateCode);",
											"pm.variables.set(\"updatedOrderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bff0a300-4ec8-4769-91cf-59a99d6ec639",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/order-templates/\" + pm.environment.get(\"orderTemplateId\"), (err, res) => {",
											"        pm.test(\"Order template is updated\", () => {",
											"            pm.expect(res.code).to.eql(200);",
											"            var orderTemplate = res.json();",
											"            pm.expect(orderTemplate.templateCode).to.eql(pm.variables.get(\"updatedTemplateCode\"));",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get updated order templates collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee991167-2d58-45e6-b61b-b87c52592651",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a4642871-d859-4eca-b15b-d2f4266b0d8e",
										"exec": [
											"let expectedOrderTemplate = globals.testData.orderTemplate;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var orderTemplatesCollection = pm.response.json();",
											"",
											"    pm.test(\"Verify order templates collection contains order templates\", () => {",
											"        orderTemplatesCollection.totalRecords > 0;",
											"        pm.expect(orderTemplatesCollection.orderTemplates.length).to.eql(orderTemplatesCollection.totalRecords);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f04a846b-fb21-4cdd-9b4b-2b8851a42806",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f2eef78d-5d5d-4320-b05a-07fb140497f9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"    utils.sendGetRequest(\"/orders/order-templates/\" + pm.environment.get(\"orderTemplateId\"), (err, res) => {",
											"        pm.test(\"Order template is deleted\", () => {",
											"             pm.expect(res.code).to.eql(404);",
											"        });",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/{{orderTemplateId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"{{orderTemplateId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check items status changes upon Closing/Reopening order",
					"item": [
						{
							"name": "Create Open order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "86e9d55f-fad3-4900-83a5-63b36216dce7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function(err, res) {",
											"    let order = res.json();",
											"",
											"    order.workflowStatus = \"Open\";",
											"    delete order.poNumber;",
											"    let lines = order.compositePoLines;",
											"    for (let i = 0; i < lines.length; i++) {",
											"        lines[i].paymentStatus = \"Fully Paid\";",
											"        lines[i].receiptStatus = \"Awaiting Receipt\";",
											"        delete lines[i].eresource;",
											"        setPhysicalInfo(lines[i]);",
											"    }",
											"",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(utils.prepareOrder(order)));",
											"});",
											"",
											"function setPhysicalInfo(line) {",
											"    delete line.eresource;",
											"    delete line.cost.quantityElectronic;",
											"    delete line.cost.listUnitPriceElectronic;",
											"    line.orderFormat = \"Physical Resource\";",
											"    var total = 0;",
											"    for(var i = 0; i < line.locations.length; i++) {",
											"        var location = line.locations[i];",
											"        delete location.quantityElectronic;",
											"        location.quantityPhysical = i + 1;",
											"        total += location.quantityPhysical;",
											"    }",
											"    line.cost.quantityPhysical = total;",
											"    line.cost.listUnitPrice = 10.5;",
											"    if (!line.hasOwnProperty(\"physical\")) {",
											"        line.physical = {",
											"            \"materialType\": pm.environment.get(\"materialTypeId\")",
											"            ",
											"        };",
											"    }",
											"    line.physical.createInventory = \"Instance, Holding, Item\";",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c8bf9299-e456-4383-8a06-3fa1969953a3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"});",
											"",
											"pm.test(\"PO Lines exist\", function () {",
											"    utils.validatePoLines(jsonData, 2);",
											"});",
											"",
											"pm.test(\"Each order has these optional fields\", function() {",
											"    pm.expect(jsonData.id).to.exist;",
											"    pm.globals.set(\"checkItemStatusOrderId\", jsonData.id);",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(jsonData));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders.\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `false`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Update order make all lines completed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "918811e3-1936-49c7-b3a3-5e3c1d3ea6e9",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines.forEach(line => {",
											"    line.paymentStatus = \"Fully Paid\";",
											"    line.receiptStatus = \"Fully Received\";",
											"    delete line.instanceId;",
											"})",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be7bacbf-2180-48f4-9834-28b47f588312",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = {};",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"Order closed\"));",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Update order make lines uncompleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "27725621-d9c6-4349-88d0-9e6ffad01df0",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines.forEach(line => {",
											"    line.paymentStatus = \"Partially Paid\";",
											"    delete line.instanceId;",
											"})",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a22b4d1c-08b6-429c-8c28-458a505df207",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = {};",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    order  = res.json();",
											"    utils.verifyOrderCalculatedInfo(order);",
											"    pm.test(\"Verify PO Line updated with expected receipt status\", function () {",
											"        pm.expect(order.closeReason.reason).is.equal(\"Complete\");",
											"    });",
											"    utils.validateWorkflowStatus(order);",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"On order\"));",
											"    pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Update order without poLine with status Closed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5ec3d95f-dd5a-40bb-b609-73b2ec9ad425",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines = [];",
											"order.workflowStatus = \"Closed\";",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cb2a6cf5-3b7c-4409-a2f9-0e3872e60288",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order  = res.json();",
											"    pm.test(\"Verify order updated with expected workflow status\", function () {",
											"        pm.expect(order.workflowStatus).is.equal(\"Closed\");",
											"    });",
											"    ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"Order closed\"));",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						},
						{
							"name": "Reopen order without poLine",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "64643c55-0a84-4ef9-b423-ead410ba0b6b",
										"exec": [
											"let order = JSON.parse(pm.globals.get(\"check_item_status_order_content\"));",
											"",
											"order.compositePoLines = [];",
											"order.workflowStatus = \"Open\";",
											"",
											"",
											"pm.globals.set(\"check_item_status_order_content\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b6246085-a23d-4d8f-aa5b-cfe7cbf4dbef",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Successfully updated (status code is 204)\", function () {",
											"    pm.response.to.have.status(\"No Content\");",
											"});   ",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.checkItemStatusOrderId, function (err, res) {",
											"    pm.expect(err).to.equal(null);",
											"    let order = res.json();",
											"    ",
											"    pm.test(\"Verify order updated with expected workflow status\", function () {",
											"         pm.expect(order.workflowStatus).is.equal(\"Open\");",
											"    });",
											"   ",
											"    order.compositePoLines.forEach(line => utils.verifyItemsStatus(line, \"On order\"));",
											"    ",
											"    pm.globals.unset(\"check_item_status_order_content\");",
											"    pm.globals.unset(\"checkItemStatusOrderId\");",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{check_item_status_order_content}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{checkItemStatusOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{checkItemStatusOrderId}}"
									]
								},
								"description": "Update a purchase order created a step before adding 2 more order lines and setting status to `Open`. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe two lines are added to order:\n- the first new line is of `Physical Resource` format, 3 locations, 6 physical items in total.\n- the second new line is of `Other` format, 2 location, 3 items."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Reason for closure",
							"item": [
								{
									"name": "Create reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bc57afc3-fb2b-48d6-bcf9-2aff8e3fba62",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.source = \"System\";",
													"pm.variables.set(\"reasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1e7a6cad-1ff6-4d24-919b-ac22f80e9b77",
												"exec": [
													"let expectedReasonForClosure = globals.testData.reasonForClosure;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var reasonForClosure = pm.response.json();",
													"    ",
													"    pm.test(\"Verify reason for closure\", () => {",
													"        pm.expect(reasonForClosure.id).to.exist;",
													"        pm.expect(reasonForClosure.reason).to.eql(expectedReasonForClosure.reason);",
													"        pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"        pm.environment.set(\"reasonForClosureId\", reasonForClosure.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{reasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5db64631-6c7e-4265-9fe5-9defe86414b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "621113b0-e424-4376-9590-dfca54704247",
												"exec": [
													"let expectedReasonForClosure = globals.testData.reasonForClosure;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var reasonForClosure = pm.response.json();",
													"",
													"    pm.test(\"Verify reason for closure\", () => {",
													"        pm.expect(reasonForClosure.id).to.exist;",
													"        pm.expect(reasonForClosure.reason).to.eql(expectedReasonForClosure.reason);",
													"        pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9c65bf0a-3b46-4842-8155-78bc198e1999",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.reason = \"Updated reason\";",
													"body.source = \"System\";",
													"pm.variables.set(\"updatedReason\", body.reason);",
													"pm.variables.set(\"updatedReasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2f91d848-45b2-4c8b-912c-e6bd85ea617f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/reasons-for-closure/\" + pm.environment.get(\"reasonForClosureId\"), (err, res) => {",
													"        pm.test(\"Reason for closure is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var reasonForClosure = res.json();",
													"            pm.expect(reasonForClosure.reason).to.eql(pm.variables.get(\"updatedReason\"));",
													"            pm.expect(reasonForClosure.source).to.eql(\"User\");",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedReasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b80978a8-62db-4ba8-97c4-ad84a8506700",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fd934839-51bc-4c08-957d-19ad3130a076",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var reasonForClosureCollection = pm.response.json();",
													"    pm.test(\"Verify reason for closure collection contains reasons for closure\", () => {",
													"        reasonForClosureCollection.totalRecords > 0;",
													"        pm.expect(reasonForClosureCollection.reasonsForClosure.length).to.eql(reasonForClosureCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete reason for closure",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16829e8a-a0a0-48eb-8b72-776027333eee",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "75ac1b89-db95-4c7f-b7c3-10abb1f41b3a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/reasons-for-closure/\" + pm.environment.get(\"reasonForClosureId\"), (err, res) => {",
													"        pm.test(\"Reason for closure is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/{{reasonForClosureId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"{{reasonForClosureId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prefix",
							"item": [
								{
									"name": "Create prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b3c29044-b723-40ea-ad0c-367956df254d",
												"exec": [
													"let body = globals.testData.prefix;",
													"pm.variables.set(\"prefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "57c22c42-db45-4b71-9fe6-655a2507e510",
												"exec": [
													"let expectedPrefix = globals.testData.prefix;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var prefix = pm.response.json();",
													"    ",
													"    pm.test(\"Verify prefix\", () => {",
													"        pm.expect(prefix.id).to.exist;",
													"        pm.expect(prefix.name).to.eql(expectedPrefix.name);",
													"        pm.expect(prefix.description).to.eql(expectedPrefix.description);",
													"        pm.environment.set(\"prefixId\", prefix.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{prefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d010e346-c861-4819-867f-b66063a71bf5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "61cccd2f-41d6-4d14-bd98-3043645fd051",
												"exec": [
													"let expectedPrefix = globals.testData.prefix;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var prefix = pm.response.json();",
													"",
													"    pm.test(\"Verify prefix\", () => {",
													"        pm.expect(prefix.id).to.exist;",
													"        pm.expect(prefix.name).to.eql(expectedPrefix.name);",
													"        pm.expect(prefix.description).to.eql(expectedPrefix.description);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6ac87adc-ec4c-4133-8195-bf28fa8b30fb",
												"exec": [
													"let body = globals.testData.prefix;",
													"body.name = \"Updated name\";",
													"pm.variables.set(\"updatedName\", body.name);",
													"pm.variables.set(\"updatedPrefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "818273cd-4e51-477d-a036-9d2a4e846f57",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var prefix = res.json();",
													"            pm.expect(prefix.name).to.eql(pm.variables.get(\"updatedName\"));",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPrefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9a0ccce8-119d-4763-acea-54afba4d5f66",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "398e4c8c-1cb9-4635-891b-4f420e4a406d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var prefixCollection = pm.response.json();",
													"    pm.test(\"Verify prefix collection contains prefixes\", () => {",
													"        prefixCollection.totalRecords > 0;",
													"        pm.expect(prefixCollection.prefixes.length).to.eql(prefixCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create order with prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "230ddb7e-c966-442f-bd58-3614b84b4196",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.poNumberPrefix = \"Updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "85e8ff03-fb69-438e-8ad7-8e5ea8d6841c",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.globals.set(\"prefixOrderId\", jsonData.id); ",
													"    pm.globals.set(\"prefixOrder\", jsonData);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete cannot delete used prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "54b36fb4-ceeb-4c89-80e0-02a146bc99e6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bb797f69-ce83-4aaf-8d8b-44c8962f035a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"prefixIsUsed\");",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is not deleted\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update order's prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e2136fb4-4c50-448b-8c6a-6640a3f39197",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = pm.globals.get(\"prefixOrder\");",
													"order.poNumberPrefix = \"New updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6420b4e5-6cb1-4c0d-ac2f-5a78a7a99986",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{prefixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{prefixOrderId}}"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete prefix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "75ac36e5-41ad-410e-854a-2423737485ac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ed826d38-6189-48d5-ae62-8e94df88ff6c",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/prefixes/\" + pm.environment.get(\"prefixId\"), (err, res) => {",
													"        pm.test(\"Prefix is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/{{prefixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"{{prefixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8ce74fc9-b720-4bec-8fa7-40888e191c20",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b3037815-473f-438a-9166-a2531802d3d7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.globals.unset(\"prefixOrderId\");",
													"    pm.globals.unset(\"prefixOrder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{prefixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{prefixOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Suffix",
							"item": [
								{
									"name": "Create suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ef833c4a-8301-48ae-bbd6-5ee8ff5a3fac",
												"exec": [
													"let body = globals.testData.suffix;",
													"pm.variables.set(\"suffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aafaf189-4433-4b41-ac58-60d4512d01db",
												"exec": [
													"let expectedSuffix = globals.testData.suffix;",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"    ",
													"    var suffix = pm.response.json();",
													"    ",
													"    pm.test(\"Verify suffix\", () => {",
													"        pm.expect(suffix.id).to.exist;",
													"        pm.expect(suffix.name).to.eql(expectedSuffix.name);",
													"        pm.expect(suffix.description).to.eql(expectedSuffix.description);",
													"        pm.environment.set(\"suffixId\", suffix.id);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{suffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix by id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8b316bfa-079d-4f20-8f86-4493df040444",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "68e1094a-1f4c-42a6-90ce-79f2936ff793",
												"exec": [
													"let expectedSuffix = globals.testData.suffix;",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"",
													"    var suffix = pm.response.json();",
													"",
													"    pm.test(\"Verify suffix\", () => {",
													"        pm.expect(suffix.id).to.exist;",
													"        pm.expect(suffix.name).to.eql(expectedSuffix.name);",
													"        pm.expect(suffix.description).to.eql(expectedSuffix.description);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4344e571-0bef-42a9-ade3-af323298d1d5",
												"exec": [
													"let body = globals.testData.suffix;",
													"body.name = \"Updated name\";",
													"pm.variables.set(\"updatedName\", body.name);",
													"pm.variables.set(\"updatedSuffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3f5a69dd-483f-4f79-974c-4ab6e8b7f82f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is updated\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"            var suffix = res.json();",
													"            pm.expect(suffix.name).to.eql(pm.variables.get(\"updatedName\"));",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedSuffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix collection",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4a20938f-7f55-4043-a30a-1cfe5a0d3c74",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b5291c9b-1f3b-4cfa-a5de-f5c9ada11f2c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"    var suffixCollection = pm.response.json();",
													"    pm.test(\"Verify suffix collection contains suffixes\", () => {",
													"        suffixCollection.totalRecords > 0;",
													"        pm.expect(suffixCollection.suffixes.length).to.eql(suffixCollection.totalRecords);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes?limit=1000",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes"
											],
											"query": [
												{
													"key": "limit",
													"value": "1000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create order with suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8f85416c-0596-4e72-997d-fba095850833",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.poNumberSuffix = \"Updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "29f81f6e-810c-4fc3-b51f-92a50096840a",
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.globals.set(\"suffixOrderId\", jsonData.id); ",
													"     pm.globals.set(\"suffixOrder\", jsonData);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete cannot delete used suffx",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "330e9be8-654e-40c8-add3-4a9b8b61c40a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "df141759-bfc7-48b9-b390-87cfcd29cf58",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"    let error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"suffixIsUsed\");",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is not deleted\", () => {",
													"            pm.expect(res.code).to.eql(200);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update order's suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "778e19e8-fac3-422d-98b9-f00c21192433",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = pm.globals.get(\"suffixOrder\");",
													"order.poNumberSuffix = \"New updated name\";",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "674e0443-4e91-4261-a95b-8be9510165fb",
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{suffixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{suffixOrderId}}"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Delete suffix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ca63ecd9-24ae-457d-b983-42b09cc06ded",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3b191669-e4e8-4daf-afa2-342982c9325f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    utils.sendGetRequest(\"/orders/configuration/suffixes/\" + pm.environment.get(\"suffixId\"), (err, res) => {",
													"        pm.test(\"Suffix is deleted\", () => {",
													"            pm.expect(res.code).to.eql(404);",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/{{suffixId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"{{suffixId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete order",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "01bd217e-4378-464f-8e1d-5c242dd5facd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "865e4d12-3a4d-4a2d-b11e-f019759aeb43",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"    pm.globals.unset(\"suffixOrderId\");",
													"    pm.globals.unset(\"suffixOrder\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{suffixOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{suffixOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check holding creation upon receiving/chek-in",
					"item": [
						{
							"name": "Create Open order with P/E Mix",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b873bc2a-f969-4579-acc6-39bd5f8339d3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
											"",
											"    let order  = utils.prepareOrder(res.json());",
											"    delete order.poNumber;",
											"    order.workflowStatus = \"Open\";",
											"    order.compositePoLines.pop();",
											"    order.compositePoLines[0].eresource.createInventory = \"Instance\";",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding\";",
											"    order.compositePoLines.forEach(poLine => poLine.paymentStatus = \"Partially Paid\");",
											"    pm.variables.set(\"po_listed_print_monograph\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c477e041-5248-4837-8198-cf485a1fe49d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {compositePoLines:[]};",
											" ",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    pm.environment.set(\"mixLineForCheckIn\", JSON.stringify(jsonData.compositePoLines[0]));",
											"    pm.environment.set(\"mixLineForCheckInId\", JSON.stringify(jsonData.compositePoLines[0].id));",
											"    pm.environment.set(\"instanceId\", jsonData.compositePoLines[0].instanceId);",
											"});",
											"",
											"jsonData.compositePoLines.forEach(line => utils.validateReceiptStatus(line, \"Awaiting Receipt\"));",
											"jsonData.compositePoLines.forEach(line => utils.validatePaymentStatus(line, \"Partially Paid\"));",
											"utils.verifyOrderCalculatedInfo(jsonData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in Open status based on `po_listed_print_monograph.json` from mod-orders. This also should trigger interraction with Inventory (based on [MODORDERS-66](https://issues.folio.org/browse/MODORDERS-66), [MODORDERS-67](https://issues.folio.org/browse/MODORDERS-67), [MODORDERS-69](https://issues.folio.org/browse/MODORDERS-69) and [MODORDERS-117](https://issues.folio.org/browse/MODORDERS-117)).\nThe order has two lines: \n- the first line is of `P/E Mix` format, 3 locations, 3 physical + 1 electronic (create inventory is `true`) items in total.\n- the second line is of `Electronic Resources` format, 2 location, 3 items, create inventory is `true`."
							},
							"response": []
						},
						{
							"name": "Create new location",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2175c840-3871-48f7-a088-8b23ab732106",
										"exec": [
											"pm.test(\"Location is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"checkinLocationId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "34cc98f6-90ae-4e03-9863-4dfebd462902",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"tes Loaction\",\n    \"code\": \"LOC_TEST\",\n    \"isActive\": true,\n    \"institutionId\": \"40ee00ca-a518-4b49-be01-0638d0a4ac57\",\n    \"campusId\": \"62cf76b7-cca5-4d33-9217-edf42ce1a848\",\n    \"libraryId\": \"5d78803e-ca04-4b4a-aeae-2c63b924518b\",\n    \"primaryServicePoint\": \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n    \"servicePointIds\": [\n        \"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\"\n    ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/locations",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get receiving history Order Line With Electronic format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e4868a21-ded5-4bad-9643-158698e97f15",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "16f2f707-7ee0-4396-b8bb-03a19f247ac1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let receivingHistory = pm.response.json().receivingHistory;",
											"    pm.expect(receivingHistory.length).to.be.above(0);",
											"    pm.environment.set(\"electronicResourceId\", receivingHistory[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{mixLineForCheckInId}} and pieceFormat==Electronic",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{mixLineForCheckInId}} and pieceFormat==Electronic"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in electronic piece, createInventory-\"instance\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bcfffe11-6bb0-4334-bd0a-dd11150de8ce",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = JSON.parse(pm.environment.get(\"mixLineForCheckIn\"));",
											"",
											"",
											"utils.prepareCheckinBody(compPoLine, pm.environment.get(\"electronicResourceId\"));",
											"let checkinBody = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"checkinBody.toBeCheckedIn[0].checkInPieces[0].locationId = pm.environment.get(\"checkinLocationId\");",
											"pm.variables.set(\"checkinBody\", JSON.stringify(checkinBody));",
											" "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bdff67bc-42dc-4024-abde-3b6cbcb37b0d",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"mixLineForCheckInId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "Check that no holding for new location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e362b8b3-74db-4f47-b030-3d28c0d29371",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "302038c4-5939-4fb6-b60d-a9466bded771",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let holdings = pm.response.json().holdingsRecords;",
											"    pm.expect(holdings).to.have.lengthOf(0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get receiving history Order Line With Physical format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2ac51dff-3cbe-428c-aaa0-3fbf6fbec6e0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "98533af2-a9fd-4774-8303-f28e6c3a381a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let receivingHistory = pm.response.json().receivingHistory;",
											"    pm.expect(receivingHistory.length).to.be.above(0);",
											"    pm.environment.set(\"physicalResourceId\", receivingHistory[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receiving-history?query=poLineId=={{mixLineForCheckInId}} and pieceFormat==Physical",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receiving-history"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{mixLineForCheckInId}} and pieceFormat==Physical"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in physical piece, createInventory-\"instance, Holding\"",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1c61a501-6981-4873-be15-57a84f86629c",
										"exec": [
											"//create piece - > need po line id , format , (can add location )",
											"",
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = JSON.parse(pm.environment.get(\"mixLineForCheckIn\"));",
											"",
											"",
											"utils.prepareCheckinBody(compPoLine, pm.environment.get(\"physicalResourceId\"));",
											"let checkinBody = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"checkinBody.toBeCheckedIn[0].checkInPieces[0].locationId = pm.environment.get(\"checkinLocationId\");",
											"pm.variables.set(\"checkinBody\", JSON.stringify(checkinBody));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "10c948b9-60fc-4705-808f-70ac2ae94b4c",
										"exec": [
											"//verify that the po line receipt status is partially received",
											"//verify that the piece status is updated to Received",
											"",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"let checkinPoLineId = pm.variables.get(\"mixLineForCheckInId\");",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully checked-in\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, jsonRq.totalRecords, 0);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "creates a piece without any items in inventory and performs check-in. \nTests to see if the piece status is changed.\nThe order used for checkin is created in the request \"Create order all po lines checkin\""
							},
							"response": []
						},
						{
							"name": "Check that holding created for new location",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0024bcfc-35b9-4ed2-8b25-a5a216da9a55",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "02676e92-ad50-449e-ba12-a3ea9b845aec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    let holdings = pm.response.json().holdingsRecords;",
											"    pm.expect(holdings).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings?query=instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}} and permanentLocationId=={{checkinLocationId}}"
										}
									]
								},
								"description": "GET /orders/receiving-history requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Verify prefix and suffix within composite order",
					"item": [
						{
							"name": "create order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2534bd7-447a-47d2-83b9-05d0c5c6a383",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix');",
											"});",
											"",
											"pm.environment.set(\"order_id\", jsonData.id);",
											"pm.environment.set(\"order_rs\", pm.response.json());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9080ad46-bc11-4f08-9df3-e9896a31097f",
										"exec": [
											"var poNumberNum = pm.environment.get(\"poNumberNum\");",
											"if (poNumberNum === null) {",
											"    pm.environment.set(\"poNumberNum\", 1);",
											"}else",
											"{",
											"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poNumber\": \"990001{{poNumberNum}}\",\n    \"poNumberPrefix\": \"pref\",\n    \"poNumberSuffix\": \"suf\",\n    \"orderType\": \"One-Time\",\n    \"vendor\": \"{{activeVendorId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "get order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2b506cc-b380-42d4-ace7-8349dae11559",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "784fdcf0-02a3-41c8-b54e-4a329dd811a5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update order with prefix and suffix",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22254620-c1d2-4f65-8555-71e22c063313",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "28c38637-edbc-4956-9682-42753250274a",
										"exec": [
											"var orderRs = pm.environment.get(\"order_rs\");",
											"orderRs.poNumberPrefix = \"pref1\";",
											"orderRs.poNumberSuffix = \"suf1\";",
											"pm.environment.set(\"order_open_rq\", JSON.stringify(orderRs));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_open_rq}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "order with prefix and suffix with updated",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9846cbee-c6da-42b7-8051-000a85ed8360",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Has data poNumberPrefix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberPrefix', 'pref1');",
											"});",
											"",
											"pm.test('Has data poNumberSuffix', function() {",
											"  pm.expect(jsonData).to.have.property('poNumberSuffix', 'suf1');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ff4a18f-b268-43f5-a5de-d333984f5fba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{order_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receive piece with specified itemId when item wa deleted",
					"item": [
						{
							"name": "Create order with createInventory INSTANCE_HOLDING_ITEM",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "03215b5b-661a-4cb5-a4e6-0acf2d6c8331",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Open\";",
											"    delete order.poNumber;",
											"    order.compositePoLines.pop();",
											"    //set createInventory value",
											"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
											"    order.compositePoLines[0].locations.pop();",
											"    order.compositePoLines[0].locations[0].quantityPhysical = 1;",
											"    order.compositePoLines[0].cost.quantityPhysical = 1;",
											"    ",
											"    pm.variables.set(\"orderForReceiving\", JSON.stringify(utils.prepareOrder(order)));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bd4d33cb-9334-4fe8-9c83-526ccd0e5d02",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    order = pm.response.json();",
											"    pm.expect(order.id).to.exist;",
											"    pm.globals.set(\"orderForReceivingId\", order.id);",
											"    pm.globals.set(\"orderForReceiving\", order);",
											"});",
											"",
											"pm.test(\"1 PO Lines and corresponding Inventory entities exist\", function () {",
											"    utils.validatePoLines(order, 1);",
											"});",
											"utils.validateWorkflowStatus(order);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForReceiving}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Close order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "04aa20d2-db36-4d0a-bc26-10ed7e1c135f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order =  pm.globals.get(\"orderForReceiving\");",
											"order.workflowStatus = \"Closed\";",
											"",
											"pm.variables.set(\"orderForReceiving\", JSON.stringify(order));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "062318a0-2c8b-4946-8090-3517b702d8c9",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var order = {};",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForReceiving}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderForReceivingId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderForReceivingId}}"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Delete item from inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "388cbd06-1aa0-42d1-83a1-84667a89a625",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"",
											"utils.sendGetRequest(\"/item-storage/items?limit=1&query=purchaseOrderLineIdentifier==\"+compPoLine.id, (err,res) => {",
											"    pm.variables.set(\"itemId\",  res.json().items[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3937dd46-1391-4fd2-9ef7-272e67f11395",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/item-storage/items/{{itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"item-storage",
										"items",
										"{{itemId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "check-in the existing piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ced4ae0b-7101-4575-be85-a1ab697cb2b2",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 pieces successfully reverted\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(1);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(1);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, 1, 0);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7eb48bbd-e27f-4d58-806d-05f835b00b14",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id, (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine, res.json().pieces[0].id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								},
								"description": "Do not create a new piece, but the existing piece must be successfully checked in"
							},
							"response": []
						},
						{
							"name": "Get pieces by poLineId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "615d2b64-2435-44c8-af31-8dc4661ad856",
										"exec": [
											"let compPoLine = pm.globals.get(\"orderForReceiving\").compositePoLines[0];",
											"pm.variables.set(\"poLineId\", compPoLine.id);",
											"",
											"pm.globals.unset(\"orderForReceiving\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "49e835e7-8d9c-44bd-8300-709140e922e0",
										"exec": [
											"let piece = {};",
											"pm.test(\"Status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"",
											"    piece = pm.response.json().pieces[0];",
											"    pm.globals.set(\"pieceId\", piece.id);",
											"",
											"});",
											"",
											"pm.test(\"The reference to unexisting item was removed\", function() {",
											"    pm.expect(piece.itemId).to.be.an('undefined');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders-storage/pieces?query=poLineId=={{poLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders-storage",
										"pieces"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLineId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete piece",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "40debdb9-6133-475f-9ceb-bb72303cdd24",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db5a3d00-b091-40f9-acd2-e0b738f86b18",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.globals.unset(\"pieceId\");",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{pieceId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{pieceId}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pieces and Location Consistency",
					"item": [
						{
							"name": "Create Instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ff6a56a-830c-4fc8-95ed-7ba16057cd01",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbfbbe49-95ed-426a-bf89-6b40da7164a9",
										"exec": [
											"var uuid = require('uuid');",
											"pm.environment.set(\"_instanceId\", uuid.v4());",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"discoverySuppress\": false,\n    \"staffSuppress\": false,\n    \"previouslyHeld\": false,\n    \"source\": \"FOLIO\",\n    \"title\": \"test\",\n    \"instanceTypeId\": \"6d6f642d-0000-1111-aaaa-6f7264657273\",\n    \"precedingTitles\": [],\n    \"succeedingTitles\": [],\n    \"id\": \"{{_instanceId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/instances",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Holding",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6cf3ab1-a732-444c-9050-5a7e05d0d687",
										"exec": [
											"pm.environment.set(\"_holdingId\", pm.response.json().id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"permanentLocationId\" : \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n\t\"instanceId\" : \"{{_instanceId}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/holdings-storage/holdings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"holdings-storage",
										"holdings"
									],
									"query": [
										{
											"key": "query",
											"value": "instanceId=={{instanceId}}%20and%20permanentLocationId==53cf956f-c1df-410b-8bea-27f712cca7c0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "576481b7-8e16-4abe-bc0e-06f688c84915",
										"exec": [
											"pm.environment.set(\"_itemId\", pm.response.json().id);",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": {\n        \"name\": \"On order\"\n    },\n    \"holdingsRecordId\" : \"{{_holdingId}}\",\n    \"barcode\": \"{{$guid}}\",\n    \"materialType\": {\n        \"id\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n    },\n    \"permanentLoanType\": {\n        \"id\": \"6d6f642d-0002-1111-aaaa-6f7264657273\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d831c8d0-bc79-4902-b1b6-d4d281a58863",
										"exec": [
											"pm.environment.set(\"_requestId\", pm.response.json().id);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"requestType\":\"Hold\",\n   \"fulfilmentPreference\":\"Hold Shelf\",\n   \"item\":{\n      \"barcode\":\"A14837334314\"\n   },\n   \"itemId\":\"{{_itemId}}\",\n   \"requester\":{\n      \"barcode\":\"236964750970123\"\n   },\n   \"status\": \"Open - Awaiting pickup\",\n   \"requesterId\":\"00000001-1111-5555-9999-999999999999\",\n   \"pickupServicePointId\":\"3a40852d-49fd-4df2-a1f9-6e2641a6e91f\",\n   \"requestDate\":\"2020-06-08T06:31:02Z\",\n   \"id\": \"489081f2-76de-4f22-8c0e-cdb7b91c5ffe\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"request-storage",
										"requests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0fe556d-efdc-4241-8e31-d338a936d797",
										"exec": [
											"var id = pm.response.json().id",
											"pm.environment.set(\"_order_id\", id);",
											"pm.environment.set(\"_poNumber\", pm.response.json().poNumber);",
											"pm.environment.set(\"_poline_id\", pm.response.json().compositePoLines[0].id);",
											"pm.environment.set(\"_location_id\", pm.response.json().compositePoLines[0].locations[0].locationId);",
											"pm.environment.set(\"_purchaseOrder\", pm.response.json());",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b10b26ea-4b46-45f4-aa4a-724cf9996ff5",
										"exec": [
											"var poNumberNum = pm.environment.get(\"poNumberNum\");",
											"if (poNumberNum === null) {",
											"    pm.environment.set(\"poNumberNum\", 1);",
											"    console.log('1');",
											"}else",
											"{",
											"    pm.environment.set(\"poNumberNum\", ++poNumberNum);",
											"    console.log('2');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"approved\": true,\n  \"assignedTo\": \"ab18897b-0e40-4f31-896b-9c9adc979a88\",\n  \"billTo\": \"5b608726-3ab6-4ea3-bdb2-b5106f45f5b3\",\n  \"notes\": [\n    \"ABCDEFGHIJKLMNO\",\n    \"ABCDEFGHIJKLMNOPQRST\",\n    \"ABCDEFGHIJKLMNOPQRSTUV\"\n  ],\n  \"poNumber\": \"99999{{poNumberNum}}\",\n  \"orderType\": \"One-Time\",\n  \"reEncumber\": false,\n  \"shipTo\": \"5b608726-3ab6-4ea3-bdb2-b5106f45f5b3\",\n  \"totalEstimatedPrice\": 101.16,\n  \"totalItems\": 4,\n  \"vendor\": \"{{activeVendorId}}\",\n  \"workflowStatus\": \"Pending\",\n  \"compositePoLines\": [\n    {\n      \"checkinItems\": false,\n      \"acquisitionMethod\": \"Purchase At Vendor System\",\n      \"alerts\": [],\n      \"cancellationRestriction\": false,\n      \"cancellationRestrictionNote\": \"ABCDEFGHIJKLMNOPQRSTUVW\",\n      \"claims\": [\n        {\n          \"claimed\": false,\n          \"sent\": \"2018-10-09T00:00:00.000+0000\",\n          \"grace\": 30\n        }\n      ],\n      \"collection\": false,\n      \"contributors\": [\n        {\n          \"contributor\": \"Ed Mashburn\",\n          \"contributorNameTypeId\": \"6d6f642d-0005-1111-aaaa-6f7264657273\"\n        }\n      ],\n      \"cost\": {\n        \"listUnitPrice\": 24.99,\n        \"listUnitPriceElectronic\": 20.99,\n        \"currency\": \"USD\",\n        \"additionalCost\": 10.0,\n        \"discount\": 5.0,\n        \"discountType\": \"percentage\",\n        \"quantityPhysical\": 1,\n        \"quantityElectronic\": 1,\n        \"poLineEstimatedPrice\": 101.16\n      },\n      \"description\": \"ABCDEFGH\",\n      \"details\": {\n        \"receivingNote\": \"ABCDEFGHIJKL\",\n        \"productIds\": [\n          {\n            \"productId\": \"10000000155\",\n            \"productIdType\": \"6d6f642d-0010-1111-aaaa-6f7264657273\"\n          }\n        ],\n        \"subscriptionFrom\": \"2018-10-09T00:00:00.000+0000\",\n        \"subscriptionInterval\": 824,\n        \"subscriptionTo\": \"2020-10-09T00:00:00.000+0000\"\n      },\n      \"donor\": \"ABCDEFGHIJKLM\",\n      \"eresource\": {\n        \"activated\": false,\n        \"createInventory\": \"Instance, Holding, Item\",\n        \"trial\": false,\n        \"accessProvider\": \"{{activeVendorId}}\",\n        \"materialType\": \"6d6f642d-0003-1111-aaaa-6f7264657273\"\n      },\n      \"fundDistribution\": [\n        {\n          \"code\": \"HIST\",\n          \"fundId\": \"{{fundId}}\",\n          \"distributionType\": \"percentage\",\n          \"value\": 80.0\n        },\n        {\n          \"code\": \"GENRL\",\n          \"fundId\": \"{{fundId}}\",\n          \"distributionType\": \"percentage\",\n          \"value\": 20.0\n        }\n      ],\n      \"isPackage\": false,\n      \"locations\": [\n        {\n          \"locationId\": \"fcd64ce1-6995-48f0-840e-89ffa2288371\",\n          \"quantity\": 2,\n          \"quantityElectronic\": 1,\n          \"quantityPhysical\": 1\n        }\n      ],\n      \"orderFormat\": \"P/E Mix\",\n      \"paymentStatus\": \"Awaiting Payment\",\n      \"physical\": {\n        \"createInventory\": \"Instance, Holding, Item\",\n        \"materialType\": \"6d6f642d-0003-1111-aaaa-6f7264657273\",\n        \"materialSupplier\": \"73d14bc5-d131-48c6-b380-f8e62f63c8b6\",\n        \"receiptDue\": \"2018-10-10T00:00:00.000+0000\",\n        \"volumes\": [\n          \"vol.1\"\n        ]\n      },\n      \"poLineDescription\": \"ABCDEFGHIJKLMNOPQRSTUVWXY\",\n      \"poLineNumber\": \"99999{{poNumberNum}}-1\",\n      \"publicationDate\": \"2017\",\n      \"publisher\": \"Schiffer Publishing\",\n      \"purchaseOrderId\": \"4e743b7d-1852-4f04-8502-ab24e8adb918\",\n      \"receiptStatus\": \"Pending\",\n      \"reportingCodes\": [],\n      \"requester\": \"Leo Bulero\",\n      \"rush\": true,\n      \"selector\": \"ABCD\",\n      \"source\": \"API\",\n      \"tags\": {\n        \"tagList\": [\n          \"important\"\n        ]\n      },\n      \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\",\n      \"vendorDetail\": {\n        \"instructions\": \"ABCDEFG\",\n        \"noteFromVendor\": \"ABCDEFGHIKJKLMNOP\",\n        \"refNumber\": \"123456-78\",\n        \"refNumberType\": \"Supplier's unique order line reference number\",\n        \"vendorAccount\": \"8910-10\"\n      },\n      \"metadata\": {\n        \"createdDate\": \"2020-06-07T17:37:12.481+0000\",\n        \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\n        \"updatedDate\": \"2020-06-07T17:37:12.481+0000\",\n        \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\n      }\n    }\n  ],\n  \"acqUnitIds\": [],\n  \"metadata\": {\n    \"createdDate\": \"2020-06-07T17:37:04.546+0000\",\n    \"createdByUserId\": \"00000001-1111-5555-9999-999999999999\",\n    \"updatedDate\": \"2020-06-07T17:37:04.546+0000\",\n    \"updatedByUserId\": \"00000001-1111-5555-9999-999999999999\"\n  }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3da3125-ec2b-45e0-8822-669ffc9ef55c",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let title = pm.response.json().titles[0];",
											"    pm.expect(title.id).to.exist;",
											"    pm.environment.set(\"_title_id\", title.id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2ee1acfc-89c8-447f-b4ad-7f493beeaa45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{_poline_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{_poline_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f86d8934-4b74-4954-8933-2fd56a019187",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.environment.set(\"_first_piece_id\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "775fbbed-9e61-45fa-bfc0-834ad75a9bad",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Physical\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_itemId}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f73bad8-840d-4cfd-bb53-e585bf04c430",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Electronic\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Piece #3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15b3823a-552b-4bf7-862c-8fa5128c122f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"poLineId\": \"{{_poline_id}}\",\n    \"format\": \"Electronic\",\n    \"caption\": \"test\",\n    \"locationId\": \"{{_location_id}}\",\n    \"itemId\": \"{{_item_id}}\",\n    \"titleId\": \"{{_title_id}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order - Pieces Need To Be Deleted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c4da791d-3a60-4a1e-b246-bdbb6c091d32",
										"exec": [
											"let updatedOrder = pm.environment.get(\"_purchaseOrder\");",
											"updatedOrder.workflowStatus = \"Open\";",
											"console.log(updatedOrder);",
											"pm.variables.set(\"updatedOrder\", JSON.stringify(updatedOrder));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "89f1cc5c-74ff-4f97-8ee2-c9ea8efe6ef4",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.text()).to.include(\"piecesNeedToBeDeleted\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{_order_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Piece #1 - There are Requests on Item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b697b46c-655f-4a02-80e2-fd04e1c3542a",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.text()).to.include(\"thereAreRequestsOnItem\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{_first_piece_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{_first_piece_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item - Item is not deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99343ec6-9fbf-428d-b95c-ef06413ab777",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items",
										"{{_itemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d259980f-df41-44b4-a16b-8c92d5c291ab",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "text/plain"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/request-storage/requests/{{_requestId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"request-storage",
										"requests",
										"{{_requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Piece - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4772dc4-f1ba-405b-976d-f4f4383f3d7d",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/{{_first_piece_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"{{_first_piece_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item - Item is deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "011884c7-74c6-4cb1-a8c7-d1173ce8eb06",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/inventory/items/{{_itemId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"inventory",
										"items",
										"{{_itemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Order - Success",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d3951459-6501-4ef4-8478-1ec3d6382ae4",
										"exec": [
											"let updatedOrder = pm.environment.get(\"_purchaseOrder\");",
											"updatedOrder.workflowStatus = \"Open\";",
											"console.log(updatedOrder);",
											"pm.variables.set(\"updatedOrder\", JSON.stringify(updatedOrder));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ed2ea07-9e63-4807-a463-0dac8a55b3ec",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-testAdmin}}"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrder}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{_order_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{_order_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c0bc8868-d9ef-470e-b146-327cc5828dfa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0561ce30-0f9f-49c5-90e4-bbda696b13bf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "78ed92f6-1443-47f5-b87a-fac182d6f6bf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fe2413f4-500a-40aa-8924-5a5a72da0a3d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Create finances with restrictions",
					"item": [
						{
							"name": "Restricted Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "335ff449-2bd3-422e-b4c9-53885adccbcc",
										"exec": [
											"pm.test(\"Ledger is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedLedgerId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "62959908-30a9-4d85-a219-8e48a3add0a0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"id\": \"ce353f9c-f089-4701-90d1-951d008348f2\",\r\n\t\"code\": \"RESTRICTED-LDGR\",\r\n\t\"ledgerStatus\": \"Active\",\r\n\t\"name\": \"Restricted ledger\",\r\n    \"fiscalYearOneId\": \"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n    \"restrictEncumbrance\": true,\r\n    \"restrictExpenditures\": true\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/ledgers",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"ledgers"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Restricted Fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c4fcf25-4c2a-40b8-a7dd-ccdc462dca80",
										"exec": [
											"pm.test(\"Fund is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedFundId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9195bae1-8014-4393-a3ff-5a7465b971b1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"RESTRICTED-FND\",\r\n  \"description\": \"Fund for orders API Tests\",\r\n  \"externalAccountNo\": \"1111111111111111111111111\",\r\n  \"fundStatus\": \"Active\",\r\n  \"ledgerId\": \"{{restrictedLedgerId}}\",\r\n  \"name\": \"Fund for orders API Tests\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance-storage/funds",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance-storage",
										"funds"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						},
						{
							"name": "Restricted Budget",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f02190d-73fc-45c2-bcbd-f38b082dcffe",
										"exec": [
											"pm.test(\"Budget is created\", function () {",
											"    pm.response.to.have.status(201);",
											"    pm.response.to.be.withBody;",
											"    pm.environment.set(\"restrictedBudgetId\", pm.response.json().id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fb7dbaa3-6e30-4e34-b293-60ae9605bb0a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken-testAdmin}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"budgetStatus\": \"Active\",\r\n  \"fundId\": \"{{restrictedFundId}}\",\r\n  \"name\": \"Restricted Budget for orders API Tests\",\r\n  \"fiscalYearId\":\"ac2164c7-ba3d-1bc2-a12c-e35ceccbfaf2\",\r\n  \"allowableEncumbrance\": 100.0,\r\n  \"allowableExpenditure\": 100.0,\r\n  \"allocated\": 25,\r\n  \"awaitingPayment\": 2.0,\r\n  \"available\": 3.0,\r\n  \"encumbered\": 4.0,\r\n  \"expenditures\": 5.0,\r\n  \"unavailable\": 14.0\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/finance/budgets",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"finance",
										"budgets"
									]
								},
								"description": "Gets or creates if not yet exists test identifier type to be used accross the orders while interaction with inventory"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Create Order for tests",
					"item": [
						{
							"name": "Create Open order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "38b70b8e-80cb-4f7b-b485-4d10ab8cb2e8",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "04520e40-906d-4a97-b4b7-aad78ed7df4c",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Open order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsOpenOrderId\", order.id);",
											"    pm.globals.set(\"negativeTestsOpenPOLineId\", order.compositePoLines[0].id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Open order with one electronic line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "22b6a226-c0a5-4a02-89f1-6c4f692163d2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Open\";",
											"order.notes = [\"Open Order for Negative API Tests\"];",
											"",
											"let line = utils.buildElectronicPoLineContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"line.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
											"",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderWithElectronicPOLBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "74553488-874b-4532-94da-d54c6dfc1216",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Open order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.environment.set(\"negativeTestsOpenElectronicOrderId\", order.id);",
											"    pm.environment.set(\"negativeTestsOpenElectronicPOLineId\", order.compositePoLines[0].id);",
											"    pm.environment.set(\"negativeTestsOpenElectronicPOLineBody\", JSON.stringify(order.compositePoLines[0]));",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Open\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithElectronicPOLBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Closed order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "db4c5783-d8ad-4322-b034-140b8ca95178",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.workflowStatus = \"Closed\";",
											"order.notes = [\"Closed Order for Negative API Tests\"];",
											"",
											"let line = utils.buildPoLineWithMinContent(null);",
											"line.receiptStatus = \"Receipt Not Required\";",
											"line.paymentStatus = \"Fully Paid\";",
											"order.compositePoLines = [line];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "181dea5c-f8ad-4be6-a15f-92205a12fcd5",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Closed order created\", function () {",
											"    let order = pm.response.json();",
											"",
											"    pm.response.to.have.status(201);",
											"",
											"    pm.globals.set(\"negativeTestsClosedOrderId\", order.id);",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Closed\");",
											"    utils.validatePoLines(order, 1);",
											"    utils.validateWorkflowStatus(order);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						},
						{
							"name": "Create Pending order with one line",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1a4ab16c-232f-4135-b14d-4c581acf0b9d",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let order = utils.buildOrderWithMinContent();",
											"order.notes = [\"Pending Order for Negative API Tests\"];",
											"order.compositePoLines = [utils.buildPoLineWithMinContent(null)];",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a2621193-202f-47b9-a6eb-023125d06b1e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Pending order created\", function () {",
											"    pm.response.to.have.status(201);",
											"",
											"    let order = pm.response.json();",
											"    pm.globals.set(\"negativeTestsPendingOrderId\", order.id);",
											"    pm.globals.set(\"negativeTestsPendingOrderContent\", JSON.stringify(order));",
											"",
											"    pm.expect(order.workflowStatus).to.equal(\"Pending\");",
											"",
											"    pm.test(\"Validate that PO Line contains desired data\", function () {",
											"        utils.validatePoLines(order, 1);",
											"        pm.globals.set(\"poLineForNegativeTests\", JSON.stringify(order.compositePoLines[0]));",
											"        pm.globals.set(\"poLineForNegativeTestsId\", order.compositePoLines[0].id);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "PUT order isPackage validation",
							"item": [
								{
									"name": "PUT order - package poline with instanceId - 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ee6274a7-d5f2-42a8-b659-b2d9fa6daa6d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"var uuid = require(\"uuid\");",
													"",
													"let orderFor422 = JSON.parse(pm.globals.get(\"negativeTestsPendingOrderContent\"));",
													"orderFor422.compositePoLines[0].isPackage = true;",
													"orderFor422.compositePoLines[0].instanceId = uuid.v4();",
													"",
													"pm.variables.set(\"orderBody422\", JSON.stringify(orderFor422));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "253f5ae6-0be7-4837-ab6b-709b0d8c542d",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"",
													"    pm.expect(pm.response.text()).to.include(\"InstanceIdNotAllowedForPackagePoLine\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody422}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7033bc7c-f769-412b-a02a-6dc195545d01",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f40c5ed1-7a2a-4d2b-a650-ac914be8a74f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST order - vendor validation",
							"item": [
								{
									"name": "Post order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "023b46b7-febf-4fad-8bba-901707d45cad",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a852\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f1c72b5d-2644-4140-8b41-6f42dc6e4878",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "53bc796f-d340-4000-81a5-5ab41625937a",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ca59c4b1-9965-4b1a-ab55-8242e32951ea",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f8bb5323-3cca-4ad9-8497-9d3d1654181b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "22481841-409e-4ac6-8b50-782f8dccd946",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "401ff956-9539-46b3-8d86-38208c1cf72f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "930a2a86-db7f-4031-9a0e-0d3eb3a17d6b",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "07bec37f-4bbf-4ddc-9989-936940994a09",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9fb704b4-91d6-4fe0-836d-8197f51445dd",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fbb6bc23-cf9d-425f-824a-04e9010692f0",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8ceb7872-95d3-4895-bbd1-60b1f9e9a765",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Put order - vendor validation",
							"item": [
								{
									"name": "Put order - vendor not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5d22f1e7-3254-4a66-b9dd-3b7384658af5",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistVendorId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{nonExistVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b75494c6-6fd7-46dd-8ade-911fe4bea1b8",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor not found\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "68a6e5a2-04a8-4ade-a618-c3f8fbd5e3d3",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cdd66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_non_exist_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8c769367-2c01-41a0-8b33-18bd4f7eaa63",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_non_exist_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_non_exist_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e881ccd-6f2c-49ad-9794-9952f619e29f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a2940e8f-8f9f-4126-b043-134a0530d440",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - access provider is inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "066ab968-56b0-4737-94c5-8a47e77fe6e7",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c73f429c-f463-46db-947f-e95cc0454575",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access provider are inactive",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "250fe516-20d6-4fc6-87ef-ace05e2ee646",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{activeVendorId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "72900fe8-bdfa-414d-a2e8-0ac4e6b92ac6",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put order - vendor and access providers are inactive and not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e22250f0-9b44-496a-a651-8eca89d030cf",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.variables.set(\"nonExistAccessProviderId\", \"1a54b431-2e4f-452d-9cae-9cee66c9a892\");",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.vendor = \"{{inactiveVendorId}}\";",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.compositePoLines[0].eresource.accessProvider = \"{{inactiveVendorId}}\";",
													"    json.compositePoLines[1].eresource.accessProvider = \"{{nonExistAccessProviderId}}\";",
													"    json.compositePoLines[0].poLineNumber = \"1234567-1\";",
													"    json.compositePoLines[1].poLineNumber = \"1234567-2\";",
													"    pm.variables.set(\"po_with_inactive_vendor_and_access_provider\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ccd60dc3-cfeb-4cb8-ab7c-52e747393add",
												"exec": [
													"pm.test(\"Status code is 422 - Unprocessable Entity\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated vendor is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"vendorIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider is inactive\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderIsInactive\");",
													"    pm.expect(pm.response.text()).to.include(\"Order cannot be open as the associated access provider not found\");",
													"    pm.expect(pm.response.text()).to.include(\"accessProviderNotFound\");",
													"    ",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"inactiveVendorId\"));",
													"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"nonExistAccessProviderId\"));",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\"poLineNumber\");",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[0].poLineNumber);",
													"    pm.expect(pm.response.text()).to.include(JSON.parse(pm.variables.get(\"po_with_inactive_vendor_and_access_provider\")).compositePoLines[1].poLineNumber);",
													"    ",
													"    pm.response.to.have.jsonBody(\"total_records\", 3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_inactive_vendor_and_access_provider}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify missing inventory enties errors",
							"item": [
								{
									"name": "Update pending order to open with missing contributorNameType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3f53cf06-49e3-4682-9bac-8d17e768630f",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"uuid = require('uuid')",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"contributorType\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"let contributor = {};",
													"let randomUUID = uuid.v4();",
													"contributor.contributor = \"Test\";",
													"contributor.contributorNameTypeId = randomUUID;",
													"line.contributors = [contributor];",
													"pm.variables.set(\"randomContributorNameTypeId\", randomUUID);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "16c356af-9a2f-49bc-aace-370ce2ce66ca",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingContributorNameType\");",
													"    pm.expect(error.parameters[0].value).to.equal(pm.variables.get(\"randomContributorNameTypeId\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing instanceTypeCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3f36571-fd44-4585-917b-f37b07b170a2",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceTypeCode\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3bbbb6d5-2756-4ee9-9a7b-9b24809d3be2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceTypeCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceTypeCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingInstanceType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ef27e763-b653-48d9-a302-213f16e35c00",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for missingInstanceType error test\"];",
													"",
													"let line = utils.buildPoLineWithMinContent(null);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e6de9c41-4d03-4559-9a52-b472505d8c36",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8e118c61-f04d-4451-8c59-ad5601547bd8",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceType\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "971db262-a722-4cfb-8425-c75ef8acf831",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceTypeCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing instanceStatusCode config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b03b9411-6872-45db-9efc-e39c3d59f10b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-instanceStatusCode\";",
													"let value = \"missing-status\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cf93b770-12e9-4330-9e06-e4ef65d32112",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-instanceStatusCode",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-instanceStatusCode"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingInstanceStatus error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2c9628d1-633f-4beb-b82d-2b1a56f4e92d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let order = utils.buildOrderWithMinContent();",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for missingInstanceStatus error test\"];",
													"",
													"let line = utils.buildPoLineWithMinContent(null);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ef0d40df-7b07-488a-b59a-9c7211dcca01",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceStatus\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-status\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingInstanceStatus error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b86fd5d5-bf3a-4c76-bad5-b1df19e68d2d",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"let order = utils.buildOrderWithMinContent();",
													"",
													"order.workflowStatus = \"Open\";",
													"order.notes = [\"Open Order for Negative API Tests\"];",
													"order.poNumber = \"instanceStatus\";",
													"",
													"let line = JSON.parse(globals.poLineForNegativeTests);",
													"line.physical.createInventory = \"Instance\";",
													"order.compositePoLines = [line];",
													"pm.variables.set(\"orderBody\", JSON.stringify(order));",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a33c6e3b-81d5-4a27-acc0-b6e051c14e6b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingInstanceStatus\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-status\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-instanceStatusCode\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare missing loanTypeName config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24dcab85-eb5a-4241-954c-5951c1aac955",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"let configs = [];",
													"pm.test(\"Get configs response is ok\", function () {",
													"    pm.response.to.be.ok;",
													"    configs = pm.response.json().configs;",
													"});",
													"",
													"let configName = \"inventory-loanTypeName\";",
													"let value = \"missing-type\";",
													"",
													"utils.updateOrCreateOrdersConfig(configs, configName, value);",
													"",
													"// Store current version of configs",
													"pm.environment.set(\"current-orders-configs\", configs);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3374b597-5d08-4e9f-a1a0-83e9c1f4f367",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken-testAdmin}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/configurations/entries?query=module==ORDERS and configName==inventory-loanTypeName",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"configurations",
												"entries"
											],
											"query": [
												{
													"key": "query",
													"value": "module==ORDERS and configName==inventory-loanTypeName"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Open order - missingLoanType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dd6101cb-c888-4133-941a-1447ef12d717",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const uuidv4 = require('uuid');",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order  = res.json();",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"loanType1\";",
													"    ",
													"    //set createInventory value",
													"    order.compositePoLines[0].id = JSON.parse(globals.poLineForNegativeTests).id;",
													"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].titleOrPackage = \"Test title\";",
													"    order.compositePoLines[0].details.productIds[0].productIdType = uuid.v4();",
													"    ",
													"    pm.variables.set(\"orderBody\", JSON.stringify(utils.prepareOrder(order)));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b226c6f0-b81e-46af-b6ab-0e025a3c2336",
												"exec": [
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingLoanType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-okapi-tenant",
												"value": "{{testTenant}}"
											},
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders"
											]
										},
										"description": "Create an order with minimal required fields (update based on [MODORDERS-136](https://issues.folio.org/browse/MODORDERS-136) and [MODORDERS-145](https://issues.folio.org/browse/MODORDERS-145)."
									},
									"response": []
								},
								{
									"name": "Update pending order to open with missingLoanType error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "668ecaa1-3859-411c-9073-3989383be5a1",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"const uuidv4 = require('uuid');",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/print_monograph_for_create_inventory_test.json\", (err, res) => {",
													"    let order  = utils.prepareOrder(res.json());",
													"    order.workflowStatus = \"Open\";",
													"    order.poNumber = \"loanType2\";",
													"    ",
													"    //set createInventory value",
													"    order.compositePoLines[0].id = JSON.parse(globals.poLineForNegativeTests).id;",
													"    order.compositePoLines[0].eresource.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].physical.createInventory = \"Instance, Holding, Item\";",
													"    order.compositePoLines[0].titleOrPackage = \"Test title\";",
													"    order.compositePoLines[0].details.productIds[0].productIdType = uuid.v4();",
													"    ",
													"    pm.variables.set(\"orderBody\", JSON.stringify(order));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8b56e840-f2be-46fd-9e1c-0bbc48626392",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let testConfigs = globals.testData.configs;",
													"let error = {};",
													"pm.test(\"Status code is 500 and one error\", function () {",
													"    pm.response.to.have.status(500);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"    error = pm.response.json().errors[0];",
													"    pm.expect(error.code).to.equal(\"missingLoanType\");",
													"    pm.expect(error.parameters[0].value).to.equal(\"missing-type\");",
													"});",
													"",
													"let bodyTemplate = testConfigs.bodyTemplate;",
													"let configs = pm.environment.get(\"current-orders-configs\");",
													"let configName = \"inventory-loanTypeName\";",
													"let existingConfig = utils.getConfigByName(configs, configName);",
													"existingConfig.value = pm.variables.get(configName);",
													"utils.updateConfig(existingConfig);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{orderBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsPendingOrderId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Encumbrance creation failure",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify protected fields modification",
							"item": [
								{
									"name": "Put Open order - Modify Purchase Order Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45c3467a-2b7c-490f-b086-8f1a7458630b",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {",
													"    let json = utils.prepareOpenOrderWithoutPoNumber(res.json());",
													"    json.orderType = \"One-Time\";",
													"    json.approved = true;",
													"    json.poNumber = \"anyPoNumber\";",
													"    json.manualPo = true;",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ced6deee-539f-4e6d-85de-d66931e1fea7",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										},
										"description": "Verify that protected fields cannot be modified once order is \"Open\""
									},
									"response": []
								},
								{
									"name": "Put Open order - Modify Composite PO Line Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2090aec6-80cf-4498-b213-988c2ff2e4cc",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let json;",
													"utils.sendGetRequest(\"/orders/composite-orders/\" + pm.globals.get(\"negativeTestsOpenOrderId\"), (err, res) => {",
													"    json = res.json();",
													"    json.compositePoLines[0].acquisitionMethod = \"Exchange\";",
													"    json.compositePoLines[0].rush = true;",
													"    json.compositePoLines[0].titleOrPackage = \"Changing Title\";",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ad9c2dda-e428-4381-850c-d73381901093",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"composite-orders",
												"{{negativeTestsOpenOrderId}}"
											]
										},
										"description": "Verify that protected fields in Purchase Order Line cannot be modified once order is \"Open\""
									},
									"response": []
								},
								{
									"name": "Put Open order - Modify PO Line Fields",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d5c4bd15-7522-47c4-bb2b-e1f05d36ec24",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let json;",
													"utils.sendGetRequest(\"/orders/order-lines/\" + pm.globals.get(\"negativeTestsOpenPOLineId\"), (err, res) => {",
													"    json = res.json();",
													"    json.donor = \"Donor\";",
													"    json.checkinItems = true;",
													"    pm.variables.set(\"po_with_protected_fields\", JSON.stringify(json));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "296d92df-146a-4d84-978b-7c47234e4903",
												"exec": [
													"pm.test(\"Status code is 400 - Bad Request\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"    let jsonRs = pm.response.json();",
													"    let error = jsonRs.errors[0];",
													"    pm.expect(error.message).to.include(\"Protected fields can't be modified\");",
													"    pm.expect(error.code).to.include(\"protectedFieldChanging\");",
													"    pm.expect(error.protectedAndModifiedFields.length).to.equal(2);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_with_protected_fields}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{negativeTestsOpenPOLineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{negativeTestsOpenPOLineId}}"
											]
										},
										"description": "Verify that protected fields in Purchase Order Line cannot be modified once order is \"Open\""
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f303e913-e9c0-475c-b30d-ddf18b6cebf3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96d1ed7a-145a-4bca-9faa-693e8788d9a7",
										"exec": [
											"pm.test(\"Response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 400"
							},
							"response": []
						},
						{
							"name": "Create empty order with missing required fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d8e03b89-b3e8-4acf-99a4-55eaa715eaa1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c0ac2b6b-013c-4c0e-92da-3df0f47011a7",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Vendor and orderType is missing\", function () {",
											"     ",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"vendor\").parameters[0].value).to.equal(\"null\");",
											"        pm.expect(jsonData.errors.find((error) => error.parameters[0].key === \"orderType\").parameters[0].value).to.equal(\"null\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Create Ongoing order with empty ongoing field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da5d09ce-d769-4f23-bf4e-490282e79c31",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order = utils.buildOrderWithMinContent();",
											"order.orderType = \"Ongoing\";",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32f23035-cb8b-4508-86ff-f7f1528c89a6",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Ongoing is missing\", function () {",
											"        pm.expect(jsonData.errors[0].code === \"missingOngoing\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Create One-Time order with ongoing field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ba68a84b-d3ed-4924-b97f-9bec0cff31d3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let order = utils.buildOrderWithMinContent();",
											"order.ongoing = {};",
											"pm.variables.set(\"orderBody\", JSON.stringify(order));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1f1165f9-b3a5-4e39-bcde-a14551d9c717",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.test(\"Ongoing is missing\", function () {",
											"        pm.expect(jsonData.errors[0].code === \"ongoingNotAllowed\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create an order with empty body"
							},
							"response": []
						},
						{
							"name": "Get order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "41828792-8039-4212-845b-6a4f4496154a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aee43c1c-2185-4d38-8e95-9e1ba05a8c2c",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Update order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4fb98395-0a50-4438-b068-22e2eaebaddc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.variables.set(\"orderBody\", JSON.stringify(utils.buildOrderWithMinContent()));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b860ae8c-e38a-4ca6-ae09-c4d956926b3e",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Delete order - bad ID - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff93fe78-ef41-42e1-bbda-d544d5467757",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4a59c33f-8a35-46db-a3ac-cf1e0977a7f5",
										"exec": [
											"pm.test(\"Status code is 400 - resource does not exist\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error string in response body\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"bad-id\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"bad-id"
									]
								},
								"description": "GET /orders/composite-orders/id requests that returns 404"
							},
							"response": []
						},
						{
							"name": "Get order - valid token, invalid tenant - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "de6a7dde-e567-4c18-bf06-6a69f09ef329",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "557280f2-6716-4e60-82d0-101e52d6f16b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No such Tenant fs12345678\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Tenant",
										"value": "fs12345678"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 400"
							},
							"response": []
						},
						{
							"name": "Get order - bad token format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1363ccba-dc11-4fdc-8693-5cdf2a7584df",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "180421fb-74f1-4f86-ae95-23f44bbb1751",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "bad-token"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get order - invalid token - 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "984a94cc-0d67-40ae-ac73-6072d925a4b1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d90a8b2-2a30-45e7-89a5-0d6c4fdbd8c7",
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"Invalid token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "eyJhbGciOiJIUzUxMiJ999999.eyJzdWIiOiJhZG1pbiIsInVzZXJfaWQiOiJlZjY3NmRiOS1kMjMxLTQ3OWEtYWE5MS1mNjVlYjRiMTc4NzIiLCJ0ZW5hbnQiOiJmczAwMDAwMDAwIn2.KC0RbgafcMmR5Mc3-I7a6SQPKeDSr0SkJlLMcqQz3nwI0lwPTlxw0wJgidxDq-qjCR0wurFRn5ugd9_SVadSxg"
									},
									{
										"key": "x-okapi-tenant",
										"value": "{{testTenant}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id request that return 401"
							},
							"response": []
						},
						{
							"name": "Get order - random order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5eaeea6f-a75a-4fac-b28a-f01dd79dc781",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c19c9c28-a999-43d9-8db9-d2eb42d3fa1f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/composite-orders/id requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get order - empty order ID - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0cf4fadb-8924-444f-81af-88b4562fa78d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d012a423-085c-4b63-b3ab-09ee90dda62c",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										""
									]
								},
								"description": "GET /orders/composite-orders/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update order - empty poNumber - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bc92c807-ff74-4108-8d45-3ab7a054186c",
										"exec": [
											"pm.variables.set(\"poLineId\", eval(globals.loadUtils).getLastPoLineId());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "af86f52f-6efb-4a09-9504-da091dc76bb1",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsPendingOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsPendingOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Open order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "54115324-ca42-4389-81ce-f46052f157bc",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsOpenOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2f976611-f253-4d1e-aa64-e2ad37712797",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenOrderId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Closed order - add new line - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a9b2c32b-2ceb-4d23-8935-39e9b14c7209",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsClosedOrderId, (err, res) => {",
											"    pm.test(\"Prepare request body\", function() {",
											"        pm.expect(res).to.have.property('code', 200);",
											"        let order = res.json();",
											"        order.compositePoLines.push(utils.buildPoLineWithMinContent(order.id));",
											"        pm.variables.set(\"orderBody\", JSON.stringify(order));",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ae2e083e-a792-4a14-b2c1-66cf87627b1c",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsClosedOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsClosedOrderId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Lines",
					"item": [
						{
							"name": "isPackageValidation",
							"item": [
								{
									"name": "PUT line - package with insanceId - 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e601cdc1-5262-4cb7-a631-71a635952f7f",
												"exec": [
													"var uuid = require(\"uuid\");",
													"",
													"let line = JSON.parse(pm.globals.get(\"poLineForNegativeTests\"));",
													"",
													"line.isPackage = true;",
													"line.instanceId = uuid.v4();",
													"pm.variables.set(\"po_line_isPackage422\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "19966e5e-997e-4606-8506-bd0f043c6984",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
													"});",
													"",
													"pm.test(\"Expected errors verification\", function () {",
													"",
													"    pm.expect(pm.response.text()).to.include(\"InstanceIdNotAllowedForPackagePoLine\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{po_line_isPackage422}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{poLineForNegativeTestsId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{poLineForNegativeTestsId}}"
											]
										},
										"description": "GET /orders/order-lines/id requests that return 422"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Verify PO Line required properties",
							"item": [
								{
									"name": "Create line - without required fields- 422",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a8c62102-f6c9-4e5a-a533-dc633d5c7727",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
													"delete line.source;",
													"delete line.cost;",
													"delete line.titleOrPackage;",
													"delete line.orderFormat;",
													"delete line.acquisitionMethod;",
													"pm.variables.set(\"line_body\", JSON.stringify(line));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c4e85bcf-c4d7-44cb-87b0-496e62edc616",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    ",
													"});",
													"pm.test(\"5 validation errors\", function () {",
													"    pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Quantity validation",
							"item": [
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f46e293a-8277-44ac-8772-2292cf651dc4",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Physical Resource\";",
													"        line.cost.quantityElectronic = 5;",
													"        line.cost.quantityPhysical = 0;",
													"        line.cost.listUnitPrice = 10;",
													"        line.cost.listUnitPriceElectronic = 0;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"        var emptyLocation = {};",
													"        emptyLocation.locationId = line.locations[0].locationId;",
													"        emptyLocation.quantityElectronic = 0;",
													"        emptyLocation.quantityPhysical = 0;",
													"        ",
													"        line.locations.push(emptyLocation);",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "39b67538-827a-4ffb-b4ad-4fc5273d1274",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"5 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(5);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3ee6ae3a-a502-4c79-9d74-f1a3660b6505",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"Electronic Resource\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        line.cost.listUnitPrice = 0;",
													"        line.cost.listUnitPriceElectronic = 10;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a194f51c-599c-48d9-a352-8fa9dc5b216a",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"4 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify P/E Mix Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2273dfd8-b8e7-470a-b75d-5f9e70c026c6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest({",
													"        url: pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\",",
													"        method: \"GET\"",
													"    },",
													"    function (err, res) {",
													"        let line = res.json().compositePoLines[0];",
													"        line.id = JSON.parse(globals.poLineForNegativeTests).id;",
													"        line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"        line.orderFormat = \"P/E Mix\";",
													"        line.cost.quantityElectronic = 0;",
													"        line.cost.quantityPhysical = 5;",
													"        for(var i = 0; i < line.locations.length; i++) {",
													"            var location = line.locations[i];",
													"            location.quantityElectronic = 10;",
													"            location.quantityPhysical = 10;",
													"        }",
													"",
													"        pm.variables.set(\"line_body\", JSON.stringify(line));",
													"        pm.variables.set(\"lineId\", line.id);",
													"",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4dcb60e7-caab-4edb-9619-4ec1a12e589c",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"3 validation errors\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{lineId}}",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines",
												"{{lineId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cost Prices",
							"item": [
								{
									"name": "Verify P/E Mix",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8d57c3fa-83c6-4eac-88b7-8911c9f8cac6",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph_pe_mix.json\", (err, res) => {",
													"    let line = res.json().compositePoLines[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = -1;",
													"    // Zero price is allowed MODORDERS-197",
													"    line.cost.listUnitPriceElectronic = 0;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = 101;",
													"    line.cost.discountType = \"percentage\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9820aeaa-f919-418b-be7a-a868a33b3034",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Physical Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dda04f04-c867-405c-a659-388159067397",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Physical Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 0;",
													"    line.cost.listUnitPriceElectronic = 10;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d5753a57-824a-4d77-a086-be821338474f",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(3);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Electronic Resource",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fcf0b5d8-af9b-4ff6-8052-879686578d85",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"",
													"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_one_physical_one_electronic_lines.json\", (err, res) => {",
													"    let line = res.json().compositePoLines.filter(poLine => poLine.orderFormat == \"Electronic Resource\")[0];",
													"    line.purchaseOrderId = globals.negativeTestsPendingOrderId;",
													"",
													"    line.cost.listUnitPrice = 10;",
													"    line.cost.listUnitPriceElectronic = -0.00000000001;",
													"    line.cost.additionalCost = -1;",
													"    line.cost.discount = -1;",
													"    line.cost.discountType = \"amount\";",
													"",
													"    pm.variables.set(\"line_body\", JSON.stringify(line));",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6e4eeb4a-9461-4895-8691-3e571619ac95",
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"    pm.test(\"Validation errors expected\", function () {",
													"        pm.expect(pm.response.json().errors).to.have.lengthOf(4);",
													"        let errorCodes = pm.response.json().errors.map(error => error.code);",
													"        pm.expect(errorCodes).to.include.members([\"costUnitPriceInvalid\", \"costDiscountInvalid\", \"costAdditionalCostInvalid\", \"costUnitPriceElectronicInvalid\"]);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "x-okapi-token",
												"type": "text",
												"value": "{{xokapitoken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{line_body}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-lines"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Get list of Open order lines - bad sorting query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "870ab450-9802-4aa5-b894-b15925a7daf0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "32435a28-1601-4a08-a2de-deb319171b35",
										"exec": [
											"pm.test(\"PO line response status code is 400\", function() {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines?query=sortBy metadata.createdDate/sort.ascending",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									],
									"query": [
										{
											"key": "query",
											"value": "sortBy metadata.createdDate/sort.ascending"
										}
									]
								},
								"description": "GET /orders/composite-orders requests that return 200"
							},
							"response": []
						},
						{
							"name": "Get PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "43472ea7-235b-49bc-92ea-db0f4d4442a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e0f32b04-5b26-4e4b-8461-f5c5f7de0d49",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Delete PO Line - random line id - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "683414d0-35ad-456b-88ee-86c35d20b50b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0ba550bd-46b0-4216-88b2-2f29c3e34692",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Get line - empty polineId - 404",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1ab7195e-bbd0-461e-a893-099c649739c6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ee9a25e8-edd6-432b-a8ce-feffedca4052",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(\"empty instance ID returns error message\", function () {",
											"     pm.expect(pm.response.text()).to.include(\"No suitable module found for path /orders/\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										""
									]
								},
								"description": "GET /orders/order-lines/ requests that return 404"
							},
							"response": []
						},
						{
							"name": "Update line - inactive accessProvider - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee95d606-7e62-4136-a43c-0131c7e6acf4",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/order-lines/\" + pm.environment.get(\"negativeTestsOpenElectronicPOLineId\"), (err, res) => {",
											"    let electr_line = res.json();",
											"",
											"    electr_line.eresource.accessProvider = pm.environment.get(\"inactiveVendorId\");",
											"",
											"    pm.variables.set(\"electr_line_body\", JSON.stringify(electr_line));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e1550104-e231-4148-b617-bd2538dc3e12",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{electr_line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{negativeTestsOpenElectronicPOLineId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{negativeTestsOpenElectronicPOLineId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad id format in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ad0a8aaf-8fd9-4908-a036-9dfbf18b8ae3",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.id = \"bad-id\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b402be8b-55b0-4e40-862b-3c54cde1d9cd",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "161a2e90-b113-4dde-b304-48db44890987",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "668a360f-201c-47aa-81a7-ddf01057bd1e",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/{{$guid}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"{{$guid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create line - bad content - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "422dea28-b959-4e78-8010-d5171af5d0cf",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"line.nonexistentProperty = \"nonexistent_property_value\";",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e098e141-1f1f-4004-a9f1-e91deb7c72f7",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e23079e3-42b0-4785-be0f-d0243d742e43",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3852445-f313-42eb-a9d4-c646631ed935",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Update line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "37d5f6db-a1fd-4384-b9bb-8c26435b6fc7",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"pm.variables.set(\"line_body\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9381b258-a8b5-4ace-a8fa-502e2cfd29bb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{line_body}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines/ requests that return 422"
							},
							"response": []
						},
						{
							"name": "Delete line - invalid line Id - 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1b1e8aa2-5e6c-47de-aa70-8bffdd97e343",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4b8b5f57-7075-4a78-b54a-bcf79754d7e7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Incorrect parameter pattern error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"parameter is incorrect\");",
											"    pm.expect(pm.response.text()).to.include(\"po1ineid-with-eror-r400-000000000000\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines/po1ineid-with-eror-r400-000000000000",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines",
										"po1ineid-with-eror-r400-000000000000"
									]
								},
								"description": "GET /orders/order-lines requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line - invalid order Id in body - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8fa438e3-6d4f-4ac3-8ef7-e619eb2d6b56",
										"exec": [
											"let line = JSON.parse(pm.globals.get(\"po_listed_print_monograph\")).compositePoLines[0];",
											"line.purchaseOrderId = \"\";",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c9597dec-716d-4d64-83ca-27749e8dcfe3",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/order-lines/id requests that return 422"
							},
							"response": []
						},
						{
							"name": "Add line to Open order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc99e2fd-803e-465e-9e26-afcfa3665324",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsOpenOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "951852f5-e3d6-45e0-ae7c-f792cca0d2ad",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderOpen\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add line to Closed order - 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b374b764-ba89-4cec-9a71-60b369b1572a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"lineBody\", JSON.stringify(utils.buildPoLineWithMinContent(globals.negativeTestsClosedOrderId)));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "49008d5c-caec-410b-805e-791302d49b44",
										"exec": [
											"pm.test(\"Status code is 422 and one error\", function () {",
											"    pm.response.to.have.status(422);",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"orderClosed\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{lineBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PO Number",
					"item": [
						{
							"name": "Validate - existing PO Number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14d77687-b0b3-41ad-889d-dd4f37bfb98e",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"utils.sendGetRequest(\"/orders/composite-orders/\" + globals.negativeTestsPendingOrderId, function (err, res) {",
											"    pm.variables.set(\"existing_number\", res.json().poNumber);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d04d526-b3dd-48ec-947b-1311d90432c8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : {{existing_number}}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 400 if an existing PO Number is supplied"
							},
							"response": []
						},
						{
							"name": "Validate - invalid PONumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ad26b281-e507-4fb4-b10c-3f842af95216",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c62ad0c5-99c8-4665-b830-46996ec19f8c",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"poNumber\" : \"12-12-13\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/po-number/validate",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"po-number",
										"validate"
									]
								},
								"description": "Return a 422 when an invalid PO Number is specified"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Receiving",
					"item": [
						{
							"name": "Attempt to receive already received pieces for physical and electronic lines",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf01899d-2657-4beb-be3c-8eeab454b72f",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/orders/receiving-history?limit=10&query=receivingStatus==Received and purchaseOrderId=\" + globals.physElecOpenOrderId, (err, res) => {",
											"    let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory);",
											"    pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15f04d81-346c-4620-8c0f-5a4fa9cbbe4a",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"All items should be failed because already received before\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(10);",
											"    let processedWithError = 0;",
											"    for(let i = 0; i < jsonRs.receivingResults.length; i++) {",
											"        let result = jsonRs.receivingResults[i];",
											"        pm.expect(result.processedSuccessfully).to.equal(0);",
											"        processedWithError += result.processedWithError;",
											"        for(let j = 0; j < result.receivingItemResults.length; j++) {",
											"            pm.expect(result.receivingItemResults[j].processingStatus).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.type).to.equal(\"failure\");",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error).to.exist;",
											"            pm.expect(result.receivingItemResults[j].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"        }",
											"    }",
											"    pm.expect(processedWithError).to.equal(jsonRs.totalRecords);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{receivingRqBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/receive",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"receive"
									]
								},
								"description": "Receives all piece records created by previous request (see [MODORDERS-103](https://issues.folio.org/browse/MODORDERS-103))."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check-in",
					"item": [
						{
							"name": "check-in already received piece",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "112a8ef1-1390-4e4e-bc5c-00cd58377249",
										"exec": [
											"//verify piece status is set to expected",
											"let utils = eval(globals.loadUtils);",
											"let jsonRq = JSON.parse(pm.variables.get(\"checkinBody\"));",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"The reponse has 1 piece failed to process\", function () {",
											"    let jsonRs = pm.response.json();",
											"    pm.expect(jsonRs.totalRecords).to.equal(jsonRq.totalRecords);",
											"    pm.expect(jsonRs.receivingResults).to.have.lengthOf(jsonRq.toBeCheckedIn.length);",
											"    // One pieces should be successfully checked-in",
											"    utils.verifyReceivingResponse(jsonRs, 0, 1);",
											"    let receivingItemResults = jsonRs.receivingResults[0].receivingItemResults;",
											"     pm.expect(receivingItemResults[0].processingStatus).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.type).to.equal(\"failure\");",
											"     pm.expect(receivingItemResults[0].processingStatus.error).to.exist;",
											"     pm.expect(receivingItemResults[0].processingStatus.error.code).to.equal(\"pieceAlreadyReceived\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3870c03-09e8-40c1-802f-de69d5fe0c33",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let compPoLine = pm.globals.get(\"checkin_electronic_poLine\");",
											"",
											"utils.sendGetRequest(\"/orders-storage/pieces?limit=1&query=poLineId==\"+compPoLine.id +\" and format == Electronic and receivingStatus == Received\", (err,res) => {",
											"    utils.prepareCheckinBody(compPoLine,res.json().pieces[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{checkinBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/check-in",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"check-in"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Title",
					"item": [
						{
							"name": "Create po line for title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8f6ae988-1d95-47a4-a231-f85cbae17855",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"let line = utils.buildPoLineWithMinContent(globals.negativeTestsPendingOrderId);",
											"pm.variables.set(\"po_line_listed_print_monograph\", JSON.stringify(line));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5cea3da6-b491-4960-9ad5-f12a9cb11237",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    ",
											"    pm.environment.set(\"poLineIdForTitle\", jsonData.id);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{po_line_listed_print_monograph}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-lines",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-lines"
									]
								},
								"description": "GET /orders/id/lines/id requests that return 201"
							},
							"response": []
						},
						{
							"name": "Create title with titleExist error",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a8201e5e-bd85-47d5-bfc8-769bbfab5bcd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"titleContent\", JSON.stringify(utils.buildTitleWithMinContent(pm.environment.get(\"poLineIdForTitle\"))));",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5176b87f-916b-4496-8b90-db74c239a158",
										"exec": [
											"pm.test(\"Title status code is 422\", function() {",
											"    pm.response.to.have.status(422);",
											"});",
											"pm.test(\"Response contains titleExist error code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors[0].code).to.eql(\"titleExist\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Piece",
					"item": [
						{
							"name": "Update piece by id - bad id 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44e32993-18d6-4cc0-a662-09eb52f9c944",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "440ce0f4-5970-47cf-afca-f3fee551c344",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Edit piece by id - bad format 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4fa139df-acf9-4a95-bed5-8f378c0469f2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51ec9f4a-fdbf-4532-ad59-2d900313c134",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "X-Okapi-Url",
										"type": "text",
										"value": "http://internal-fse-lb-pvt-1993629965.us-east-1.elb.amazonaws.com:9130",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "text/plain",
										"disabled": true
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"bad-id-format\",\n    \"caption\": \"Tutorial Volume 5\",\n    \"comment\": \"Special Edition\",\n    \"format\": \"Physical\",\n    \"itemId\": \"522a501a-56b5-48d9-b28a-3a8f02482d97\",\n    \"locationId\": \"53cf956f-c1df-410b-8bea-27f712cca7c0\",\n    \"poLineId\": \"7decd831-8295-4a9d-9247-320d165583bf\",\n    \"receivingStatus\": \"Expected\",\n    \"supplement\": true,\n    \"receivedDate\": \"2018-10-10T00:00:00.000+0000\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id-format",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id-format"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Delete piece by id - bad format 400",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "17b1af15-4e52-4d7d-b12b-cb71b4d9ac3e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9727f6b3-b9c6-46e1-baac-29a3f4d68287",
										"exec": [
											"pm.test(\"Error response expected\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces/bad-id",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces",
										"bad-id"
									]
								},
								"description": "[MODORDERS-257](https://issues.folio.org/browse/MODORDERS-257)"
							},
							"response": []
						},
						{
							"name": "Create empty piece with missing required fields 422",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5c512970-81aa-4317-9894-bb67c0d172d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d083824b-a663-4546-9979-142d2a3ddbd5",
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData.errors);",
											"    pm.test(\"Required properties are missing\", function () {",
											"        let errors = jsonData.errors;",
											"        requiredObj(errors, \"poLineId\");",
											"        requiredObj(errors, \"format\");",
											"    });",
											"});",
											"",
											"function requiredObj(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"may not be null\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"null\");",
											"}",
											"",
											"function requiredArray(errors, propName) {",
											"    let error = errors.find((errors) => errors.parameters[0].key === propName);",
											"    pm.expect(error.message).to.equal(\"size must be between 1 and 2147483647\");",
											"    pm.expect(error.parameters[0].value).to.equal(\"[]\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a piece with empty body"
							},
							"response": []
						},
						{
							"name": "get title",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1092ccc4-854a-4f7f-8638-a6e4bee0f6a1",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.environment.set(\"poLIneIdForTitle\", utils.getLastPoLineId());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "75f18afa-2a32-404a-b308-ba2131576933",
										"exec": [
											"pm.test(\"Title status code is 200\", function() {",
											"    pm.response.to.have.status(200);",
											"    let titles = pm.response.json();",
											"    pm.variables.set(\"titleId\", titles.titles[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{titleContent}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/titles?query=poLineId=={{poLIneIdForTitle}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"titles"
									],
									"query": [
										{
											"key": "query",
											"value": "poLineId=={{poLIneIdForTitle}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create piece with missing receiptDate 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "07741a34-9f58-4e75-9964-2d4b431253d6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.variables.set(\"poLineId\", utils.getLastPoLineId());",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/mockdata/pieces/pieceRecord.json\", function(err, res) {",
											"    let piece = res.json();",
											"    delete piece.receiptDate;",
											"    piece.poLineId = pm.variables.get(\"poLineId\");",
											"    piece.titleId = pm.variables.get(\"titleId\");",
											"    pm.globals.set(\"pieceRecord\", JSON.stringify(piece));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7f612f2b-96cf-4cd7-9d96-f55fe0aff764",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{pieceRecord}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/pieces",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"pieces"
									]
								},
								"description": "Create a piece with empty body"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ISBN validation",
					"item": [
						{
							"name": "Create Order with invalid ISBN",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b76373fd-b1ec-403f-b5de-1ac22773a618",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", function (err, res) {",
											"    let order  = res.json();",
											"    order.workflowStatus = \"Pending\";",
											"    order = utils.deletePoNumber(order);",
											"    order.compositePoLines.pop();",
											"    let preparedOrder = utils.prepareOrder(order);",
											"    ",
											"    //set ISBN10",
											"    preparedOrder.compositePoLines[0].details.productIds[0].productId = \"1-4028-9462-7456\";",
											"    preparedOrder.compositePoLines[0].details.productIds[0].productIdType = pm.environment.get(\"isbnIdentifierTypeId\");",
											"    ",
											"    pm.globals.set(\"order_isbn_validation\", JSON.stringify(preparedOrder));",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a62ca958-e414-4fdc-be68-433d40216c82",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.json().errors).to.have.lengthOf(1);",
											"    pm.expect(pm.response.json().errors[0].code).to.equal(\"invalidISBN\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_isbn_validation}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status, with product ID having `ISBN10`, verify that it is converted to `ISBN13`"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Approval",
					"item": [
						{
							"name": "Create order with \"approval required\" set to true",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9829515c-3cac-43da-9261-9329acaa47d2",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"utils.sendGetRequest(\"/configurations/entries?query=module==ORDERS and configName==approvals\", (err, res) => {",
											"  let configName = \"approvals\";",
											"  let value = \"{\\\"isApprovalRequired\\\":true}\";",
											"",
											"  utils.updateOrCreateOrdersConfig(res.json().configs, configName, value);",
											"});",
											"",
											"    ",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_without_po_lines.json\", (err, res) => {",
											"    let order = utils.prepareOrder(res.json());",
											"    order.poNumber = \"TSTAPPROVAL\";",
											"    order.approved = false;",
											"    order.workflowStatus = \"Open\";",
											"    ",
											"    order.id = \"00000001-1111-5555-8888-888888888888\";",
											"",
											"    pm.globals.set(\"orderWithApprovalReqTrueId\", order.id); ",
											"    pm.variables.set(\"orderWithApprovalReqTrue\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "24f94c50-87e7-4508-8b14-20b15b7d9e10",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"Approval is required to open order\");",
											"    pm.expect(pm.response.text()).to.include(\"orderApprovalRequired\");",
											"    ",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithApprovalReqTrue}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved for it to be transitioned to be open status"
							},
							"response": []
						},
						{
							"name": "Create order with user not having approval permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3f3fe9f9-69c5-4ccd-a056-815816ba1bee",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_without_po_lines.json\", (err, res) => {",
											"    let order = res.json();",
											"    order.poNumber = \"TST123APPROVAL1\";",
											"    order.approved = true;",
											"    ",
											"    pm.variables.set(\"orderWithNoApprovalPerms\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "178515a2-9f6f-4aa5-b5d0-11f981bdcff9",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User does not have permissions to approve order - operation is restricted\");",
											"    pm.expect(pm.response.text()).to.include(\"userHasNoApprovalPermission\");",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-restricted}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderWithNoApprovalPerms}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Unopen",
					"item": [
						{
							"name": "Unopen order with user not having permission",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2d147a9-4e27-4da7-a124-f88be16cf7d6",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"let orderForUnopen = pm.environment.get(\"negativeTestsOpenElectronicOrderBody\");",
											"",
											"orderForUnopen.workflowStatus = \"Pending\";",
											"",
											"pm.variables.set(\"orderUnopenBody\", JSON.stringify(orderForUnopen));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e3730402-e603-47f2-ae16-d387d5b5484d",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Expected errors verification\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"User does not have permissions to move order from open to pending - operation is restricted\");",
											"    pm.expect(pm.response.text()).to.include(\"userHasNoOrderUnopenPermission\");",
											"    pm.response.to.have.jsonBody(\"total_records\", 1);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken-restricted}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderUnopenBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{negativeTestsOpenElectronicOrderId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{negativeTestsOpenElectronicOrderId}}"
									]
								},
								"description": "When the config \"approval required\" is set to true, an order must be approved in for it to be transitioned to be open status.\nIf the user doesn't have permissions to approve, the order must fail"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e7fa6e0c-7daa-4974-9ac7-177e2f574317",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "250af1c2-bf4b-4fe9-8b06-d525d93eddc8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Order Templates",
					"item": [
						{
							"name": "Get updated order templates collection - invalid query",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8ee63136-e990-478b-a634-5e0b4bad8c7f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "77e2d56b-22e9-4820-8ccd-28495eae9040",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates?query=invalid-query",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates"
									],
									"query": [
										{
											"key": "query",
											"value": "invalid-query"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get order template - not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48b1a042-dfd9-4132-a487-a3b6e5b24c8f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e7e38925-2a28-4a03-991e-138731293a73",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"configuration",
										"suffixes",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update order template - id mismatch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f50acdcd-29db-4d1f-9eec-00ea58e0eaee",
										"exec": [
											"let body = globals.testData.orderTemplate;",
											"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
											"pm.variables.set(\"updatedOrderTemplateBody\", JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fbf5adc4-ac89-41b4-b491-7d7d405ffadd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete order template - not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b7827c15-0da2-46eb-b8da-0ffeffe9288f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a66cb93e-d473-435e-857a-cafdf60d709b",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{updatedOrderTemplateBody}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"order-templates",
										"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Encumbrance creation failure",
					"item": [
						{
							"name": "Create Open order with lines pointing to unexisting fund",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0459b62f-e5fd-4329-a2bd-a76c53603768",
										"exec": [
											"let utils = eval(globals.loadUtils);\t\r",
											"var uuid = require('uuid');\t\r",
											"\r",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_monograph.json\", (err, res) => {\t\r",
											"    let order  = utils.prepareOrder(res.json());\r",
											"    order.workflowStatus = \"Open\";\r",
											"    // Setting specific PO Number to delete this order in cleanup\"\r",
											"    order.poNumber = \"APIFAILENCUMB1\";\r",
											"    order.compositePoLines.forEach(poLine => {\r",
											"        poLine.receiptStatus = \"Receipt Not Required\";\r",
											"        // Setting random fund id\"\r",
											"        poLine.fundDistribution.forEach(distrib => distrib.fundId = uuid.v4());\r",
											"    });\r",
											"    pm.variables.set(\"order_with_unexisting_fund\", JSON.stringify(order));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0305f14a-5550-4cf3-a6ce-ccbe8abcd45c",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\t\r",
											"pm.test(\"Server error is expected: encumbranceCreationFailure\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    let errors = pm.response.json().errors;\r",
											"    pm.expect(errors).to.have.lengthOf(1);\r",
											"    pm.expect(errors[0].code).to.equal(\"fundsNotFound\");\r",
											"});\r",
											"\t\r",
											"utils.sendGetRequest(\"/orders/order-lines?query=poNumber==APIFAILENCUMB1\", function (err, res) {\r",
											"    pm.expect(err).to.equal(null);\r",
											"\t\r",
											"    res.json().poLines.forEach(poLine => {\r",
											"        utils.validateEncumbranceRecords(poLine, \"Pending\");\r",
											"        pm.globals.set(\"negativeTestsFailedEncumbrances\", poLine.purchaseOrderId);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_with_unexisting_fund}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Open order. Ledger is restricted",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "102cae28-fa61-4985-ba9b-269713bb0bac",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var uuid = require('uuid');",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/po_listed_print_serial.json\", (err, res) => {",
											"    let openOrder = utils.prepareOrder(res.json());",
											"    openOrder.workflowStatus = \"Open\";",
											"    delete openOrder.poNumber;",
											"",
											"    // Setting restricted fund id\"",
											"    openOrder.compositePoLines[0].fundDistribution[0].fundId = pm.environment.get(\"restrictedFundId\");",
											"",
											"    pm.variables.set(\"order_with_insufficient_funds\", JSON.stringify(openOrder));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "08d0a3a4-54ca-46fb-be15-2063051cac1e",
										"exec": [
											"let utils = eval(globals.loadUtils);\r",
											"\t\r",
											"pm.test(\"Server error is expected: encumbranceCreationFailure\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"    let errors = pm.response.json().errors;\r",
											"    pm.expect(errors).to.have.lengthOf(1);\r",
											"    pm.expect(errors[0].code).to.equal(\"fundCannotBePaid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-okapi-token",
										"type": "text",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{order_with_insufficient_funds}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration",
					"item": [
						{
							"name": "Reason for closure",
							"item": [
								{
									"name": "Get reason for closure collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c1e9ead3-d4b4-46ce-9618-3b3a63cb5725",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c55fa031-f097-4c05-bf35-97c25ce2ed01",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reason for closure - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "642e5127-4832-470b-9c26-c3d524248bbb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0c8f6c07-5118-438c-a2d0-54bedc0354b7",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update reason for closure - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c6aef493-737f-40a2-b739-0976f33ea2f6",
												"exec": [
													"let body = globals.testData.reasonForClosure;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedReasonForClosureBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "39695103-c23f-48fa-9707-07f668f0e445",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedReasonForClosureBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete reason for closure - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0903a7d2-d2ea-4600-85e7-9a36338f7f14",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a34d3528-e364-4237-9f02-54f4a5707722",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/reasons-for-closure/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"reasons-for-closure",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prefix",
							"item": [
								{
									"name": "Get prefix collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c1dab551-4890-4c29-a815-785168d34272",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "592e0846-28c6-4cf5-a54b-5f7539598693",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get prefix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fedc6480-4fbf-4029-b745-7a4a2d31e57f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79d440a8-6912-49c0-b968-1ec7fc1325c1",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/order-templates/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"order-templates",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update prefix - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "22bd840d-e2a0-4046-819a-b8c020fd3e13",
												"exec": [
													"let body = globals.testData.prefix;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedPrefixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "371e132f-310c-4137-80b9-e363a9fcacee",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedPrefixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete prefix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1fca9395-e45e-49d6-ae54-ebb5f6cc144e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db5966cc-1466-481c-80a0-238ecab24e4b",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Suffix",
							"item": [
								{
									"name": "Get suffix collection - invalid query",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0ec75bc5-e31f-402f-a49a-a4cdf96258bc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "687ef8e0-a7b4-415f-8ae5-db8dc94c8891",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/prefixes?query=invalid-query",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"prefixes"
											],
											"query": [
												{
													"key": "query",
													"value": "invalid-query"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get suffix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6b30e634-e1f3-410f-8135-af632ea24b0c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "779894ee-6772-4597-92af-5300665bfd79",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09ea",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09ea"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update suffix - id mismatch",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "022d177a-f4f8-412a-b968-9d6651792da6",
												"exec": [
													"let body = globals.testData.suffix;",
													"body.id = \"776df59b-d7d8-4ef9-bb11-cf1b53be09ea\";",
													"pm.variables.set(\"updatedSuffixBody\", JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0a4003aa-3ea1-4707-b76f-6eaec73a0765",
												"exec": [
													"let utils = eval(globals.loadUtils);",
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{updatedSuffixBody}}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete suffix - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dd6c9f4-31e5-431a-93d7-5586efba1221",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6964d8c3-98d3-44e3-9927-e9f54acd2ff7",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "x-okapi-token",
												"value": "{{xokapitoken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/configuration/suffixes/776df59b-d7d8-4ef9-bb11-cf1b53be09eb",
											"protocol": "{{protocol}}",
											"host": [
												"{{url}}"
											],
											"port": "{{okapiport}}",
											"path": [
												"orders",
												"configuration",
												"suffixes",
												"776df59b-d7d8-4ef9-bb11-cf1b53be09eb"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Pending To Open order",
					"item": [
						{
							"name": "Create order in Pending status without material types",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f78c2726-a3f4-4cd4-a542-9ea5e9eec4fd",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"pm.sendRequest(pm.variables.get(\"mod-ordersResourcesURL\") + \"/order_po_line_without_material_type.json\", function (err, res) {",
											" let order  = res.json()//utils.buildOrderWithMinContent();",
											" order.compositePoLines[0].alerts = [];",
											" order.compositePoLines[0].reportingCodes = [];",
											"",
											" pm.environment.set(\"prepared_string_order_po_line_without_material_type\", JSON.stringify(order));",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "00d62a18-1e1c-4f04-915c-9080496e18bb",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"var jsonData = {};",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"    jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.environment.set(\"orderIdWithoutMaterialType\", jsonData.id);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{prepared_string_order_po_line_without_material_type}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders"
									]
								},
								"description": "Create a purchase order in `Pending` status based on `po_listed_print_monograph.json` from mod-orders"
							},
							"response": []
						},
						{
							"name": "Get composite order",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7cf0282-1167-4a52-b752-d13918820336",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"    jsonData = pm.response.json();",
											"    console.log(jsonData)",
											"    pm.environment.set(\"prepared_order_po_line_without_material_type_for_transfer\", jsonData);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "456161ae-99aa-495d-8a62-f7b85bce9d41",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Okapi-Token",
										"value": "{{xokapitoken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdWithoutMaterialType}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderIdWithoutMaterialType}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Failed transition from Pending to Open without material type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d3d689dd-8d3b-4505-950a-88061ea34f55",
										"exec": [
											"let utils = eval(globals.loadUtils);",
											"",
											"  let originOrder  = pm.environment.get(\"prepared_order_po_line_without_material_type_for_transfer\");",
											"  console.log(originOrder)",
											"  let orderForPut = utils.buildOrderWithMinContent();",
											"  console.log(orderForPut)",
											"",
											"",
											"  orderForPut.id = originOrder.id;",
											"  orderForPut.poNumber = originOrder.poNumber;",
											"   orderForPut.reEncumber = originOrder.reEncumber;",
											"   orderForPut.totalEstimatedPrice = originOrder.totalEstimatedPrice",
											"   orderForPut.totalItems = originOrder.totalItems",
											"   orderForPut.vendor = originOrder.vendor",
											"  orderForPut.workflowStatus = \"Open\"",
											"   orderForPut.acqUnitIds = []",
											"   orderForPut.metadata = originOrder.metadata",
											"",
											"  pm.environment.set(\"orderForPut_without_material_type\", JSON.stringify(orderForPut));    ",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ac28edd6-11d0-4325-b2ae-6cb73b7d67b5",
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    console.log(\"Status : \" + pm.response.status)\r",
											"    pm.response.to.have.status(422);\r",
											"    pm.response.to.have.jsonBody();\r",
											"    console.log(\"Content-Type : \" + pm.response.headers.get(\"Content-Type\"));\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.equal(\"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "x-okapi-token",
										"value": "{{xokapitoken}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{orderForPut_without_material_type}}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url}}:{{okapiport}}/orders/composite-orders/{{orderIdWithoutMaterialType}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url}}"
									],
									"port": "{{okapiport}}",
									"path": [
										"orders",
										"composite-orders",
										"{{orderIdWithoutMaterialType}}"
									]
								},
								"description": "Transition from Pending to Open without material type should be blocked\n[MODORDERS-176](https://issues.folio.org/browse/MODORDERS-176)"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "Purge and disable all module for created tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "50c2f821-c10a-4c78-940f-141510c89c44",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"pm.sendRequest(utils.buildOkapiUrl(\"/_/proxy/tenants/\" + pm.variables.get(\"testTenant\") + \"/modules\"), (err, res) => {",
									"    pm.test(\"Preparing request to disable modules\", () => {",
									"        pm.expect(err).to.equal(null);",
									"        pm.expect(res.code).to.equal(200);",
									"        let modulesToDisable = res.json();",
									"        modulesToDisable.forEach(entry => entry.action = \"disable\");",
									"",
									"        console.log(modulesToDisable);",
									"        pm.variables.set(\"modulesToDisable\", JSON.stringify(modulesToDisable));",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4743b987-5bd0-496c-a71a-3613858ed263",
								"exec": [
									"let utils = eval(globals.loadUtils);",
									"",
									"pm.test(\"Disable all modules for test tenant\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Okapi-Token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modulesToDisable}}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}/install?purge=true",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}",
								"install"
							],
							"query": [
								{
									"key": "purge",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete test tenant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5cc60fae-546a-4268-ae13-55db54e4b119",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cefd1fa5-a722-4c48-b537-1ffbb2bd1784",
								"exec": [
									"pm.test(\"Tenant deleted - Expected Created (204)\", () => {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"// Remove all created variables",
									"eval(globals.loadUtils).unsetTestVariables();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-okapi-token",
								"value": "{{xokapitoken-admin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{url}}:{{okapiport}}/_/proxy/tenants/{{testTenant}}",
							"protocol": "{{protocol}}",
							"host": [
								"{{url}}"
							],
							"port": "{{okapiport}}",
							"path": [
								"_",
								"proxy",
								"tenants",
								"{{testTenant}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2dd82d1b-8bde-4b7f-ab6a-8aaa4ba95738",
				"type": "text/javascript",
				"exec": [
					"const testData = {",
					"    // mod-configuration",
					"    configs: {",
					"        configNames: [",
					"            \"poLines-limit\",",
					"            \"inventory-instanceTypeCode\",",
					"            \"inventory-instanceStatusCode\",",
					"            \"inventory-loanTypeName\",",
					"            \"approvals\"",
					"        ],",
					"        bodyTemplate: {",
					"            \"module\": \"ORDERS\",",
					"            \"configName\": \"Test Config\",",
					"            \"description\": \"Config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    tenantConfig: {",
					"        configNames: [\"tenant.addresses\"],",
					"        bodyTemplate: {",
					"            \"module\": \"TENANT\",",
					"            \"code\": \"ADRESSES_123\",",
					"            \"configName\": \"Test TENANT Config\",",
					"            \"description\": \"Tenant config for API Tests\",",
					"            \"default\": true,",
					"            \"enabled\": true,",
					"            \"value\": \"\"",
					"        }",
					"    },",
					"    // User template with hardcoded id",
					"    users: {",
					"        admin: {",
					"            user: {",
					"                \"id\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"username\": \"admin-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Admin\",",
					"                    \"lastName\": \"Orders API Tests\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"admin-user\",",
					"                \"password\": \"admin-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000000-1111-5555-9999-999999999999\",",
					"                \"permissions\": []",
					"            }",
					"        },",
					"        regular: {",
					"            user: {",
					"                \"id\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"User\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-user\",",
					"                \"password\": \"mod-orders-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000001-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\",",
					"                    \"orders.item.approve\",",
					"                    \"orders.item.unopen\",",
					"                    \"orders-storage.pieces.collection.get\",",
					"                    // To be removed when MODINV-120 is resolved",
					"                    \"inventory-storage.items.collection.get\",",
					"                    \"inventory-storage.items.item.get\",",
					"                    \"inventory-storage.instances.item.get\",",
					"                    \"inventory.items.item.get\"",
					"                ]",
					"            }",
					"        },",
					"        restricted: {",
					"            user: {",
					"                \"id\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"username\": \"mod-orders-restricted-user\",",
					"                \"active\": true,",
					"                \"personal\": {",
					"                    \"firstName\": \"Regular\",",
					"                    \"lastName\": \"User\"",
					"                }",
					"            },",
					"            credentials: {",
					"                \"username\": \"mod-orders-restricted-user\",",
					"                \"password\": \"mod-orders-user-password\"",
					"            },",
					"            permissions: {",
					"                \"userId\": \"00000002-1111-5555-9999-999999999999\",",
					"                \"permissions\": [",
					"                    \"orders.all\",",
					"                    \"orders-storage.pieces.collection.get\",",
					"                    // To be removed when MODINV-120 is resolved",
					"                    \"inventory-storage.items.collection.get\",",
					"                    \"inventory-storage.items.item.get\",",
					"                    // To be removed when",
					"                    \"inventory-storage.instances.item.get\"",
					"                ]",
					"            }",
					"        }",
					"    },",
					"    tenant: {",
					"        \"id\": pm.variables.get(\"testTenant\"),",
					"        \"name\": \"Test orders tenant\",",
					"        \"description\": \"Tenant for test purpose\"",
					"    },",
					"    receiving: {",
					"        bodyTemplate: {",
					"            \"toBeReceived\": [{",
					"                \"poLineId\": \"\",",
					"                \"received\": 1,",
					"                \"receivedItems\": [{",
					"                    \"barcode\": \"11111111111\",",
					"                    \"callNumber\": \"BF2050 .M335 1999\",",
					"                    \"comment\": \"Very important note\",",
					"                    \"caption\": \"Vol. 1\",",
					"                    \"itemStatus\": \"In process\",",
					"                    \"locationId\": pm.variables.get(\"locationId2\"),",
					"                    \"pieceId\": \"\"",
					"                }]",
					"            }],",
					"            \"totalRecords\": 1",
					"        }",
					"    },",
					"    piece: {",
					"        bodyTemplate: {",
					"            \"caption\": \"Volume\",",
					"            \"comment\": \"creating Piece from API test\",",
					"            \"format\": \"\",",
					"            \"locationId\": \"\",",
					"            \"poLineId\": \"\",",
					"            \"receivingStatus\": \"Expected\",",
					"            \"supplement\": true",
					"        }",
					"    },",
					"    checkin: {",
					"        bodyTemplate: {",
					"            \"toBeCheckedIn\": [",
					"                {",
					"                    \"poLineId\": \"\",",
					"                    \"checkedIn\": \"\",",
					"                    \"checkInPieces\": [",
					"                        {",
					"                            \"id\": \"\",",
					"                            \"barcode\": Math.floor(Math.random() * 1000),",
					"                            \"callNumber\": \"BF2050 .M335 1999\",",
					"                            \"comment\": \"checkedin from API test\",",
					"                            \"caption\": \"Vol. 1\",",
					"                            \"createItem\": true,",
					"                            \"supplement\": false,",
					"                            \"locationId\": \"\",",
					"                            \"accessionNumber\": \"1956.1\",",
					"                            \"itemDescription\": \"This is the piece item checkin\",",
					"                            \"electronicBookplate\": \"This item is from API tests\"",
					"                        }]",
					"                }],",
					"            \"totalRecords\": 1",
					"        }",
					"    },",
					"    item: {",
					"        bodyTemplate: {",
					"            \"holdingsRecordId\": \"\",",
					"            \"permanentLoanTypeId\": pm.variables.get(\"loanTypeId\"),",
					"            \"materialTypeId\": pm.variables.get(\"materialTypeId\"),",
					"            \"status\": {",
					"                \"name\": \"On order\"",
					"            },",
					"            \"purchaseOrderLineIdentifier\": \"\"",
					"        }",
					"    },",
					"    orderTemplate: {",
					"        id: \"f5b6ad51-58a3-44cd-88e3-b612ea8ff15b\",",
					"        templateCode: \"Amazon-L\",",
					"        templateDescription: \"Use to create orders in FOLIO after they are placed on Amazon\",",
					"        templateName: \"Amazon orders\",",
					"        acquisitionMethod: \"Purchase At Vendor System\",",
					"        approved: true",
					"    },",
					"    reasonForClosure: {",
					"        reason: \"Test closure reason\",",
					"        source: \"User\"",
					"    },",
					"    prefix: {",
					"        name: \"Test prefix\",",
					"        description: \"Test prefix description\"",
					"    },",
					"    suffix: {",
					"        name: \"Test suffix\",",
					"        description: \"Test suffix description\"",
					"    },",
					"",
					"};",
					"",
					"// Global testing object - used in further tests",
					"pm.globals.set(\"testData\", testData);",
					"",
					"postman.setGlobalVariable(\"loadUtils\", function loadUtils() {",
					"    let utils = {};",
					"    utils.schemaPrefix = \"orders_schema_\";",
					"",
					"    utils.validateReceivingHistory = function (history) {",
					"        pm.expect(history.id, \"Piece id expected\").to.exist;",
					"        pm.expect(history.dateOrdered, \"Order date expected\").to.exist;",
					"        pm.expect(history.checkin, \"Checkin expected\").to.exist;",
					"        pm.expect(history.poLineId, \"PO Line id expected\").to.exist;",
					"        pm.expect(history.poLineNumber, \"PO Line number expected\").to.exist;",
					"        pm.expect(history.pieceFormat, \"Piece format expected\").to.exist;",
					"        pm.expect(history.poLineReceiptStatus, \"Receipt status expected\").to.exist;",
					"        pm.expect(history.purchaseOrderId, \"Purchase order id expected\").to.exist;",
					"",
					"    };",
					"",
					"    utils.validatePiece = function (piece) {",
					"        pm.expect(piece.id, \"Piece id expected\").to.exist;",
					"        pm.expect(piece.format, \"Piece format expected\").to.exist;",
					"        pm.expect(piece.poLineId, \"Piece Po LineId expected\").to.exist;",
					"        pm.expect(piece.receivingStatus, \"Piece receiving status expected\").to.exist;",
					"    };",
					"",
					"    utils.validateEncumbrance = function (encumbrance, fundDistributions) {",
					"        pm.expect(encumbrance.id, \"Encumbrance id expected\").to.exist;",
					"        pm.expect(encumbrance.encumbrance.initialAmountEncumbered, \"Amount encumbered expected\").to.exist;",
					"        pm.expect(encumbrance.fromFundId, \"Encumbrance fund id expected\").to.exist;",
					"        pm.expect(encumbrance.encumbrance.status, \"Encumbrance receiving status expected\").to.exist;",
					"        pm.expect(encumbrance.amount, \"Encumbrance amount is expected\").to.exist;",
					"",
					"        let filteredArray = fundDistributions.filter(fundDistribution => fundDistribution.encumbrance === encumbrance.id);",
					"        pm.expect(filteredArray).to.have.lengthOf(1);",
					"        let fundDistribution = filteredArray[0];",
					"        pm.expect(encumbrance.fromFundId).to.eql(fundDistribution.fundId);",
					"    };",
					"",
					"    /**",
					"     * Sends request with specified Method and uses passed handler to handle result",
					"     */",
					"    utils.buildPmRequest = function (path, method, xokapitoken) {",
					"        return {",
					"            url: utils.buildOkapiUrl(path),",
					"            method: method,",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"testTenant\"),",
					"                \"X-Okapi-Token\": xokapitoken || pm.environment.get(\"xokapitoken-testAdmin\")",
					"            }",
					"        };",
					"    };",
					"",
					"    utils.getModuleId = function (moduleName, bodyHandler) {",
					"        pm.sendRequest({",
					"            url: utils.buildOkapiUrl(\"/_/proxy/modules?latest=1&filter=\" + moduleName),",
					"            method: \"GET\",",
					"            header: {",
					"                \"X-Okapi-Tenant\": pm.environment.get(\"xokapitenant\"),",
					"                \"X-Okapi-Token\": pm.environment.get(\"xokapitoken-admin\")",
					"            }",
					"        }, (err, res) => {",
					"            pm.test(moduleName + \" module is available\", () => {",
					"                pm.expect(err).to.equal(null);",
					"                pm.expect(res.code).to.equal(200);",
					"                bodyHandler(res.json()[0].id);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines for Fund Distribution.",
					"     */",
					"    utils.prepareOrderFundDistri = function (order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLineFundDistri(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data for Fund Distribution.",
					"     */",
					"    utils.preparePoLineFundDistri = function (poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Updates PO json removing ids and updating PO lines.",
					"     */",
					"    utils.prepareOrder = function (order) {",
					"        delete order.id;",
					"        delete order.totalItems;",
					"        order.vendor = pm.environment.get(\"activeVendorId\");",
					"",
					"        if (order.hasOwnProperty(\"compositePoLines\")) {",
					"            order.compositePoLines.forEach(line => utils.preparePoLine(line));",
					"        }",
					"",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Updates sub-objects of the PO Line removing ids and adding missing data.",
					"     */",
					"    utils.preparePoLine = function (poLine) {",
					"        if (poLine.hasOwnProperty(\"eresource\")) {",
					"            poLine.eresource.accessProvider = pm.environment.get(\"activeVendorId\");",
					"            poLine.eresource.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"physical\")) {",
					"            poLine.physical.materialType = pm.environment.get(\"materialTypeId\");",
					"        }",
					"        if (poLine.hasOwnProperty(\"cost\")) {",
					"            delete poLine.cost.poLineEstimatedPrice;",
					"        }",
					"        if (poLine.hasOwnProperty(\"details\") && poLine.details.hasOwnProperty(\"productIds\")) {",
					"            poLine.details.productIds.forEach(prod => utils.makeProductIdUnique(prod));",
					"        }",
					"        if (poLine.hasOwnProperty(\"fundDistribution\")) {",
					"            poLine.fundDistribution.forEach(distrib => {",
					"                delete distrib.encumbrance;",
					"                distrib.fundId = pm.environment.get(\"fundId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"contributors\")) {",
					"            poLine.contributors.forEach(contributor => {",
					"                contributor.contributorNameTypeId = pm.environment.get(\"contributorNameTypeId\");",
					"            });",
					"        }",
					"        if (poLine.hasOwnProperty(\"locations\")) {",
					"            poLine.locations.forEach((location, index) => {",
					"                location.locationId = pm.environment.get(\"locationId\" + (index + 1));",
					"            });",
					"        }",
					"",
					"",
					"        delete poLine.id;",
					"        delete poLine.purchaseOrderId;",
					"        delete poLine.receiptDate;",
					"        utils._deleteSubObjectsIds(poLine.alerts);",
					"        utils._deleteSubObjectsIds(poLine.reportingCodes);",
					"        return poLine;",
					"    };",
					"",
					"    /**",
					"     * Sets new unique product ID.",
					"     */",
					"    utils.makeProductIdUnique = function (productId) {",
					"        let newProductId = pm.environment.has(\"uniqueProductId\") ? pm.environment.get(\"uniqueProductId\") : 10000000000;",
					"        pm.environment.set(\"uniqueProductId\", ++newProductId);",
					"",
					"        // Update productId with new values",
					"        productId.productId = newProductId;",
					"        productId.productIdType = pm.environment.get(\"identifierTypeId\");",
					"    };",
					"",
					"    /**",
					"     * Build Order with minimal required fields.",
					"     */",
					"    utils.buildOrderWithMinContent = function () {",
					"        return {",
					"            \"vendor\": pm.variables.get(\"activeVendorId\"),",
					"            \"orderType\": \"One-Time\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build PO line with minimal required fields.",
					"     */",
					"    utils.buildPoLineWithMinContent = function (orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": \"User\",",
					"            \"orderFormat\": \"Physical Resource\",",
					"            \"physical\": {",
					"                \"createInventory\": \"None\"",
					"            },",
					"            \"cost\": {",
					"                \"currency\": \"USD\",",
					"                \"listUnitPrice\": 1,",
					"                \"quantityPhysical\": 1",
					"            },",
					"            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					" * Build PO line with minimal required fields.",
					" */",
					"    utils.buildElectronicPoLineContent = function (orderId) {",
					"        return {",
					"            \"acquisitionMethod\": \"Purchase\",",
					"            \"purchaseOrderId\": orderId,",
					"            \"source\": \"User\",",
					"            \"orderFormat\": \"Electronic Resource\",",
					"            \"eresource\": {",
					"                \"createInventory\": \"None\"",
					"            },",
					"            \"cost\": {",
					"                \"currency\": \"USD\",",
					"                \"listUnitPriceElectronic\": 1,",
					"                \"quantityElectronic\": 1",
					"            },",
					"            \"locations\": [",
					"                {",
					"                    \"locationId\": pm.environment.get(\"locationId1\"),",
					"                    \"quantity\": 1,",
					"                    \"quantityElectronic\": 1,",
					"                    \"quantityPhysical\": 0",
					"                }",
					"            ],",
					"            \"titleOrPackage\": \"Kayak Fishing in the Northern Gulf Coast\"",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Title with minimal required fields.",
					"     */",
					"    utils.buildTitleWithMinContent = function (lineId) {",
					"        return {",
					"            \"title\": \"Test Title\",",
					"            \"poLineId\": lineId",
					"        };",
					"    };",
					"",
					"    /**",
					"     * Build Order in status \"Open\" without PO Number.",
					"     */",
					"    utils.prepareOpenOrderWithoutPoNumber = function (order) {",
					"        let json = utils.prepareOrder(order);",
					"        json.workflowStatus = \"Open\";",
					"        utils.deletePoNumber(json);",
					"        return order;",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO lines of expected quantity and its sub-object elements",
					"     */",
					"    utils.validatePoLines = function (order, expectedCount) {",
					"        let checkInventory = order.workflowStatus !== \"Pending\";",
					"        pm.expect(order.compositePoLines).to.have.lengthOf(expectedCount);",
					"        order.compositePoLines.forEach(poLine => {",
					"            pm.test(\"Validating PO Line with number=\" + poLine.poLineNumber, function () {",
					"                utils.rememberPoLineId(poLine);",
					"                pm.expect(poLine.purchaseOrderId, \"Line has to have order id\").to.equal(order.id);",
					"                utils.validatePoLineAgainstSchema(poLine);",
					"                poLine.locations.forEach(location => utils.validateLocationQuantity(location));",
					"",
					"                if (checkInventory) {",
					"                    utils.validatePoLinesInventoryLinks(poLine);",
					"                } else {",
					"                    utils.verifyNoInventoryItemsExist(poLine);",
					"                }",
					"                // Validate that expected piece quantity created of expected format",
					"                utils.validatePieceRecords(poLine, checkInventory);",
					"                utils.validateEncumbranceRecords(poLine, order.workflowStatus);",
					"",
					"                if (poLine.cost) {",
					"                    pm.expect(poLine.cost.poLineEstimatedPrice).to.be.above(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates presence of links to Inventory entities (e.g. Instance) and that these links are correct",
					"     */",
					"    utils.validatePoLinesInventoryLinks = function (poLine) {",
					"        // Instance should created only",
					"        if (!utils.inventoryUpdateNotRequired(poLine)) {",
					"            utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + poLine.id, (err, res) => {",
					"                let title = res.json().titles[0];",
					"                utils.sendGetRequest(\"/instance-storage/instances/\" + title.instanceId, (err1, res1) => {",
					"                    pm.test(\"Instance Record exist for PO Line with number=\" + poLine.poLineNumber, () => {",
					"                        let instance = res1.json();",
					"                        pm.expect(instance).to.exist;",
					"",
					"                        //Check if holdings record is created",
					"                        utils.validateHoldingsRecord(poLine);",
					"                        // Now check items",
					"                        utils.validateInventoryItems(poLine);",
					"",
					"                        // Now validate expected instance's content",
					"                        utils.validateInstanceContent(instance, poLine);",
					"                    });",
					"                    pm.expect(title.instanceId, \"Instance id is expected\").to.exist;",
					"                });",
					"            });",
					"",
					"",
					"        } else {",
					"            utils.verifyNoInventoryItemsExist(poLine);",
					"        }",
					"    };",
					"",
					"    utils.validateInstanceContent = function (instance, poLine) {",
					"        pm.expect(instance.title, \"Instance's title is not the same as PO Line's\").to.equal(poLine.titleOrPackage);",
					"",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceStatusCode\") !== null) {",
					"            pm.expect(instance.statusId, \"Instance's status id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceStatusId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's status id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceStatusId\"));",
					"        }",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-instanceTypeCode\") !== null) {",
					"            pm.expect(instance.instanceTypeId, \"Instance's type id is not the same as created for API tests\").to.equal(pm.variables.get(\"instanceTypeId\"));",
					"        } else {",
					"            pm.expect(instance.statusId, \"Instance's type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"instanceTypeId\"));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.validateInventoryItems = function (line) {",
					"        let expectedCount = utils.calculateExpectedItemsQuantity(line);",
					"        utils.getItemsByPoLineId(line.id, expectedCount, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records exist for PO Line with number=\" + line.poLineNumber, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                let isCheckin = typeof line.checkinItems === \"undefined\" ? false : line.checkinItems;",
					"                //items are not created for checkin while opening the order, but can be created later",
					"                if (utils.isItemsUpdateRequired(line) && !isCheckin) {",
					"                    pm.expect(body.totalRecords, \"Quantity of items created for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                    body.items.forEach(item => utils.validateItemContent(item));",
					"                } else {",
					"                    pm.expect(body.totalRecords, \"Quantity of items should be zero\").to.equal(0);",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.validateItemContent = function (item) {",
					"        let ordersConfigs = pm.environment.has(\"current-orders-configs\") ? pm.environment.get(\"current-orders-configs\") : [];",
					"",
					"        // In case there is no config, system default value will be used",
					"        if (utils.getConfigByName(ordersConfigs, \"inventory-loanTypeName\") !== null) {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id is not the same as created for API tests\").to.equal(pm.variables.get(\"loanTypeId\"));",
					"        } else {",
					"            pm.expect(item.permanentLoanTypeId, \"Item's loan type id must not be the same as created for API tests\").to.not.equal(pm.variables.get(\"loanTypeId\"));",
					"        }",
					"",
					"        pm.expect(item.status.name, \"Item's status name is incorrect\").to.equal(\"On order\");",
					"        pm.expect(item.materialTypeId, \"Item's material type id is not the same as created for API tests\").to.equal(pm.variables.get(\"materialTypeId\"));",
					"    }",
					"",
					"    /**",
					"     * Validates that expected items created  in the inventory (MODORDERS-67)",
					"     */",
					"    utils.getItemsByPoLineId = function (id, limit, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=\" + limit + \"&query=purchaseOrderLineIdentifier==\" + id, handler);",
					"    };",
					"    /**",
					"     * Search items by holdingId",
					"     */",
					"    utils.getItemsByHoldingId = function (holdingId, handler) {",
					"        utils.sendGetRequest(\"/item-storage/items?limit=999&query=holdingsRecordId==\" + holdingId, handler);",
					"    };",
					"",
					"    /**",
					"     * Validates that Holdings Record was created  in the inventory",
					"     */",
					"    utils.validateHoldingsRecord = function (poLine) {",
					"        let instanceId = poLine.instanceId;",
					"        pm.expect(instanceId).to.exist;",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=0&query=instanceId==\" + instanceId, (err, res) => {",
					"            let body = res.json();",
					"            if (utils.isHoldingsUpdateRequired(poLine)) {",
					"                pm.test(\"Holding Records exist for Created Instance=\" + instanceId, function () {",
					"                    pm.expect(body.totalRecords).to.be.above(0);",
					"                });",
					"            } else {",
					"                pm.test(\"Holding Records not exist for instance=\" + instanceId, function () {",
					"                    pm.expect(body.totalRecords).to.be.equal(0);",
					"                });",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that there is no any item associated with the PO Line",
					"     */",
					"    utils.verifyNoInventoryItemsExist = function (line, handler) {",
					"        utils.getItemsByPoLineId(line.id, 0, (err, res) => {",
					"            pm.test(\"No item records found for PO Line with number=\" + line.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords).to.eql(0);",
					"            });",
					"            if (typeof handler === \"function\") {",
					"                handler();",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies that items has specified status",
					"     */",
					"    utils.verifyItemsStatus = function (line, itemStatus) {",
					"        utils.getItemsByPoLineId(line.id, 1000, (err, res) => {",
					"            let items = {};",
					"            pm.test(\"All item records for PO Line with number=\" + line.poLineNumber + \" retrieved\", function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                items = res.json().items;",
					"            });",
					"            pm.test(items.length + \" item records for PO Line with number=\" + line.poLineNumber + \" have status=\" + itemStatus, function () {",
					"                res.json().items.forEach(item => pm.expect(item.status.name).to.eql(itemStatus))",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate pieces for PoLine",
					"     */",
					"    utils.validatePieceRecords = function (poLine, arePiecesCreated) {",
					"        let expectedQuantity = arePiecesCreated ? utils.calculateExpectedPiecesQuantity(poLine) : 0;",
					"        utils.sendGetRequest(\"/orders-storage/pieces?limit=\" + expectedQuantity + \"&query=poLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" piece record(s) found for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created pieces does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    let pieces = res.json().pieces;",
					"                    pieces.forEach(piece => utils.validatePiece(piece));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Physical\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Physical\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Electronic\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Electronic\"));",
					"                    pm.expect(pieces.filter(piece => piece.format === \"Other\").length).to.eql(utils.calculateExpectedPiecesQuantity(poLine, \"Other\"));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validate encumbrances for PO Line",
					"     */",
					"    utils.validateEncumbranceRecords = function (poLine, orderStatus) {",
					"        let expectedQuantity = orderStatus === \"Pending\" ? 0 : poLine.fundDistribution.length;",
					"        utils.sendGetRequest(\"/finance/transactions?limit=\" + expectedQuantity + \"&query=encumbrance.sourcePoLineId==\" + poLine.id, (err, res) => {",
					"            let testMsg = expectedQuantity > 0 ? expectedQuantity : \"No\";",
					"            pm.test(testMsg + \" encumbrance record(s) found for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.code).to.eql(200);",
					"                pm.expect(res.json().totalRecords, \"Number of created encumbrances does not match to expected\").to.eql(expectedQuantity);",
					"                if (expectedQuantity > 0) {",
					"                    res.json().transactions.forEach(encumbrance => utils.validateEncumbrance(encumbrance, poLine.fundDistribution));",
					"                }",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's receipt status updated to expected,",
					"     * and incase of checkin the receipt date has to be validated",
					"     * if receipt status is partially received, as it is updated for first piece checkec-in",
					"     */",
					"    utils.validateReceiptStatus = function (poLine, receiptStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + receiptStatus + \" receipt status\", function () {",
					"            pm.expect(poLine.receiptStatus, \"Receipt status should be \" + receiptStatus).to.equal(receiptStatus);",
					"            if (\"Fully Received\" === receiptStatus || (poLine.checkinItems === true && \"Partially Received\" === receiptStatus)) {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be set\").to.not.be.empty;",
					"            } else {",
					"                pm.expect(poLine.receiptDate, \"Receipt date should be empty\").to.not.exist;",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that PO Line's payment status updated to expected",
					"     */",
					"    utils.validatePaymentStatus = function (poLine, paymentStatus) {",
					"        pm.test(poLine.poLineNumber + \" PO Line should have \" + paymentStatus + \" payment status\", function () {",
					"            pm.expect(poLine.paymentStatus, \"Payment status should be \" + paymentStatus).to.equal(paymentStatus);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that items received in the inventory (MODORDERS-103)",
					"     */",
					"    utils.validateInventoryItemsReceived = function (poLine, expectedQuantity, itemStatus) {",
					"        let expectedCount = typeof expectedQuantity === \"undefined\" ? utils.calculateExpectedItemsQuantity(poLine) : expectedQuantity;",
					"        let status = typeof itemStatus === \"undefined\" ? \"In process\" : itemStatus;",
					"        utils.sendGetRequest(\"/item-storage/items?limit=100&query=status.name==\" + status + \" and purchaseOrderLineIdentifier==\" + poLine.id, (err, res) => {",
					"            pm.test(expectedCount + \" Item Records marked as received for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                let body = res.json();",
					"                pm.expect(body, \"GET Items response is not in json format\").to.exist;",
					"                pm.expect(body.totalRecords, \"Quantity of items received for PO Line should be \" + expectedCount).to.equal(expectedCount);",
					"                body.items.forEach(function (item) {",
					"                    pm.expect(item.barcode, \"Barcode should not be empty\").to.not.be.empty;",
					"                    pm.expect(item.itemLevelCallNumber, \"Item level call number should not be empty\").to.not.be.empty;",
					"                });",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Validates that expected number of pieces received using receiving history endpoint (MODORDERS-103)",
					"     */",
					"    utils.validateReceivingHistoryNumberOfPiecesByStatus = function (poLine, expectedQuantity, receivingStatus) {",
					"        receivingStatus = typeof receivingStatus === \"undefined\" ? \"Expected\" : receivingStatus;",
					"        utils.sendGetRequest(\"/orders/receiving-history?limit=0&query=receivingStatus==\" + receivingStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"            pm.test(expectedQuantity + \" \" + receivingStatus + \" pieces for PO Line with number=\" + poLine.poLineNumber, function () {",
					"                pm.expect(res.json().totalRecords).to.equal(expectedQuantity);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.verifyItemsReceivedIntoAppropriateHolding = function (line, receivingResult) {",
					"        for (i = 0; i < receivingResult.receivingItemResults.length; i++) {",
					"            utils.sendGetRequest(\"/orders-storage/pieces/\" + receivingResult.receivingItemResults[i].pieceId, (err, piece) => {",
					"                //check if piece has changed location",
					"                if (piece.json().locationId === pm.environment.get(\"locationId1\")) {",
					"                    utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + line.instanceId + \" and permanentLocationId==\" + piece.json().locationId, (err, holding) => {",
					"                        pm.test(\"created holding for location \" + piece.json().locationId, function () {",
					"                            pm.expect(holding.json().holdingsRecords.length).to.be.above(0);",
					"                        });",
					"",
					"                        if (utils.isItemsUpdateRequired(line)) {",
					"                            utils.sendGetRequest(\"/item-storage/items?limit=1&query=holdingsRecordId==\" + holding.json().holdingsRecords[0].id + \" and id==\" + piece.json().itemId, (err, items) => {",
					"                                pm.test(\"item \" + items.json().items[0].id + \" received into holding \" + holding.json().holdingsRecords[0].id, function () {",
					"                                    pm.expect(items.json().items.length).to.be.above(0);",
					"                                    // MODORDERS-315 itemStatus cannot be empty",
					"                                    pm.expect(items.json().items[0].status.name).to.not.be.empty;",
					"                                });",
					"                            });",
					"                        }",
					"                    });",
					"                }",
					"            });",
					"        }",
					"    };",
					"",
					"",
					"    utils.validateLocationQuantity = function (location) {",
					"        let physicalQuantity = location.hasOwnProperty(\"quantityPhysical\") ? location.quantityPhysical : 0;",
					"        let electronicQuantity = location.hasOwnProperty(\"quantityElectronic\") ? location.quantityElectronic : 0;",
					"        pm.expect(location.quantity).to.equal(physicalQuantity + electronicQuantity);",
					"    };",
					"",
					"    utils.inventoryUpdateNotRequired = function (compPOL) {",
					"        if (compPOL.isPackage === true) {",
					"            return true;",
					"        }",
					"",
					"        // in case of \"Other\" order format check Physical createInventory value only",
					"        if (compPOL.orderFormat === \"Other\") {",
					"            return compPOL.physical == null || compPOL.physical.createInventory === \"None\";",
					"        }",
					"        let physicalUpdateNotRequired = (compPOL.physical == null || compPOL.physical.createInventory === \"None\");",
					"        let eresourceUpdateNotRequired = (compPOL.eresource == null || compPOL.eresource.createInventory === \"None\");",
					"",
					"        return physicalUpdateNotRequired && eresourceUpdateNotRequired;",
					"    };",
					"",
					"    utils.isHoldingsUpdateRequired = function (compPOL) {",
					"        let updatesRequiredForEresource = false;",
					"        let updateRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            updatesRequiredForEresource = (compPOL.eresource.createInventory === \"Instance, Holding\" || compPOL.eresource.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        if (compPOL.physical != null) {",
					"            updateRequiredForPhysical = (compPOL.physical.createInventory === \"Instance, Holding\" || compPOL.physical.createInventory === \"Instance, Holding, Item\");",
					"        }",
					"        return updatesRequiredForEresource || updateRequiredForPhysical;",
					"    };",
					"",
					"    utils.isItemsUpdateRequired = function (compPOL) {",
					"        let itemsRequiredForEresource = false;",
					"        let itemsRequiredForPhysical = false;",
					"",
					"        if (compPOL.eresource != null) {",
					"            itemsRequiredForEresource = compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        if (compPOL.physical != null) {",
					"            itemsRequiredForPhysical = compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"        }",
					"        return itemsRequiredForEresource || itemsRequiredForPhysical;",
					"    };",
					"",
					"",
					"    /**",
					"     * Prepare receiving request body for all PO Lines of an order",
					"     * The function sets following variable:",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive one PO Line of the desired order format",
					"     * @param quantityToReceive number of pieces to receive. In case if not specified, all pieces will be received",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForOrder = function (orderId, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            pm.test(\"Preparing receiving request for entire order with id=\" + orderId, function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"            });",
					"",
					"            if (typeof quantityToReceive === \"undefined\") {",
					"                quantityToReceive = 1000;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and purchaseOrderId=\" + orderId, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForOrder = function (orderId, quantity) {",
					"        utils.prepareReceivingRequestForOrder(orderId, quantity, \"On order\");",
					"    };",
					"",
					"    utils.prepareRollBackReceivingRequestForPoLineOfFormat = function (orderId, orderFormat, quantity) {",
					"        utils.prepareReceivingRequestForPoLineOfFormat(orderId, orderFormat, quantity, \"On order\");",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body for PO Line of expected order format",
					"     * The function sets 2 variables:",
					"     * - `receivingPoLineId` the PO Line id receiving request is going to be sent",
					"     * - `receivingHistoryTotalRecords` total records of the expected piece status indicated by receiving history response",
					"     * - `receivingRqBody` the body for receiving request",
					"     * @param orderId order id to receive/revert pieces of the PO Line of the desired order format",
					"     * @param orderFormat the desired order format of the PO Line",
					"     * @param quantityToReceive number of pieces to receive/revert. In case if not specified, all pieces will be received/reverted",
					"     * @param itemStatus desired status of the item",
					"     */",
					"    utils.prepareReceivingRequestForPoLineOfFormat = function (orderId, orderFormat, quantityToReceive, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let pieceStatus = (itemStatus === \"On order\") ? \"Received\" : \"Expected\";",
					"        utils.sendGetRequest(\"/orders/composite-orders/\" + orderId, (err, res) => {",
					"            let poLine;",
					"            pm.test(\"One PO Line with \" + orderFormat + \" order format expected\", function () {",
					"                pm.expect(res).to.have.property('code', 200);",
					"                let lines = res.json().compositePoLines.filter(line => line.orderFormat === orderFormat);",
					"                pm.expect(lines.length).to.equal(1);",
					"                poLine = lines[0];",
					"            });",
					"",
					"            pm.variables.set(\"receivingPoLineId\", poLine.id);",
					"            let piecesQuantity = utils.calculateExpectedPiecesQuantity(poLine);",
					"            if (typeof quantityToReceive === \"undefined\" || quantityToReceive > piecesQuantity) {",
					"                quantityToReceive = piecesQuantity;",
					"            }",
					"            utils.sendGetRequest(\"/orders/receiving-history?limit=\" + quantityToReceive + \"&query=receivingStatus==\" + pieceStatus + \" and poLineId=\" + poLine.id, (err, res) => {",
					"                let receivingRq = utils.prepareReceivingRequest(res.json().receivingHistory, itemStatus);",
					"                pm.variables.set(\"receivingHistoryTotalRecords\", res.json().totalRecords);",
					"                pm.variables.set(\"receivingRqBody\", JSON.stringify(receivingRq));",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Prepare receiving request body based on receiving history array (MODORDERS-103)",
					"     */",
					"    utils.prepareReceivingRequest = function (receivingHistory, itemStatus) {",
					"        if (typeof itemStatus === \"undefined\") {",
					"            itemStatus = \"In process\";",
					"        }",
					"        let isRevertCase = itemStatus === \"On order\";",
					"",
					"        let totalQty = receivingHistory.length;",
					"        let piecesGroupedByPol = new Map();",
					"        for (let i = 0; i < totalQty; i++) {",
					"            let record = receivingHistory[i];",
					"            if (!piecesGroupedByPol.has(record.poLineId)) {",
					"                piecesGroupedByPol.set(record.poLineId, []);",
					"            }",
					"            piecesGroupedByPol.get(record.poLineId).push(record.id);",
					"        }",
					"",
					"        let receivingRq = globals.testData.receiving.bodyTemplate;",
					"        let toBeReceivedTemplate = receivingRq.toBeReceived.pop();",
					"        let receivedItemTemplate = toBeReceivedTemplate.receivedItems.pop();",
					"        receivedItemTemplate.itemStatus = itemStatus;",
					"",
					"        let barcode;",
					"        if (isRevertCase) {",
					"            delete receivedItemTemplate.barcode;",
					"            delete receivedItemTemplate.comment;",
					"            delete receivedItemTemplate.caption;",
					"            delete receivedItemTemplate.locationId;",
					"        } else {",
					"            barcode = parseInt(pm.environment.get(\"receivingItemBarcode\") ? pm.environment.get(\"receivingItemBarcode\") : receivedItemTemplate.barcode);",
					"        }",
					"",
					"        let total = 0;",
					"        for (var [polId, pieceIds] of piecesGroupedByPol) {",
					"            let toBeReceived = utils.copyJsonObj(toBeReceivedTemplate);",
					"            toBeReceived.poLineId = polId;",
					"            toBeReceived.received = pieceIds.length;",
					"            for (let i = 0; i < pieceIds.length; i++) {",
					"                let receivedItem = utils.copyJsonObj(receivedItemTemplate);",
					"                receivedItem.pieceId = pieceIds[i];",
					"                //set new location ids for the half of the pieces",
					"                if (i % 2 == 0) {",
					"                    receivedItem.locationId = pm.environment.get(\"locationId1\");",
					"                }",
					"",
					"                if (!isRevertCase) {",
					"                    // Inventory requires unique barcodes",
					"                    receivedItem.barcode = ++barcode;",
					"                }",
					"                toBeReceived.receivedItems.push(receivedItem);",
					"                total++;",
					"            }",
					"            receivingRq.toBeReceived.push(toBeReceived);",
					"        }",
					"        receivingRq.totalRecords = total;",
					"",
					"        if (!isRevertCase) {",
					"            pm.environment.set(\"receivingItemBarcode\", barcode);",
					"        }",
					"        return receivingRq;",
					"    };",
					"",
					"    /**",
					"     * Verify receiving response body",
					"     */",
					"    utils.verifyReceivingResponse = function (jsonRs, expectedSucceededQuantity, expectedFailedQuantity) {",
					"        pm.expect(jsonRs.totalRecords).to.be.above(0);",
					"        let processedSuccessfully = 0;",
					"        let processedWithError = 0;",
					"        jsonRs.receivingResults.forEach(result => {",
					"            processedSuccessfully += result.processedSuccessfully;",
					"            processedWithError += result.processedWithError;",
					"            let succeeded = 0;",
					"            let failed = 0;",
					"            result.receivingItemResults.forEach(receivingItemResult => {",
					"                pm.expect(receivingItemResult.pieceId).to.exist;",
					"                pm.expect(receivingItemResult.processingStatus).to.exist;",
					"                receivingItemResult.processingStatus.type === \"success\" ? succeeded++ : failed++;",
					"            });",
					"            pm.expect(succeeded).to.equal(result.processedSuccessfully);",
					"            pm.expect(failed).to.equal(result.processedWithError);",
					"        });",
					"        pm.expect(processedWithError).to.equal(expectedFailedQuantity);",
					"        pm.expect(processedSuccessfully).to.equal(expectedSucceededQuantity);",
					"        pm.expect(processedWithError + processedSuccessfully).to.equal(jsonRs.totalRecords);",
					"    };",
					"",
					"    utils.copyJsonObj = function (obj) {",
					"        return JSON.parse(JSON.stringify(obj));",
					"    };",
					"",
					"    /**",
					"     * Creates OKAPI URL endpoint based on provided path",
					"     */",
					"    utils.buildOkapiUrl = function (path) {",
					"        return pm.environment.get(\"protocol\") + \"://\" + pm.environment.get(\"url\") + \":\" + pm.environment.get(\"okapiport\") + path;",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-178",
					"     */",
					"    utils.calculateExpectedItemsQuantity = function (poLine) {",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                let quantity = utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"                quantity += utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"                return quantity;",
					"            case \"Electronic Resource\":",
					"                return utils.isItemsUpdateRequiredForEresource(poLine) ? utils.getElectronicItemsQuantity(poLine) : 0;",
					"            case \"Physical Resource\":",
					"            case \"Other\":",
					"                return utils.isItemsUpdateRequiredForPhysical(poLine) ? utils.getPhysicalItemsQuantity(poLine) : 0;",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * The logic is based on MODORDERS-100, MODORDERS-194",
					"     */",
					"    utils.calculateExpectedPiecesQuantity = function (poLine, pieceFormat) {",
					"        if (poLine.receiptStatus === \"Receipt Not Required\" || poLine.checkinItems || poLine.isPackage) {",
					"            return 0;",
					"        }",
					"        switch (poLine.orderFormat) {",
					"            case \"P/E Mix\":",
					"                if (typeof pieceFormat === \"undefined\") {",
					"                    return poLine.cost.quantityPhysical + poLine.cost.quantityElectronic;",
					"                } else if (pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else if (pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Physical Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Physical\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Other\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Other\") {",
					"                    return poLine.cost.quantityPhysical;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            case \"Electronic Resource\":",
					"                if (typeof pieceFormat === \"undefined\" || pieceFormat === \"Electronic\") {",
					"                    return poLine.cost.quantityElectronic;",
					"                } else {",
					"                    return 0;",
					"                }",
					"            default:",
					"                return 0;",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of physical resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getPhysicalItemsQuantity = function (poLine) {",
					"        let total = 0;",
					"        let locations = poLine.locations;",
					"        if (locations) {",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityPhysical;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of electronic resources. The logic is based on MODORDERS-117",
					"     */",
					"    utils.getElectronicItemsQuantity = function (poLine) {",
					"        let total = 0;",
					"        if (poLine.eresource && poLine.eresource.createInventory && poLine.locations) {",
					"            let locations = poLine.locations;",
					"            for (let i = 0; i < locations.length; i++) {",
					"                var qty = locations[i].quantityElectronic;",
					"                if (qty > 0) {",
					"                    total += qty;",
					"                }",
					"            }",
					"        }",
					"        return total;",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.verifyOrderCalculatedInfo = function (order, expectedTotalPrice) {",
					"        pm.test(\"Verify PO has calculated data: MODORDERS-181 and MODORDERS-193\", function () {",
					"            pm.expect(order.totalItems).to.exist;",
					"            pm.expect(order.totalItems).to.equal(utils.getTotalResourcesQuantity(order));",
					"            if (typeof expectedTotalPrice === \"undefined\") {",
					"                pm.expect(order.totalEstimatedPrice).to.be.above(0);",
					"            } else {",
					"                pm.expect(order.totalEstimatedPrice).to.equal(expectedTotalPrice);",
					"            }",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Gets quantity of all PO resources.",
					"     */",
					"    utils.getTotalResourcesQuantity = function (order) {",
					"        let total = 0;",
					"        order.compositePoLines.forEach(poLine => {",
					"            let cost = poLine.cost;",
					"            if (cost) {",
					"                total += (cost.quantityElectronic ? cost.quantityElectronic : 0);",
					"                total += (cost.quantityPhysical ? cost.quantityPhysical : 0)",
					"            }",
					"        });",
					"        return total;",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForEresource = function (compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.eresource != null && compPOL.eresource.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    utils.isItemsUpdateRequiredForPhysical = function (compPOL) {",
					"        if (compPOL.checkinItems != null && compPOL.checkinItems) {",
					"            return false;",
					"        }",
					"        return compPOL.physical != null && compPOL.physical.createInventory === \"Instance, Holding, Item\";",
					"    };",
					"",
					"    /**",
					"     * Validates presence of the PO line sub-object elements",
					"     */",
					"    utils.validatePoLineSubObjetcsPresence = function (poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction expected\").to.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote expected\").to.exist;",
					"        pm.expect(poLine.claims, \"claims expected\").to.exist;",
					"        pm.expect(poLine.contributors, \"contributors expected\").to.exist;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.cost.poLineEstimatedPrice, \"cost.poLineEstimatedPrice expected to be above 0\").to.be.above(0);",
					"        pm.expect(poLine.description, \"description expected\").to.exist;",
					"        pm.expect(poLine.donor, \"donor expected\").to.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution expected\").to.exist;",
					"        pm.expect(poLine.locations, \"locations expected\").to.exist;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus expected\").to.exist;",
					"        pm.expect(poLine.physical, \"physical expected\").to.exist;",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription expected\").to.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate expected\").to.exist;",
					"        pm.expect(poLine.publisher, \"publisher expected\").to.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus expected\").to.exist;",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes expected\").to.exist;",
					"        pm.expect(poLine.requester, \"requester expected\").to.exist;",
					"        pm.expect(poLine.rush, \"rush expected\").to.exist;",
					"        pm.expect(poLine.selector, \"selector expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.tags, \"tags expected\").to.exist;",
					"        pm.expect(poLine.titleOrPackage, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail expected\").to.exist;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line is empty except line and order ids",
					"     */",
					"    utils.validatePoLineWithMinimalContent = function (poLine) {",
					"        pm.expect(poLine.id, \"PO line id expected\").to.exist;",
					"        pm.expect(poLine.purchaseOrderId, \"PO id expected\").to.exist;",
					"        pm.expect(poLine.source, \"source expected\").to.exist;",
					"        pm.expect(poLine.acquisitionMethod, \"acquisitionMethod expected\").to.exist;",
					"        pm.expect(poLine.alerts, \"alerts should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cancellationRestriction, \"cancellationRestriction not expected\").to.not.exist;",
					"        pm.expect(poLine.cancellationRestrictionNote, \"cancellationRestrictionNote not expected\").to.not.exist;",
					"        pm.expect(poLine.claims, \"claims should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.contributors, \"contributors should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.cost, \"cost expected\").to.exist;",
					"        pm.expect(poLine.description, \"description not expected\").to.not.exist;",
					"        pm.expect(poLine.donor, \"donor not expected\").to.not.exist;",
					"        pm.expect(poLine.fundDistribution, \"fundDistribution should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.locations, \"locations should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.orderFormat, \"orderFormat expected\").to.exist;",
					"        pm.expect(poLine.paymentStatus, \"paymentStatus is Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.poLineDescription, \"poLineDescription not expected\").to.not.exist;",
					"        pm.expect(poLine.poLineNumber, \"poLineNumber is expected\").to.exist;",
					"        pm.expect(poLine.publicationDate, \"publicationDate not expected\").to.not.exist;",
					"        pm.expect(poLine.publisher, \"publisher not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptDate, \"receiptDate not expected\").to.not.exist;",
					"        pm.expect(poLine.receiptStatus, \"receiptStatus must be Pending\").to.equal(\"Pending\");",
					"        pm.expect(poLine.reportingCodes, \"reportingCodes should be empty\").to.be.an('array').that.is.empty;",
					"        pm.expect(poLine.requester, \"requester not expected\").to.not.exist;",
					"        pm.expect(poLine.selector, \"selector not expected\").to.not.exist;",
					"        pm.expect(poLine.tags, \"tags should be empty\").to.not.exist;",
					"        pm.expect(poLine.titleOrPackage, \"title expected\").to.exist;",
					"        pm.expect(poLine.vendorDetail, \"vendorDetail not expected\").to.not.exist;",
					"    };",
					"",
					"    /**",
					"     * Updates each PO Line's payment status with provided one.",
					"     * If status is not provided, \"Fully Paid\" is used for even and \"Payment Not Required\" for odd ones.",
					"     */",
					"    utils.updatePoLinesPaymentStatus = function (order, status) {",
					"        // Update only payment status",
					"        let lines = order.compositePoLines;",
					"        for (let i = 0; i < lines.length; i++) {",
					"            let newStatus = status;",
					"            if (!newStatus) {",
					"                newStatus = (i % 2 === 0) ? \"Fully Paid\" : \"Payment Not Required\";",
					"            }",
					"            // Send update line request with delay",
					"            setTimeout((function (newStatus) {",
					"                console.log(newStatus);",
					"                utils.updatePoLinePaymentStatus(lines[i], newStatus)",
					"            }).bind(null, newStatus), 500 * i);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Updates PO Line's payment status with provided one and sends PUT request.",
					"     */",
					"    utils.updatePoLinePaymentStatus = function (poLine, status) {",
					"        // Update only payment status",
					"        poLine.paymentStatus = status;",
					"        utils.sendPutRequest(\"/orders/order-lines/\" + poLine.id, poLine, (err, response) => {",
					"            pm.test(\"PO Line updated with number=\" + poLine.poLineNumber, () => pm.expect(response.code).to.eql(204));",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Adds PO line id to `completePolineIds` array and stores as global variable.",
					"     */",
					"    utils.rememberPoLineId = function (poLine) {",
					"        if (poLine && poLine.id) {",
					"            let completePolineIds = pm.globals.get(\"completePolineIds\") ? JSON.parse(pm.globals.get(\"completePolineIds\")) : [];",
					"            completePolineIds.push(poLine.id);",
					"            pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Gets last id from `completePolineIds` array (global variable).",
					"     * In case the `withRemoval==true`, the last id is removed from array.",
					"     * In case the array is empty, `null` is returned",
					"     */",
					"    utils.getLastPoLineId = function (withRemoval) {",
					"        let completePolineIds = globals.completePolineIds ? JSON.parse(globals.completePolineIds) : [];",
					"        if (completePolineIds.length > 0) {",
					"            let lineId = completePolineIds.pop();",
					"            if (withRemoval) {",
					"                pm.globals.set(\"completePolineIds\", JSON.stringify(completePolineIds));",
					"            }",
					"            return lineId;",
					"        }",
					"        return null;",
					"    };",
					"",
					"    /**",
					"     * Validates the PO line content against schemas",
					"     */",
					"    utils.validatePoLineAgainstSchema = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_po_line.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO content against schemas",
					"     */",
					"    utils.validateOrderAgainstSchema = function (jsonData) {",
					"        utils._validateAgainstSchema(jsonData, JSON.parse(pm.environment.get(utils.schemaPrefix + \"composite_purchase_order.json\")));",
					"    };",
					"",
					"    /**",
					"     * Validates the PO Lines number",
					"     */",
					"    utils.validatePoLinesNumber = function (order) {",
					"        let poLineSuffix = \"(-[0-9]{1,3})\";",
					"        let regex = new RegExp(order.poNumber + poLineSuffix);",
					"        for (let i = 0; i < order.compositePoLines.length; i++) {",
					"            let poLineNumber = order.compositePoLines[i].poLineNumber;",
					"            let match = regex.exec(poLineNumber);",
					"            pm.expect(match).not.equal(null);",
					"        }",
					"    };",
					"",
					"    /**",
					"     * Validate order workflowStatus",
					"     */",
					"    utils.validateWorkflowStatus = function (order) {",
					"        pm.test(\"Verify Order updated with expected workflow status\", function () {",
					"            if (order.workflowStatus != \"Pending\") {",
					"                if (utils.isCompletedAllPoLines(order.compositePoLines)) {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Closed\");",
					"                } else {",
					"                    pm.expect(order.workflowStatus).is.equal(\"Open\");",
					"                }",
					"            }",
					"        });",
					"    };",
					"",
					"    utils.isCompletedAllPoLines = function (poLines) {",
					"        for (let i = 0; i < poLines.length; i++) {",
					"            let paymentStatus = poLines[i].paymentStatus;",
					"            let receiptStatus = poLines[i].receiptStatus;",
					"            if (!(paymentStatus === \"Payment Not Required\" || paymentStatus === \"Fully Paid\") || !(receiptStatus === \"Fully Received\" || receiptStatus === \"Receipt Not Required\")) {",
					"                return false;",
					"            }",
					"        }",
					"        return true;",
					"    };",
					"",
					"    utils.postRequest = function (path, postBody, handler) {",
					"        let pmRq = utils.buildPmRequest(path, \"POST\");",
					"        pmRq.body = JSON.stringify(postBody);",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * This method creates a piece and also calls the prepares the check-in body.",
					"     * If itemId is not provided the check-in flow just updates the piece record",
					"     */",
					"    utils.createPieceAndCheckInBody = function (compPoLine, itemId) {",
					"        let pieceTemplate = globals.testData.piece.bodyTemplate;",
					"        // set new location for checkin piece",
					"        pieceTemplate.locationId = compPoLine.locations[0].locationId;",
					"        pieceTemplate.poLineId = compPoLine.id;",
					"        if (compPoLine.orderFormat === \"Electronic Resource\") {",
					"            pieceTemplate.format = \"Electronic\";",
					"        } else {",
					"            pieceTemplate.format = \"Physical\";",
					"        }",
					"        if (typeof itemId === \"undefined\") {",
					"            delete pieceTemplate.itemId;",
					"        } else {",
					"            pieceTemplate.itemId = itemId;",
					"        }",
					"        pieceTemplate.titleId = pm.variables.get(\"titleId\");",
					"        pieceTemplate.receiptDate = new Date();",
					"        pm.variables.set(\"checkinPoLineId\", compPoLine.id);",
					"        utils.postRequest(\"/orders/pieces\", pieceTemplate, (err, res) => {",
					"            pm.test(\"creating piece for check-in \", function () {",
					"                pm.expect(res).to.have.property('code', 201);",
					"            });",
					"            utils.prepareCheckinBody(compPoLine, res.json().id);",
					"        });",
					"    };",
					"",
					"    /**",
					"     * This method is used for both checking in a piece and also reverting it,",
					"     * If the checkinstatus is not provided by default it is set to check-in item",
					"     *",
					"     */",
					"    utils.prepareCheckinBody = function (compPoLine, pieceId, checkinStatus) {",
					"        let checkinRq = globals.testData.checkin.bodyTemplate;",
					"        let toBeCheckedInTemplate = checkinRq.toBeCheckedIn.pop();",
					"        let checkinPiecesTemplate = toBeCheckedInTemplate.checkInPieces.pop();",
					"        toBeCheckedInTemplate.poLineId = compPoLine.id;",
					"        toBeCheckedInTemplate.checkedIn = 1;",
					"        checkinPiecesTemplate.id = pieceId;",
					"        checkinPiecesTemplate.locationId = pm.environment.get(\"locationId1\");",
					"        if (typeof checkinStatus === \"undefined\") {",
					"            checkinPiecesTemplate.itemStatus = \"In process\";",
					"        } else {",
					"            checkinPiecesTemplate.itemStatus = checkinStatus;",
					"        }",
					"        toBeCheckedInTemplate.checkInPieces.push(checkinPiecesTemplate);",
					"        checkinRq.toBeCheckedIn.push(toBeCheckedInTemplate);",
					"        console.log(JSON.stringify(checkinRq));",
					"        pm.variables.set(\"checkinBody\", JSON.stringify(checkinRq));",
					"    };",
					"",
					"    /**",
					"     * Get the holding where the item needs to be created , create an item",
					"     * and then use the item id to create a piece",
					"     *",
					"     */",
					"    utils.prepareCheckinBodyWithItems = function (compPoLine) {",
					"        utils.sendGetRequest(\"/holdings-storage/holdings?limit=1&query=instanceId==\" + compPoLine.instanceId + \" and permanentLocationId==\" + compPoLine.locations[0].locationId, (err, res) => {",
					"            utils.createItem(compPoLine.id, res.json().holdingsRecords[0].id, (err, res) => {",
					"                pm.test(\"creating item for check-in\", function () {",
					"                    pm.expect(res).to.have.property('code', 201);",
					"                });",
					"                utils.createPieceAndCheckInBody(compPoLine, res.json().id);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.createItem = function (poLineId, holdingsRecordId, handler) {",
					"        let itemTemplate = globals.testData.item.bodyTemplate;",
					"        itemTemplate.holdingsRecordId = holdingsRecordId;",
					"        itemTemplate.purchaseOrderLineIdentifier = poLineId;",
					"        utils.postRequest(\"/item-storage/items\", itemTemplate, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends delete request based on specified path.",
					"     * The Promise is returned as a result of the operation holding the http code of the response once completed.",
					"     */",
					"    utils.processDeleteRequest = function (path) {",
					"        return new Promise((resolve) => {",
					"            utils.sendDeleteRequest(path, (err, response) => {",
					"                resolve(response.code);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Verifies if the delete operation succeeded",
					"     */",
					"    utils.validateResultOfDeleteRequest = function (code, message) {",
					"        pm.test(message ? message : \"Record should be successfully deleted\", function () {",
					"            pm.expect(code, \"The delete operation has to be completed with 204 code\").to.eql(204);",
					"        });",
					"    };",
					"",
					"    /* BEGIN - Functions to work with mod-configuration */",
					"    utils.getConfigsByName = function (configs, configName) {",
					"        return configs.filter(config => config.configName === configName);",
					"    };",
					"",
					"    utils.getConfigByName = function (configs, configName) {",
					"        return utils.getConfigByNameAndCode(configs, configName);",
					"    };",
					"",
					"    utils.getConfigByNameAndCode = function (configs, configName, configCode) {",
					"        let filteredConfigs = utils.getConfigsByName(configs, configName);",
					"        if (configCode) {",
					"            filteredConfigs = filteredConfigs.filter(config => config.code === configCode);",
					"        }",
					"        return filteredConfigs.length > 0 ? filteredConfigs[0] : null;",
					"    };",
					"",
					"    utils.updateOrCreateConfig = function (configs, configName, value, bodyTemplate) {",
					"        let existingConfig = utils.getConfigByNameAndCode(configs, configName, bodyTemplate.code);",
					"        if (existingConfig) {",
					"            existingConfig.value = value;",
					"            utils.updateConfig(existingConfig);",
					"        } else {",
					"            let body = utils.copyJsonObj(bodyTemplate);",
					"            body.configName = configName;",
					"            body.value = value;",
					"            utils.createConfig(body);",
					"",
					"            // store new config",
					"            configs.push(body);",
					"        }",
					"    };",
					"",
					"    utils.updateOrCreateOrdersConfig = function (configs, configName, value) {",
					"        let bodyTemplate = globals.testData.configs.bodyTemplate;",
					"        utils.updateOrCreateConfig(configs, configName, value, bodyTemplate);",
					"    };",
					"",
					"    utils.createConfig = function (body) {",
					"        utils.postRequest(\"/configurations/entries\", body, function (err, response) {",
					"            pm.test(\"Config created. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(201);",
					"            });",
					"        });",
					"    };",
					"",
					"    /**",
					"     * @param body with updated data",
					"     */",
					"    utils.updateConfig = function (body) {",
					"        utils.sendPutRequest(\"/configurations/entries/\" + body.id, body, (err, response) => {",
					"            pm.test(\"Config updated. Config name = \" + body.configName, function () {",
					"                pm.expect(response.code).to.eql(204);",
					"            });",
					"        });",
					"    };",
					"",
					"    utils.deleteConfig = function (id) {",
					"        const timerId = setTimeout(() => { }, 60000);",
					"        utils.processDeleteRequest(\"/configurations/entries/\" + id)",
					"            .then(code => utils.validateResultOfDeleteRequest(code))",
					"            .then(result => clearTimeout(timerId))",
					"            .catch(err => {",
					"                console.log(\"Error happened on Inventory Records deletion:\", err);",
					"                clearTimeout(timerId);",
					"            });",
					"    };",
					"    /* END - Functions to work with mod-configuration */",
					"",
					"    /**",
					"     * Delete titles by poLine id",
					"     *",
					"     */",
					"    utils.deleteTitlesByLineId = function (poLineId) {",
					"        utils.sendGetRequest(\"/orders/titles?query=poLineId==\" + poLineId, (err, res) => {",
					"            let titles = res.json().titles;",
					"            titles.forEach(title => {",
					"                const timerId = setTimeout(() => { }, 60000);",
					"                utils.processDeleteRequest(\"/orders/titles/\" + title.id)",
					"                    .then(result => clearTimeout(timerId))",
					"                    .catch(err => {",
					"                        console.log(\"Error happened on Items deletion:\", err);",
					"                        clearTimeout(timerId);",
					"                    });",
					"            });",
					"",
					"        });",
					"    };",
					"",
					"    /**",
					"     * Sends GET request and uses passed handler to handle result",
					"     */",
					"    utils.sendGetRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"GET\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Sends PUT request and uses passed handler to handle result",
					"     */",
					"    utils.sendPutRequest = function (path, body, handler) {",
					"        // Build request and add required header and body",
					"        let pmRq = utils.buildPmRequest(path, \"PUT\");",
					"        pmRq.header[\"Content-type\"] = \"application/json\";",
					"        pmRq.body = JSON.stringify(body);",
					"",
					"        pm.sendRequest(pmRq, handler);",
					"    };",
					"",
					"    /**",
					"     * Sends DELETE request and uses passed handler to handle result",
					"     */",
					"    utils.sendDeleteRequest = function (path, handler) {",
					"        pm.sendRequest(utils.buildPmRequest(path, \"DELETE\"), handler);",
					"    };",
					"",
					"    /**",
					"     * Clean up variables",
					"     */",
					"    utils.unsetTestVariables = function () {",
					"",
					"        // Unset schema variables",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => pm.environment.unset(schemaVar.key));",
					"",
					"        pm.globals.unset(\"emptyOrderWithoutPoLinesId\");",
					"        pm.globals.unset(\"testData\");",
					"        pm.globals.unset(\"loadUtils\");",
					"        pm.globals.unset(\"emptyOrderId\");",
					"        pm.globals.unset(\"isbnOrderId\");",
					"        pm.globals.unset(\"isbn_Order_content\");",
					"        pm.globals.unset(\"po_listed_print_monograph\");",
					"        pm.globals.unset(\"completePolineIds\");",
					"        pm.globals.unset(\"completeOrderId\");",
					"        pm.globals.unset(\"completeOrderPoNumber\");",
					"        pm.globals.unset(\"physElecOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsPendingOrderId\");",
					"        pm.globals.unset(\"negativeTestsOpenOrderId\");",
					"        pm.globals.unset(\"negativeTestsClosedOrderId\");",
					"        pm.globals.unset(\"negativeTestsFailedEncumbrances\");",
					"        pm.globals.unset(\"negativeTestsOpenPOLineId\");",
					"        pm.globals.unset(\"anotherCompleteOrderId\");",
					"        pm.globals.unset(\"completeOpenOrderId\");",
					"        pm.globals.unset(\"checkin_physical_poLine\");",
					"        pm.globals.unset(\"checkin_electronic_poLine\");",
					"        pm.globals.unset(\"poLineForNegativeTests\");",
					"        pm.globals.unset(\"randomUUId\");",
					"        pm.globals.unset(\"receivingHistoryPoId\");",
					"        pm.globals.unset(\"requestBodyPhysical\");",
					"        pm.globals.unset(\"requestBodyToBeUpdated\");",
					"        pm.globals.unset(\"poAllPoLineCheckin\");",
					"        pm.globals.unset(\"poLineIdPhysical\");",
					"        pm.globals.unset(\"poToCheckinItemsId\");",
					"        pm.globals.unset(\"orderIdPEMix\");",
					"        pm.globals.unset(\"orderWithApprovalReqTrueId\");",
					"        pm.globals.unset(\"orderWithReceiptNotRequiredId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId1\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId2\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNullId3\");",
					"        pm.globals.unset(\"orderWithCreateInventoryNoneId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingId\");",
					"        pm.globals.unset(\"orderWithCreateInventoryInstanceHoldingItemId\");",
					"        pm.globals.unset(\"order_isbn_validation\");",
					"        pm.globals.unset(\"automaticallyClosedOrder\");",
					"        pm.globals.unset(\"automaticallyClosedOpenOrder\");",
					"        pm.globals.unset(\"automaticallyOpenedOrder\");",
					"        pm.globals.unset(\"newEmptyPoLine\");",
					"        pm.globals.unset(\"poNumber\");",
					"        pm.globals.unset(\"poLineIdPEMix\");",
					"        pm.globals.unset(\"poLine2IdPEMix\");",
					"        pm.globals.unset(\"loanType\");",
					"        pm.globals.unset(\"materialType\");",
					"        pm.globals.unset(\"testTenant\");",
					"        pm.globals.unset(\"testTenantActiveVendorId\");",
					"        pm.globals.unset(\"pieceIdToUpdate\");",
					"        pm.globals.unset(\"pieceRecord\");",
					"",
					"        pm.environment.unset(\"activeVendorId\");",
					"        pm.environment.unset(\"contributorNameTypeId\");",
					"        pm.environment.unset(\"current-orders-configs\");",
					"        pm.environment.unset(\"current-tenant-configs\");",
					"        pm.environment.unset(\"enabledModules\");",
					"        pm.environment.unset(\"fundId\");",
					"        pm.environment.unset(\"budgetId\");",
					"        pm.environment.unset(\"identifierTypeId\");",
					"        pm.environment.unset(\"isbnIdentifierTypeId\");",
					"        pm.environment.unset(\"inactiveVendorId\");",
					"        pm.environment.unset(\"instanceTypeId\");",
					"        pm.environment.unset(\"instanceStatusId\");",
					"        pm.environment.unset(\"ledgerId\");",
					"        pm.environment.unset(\"loanTypeId\");",
					"        pm.environment.unset(\"locationId1\");",
					"        pm.environment.unset(\"locationId2\");",
					"        pm.environment.unset(\"locationId3\");",
					"        pm.environment.unset(\"materialTypeId\");",
					"        pm.environment.unset(\"mod-orders-configs\");",
					"        pm.environment.unset(\"mod-tenant-configs\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"        pm.environment.unset(\"temp-orders-configs\");",
					"        pm.environment.unset(\"reasonForClosureId\");",
					"        pm.environment.unset(\"prefixId\");",
					"        pm.environment.unset(\"suffixId\");",
					"        pm.environment.unset(\"xokapitoken\");",
					"        pm.environment.unset(\"xokapitoken-admin\");",
					"        pm.environment.unset(\"xokapitoken-testAdmin\");",
					"        pm.environment.unset(\"xokapitoken-restricted\");",
					"        pm.environment.unset(\"newLocationId\");",
					"        pm.environment.unset(\"orderTemplateId\");",
					"        pm.environment.unset(\"restrictedLedgerId\");",
					"        pm.environment.unset(\"restrictedFundId\");",
					"        pm.environment.unset(\"restrictedBudgetId\");",
					"        pm.environment.unset(\"uniqueProductId\");",
					"        pm.environment.unset(\"receivingItemBarcode\");",
					"        pm.environment.unset(\"mixLineForCheckIn\");",
					"        pm.environment.unset(\"mixLineForCheckInId\");",
					"        pm.environment.unset(\"instanceId\");",
					"        pm.environment.unset(\"checkinLocationId\");",
					"        pm.environment.unset(\"electronicResourceId\");",
					"        pm.environment.unset(\"physicalResourceId\");",
					"        pm.environment.unset(\"delOrderId201\");",
					"    };",
					"",
					"    /**",
					"     * Internal function to validate object against specified schema",
					"     */",
					"    utils._validateAgainstSchema = function (jsonData, schema) {",
					"        utils._addSchemas();",
					"        var result = tv4.validateMultiple(jsonData, schema);",
					"        pm.expect(result.valid).to.equal(true, \"Schema validation error: \" + JSON.stringify(result.errors));",
					"        //make sure no schemas are missing",
					"        pm.expect(result.missing.length).to.equal(0, \"Missing schemas: \" + JSON.stringify(result.missing));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to load schema defenitions to tv4",
					"     */",
					"    utils._addSchemas = function () {",
					"        //Create and add schemas for validation",
					"        pm.environment.values",
					"            .filter(variable => variable.key.startsWith(utils.schemaPrefix))",
					"            .forEach(schemaVar => tv4.addSchema(schemaVar.key, JSON.parse(schemaVar.value)));",
					"    };",
					"",
					"    /**",
					"     * Internal function to iterate sub-objects in array and delete ids",
					"     */",
					"    utils._deleteSubObjectsIds = function (data) {",
					"        if (data) {",
					"            data.forEach(obj => delete obj.id);",
					"        }",
					"    };",
					"",
					"    utils.deletePoNumber = function (order) {",
					"        delete order.poNumber;",
					"",
					"        return order;",
					"    };",
					"",
					"    return utils;",
					"",
					"} + '; loadUtils();');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0d7d8efd-4fc8-4600-8fb2-1cb55177d5c6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "c79e2e59-a7c4-4a7f-a662-30b563816700",
			"key": "testTenant",
			"value": "orders_api_tests1",
			"type": "string"
		},
		{
			"id": "4e99b054-ef08-4c27-aa1d-d47b19265c69",
			"key": "mod-ordersResourcesURL",
			"value": "https://raw.githubusercontent.com/folio-org/mod-orders/master/src/test/resources",
			"type": "string"
		},
		{
			"id": "6f92be73-136e-47dc-9d84-fffb9540fd97",
			"key": "poLines-limit",
			"value": "10",
			"type": "string"
		},
		{
			"id": "0a4f83f7-4842-4627-8e34-074625083fd9",
			"key": "inventory-identifierTypeName",
			"value": "ordersApiTestsIdentifierTypeName",
			"type": "string"
		},
		{
			"id": "5ca409e5-03db-40c3-b8e9-83cc61e8eead",
			"key": "inventory-instanceTypeCode",
			"value": "ordersApiTestsInstanceTypeCode",
			"type": "string"
		},
		{
			"id": "842621b5-4ca3-43ab-baee-b2d2102b1220",
			"key": "inventory-instanceStatusCode",
			"value": "ordersApiTestsInstanceStatusCode",
			"type": "string"
		},
		{
			"id": "41612e03-e5d1-494c-9f99-a04ace6ea32a",
			"key": "inventory-loanTypeName",
			"value": "ordersApiTestsLoanTypeName",
			"type": "string"
		},
		{
			"id": "eb10090b-2f20-44b2-9a8d-07509a44e6a2",
			"key": "tenant.addresses",
			"value": "{\n  \"address\": \"sample address\",\n  \"name\": \"sample name\"\n}\n",
			"type": "string"
		},
		{
			"id": "633d4893-b5dc-461a-9b20-e4d420766125",
			"key": "approvals",
			"value": "{\"isApprovalRequired\":false}",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}